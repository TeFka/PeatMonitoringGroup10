
stmRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800856c  0800856c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008574  08008574  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008578  08008578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800857c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000088  08008604  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08008604  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001394a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d9  00000000  00000000  00033a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00037ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c716  00000000  00000000  00038828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168fc  00000000  00000000  00054f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a737a  00000000  00000000  0006b83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112bb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  00112c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800814c 	.word	0x0800814c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800814c 	.word	0x0800814c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <decodeMeasurementData>:
	}

	*dataSize = iterator;
}

void decodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t dataSize){
 8000574:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000578:	b089      	sub	sp, #36	; 0x24
 800057a:	af00      	add	r7, sp, #0
 800057c:	60f8      	str	r0, [r7, #12]
 800057e:	60b9      	str	r1, [r7, #8]
 8000580:	4613      	mov	r3, r2
 8000582:	71fb      	strb	r3, [r7, #7]

	uint64_t measurementValue = 0;
 8000584:	f04f 0200 	mov.w	r2, #0
 8000588:	f04f 0300 	mov.w	r3, #0
 800058c:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for(int i = 0;i<dataSize;i++){
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	e022      	b.n	80005dc <decodeMeasurementData+0x68>
		measurementValue = measurementValue | (((uint64_t)dataArray[i])<<i*8);
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	68ba      	ldr	r2, [r7, #8]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2200      	movs	r2, #0
 80005a2:	4698      	mov	r8, r3
 80005a4:	4691      	mov	r9, r2
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	f1a3 0120 	sub.w	r1, r3, #32
 80005ae:	f1c3 0220 	rsb	r2, r3, #32
 80005b2:	fa09 f503 	lsl.w	r5, r9, r3
 80005b6:	fa08 f101 	lsl.w	r1, r8, r1
 80005ba:	430d      	orrs	r5, r1
 80005bc:	fa28 f202 	lsr.w	r2, r8, r2
 80005c0:	4315      	orrs	r5, r2
 80005c2:	fa08 f403 	lsl.w	r4, r8, r3
 80005c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80005ca:	ea42 0a04 	orr.w	sl, r2, r4
 80005ce:	ea43 0b05 	orr.w	fp, r3, r5
 80005d2:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(int i = 0;i<dataSize;i++){
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	697a      	ldr	r2, [r7, #20]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbd8      	blt.n	8000596 <decodeMeasurementData+0x22>
	}

	uint8_t depthSign = ((uint8_t)(measurementValue>>depthValueSignShift))&depthValueSignMask;
 80005e4:	7e3b      	ldrb	r3, [r7, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	74fb      	strb	r3, [r7, #19]
	data->depthValue = ((uint16_t)(measurementValue>>depthValueShift))&depthValueMask;
 80005ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005f0:	f04f 0200 	mov.w	r2, #0
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	0842      	lsrs	r2, r0, #1
 80005fa:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80005fe:	084b      	lsrs	r3, r1, #1
 8000600:	b293      	uxth	r3, r2
 8000602:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	601a      	str	r2, [r3, #0]
	if(!depthSign) data->depthValue = data->depthValue * -1;
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <decodeMeasurementData+0xa6>
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	425a      	negs	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	601a      	str	r2, [r3, #0]

	data->waterPressureValue = ((uint32_t)(measurementValue>>waterPressureShift))&waterPressureMask;
 800061a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	0b42      	lsrs	r2, r0, #13
 8000628:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 800062c:	0b4b      	lsrs	r3, r1, #13
 800062e:	4613      	mov	r3, r2
 8000630:	f3c3 0210 	ubfx	r2, r3, #0, #17
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	605a      	str	r2, [r3, #4]

	uint8_t surfaceTemperatureSign = ((uint8_t)(measurementValue>>surfaceTemperatureSignShift))&surfaceTemperatureSignMask;
 8000638:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800063c:	f04f 0200 	mov.w	r2, #0
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	0f82      	lsrs	r2, r0, #30
 8000646:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800064a:	0f8b      	lsrs	r3, r1, #30
 800064c:	b2d3      	uxtb	r3, r2
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	74bb      	strb	r3, [r7, #18]
	data->surfaceTemperatureValue = ((uint16_t)(measurementValue>>surfaceTemperatureShift))&surfaceTemperatureMask;
 8000654:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000658:	f04f 0200 	mov.w	r2, #0
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	0fc2      	lsrs	r2, r0, #31
 8000662:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000666:	0fcb      	lsrs	r3, r1, #31
 8000668:	b293      	uxth	r3, r2
 800066a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	609a      	str	r2, [r3, #8]
	if(!surfaceTemperatureSign)	data->surfaceTemperatureValue = data->surfaceTemperatureValue * -1;
 8000672:	7cbb      	ldrb	r3, [r7, #18]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <decodeMeasurementData+0x10e>
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	425a      	negs	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	609a      	str	r2, [r3, #8]

	uint8_t undergroundTemperatureSign = ((uint8_t)(measurementValue>>undergroundTemperatureSignShift))&undergroundTemperatureSignMask;
 8000682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	0aca      	lsrs	r2, r1, #11
 8000690:	2300      	movs	r3, #0
 8000692:	b2d3      	uxtb	r3, r2
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	747b      	strb	r3, [r7, #17]
	data->undergroundTemperatureValue = ((uint16_t)(measurementValue>>undergroundTemperatureShift))&undergroundTemperatureMask;
 800069a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800069e:	f04f 0200 	mov.w	r2, #0
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	0b0a      	lsrs	r2, r1, #12
 80006a8:	2300      	movs	r3, #0
 80006aa:	b293      	uxth	r3, r2
 80006ac:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	60da      	str	r2, [r3, #12]
	if(!undergroundTemperatureSign)	data->undergroundTemperatureValue = data->undergroundTemperatureValue * -1;
 80006b4:	7c7b      	ldrb	r3, [r7, #17]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d104      	bne.n	80006c4 <decodeMeasurementData+0x150>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	425a      	negs	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	60da      	str	r2, [r3, #12]

	data->batteryStatus = ((uint8_t)(measurementValue>>batteryStatusShift))&batteryStatusMask;
 80006c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80006c8:	f04f 0200 	mov.w	r2, #0
 80006cc:	f04f 0300 	mov.w	r3, #0
 80006d0:	0e0a      	lsrs	r2, r1, #24
 80006d2:	2300      	movs	r3, #0
 80006d4:	b2d3      	uxtb	r3, r2
 80006d6:	f003 0201 	and.w	r2, r3, #1
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	611a      	str	r2, [r3, #16]

}
 80006de:	bf00      	nop
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80006e8:	4770      	bx	lr
	...

080006ec <requestMeasureData>:
		printf("\r\nSD start error");

	}
}

void requestMeasureData(struct deviceData* device, int* deviceNum, struct rfDataStorage* rfData){
 80006ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006f0:	b08c      	sub	sp, #48	; 0x30
 80006f2:	af02      	add	r7, sp, #8
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]

	rfData->activeTxMessageSize = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	22fe      	movs	r2, #254	; 0xfe
 8000706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_MEASUREMENT_DATA;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2253      	movs	r2, #83	; 0x53
 800070e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = 0;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791a      	ldrb	r2, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000744:	3306      	adds	r3, #6
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	4610      	mov	r0, r2
 800074c:	f001 fc66 	bl	800201c <Send>

	int requestSuccessful = false;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
	while(!requestSuccessful){
 8000754:	e0b2      	b.n	80008bc <requestMeasureData+0x1d0>
		printf("Scanning");
 8000756:	485e      	ldr	r0, [pc, #376]	; (80008d0 <requestMeasureData+0x1e4>)
 8000758:	f006 fd84 	bl	8007264 <iprintf>

		Comms_Handler(rfData);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 fffd 	bl	800175c <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	e09d      	b.n	80008a4 <requestMeasureData+0x1b8>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_REMOTE_DONE){
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	6a3a      	ldr	r2, [r7, #32]
 800076c:	4613      	mov	r3, r2
 800076e:	009b      	lsls	r3, r3, #2
 8000770:	4413      	add	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	3373      	adds	r3, #115	; 0x73
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b54      	cmp	r3, #84	; 0x54
 800077c:	d108      	bne.n	8000790 <requestMeasureData+0xa4>
				printf("got data request reply from: %d", device->deviceID);
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4619      	mov	r1, r3
 8000784:	4853      	ldr	r0, [pc, #332]	; (80008d4 <requestMeasureData+0x1e8>)
 8000786:	f006 fd6d 	bl	8007264 <iprintf>
				requestSuccessful = true;
 800078a:	2301      	movs	r3, #1
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	e086      	b.n	800089e <requestMeasureData+0x1b2>

			}
			else if(rfData->activeRxMessage[i][MSG_TO_ID_POS] == rfData->myDevice.device_id){
 8000790:	6879      	ldr	r1, [r7, #4]
 8000792:	6a3a      	ldr	r2, [r7, #32]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	440b      	add	r3, r1
 800079e:	3374      	adds	r3, #116	; 0x74
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d179      	bne.n	800089e <requestMeasureData+0x1b2>
 80007aa:	466b      	mov	r3, sp
 80007ac:	469a      	mov	sl, r3

				printf("decoding data");
 80007ae:	484a      	ldr	r0, [pc, #296]	; (80008d8 <requestMeasureData+0x1ec>)
 80007b0:	f006 fd58 	bl	8007264 <iprintf>
				uint8_t allData[rfData->activeRxMessage[i][MSG_SIZE_POS]];
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	6a3a      	ldr	r2, [r7, #32]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	3377      	adds	r3, #119	; 0x77
 80007c4:	7819      	ldrb	r1, [r3, #0]
 80007c6:	460b      	mov	r3, r1
 80007c8:	3b01      	subs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	b2cb      	uxtb	r3, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	461c      	mov	r4, r3
 80007d2:	4615      	mov	r5, r2
 80007d4:	f04f 0200 	mov.w	r2, #0
 80007d8:	f04f 0300 	mov.w	r3, #0
 80007dc:	00eb      	lsls	r3, r5, #3
 80007de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007e2:	00e2      	lsls	r2, r4, #3
 80007e4:	b2cb      	uxtb	r3, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	4698      	mov	r8, r3
 80007ea:	4691      	mov	r9, r2
 80007ec:	f04f 0200 	mov.w	r2, #0
 80007f0:	f04f 0300 	mov.w	r3, #0
 80007f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000800:	460b      	mov	r3, r1
 8000802:	3307      	adds	r3, #7
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	00db      	lsls	r3, r3, #3
 8000808:	ebad 0d03 	sub.w	sp, sp, r3
 800080c:	ab02      	add	r3, sp, #8
 800080e:	3300      	adds	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
				for(int i = 0;i<rfData->activeRxMessage[i][MSG_SIZE_POS];i++){
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
 8000816:	e013      	b.n	8000840 <requestMeasureData+0x154>

						allData[i] = rfData->activeRxMessage[i][i+MSG_BODY_START];
 8000818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081a:	1d99      	adds	r1, r3, #6
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4403      	add	r3, r0
 800082a:	440b      	add	r3, r1
 800082c:	3372      	adds	r3, #114	; 0x72
 800082e:	7819      	ldrb	r1, [r3, #0]
 8000830:	697a      	ldr	r2, [r7, #20]
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	4413      	add	r3, r2
 8000836:	460a      	mov	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[i][MSG_SIZE_POS];i++){
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	3301      	adds	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	440b      	add	r3, r1
 800084e:	3377      	adds	r3, #119	; 0x77
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	4293      	cmp	r3, r2
 8000858:	dbde      	blt.n	8000818 <requestMeasureData+0x12c>

				}
				decodeMeasurementData(&(device->measurement), allData, rfData->activeRxMessage[i][MSG_SIZE_POS]);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f103 0008 	add.w	r0, r3, #8
 8000860:	6879      	ldr	r1, [r7, #4]
 8000862:	6a3a      	ldr	r2, [r7, #32]
 8000864:	4613      	mov	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	4413      	add	r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	3377      	adds	r3, #119	; 0x77
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	6979      	ldr	r1, [r7, #20]
 8000876:	f7ff fe7d 	bl	8000574 <decodeMeasurementData>

				printf("\r\nResulting measurement data: %d, %d, %d, %d, %d",
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6899      	ldr	r1, [r3, #8]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	68d8      	ldr	r0, [r3, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	691e      	ldr	r6, [r3, #16]
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	6992      	ldr	r2, [r2, #24]
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4633      	mov	r3, r6
 8000894:	4602      	mov	r2, r0
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <requestMeasureData+0x1f0>)
 8000898:	f006 fce4 	bl	8007264 <iprintf>
 800089c:	46d5      	mov	sp, sl
		for(int i = 0; i<rfData->messageNum; i++){
 800089e:	6a3b      	ldr	r3, [r7, #32]
 80008a0:	3301      	adds	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80008aa:	461a      	mov	r2, r3
 80008ac:	6a3b      	ldr	r3, [r7, #32]
 80008ae:	4293      	cmp	r3, r2
 80008b0:	f6ff af5a 	blt.w	8000768 <requestMeasureData+0x7c>
						device->measurement.undergroundTemperatureValue,
						device->measurement.batteryStatus);

			}
		}
		HAL_Delay(1000);
 80008b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b8:	f002 fa44 	bl	8002d44 <HAL_Delay>
	while(!requestSuccessful){
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f43f af49 	beq.w	8000756 <requestMeasureData+0x6a>

	}

}
 80008c4:	bf00      	nop
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	; 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d0:	08008264 	.word	0x08008264
 80008d4:	08008270 	.word	0x08008270
 80008d8:	08008290 	.word	0x08008290
 80008dc:	080082a0 	.word	0x080082a0

080008e0 <requestStatusData>:

int requestStatusData(struct statusData* statusInfo, struct rfDataStorage* rfData){
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]

	rfData->activeTxMessageSize = 0;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	22fe      	movs	r2, #254	; 0xfe
 80008f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_STATUS_DATA;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	2251      	movs	r2, #81	; 0x51
 80008fe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = 70;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2246      	movs	r2, #70	; 0x46
 8000906:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791a      	ldrb	r2, [r3, #4]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2200      	movs	r2, #0
 8000918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	int requestSuccessful = false;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000932:	4891      	ldr	r0, [pc, #580]	; (8000b78 <requestStatusData+0x298>)
 8000934:	f002 fd44 	bl	80033c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f002 fa03 	bl	8002d44 <HAL_Delay>

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800094a:	3306      	adds	r3, #6
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f001 fb63 	bl	800201c <Send>
	int listeningCounter = 200;
 8000956:	23c8      	movs	r3, #200	; 0xc8
 8000958:	61bb      	str	r3, [r7, #24]
	while(!requestSuccessful){
 800095a:	e0fd      	b.n	8000b58 <requestStatusData+0x278>
		printf("\r\nScanning");
 800095c:	4887      	ldr	r0, [pc, #540]	; (8000b7c <requestStatusData+0x29c>)
 800095e:	f006 fc81 	bl	8007264 <iprintf>
		Comms_Handler(rfData);
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f000 fefa 	bl	800175c <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e0e7      	b.n	8000b3e <requestStatusData+0x25e>
			//printf("last id: %d -> comparing to: %d", rfData->activeRxMessage[MSG_TO_ID_POS], rfData->myDevice.device_id);
			printf("last message type: %d", rfData->activeRxMessage[i][MSG_TYPE_POS]);
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	440b      	add	r3, r1
 800097c:	3373      	adds	r3, #115	; 0x73
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	487f      	ldr	r0, [pc, #508]	; (8000b80 <requestStatusData+0x2a0>)
 8000984:	f006 fc6e 	bl	8007264 <iprintf>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_REMOTE_DONE){
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	3373      	adds	r3, #115	; 0x73
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b54      	cmp	r3, #84	; 0x54
 800099c:	d10e      	bne.n	80009bc <requestStatusData+0xdc>
				printf("\r\ngot data request reply from: %d", rfData->activeRxMessage[i][MSG_FROM_ID_POS]);
 800099e:	6839      	ldr	r1, [r7, #0]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	3375      	adds	r3, #117	; 0x75
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	4874      	ldr	r0, [pc, #464]	; (8000b84 <requestStatusData+0x2a4>)
 80009b4:	f006 fc56 	bl	8007264 <iprintf>
				requestSuccessful = true;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]

			}
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_BROKEN_DATA){
 80009bc:	6839      	ldr	r1, [r7, #0]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	3373      	adds	r3, #115	; 0x73
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b50      	cmp	r3, #80	; 0x50
 80009d0:	d14f      	bne.n	8000a72 <requestStatusData+0x192>
				printf("\r\nbroken data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->brokenNum);
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	3377      	adds	r3, #119	; 0x77
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4619      	mov	r1, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80009ec:	461a      	mov	r2, r3
 80009ee:	4866      	ldr	r0, [pc, #408]	; (8000b88 <requestStatusData+0x2a8>)
 80009f0:	f006 fc38 	bl	8007264 <iprintf>
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	e01c      	b.n	8000a34 <requestStatusData+0x154>

					statusInfo->brokenDevices[statusInfo->brokenNum] = rfData->activeRxMessage[i][MSG_BODY_START+n];
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	1d99      	adds	r1, r3, #6
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000a04:	461c      	mov	r4, r3
 8000a06:	6838      	ldr	r0, [r7, #0]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4403      	add	r3, r0
 8000a14:	440b      	add	r3, r1
 8000a16:	3372      	adds	r3, #114	; 0x72
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	551a      	strb	r2, [r3, r4]
					statusInfo->brokenNum++;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	3301      	adds	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	3377      	adds	r3, #119	; 0x77
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	dbd5      	blt.n	80009fa <requestStatusData+0x11a>
				}
				printf("\r\nbroken data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->brokenNum);
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	697a      	ldr	r2, [r7, #20]
 8000a52:	4613      	mov	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	3377      	adds	r3, #119	; 0x77
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4847      	ldr	r0, [pc, #284]	; (8000b88 <requestStatusData+0x2a8>)
 8000a6c:	f006 fbfa 	bl	8007264 <iprintf>
 8000a70:	e062      	b.n	8000b38 <requestStatusData+0x258>

			}
			else if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_LOW_BATTERY_DATA){
 8000a72:	6839      	ldr	r1, [r7, #0]
 8000a74:	697a      	ldr	r2, [r7, #20]
 8000a76:	4613      	mov	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4413      	add	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	440b      	add	r3, r1
 8000a80:	3373      	adds	r3, #115	; 0x73
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b52      	cmp	r3, #82	; 0x52
 8000a86:	d151      	bne.n	8000b2c <requestStatusData+0x24c>
				printf("\r\nbattery data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->lowBatteryNum);
 8000a88:	6839      	ldr	r1, [r7, #0]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	3377      	adds	r3, #119	; 0x77
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4839      	ldr	r0, [pc, #228]	; (8000b8c <requestStatusData+0x2ac>)
 8000aa6:	f006 fbdd 	bl	8007264 <iprintf>
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e01e      	b.n	8000aee <requestStatusData+0x20e>

					statusInfo->lowBatteryDevices[statusInfo->lowBatteryNum] = rfData->activeRxMessage[i][MSG_BODY_START+n];
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	1d99      	adds	r1, r3, #6
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000aba:	461c      	mov	r4, r3
 8000abc:	6838      	ldr	r0, [r7, #0]
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4403      	add	r3, r0
 8000aca:	440b      	add	r3, r1
 8000acc:	3372      	adds	r3, #114	; 0x72
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4423      	add	r3, r4
 8000ad4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
					statusInfo->lowBatteryNum++;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000ade:	3301      	adds	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
				for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3301      	adds	r3, #1
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	6839      	ldr	r1, [r7, #0]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	4613      	mov	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	440b      	add	r3, r1
 8000afc:	3377      	adds	r3, #119	; 0x77
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	dbd3      	blt.n	8000ab0 <requestStatusData+0x1d0>
				}
				printf("\r\nbattery data received: %d->", rfData->activeRxMessage[i][MSG_SIZE_POS], statusInfo->lowBatteryNum);
 8000b08:	6839      	ldr	r1, [r7, #0]
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	440b      	add	r3, r1
 8000b16:	3377      	adds	r3, #119	; 0x77
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000b22:	461a      	mov	r2, r3
 8000b24:	4819      	ldr	r0, [pc, #100]	; (8000b8c <requestStatusData+0x2ac>)
 8000b26:	f006 fb9d 	bl	8007264 <iprintf>
 8000b2a:	e005      	b.n	8000b38 <requestStatusData+0x258>
			}

			else{
				listeningCounter--;
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
				if(listeningCounter<=0){
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	dd0b      	ble.n	8000b50 <requestStatusData+0x270>
		for(int i = 0; i<rfData->messageNum; i++){
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8000b44:	461a      	mov	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	f6ff af10 	blt.w	800096e <requestStatusData+0x8e>
 8000b4e:	e000      	b.n	8000b52 <requestStatusData+0x272>
					break;
 8000b50:	bf00      	nop
				}
			}
		}
		HAL_Delay(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f002 f8f6 	bl	8002d44 <HAL_Delay>
	while(!requestSuccessful){
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f43f aefe 	beq.w	800095c <requestStatusData+0x7c>

	}
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b66:	4804      	ldr	r0, [pc, #16]	; (8000b78 <requestStatusData+0x298>)
 8000b68:	f002 fc2a 	bl	80033c0 <HAL_GPIO_WritePin>
	return requestSuccessful;
 8000b6c:	69fb      	ldr	r3, [r7, #28]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	080082d4 	.word	0x080082d4
 8000b80:	080082e0 	.word	0x080082e0
 8000b84:	080082f8 	.word	0x080082f8
 8000b88:	0800831c 	.word	0x0800831c
 8000b8c:	0800833c 	.word	0x0800833c

08000b90 <mainOperationRemote>:

	return 0;
}

void mainOperationRemote(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	f6ad 3d08 	subw	sp, sp, #2824	; 0xb08
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000b9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000ba0:	6018      	str	r0, [r3, #0]
 8000ba2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000ba6:	f6a3 3308 	subw	r3, r3, #2824	; 0xb08
 8000baa:	6019      	str	r1, [r3, #0]
	printf("\r\nRemote Operation");
 8000bac:	4850      	ldr	r0, [pc, #320]	; (8000cf0 <mainOperationRemote+0x160>)
 8000bae:	f006 fb59 	bl	8007264 <iprintf>
	if(HAL_GPIO_ReadPin(statusGPIO, statusGPIOPin)== GPIO_PIN_SET)
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	484f      	ldr	r0, [pc, #316]	; (8000cf4 <mainOperationRemote+0x164>)
 8000bb6:	f002 fbeb 	bl	8003390 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d172      	bne.n	8000ca6 <mainOperationRemote+0x116>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc6:	484c      	ldr	r0, [pc, #304]	; (8000cf8 <mainOperationRemote+0x168>)
 8000bc8:	f002 fbfa 	bl	80033c0 <HAL_GPIO_WritePin>
		struct statusData statusInfo;
		statusInfo.brokenNum = 0;
 8000bcc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000bd0:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		statusInfo.lowBatteryNum = 0;
 8000bda:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000bde:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
		if(requestStatusData(&statusInfo, rfData)){
 8000be8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000bec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000bf0:	f107 020c 	add.w	r2, r7, #12
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	f7ff fe72 	bl	80008e0 <requestStatusData>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d047      	beq.n	8000c92 <mainOperationRemote+0x102>

			printf("\r\nBroken Devices:");
 8000c02:	483e      	ldr	r0, [pc, #248]	; (8000cfc <mainOperationRemote+0x16c>)
 8000c04:	f006 fb2e 	bl	8007264 <iprintf>
			for(int i = 0;i<statusInfo.brokenNum;i++){
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8000c0e:	e010      	b.n	8000c32 <mainOperationRemote+0xa2>

				printf("\r\n%d", statusInfo.brokenDevices[i]);
 8000c10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c14:	f6a3 22fc 	subw	r2, r3, #2812	; 0xafc
 8000c18:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4837      	ldr	r0, [pc, #220]	; (8000d00 <mainOperationRemote+0x170>)
 8000c24:	f006 fb1e 	bl	8007264 <iprintf>
			for(int i = 0;i<statusInfo.brokenNum;i++){
 8000c28:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 8000c32:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c36:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000c3a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8000c3e:	461a      	mov	r2, r3
 8000c40:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8000c44:	4293      	cmp	r3, r2
 8000c46:	dbe3      	blt.n	8000c10 <mainOperationRemote+0x80>

			}

			printf("Low Battery Devices:");
 8000c48:	482e      	ldr	r0, [pc, #184]	; (8000d04 <mainOperationRemote+0x174>)
 8000c4a:	f006 fb0b 	bl	8007264 <iprintf>
			for(int i = 0;i<statusInfo.lowBatteryNum;i++){
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 8000c54:	e011      	b.n	8000c7a <mainOperationRemote+0xea>

				printf("\r\n%d", statusInfo.lowBatteryDevices[i]);
 8000c56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c5a:	f6a3 22fc 	subw	r2, r3, #2812	; 0xafc
 8000c5e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8000c62:	4413      	add	r3, r2
 8000c64:	3364      	adds	r3, #100	; 0x64
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <mainOperationRemote+0x170>)
 8000c6c:	f006 fafa 	bl	8007264 <iprintf>
			for(int i = 0;i<statusInfo.lowBatteryNum;i++){
 8000c70:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8000c74:	3301      	adds	r3, #1
 8000c76:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 8000c7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c7e:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8000c82:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8000c86:	461a      	mov	r2, r3
 8000c88:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dbe2      	blt.n	8000c56 <mainOperationRemote+0xc6>
 8000c90:	e002      	b.n	8000c98 <mainOperationRemote+0x108>

			}
		}
		else{
			printf("\r\nNo reply received;");
 8000c92:	481d      	ldr	r0, [pc, #116]	; (8000d08 <mainOperationRemote+0x178>)
 8000c94:	f006 fae6 	bl	8007264 <iprintf>
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c9e:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <mainOperationRemote+0x168>)
 8000ca0:	f002 fb8e 	bl	80033c0 <HAL_GPIO_WritePin>
		struct deviceData deviceBuf[100];
		requestMeasureData(deviceBuf, &deviceNum, rfData);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	}

}
 8000ca4:	e01f      	b.n	8000ce6 <mainOperationRemote+0x156>
	else if(HAL_GPIO_ReadPin(dataGPIO, dataGPIOPin)== GPIO_PIN_SET)
 8000ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000caa:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <mainOperationRemote+0x164>)
 8000cac:	f002 fb70 	bl	8003390 <HAL_GPIO_ReadPin>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d117      	bne.n	8000ce6 <mainOperationRemote+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	480f      	ldr	r0, [pc, #60]	; (8000cf8 <mainOperationRemote+0x168>)
 8000cbc:	f002 fb80 	bl	80033c0 <HAL_GPIO_WritePin>
		int deviceNum = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
		requestMeasureData(deviceBuf, &deviceNum, rfData);
 8000cc6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000cca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8000cce:	f607 21fc 	addw	r1, r7, #2812	; 0xafc
 8000cd2:	f107 000c 	add.w	r0, r7, #12
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f7ff fd08 	bl	80006ec <requestMeasureData>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <mainOperationRemote+0x168>)
 8000ce2:	f002 fb6d 	bl	80033c0 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	f607 3708 	addw	r7, r7, #2824	; 0xb08
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080083e4 	.word	0x080083e4
 8000cf4:	48000400 	.word	0x48000400
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	080083f8 	.word	0x080083f8
 8000d00:	0800840c 	.word	0x0800840c
 8000d04:	08008414 	.word	0x08008414
 8000d08:	0800842c 	.word	0x0800842c

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ea      	sub	sp, #424	; 0x1a8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	struct CommunicationHandles handles;
	handles.UARThandle = &hlpuart1;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <main+0x84>)
 8000d14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f001 ff9f 	bl	8002c5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f842 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 f934 	bl	8000f8c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d24:	f000 f884 	bl	8000e30 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000d28:	f000 f8ae 	bl	8000e88 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000d2c:	f000 f8f0 	bl	8000f10 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000d30:	f006 f8ba 	bl	8006ea8 <MX_FATFS_Init>
  MX_RNG_Init();
 8000d34:	f000 f8d8 	bl	8000ee8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000d38:	4816      	ldr	r0, [pc, #88]	; (8000d94 <main+0x88>)
 8000d3a:	f000 f9ef 	bl	800111c <RetargetInit>

  HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 8000d3e:	220f      	movs	r2, #15
 8000d40:	4915      	ldr	r1, [pc, #84]	; (8000d98 <main+0x8c>)
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <main+0x84>)
 8000d44:	f004 fc14 	bl	8005570 <HAL_UART_Receive_IT>

  struct rfDataStorage rfData;
  rfData.RXFIFO = &RXFIFO;
 8000d48:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000d4c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <main+0x90>)
 8000d52:	601a      	str	r2, [r3, #0]
  init_comms(&rfData, DEVICE_PARENT, 5, 1);
 8000d54:	4638      	mov	r0, r7
 8000d56:	2301      	movs	r3, #1
 8000d58:	2205      	movs	r2, #5
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f000 fcb2 	bl	80016c4 <init_comms>


  HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <main+0x94>)
 8000d66:	f002 fb2b 	bl	80033c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <main+0x94>)
 8000d72:	f002 fb25 	bl	80033c0 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mainOperationRemote(&rfData, &handles);
 8000d76:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff06 	bl	8000b90 <mainOperationRemote>
	  HAL_Delay(1000);
 8000d84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d88:	f001 ffdc 	bl	8002d44 <HAL_Delay>
	  mainOperationRemote(&rfData, &handles);
 8000d8c:	e7f3      	b.n	8000d76 <main+0x6a>
 8000d8e:	bf00      	nop
 8000d90:	200000a4 	.word	0x200000a4
 8000d94:	20000128 	.word	0x20000128
 8000d98:	20000484 	.word	0x20000484
 8000d9c:	20000220 	.word	0x20000220
 8000da0:	48000400 	.word	0x48000400

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	; 0x58
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2244      	movs	r2, #68	; 0x44
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f006 f96e 	bl	8007094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dca:	f002 fb1f 	bl	800340c <HAL_PWREx_ControlVoltageScaling>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dd4:	f000 f99c 	bl	8001110 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de4:	2360      	movs	r3, #96	; 0x60
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fb61 	bl	80034b8 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000dfc:	f000 f988 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 ffaf 	bl	8003d7c <HAL_RCC_ClockConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e24:	f000 f974 	bl	8001110 <Error_Handler>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3758      	adds	r7, #88	; 0x58
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <MX_LPUART1_UART_Init+0x54>)
 8000e38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e40:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_LPUART1_UART_Init+0x50>)
 8000e6e:	f004 f95d 	bl	800512c <HAL_UART_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e78:	f000 f94a 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000a4 	.word	0x200000a4
 8000e84:	40008000 	.word	0x40008000

08000e88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000e8e:	4a15      	ldr	r2, [pc, #84]	; (8000ee4 <MX_USART3_UART_Init+0x5c>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART3_UART_Init+0x58>)
 8000ecc:	f004 f92e 	bl	800512c <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 f91b 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000128 	.word	0x20000128
 8000ee4:	40004800 	.word	0x40004800

08000ee8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_RNG_Init+0x20>)
 8000eee:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <MX_RNG_Init+0x24>)
 8000ef0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <MX_RNG_Init+0x20>)
 8000ef4:	f003 faec 	bl	80044d0 <HAL_RNG_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000efe:	f000 f907 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001ac 	.word	0x200001ac
 8000f0c:	50060800 	.word	0x50060800

08000f10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f16:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <MX_SPI2_Init+0x78>)
 8000f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f5e:	2207      	movs	r2, #7
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_SPI2_Init+0x74>)
 8000f70:	f003 fb54 	bl	800461c <HAL_SPI_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f7a:	f000 f8c9 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001bc 	.word	0x200001bc
 8000f88:	40003800 	.word	0x40003800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <MX_GPIO_Init+0x100>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a39      	ldr	r2, [pc, #228]	; (800108c <MX_GPIO_Init+0x100>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b37      	ldr	r3, [pc, #220]	; (800108c <MX_GPIO_Init+0x100>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <MX_GPIO_Init+0x100>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <MX_GPIO_Init+0x100>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <MX_GPIO_Init+0x100>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_GPIO_Init+0x100>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a2d      	ldr	r2, [pc, #180]	; (800108c <MX_GPIO_Init+0x100>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_GPIO_Init+0x100>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f002 f9e5 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 519e 	mov.w	r1, #5056	; 0x13c0
 8000ffc:	4824      	ldr	r0, [pc, #144]	; (8001090 <MX_GPIO_Init+0x104>)
 8000ffe:	f002 f9df 	bl	80033c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001008:	4822      	ldr	r0, [pc, #136]	; (8001094 <MX_GPIO_Init+0x108>)
 800100a:	f002 f9d9 	bl	80033c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f002 f840 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800102c:	f240 4304 	movw	r3, #1028	; 0x404
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	4619      	mov	r1, r3
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_GPIO_Init+0x104>)
 8001042:	f002 f833 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001046:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 800104a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_GPIO_Init+0x104>)
 8001060:	f002 f824 	bl	80030ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001064:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_GPIO_Init+0x108>)
 800107e:	f002 f815 	bl	80030ac <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400
 8001094:	48000800 	.word	0x48000800

08001098 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    //printf("\r\nreceived uart message");
	for (int i = 0; i < 15; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e017      	b.n	80010d6 <HAL_UART_RxCpltCallback+0x3e>
	{
		    printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
 80010a6:	4a16      	ldr	r2, [pc, #88]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <HAL_UART_RxCpltCallback+0x6c>)
 80010b2:	f006 f8d7 	bl	8007264 <iprintf>
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <HAL_UART_RxCpltCallback+0x70>)
 80010c2:	f001 f853 	bl	800216c <enqueue>
			UART2_rxBuffer[i] = 0;
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 15; i++)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b0e      	cmp	r3, #14
 80010da:	dde4      	ble.n	80010a6 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 80010dc:	220f      	movs	r2, #15
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <HAL_UART_RxCpltCallback+0x74>)
 80010e2:	f004 fa45 	bl	8005570 <HAL_UART_Receive_IT>
    HAL_UART_Abort_IT(&hlpuart1);
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <HAL_UART_RxCpltCallback+0x74>)
 80010e8:	f004 fa98 	bl	800561c <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, 15);
 80010ec:	220f      	movs	r2, #15
 80010ee:	4904      	ldr	r1, [pc, #16]	; (8001100 <HAL_UART_RxCpltCallback+0x68>)
 80010f0:	4806      	ldr	r0, [pc, #24]	; (800110c <HAL_UART_RxCpltCallback+0x74>)
 80010f2:	f004 fa3d 	bl	8005570 <HAL_UART_Receive_IT>

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000484 	.word	0x20000484
 8001104:	08008444 	.word	0x08008444
 8001108:	20000220 	.word	0x20000220
 800110c:	200000a4 	.word	0x200000a4

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <RetargetInit+0x28>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <RetargetInit+0x2c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6898      	ldr	r0, [r3, #8]
 8001130:	2300      	movs	r3, #0
 8001132:	2202      	movs	r2, #2
 8001134:	2100      	movs	r1, #0
 8001136:	f006 f8bd 	bl	80072b4 <setvbuf>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000498 	.word	0x20000498
 8001148:	20000024 	.word	0x20000024

0800114c <_isatty>:

int _isatty(int fd) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db04      	blt.n	8001164 <_isatty+0x18>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b02      	cmp	r3, #2
 800115e:	dc01      	bgt.n	8001164 <_isatty+0x18>
    return 1;
 8001160:	2301      	movs	r3, #1
 8001162:	e005      	b.n	8001170 <_isatty+0x24>

  errno = EBADF;
 8001164:	f005 ff64 	bl	8007030 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	2209      	movs	r2, #9
 800116c:	601a      	str	r2, [r3, #0]
  return 0;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_write>:

int _write(int fd, char* ptr, int len) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d002      	beq.n	8001190 <_write+0x18>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d111      	bne.n	80011b4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_write+0x54>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	b29a      	uxth	r2, r3
 8001198:	f04f 33ff 	mov.w	r3, #4294967295
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	f004 f813 	bl	80051c8 <HAL_UART_Transmit>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <_write+0x38>
      return len;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	e008      	b.n	80011c2 <_write+0x4a>
    else
      return EIO;
 80011b0:	2305      	movs	r3, #5
 80011b2:	e006      	b.n	80011c2 <_write+0x4a>
  }
  errno = EBADF;
 80011b4:	f005 ff3c 	bl	8007030 <__errno>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2209      	movs	r2, #9
 80011bc:	601a      	str	r2, [r3, #0]
  return -1;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000498 	.word	0x20000498

080011d0 <_close>:

int _close(int fd) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db04      	blt.n	80011e8 <_close+0x18>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	dc01      	bgt.n	80011e8 <_close+0x18>
    return 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e006      	b.n	80011f6 <_close+0x26>

  errno = EBADF;
 80011e8:	f005 ff22 	bl	8007030 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2209      	movs	r2, #9
 80011f0:	601a      	str	r2, [r3, #0]
  return -1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800120a:	f005 ff11 	bl	8007030 <__errno>
 800120e:	4603      	mov	r3, r0
 8001210:	2209      	movs	r2, #9
 8001212:	601a      	str	r2, [r3, #0]
  return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_read>:

int _read(int fd, char* ptr, int len) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d110      	bne.n	8001254 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <_read+0x4c>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	2201      	movs	r2, #1
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	f004 f857 	bl	80052f0 <HAL_UART_Receive>
 8001242:	4603      	mov	r3, r0
 8001244:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d101      	bne.n	8001250 <_read+0x30>
      return 1;
 800124c:	2301      	movs	r3, #1
 800124e:	e008      	b.n	8001262 <_read+0x42>
    else
      return EIO;
 8001250:	2305      	movs	r3, #5
 8001252:	e006      	b.n	8001262 <_read+0x42>
  }
  errno = EBADF;
 8001254:	f005 feec 	bl	8007030 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	2209      	movs	r2, #9
 800125c:	601a      	str	r2, [r3, #0]
  return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000498 	.word	0x20000498

08001270 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db08      	blt.n	8001292 <_fstat+0x22>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	dc05      	bgt.n	8001292 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128c:	605a      	str	r2, [r3, #4]
    return 0;
 800128e:	2300      	movs	r3, #0
 8001290:	e005      	b.n	800129e <_fstat+0x2e>
  }

  errno = EBADF;
 8001292:	f005 fecd 	bl	8007030 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2209      	movs	r2, #9
 800129a:	601a      	str	r2, [r3, #0]
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x44>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09a      	sub	sp, #104	; 0x68
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	2234      	movs	r2, #52	; 0x34
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f005 febf 	bl	8007094 <memset>
  if(huart->Instance==LPUART1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_UART_MspInit+0x168>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d13f      	bne.n	80013a0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001320:	2320      	movs	r3, #32
 8001322:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f002 ff49 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001338:	f7ff feea 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_UART_MspInit+0x16c>)
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_UART_MspInit+0x16c>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001348:	4b44      	ldr	r3, [pc, #272]	; (800145c <HAL_UART_MspInit+0x16c>)
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_UART_MspInit+0x16c>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <HAL_UART_MspInit+0x16c>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_UART_MspInit+0x16c>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800136c:	230c      	movs	r3, #12
 800136e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800137c:	2308      	movs	r3, #8
 800137e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f001 fe8f 	bl	80030ac <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2046      	movs	r0, #70	; 0x46
 8001394:	f001 fdd5 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001398:	2046      	movs	r0, #70	; 0x46
 800139a:	f001 fdee 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800139e:	e057      	b.n	8001450 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <HAL_UART_MspInit+0x170>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d152      	bne.n	8001450 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013aa:	2304      	movs	r3, #4
 80013ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b2:	f107 0320 	add.w	r3, r7, #32
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 ff04 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80013c2:	f7ff fea5 	bl	8001110 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	4a24      	ldr	r2, [pc, #144]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6593      	str	r3, [r2, #88]	; 0x58
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <HAL_UART_MspInit+0x16c>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_UART_MspInit+0x16c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140e:	2310      	movs	r3, #16
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800141e:	2307      	movs	r3, #7
 8001420:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001426:	4619      	mov	r1, r3
 8001428:	480e      	ldr	r0, [pc, #56]	; (8001464 <HAL_UART_MspInit+0x174>)
 800142a:	f001 fe3f 	bl	80030ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800142e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001432:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001448:	4619      	mov	r1, r3
 800144a:	4807      	ldr	r0, [pc, #28]	; (8001468 <HAL_UART_MspInit+0x178>)
 800144c:	f001 fe2e 	bl	80030ac <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	3768      	adds	r7, #104	; 0x68
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40008000 	.word	0x40008000
 800145c:	40021000 	.word	0x40021000
 8001460:	40004800 	.word	0x40004800
 8001464:	48000800 	.word	0x48000800
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2234      	movs	r2, #52	; 0x34
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fe09 	bl	8007094 <memset>
  if(hrng->Instance==RNG)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a11      	ldr	r2, [pc, #68]	; (80014cc <HAL_RNG_MspInit+0x60>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d11b      	bne.n	80014c4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800148c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001490:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8001492:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001496:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fe91 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80014a8:	f7ff fe32 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_RNG_MspInit+0x64>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_RNG_MspInit+0x64>)
 80014b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_RNG_MspInit+0x64>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3740      	adds	r7, #64	; 0x40
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	50060800 	.word	0x50060800
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001526:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001538:	2305      	movs	r3, #5
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_SPI_MspInit+0x84>)
 8001544:	f001 fdb2 	bl	80030ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40003800 	.word	0x40003800
 8001554:	40021000 	.word	0x40021000
 8001558:	48000400 	.word	0x48000400

0800155c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <SDTimer_Handler+0x40>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d006      	beq.n	8001578 <SDTimer_Handler+0x1c>
    Timer1--;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <SDTimer_Handler+0x40>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <SDTimer_Handler+0x40>)
 8001576:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <SDTimer_Handler+0x44>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <SDTimer_Handler+0x34>
    Timer2--;
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <SDTimer_Handler+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	3b01      	subs	r3, #1
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SDTimer_Handler+0x44>)
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000049d 	.word	0x2000049d
 80015a0:	2000049e 	.word	0x2000049e

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <SysTick_Handler+0x30>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <SysTick_Handler+0x30>)
 80015fc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80015fe:	4b07      	ldr	r3, [pc, #28]	; (800161c <SysTick_Handler+0x30>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b09      	cmp	r3, #9
 8001606:	d904      	bls.n	8001612 <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Handler+0x30>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800160e:	f7ff ffa5 	bl	800155c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001612:	f001 fb77 	bl	8002d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000049c 	.word	0x2000049c

08001620 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <LPUART1_IRQHandler+0x10>)
 8001626:	f004 f921 	bl	800586c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200000a4 	.word	0x200000a4

08001634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800163c:	4a14      	ldr	r2, [pc, #80]	; (8001690 <_sbrk+0x5c>)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <_sbrk+0x60>)
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001648:	4b13      	ldr	r3, [pc, #76]	; (8001698 <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <_sbrk+0x64>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <_sbrk+0x68>)
 8001654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	429a      	cmp	r2, r3
 8001662:	d207      	bcs.n	8001674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001664:	f005 fce4 	bl	8007030 <__errno>
 8001668:	4603      	mov	r3, r0
 800166a:	220c      	movs	r2, #12
 800166c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e009      	b.n	8001688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <_sbrk+0x64>)
 8001684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000a000 	.word	0x2000a000
 8001694:	00000400 	.word	0x00000400
 8001698:	200004a0 	.word	0x200004a0
 800169c:	200004d0 	.word	0x200004d0

080016a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <init_comms>:

//uint8_t devices;
//device rfData->myDevice;

void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]

	create_queue(rfData->RXFIFO);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fd0d 	bl	80020f8 <create_queue>
	rfData->myDevice.device_id = id;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	711a      	strb	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	7afa      	ldrb	r2, [r7, #11]
 80016ea:	715a      	strb	r2, [r3, #5]
	rfData->myDevice.device_is_discovered = discovered;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	71da      	strb	r2, [r3, #7]

	rfData->count = 0;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	725a      	strb	r2, [r3, #9]
	rfData->num_fwds = 0;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	729a      	strb	r2, [r3, #10]

	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e01d      	b.n	800174a <init_comms+0x86>

		rfData->FWDFIFO[i].from_id = 0;
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	440b      	add	r3, r1
 800171a:	330b      	adds	r3, #11
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	440b      	add	r3, r1
 800172c:	330c      	adds	r3, #12
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 8001732:	68f9      	ldr	r1, [r7, #12]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	440b      	add	r3, r1
 800173e:	330d      	adds	r3, #13
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b13      	cmp	r3, #19
 800174e:	ddde      	ble.n	800170e <init_comms+0x4a>

	}

}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <Comms_Handler>:

void Comms_Handler(struct rfDataStorage* rfData)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	795b      	ldrb	r3, [r3, #5]
 8001768:	2b99      	cmp	r3, #153	; 0x99
 800176a:	f040 8163 	bne.w	8001a34 <Comms_Handler+0x2d8>
	{
		uint8_t data = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	73bb      	strb	r3, [r7, #14]
		rfData->messageNum = 0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 800177a:	e143      	b.n	8001a04 <Comms_Handler+0x2a8>
		{
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fd25 	bl	80021d0 <dequeue>
 8001786:	4603      	mov	r3, r0
 8001788:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	2bfe      	cmp	r3, #254	; 0xfe
 800178e:	f040 8139 	bne.w	8001a04 <Comms_Handler+0x2a8>
			{
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001798:	4619      	mov	r1, r3
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3372      	adds	r3, #114	; 0x72
 80017a8:	22fe      	movs	r2, #254	; 0xfe
 80017aa:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fd0d 	bl	80021d0 <dequeue>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80017c0:	4619      	mov	r1, r3
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3373      	adds	r3, #115	; 0x73
 80017d0:	7bba      	ldrb	r2, [r7, #14]
 80017d2:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fcf9 	bl	80021d0 <dequeue>
 80017de:	4603      	mov	r3, r0
 80017e0:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80017e8:	4619      	mov	r1, r3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3374      	adds	r3, #116	; 0x74
 80017f8:	7bba      	ldrb	r2, [r7, #14]
 80017fa:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fce5 	bl	80021d0 <dequeue>
 8001806:	4603      	mov	r3, r0
 8001808:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001810:	4619      	mov	r1, r3
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3375      	adds	r3, #117	; 0x75
 8001820:	7bba      	ldrb	r2, [r7, #14]
 8001822:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fcd1 	bl	80021d0 <dequeue>
 800182e:	4603      	mov	r3, r0
 8001830:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001838:	4619      	mov	r1, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3376      	adds	r3, #118	; 0x76
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 fcbd 	bl	80021d0 <dequeue>
 8001856:	4603      	mov	r3, r0
 8001858:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001860:	4619      	mov	r1, r3
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3377      	adds	r3, #119	; 0x77
 8001870:	7bba      	ldrb	r2, [r7, #14]
 8001872:	701a      	strb	r2, [r3, #0]

				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e019      	b.n	80018ae <Comms_Handler+0x152>
				{
					data = dequeue(rfData->RXFIFO);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fca6 	bl	80021d0 <dequeue>
 8001884:	4603      	mov	r3, r0
 8001886:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800188e:	4618      	mov	r0, r3
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1d9a      	adds	r2, r3, #6
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4603      	mov	r3, r0
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4403      	add	r3, r0
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	4413      	add	r3, r2
 80018a2:	3372      	adds	r3, #114	; 0x72
 80018a4:	7bba      	ldrb	r2, [r7, #14]
 80018a6:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80018b4:	4619      	mov	r1, r3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3377      	adds	r3, #119	; 0x77
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	4293      	cmp	r3, r2
 80018cc:	dbd5      	blt.n	800187a <Comms_Handler+0x11e>

				}
				printf("\r\nID comparison: %d %d", rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS], rfData->myDevice.device_id);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80018d4:	4619      	mov	r1, r3
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3374      	adds	r3, #116	; 0x74
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	791b      	ldrb	r3, [r3, #4]
 80018ec:	461a      	mov	r2, r3
 80018ee:	48b0      	ldr	r0, [pc, #704]	; (8001bb0 <Comms_Handler+0x454>)
 80018f0:	f005 fcb8 	bl	8007264 <iprintf>

				if (rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] != rfData->myDevice.device_id)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80018fa:	4619      	mov	r1, r3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3374      	adds	r3, #116	; 0x74
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	791b      	ldrb	r3, [r3, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d002      	beq.n	800191a <Comms_Handler+0x1be>
				{
						Message_Forwarder(rfData);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f9e5 	bl	8001ce4 <Message_Forwarder>
				}

				int newMessage = 1;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
				if(rfData->messageNum>0){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001924:	2b00      	cmp	r3, #0
 8001926:	d062      	beq.n	80019ee <Comms_Handler+0x292>
					for(int i = 1;i<=rfData->messageNum;i++){
 8001928:	2301      	movs	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	e058      	b.n	80019e0 <Comms_Handler+0x284>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001934:	4619      	mov	r1, r3
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3373      	adds	r3, #115	; 0x73
 8001944:	7819      	ldrb	r1, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800194c:	461a      	mov	r2, r3
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4403      	add	r3, r0
 800195e:	3373      	adds	r3, #115	; 0x73
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4299      	cmp	r1, r3
 8001964:	d139      	bne.n	80019da <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800196c:	4619      	mov	r1, r3
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3375      	adds	r3, #117	; 0x75
 800197c:	7819      	ldrb	r1, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001984:	461a      	mov	r2, r3
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	1ad2      	subs	r2, r2, r3
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4403      	add	r3, r0
 8001996:	3375      	adds	r3, #117	; 0x75
 8001998:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 800199a:	4299      	cmp	r1, r3
 800199c:	d11d      	bne.n	80019da <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80019a4:	4619      	mov	r1, r3
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3374      	adds	r3, #116	; 0x74
 80019b4:	7819      	ldrb	r1, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80019bc:	461a      	mov	r2, r3
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	1ad2      	subs	r2, r2, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4403      	add	r3, r0
 80019ce:	3374      	adds	r3, #116	; 0x74
 80019d0:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 80019d2:	4299      	cmp	r1, r3
 80019d4:	d101      	bne.n	80019da <Comms_Handler+0x27e>
								newMessage = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
					for(int i = 1;i<=rfData->messageNum;i++){
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80019e6:	461a      	mov	r2, r3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4293      	cmp	r3, r2
 80019ec:	dd9f      	ble.n	800192e <Comms_Handler+0x1d2>
							}
					}
				}
				if(newMessage){
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <Comms_Handler+0x2a8>

					rfData->messageNum++;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80019fa:	3301      	adds	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fb9d 	bl	8002148 <is_empty>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f083 0301 	eor.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f47f aeb0 	bne.w	800177c <Comms_Handler+0x20>

				}
			}
		}

		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	79db      	ldrb	r3, [r3, #7]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 813b 	beq.w	8001ca2 <Comms_Handler+0x546>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f93d 	bl	8001cac <Discovery_Handler>
			}
		}

	}

}
 8001a32:	e136      	b.n	8001ca2 <Comms_Handler+0x546>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	795b      	ldrb	r3, [r3, #5]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 8132 	bne.w	8001ca2 <Comms_Handler+0x546>
		rfData->messageNum = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001a46:	e120      	b.n	8001c8a <Comms_Handler+0x52e>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f000 fbbf 	bl	80021d0 <dequeue>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2bfe      	cmp	r3, #254	; 0xfe
 8001a5a:	f040 8116 	bne.w	8001c8a <Comms_Handler+0x52e>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001a64:	4619      	mov	r1, r3
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3372      	adds	r3, #114	; 0x72
 8001a74:	22fe      	movs	r2, #254	; 0xfe
 8001a76:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fba7 	bl	80021d0 <dequeue>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	3373      	adds	r3, #115	; 0x73
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fb93 	bl	80021d0 <dequeue>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3374      	adds	r3, #116	; 0x74
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fb7f 	bl	80021d0 <dequeue>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001adc:	4619      	mov	r1, r3
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3375      	adds	r3, #117	; 0x75
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fb6b 	bl	80021d0 <dequeue>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001b04:	4619      	mov	r1, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	3376      	adds	r3, #118	; 0x76
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 fb57 	bl	80021d0 <dequeue>
 8001b22:	4603      	mov	r3, r0
 8001b24:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3377      	adds	r3, #119	; 0x77
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e019      	b.n	8001b7a <Comms_Handler+0x41e>
					data = dequeue(rfData->RXFIFO);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fb40 	bl	80021d0 <dequeue>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1d9a      	adds	r2, r3, #6
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4603      	mov	r3, r0
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3372      	adds	r3, #114	; 0x72
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	3301      	adds	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001b80:	4619      	mov	r1, r3
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3377      	adds	r3, #119	; 0x77
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	4293      	cmp	r3, r2
 8001b98:	dbd5      	blt.n	8001b46 <Comms_Handler+0x3ea>
				int newMessage = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d065      	beq.n	8001c74 <Comms_Handler+0x518>
					for(int i = 1;i<=rfData->messageNum;i++){
 8001ba8:	2301      	movs	r3, #1
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	e05b      	b.n	8001c66 <Comms_Handler+0x50a>
 8001bae:	bf00      	nop
 8001bb0:	08008460 	.word	0x08008460
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001bba:	4619      	mov	r1, r3
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3373      	adds	r3, #115	; 0x73
 8001bca:	7819      	ldrb	r1, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad2      	subs	r2, r2, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4403      	add	r3, r0
 8001be4:	3373      	adds	r3, #115	; 0x73
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4299      	cmp	r1, r3
 8001bea:	d139      	bne.n	8001c60 <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3375      	adds	r3, #117	; 0x75
 8001c02:	7819      	ldrb	r1, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4403      	add	r3, r0
 8001c1c:	3375      	adds	r3, #117	; 0x75
 8001c1e:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8001c20:	4299      	cmp	r1, r3
 8001c22:	d11d      	bne.n	8001c60 <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3374      	adds	r3, #116	; 0x74
 8001c3a:	7819      	ldrb	r1, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c42:	461a      	mov	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad2      	subs	r2, r2, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4403      	add	r3, r0
 8001c54:	3374      	adds	r3, #116	; 0x74
 8001c56:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8001c58:	4299      	cmp	r1, r3
 8001c5a:	d101      	bne.n	8001c60 <Comms_Handler+0x504>
								newMessage = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3301      	adds	r3, #1
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4293      	cmp	r3, r2
 8001c72:	dd9f      	ble.n	8001bb4 <Comms_Handler+0x458>
				if(newMessage){
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <Comms_Handler+0x52e>
					rfData->messageNum++;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c80:	3301      	adds	r3, #1
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fa5a 	bl	8002148 <is_empty>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aed3 	bne.w	8001a48 <Comms_Handler+0x2ec>
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop

08001cac <Discovery_Handler>:

void Discovery_Handler(struct rfDataStorage* rfData)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8001cb4:	20c8      	movs	r0, #200	; 0xc8
 8001cb6:	f001 f845 	bl	8002d44 <HAL_Delay>
	if(rfData->count == 0)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7a5b      	ldrb	r3, [r3, #9]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f97a 	bl	8001fbc <Im_Here>
		rfData->count = 5;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2205      	movs	r2, #5
 8001ccc:	725a      	strb	r2, [r3, #9]
	else
	{
		rfData->count--;
	}

}
 8001cce:	e005      	b.n	8001cdc <Discovery_Handler+0x30>
		rfData->count--;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7a5b      	ldrb	r3, [r3, #9]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	725a      	strb	r2, [r3, #9]
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <Message_Forwarder>:
	}

}

void Message_Forwarder(struct rfDataStorage* rfData)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	//printf("\r\nForwarding message, fwds: %d", rfData->num_fwds);
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS) )
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7a9b      	ldrb	r3, [r3, #10]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8084 	bne.w	8001dfe <Message_Forwarder+0x11a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	33c2      	adds	r3, #194	; 0xc2
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d87f      	bhi.n	8001dfe <Message_Forwarder+0x11a>
	{
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001d04:	461a      	mov	r2, r3
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3376      	adds	r3, #118	; 0x76
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3376      	adds	r3, #118	; 0x76
 8001d28:	4602      	mov	r2, r0
 8001d2a:	701a      	strb	r2, [r3, #0]
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001d32:	461a      	mov	r2, r3
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	3370      	adds	r3, #112	; 0x70
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	1c98      	adds	r0, r3, #2
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	3377      	adds	r3, #119	; 0x77
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	f000 f95b 	bl	800201c <Send>
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7a9b      	ldrb	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	4603      	mov	r3, r0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4403      	add	r3, r0
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3375      	adds	r3, #117	; 0x75
 8001d82:	7818      	ldrb	r0, [r3, #0]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	440b      	add	r3, r1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	330b      	adds	r3, #11
 8001d90:	4602      	mov	r2, r0
 8001d92:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7a9b      	ldrb	r3, [r3, #10]
 8001da0:	4619      	mov	r1, r3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4603      	mov	r3, r0
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4403      	add	r3, r0
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3374      	adds	r3, #116	; 0x74
 8001db0:	7818      	ldrb	r0, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	4413      	add	r3, r2
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001dc8:	4618      	mov	r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7a9b      	ldrb	r3, [r3, #10]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4403      	add	r3, r0
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3373      	adds	r3, #115	; 0x73
 8001dde:	7818      	ldrb	r0, [r3, #0]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	4413      	add	r3, r2
 8001dea:	330d      	adds	r3, #13
 8001dec:	4602      	mov	r2, r0
 8001dee:	701a      	strb	r2, [r3, #0]
		rfData->num_fwds++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7a9b      	ldrb	r3, [r3, #10]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	729a      	strb	r2, [r3, #10]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
	//printf("Forwarding done");
}
 8001dfc:	e0da      	b.n	8001fb4 <Message_Forwarder+0x2d0>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS )
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	33c2      	adds	r3, #194	; 0xc2
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	f200 80d6 	bhi.w	8001fb4 <Message_Forwarder+0x2d0>
		int dupe = false;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	e047      	b.n	8001ea2 <Message_Forwarder+0x1be>
			if ( rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->FWDFIFO[i].from_id )
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001e18:	4619      	mov	r1, r3
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3375      	adds	r3, #117	; 0x75
 8001e28:	7819      	ldrb	r1, [r3, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	4403      	add	r3, r0
 8001e36:	330b      	adds	r3, #11
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4299      	cmp	r1, r3
 8001e3c:	d12e      	bne.n	8001e9c <Message_Forwarder+0x1b8>
				if ( rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->FWDFIFO[i].to_id )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001e44:	4619      	mov	r1, r3
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3374      	adds	r3, #116	; 0x74
 8001e54:	7819      	ldrb	r1, [r3, #0]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	4403      	add	r3, r0
 8001e62:	330c      	adds	r3, #12
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4299      	cmp	r1, r3
 8001e68:	d118      	bne.n	8001e9c <Message_Forwarder+0x1b8>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001e70:	4619      	mov	r1, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3373      	adds	r3, #115	; 0x73
 8001e80:	7819      	ldrb	r1, [r3, #0]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4403      	add	r3, r0
 8001e8e:	330d      	adds	r3, #13
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d102      	bne.n	8001e9c <Message_Forwarder+0x1b8>
						dupe = true;
 8001e96:	2301      	movs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
						break;
 8001e9a:	e008      	b.n	8001eae <Message_Forwarder+0x1ca>
		for (int i = 0; i < rfData->num_fwds; i++)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7a9b      	ldrb	r3, [r3, #10]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	dbb1      	blt.n	8001e12 <Message_Forwarder+0x12e>
		if (dupe == false)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d17f      	bne.n	8001fb4 <Message_Forwarder+0x2d0>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7a9b      	ldrb	r3, [r3, #10]
 8001eb8:	2b14      	cmp	r3, #20
 8001eba:	d102      	bne.n	8001ec2 <Message_Forwarder+0x1de>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	729a      	strb	r2, [r3, #10]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001ec8:	4618      	mov	r0, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7a9b      	ldrb	r3, [r3, #10]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4403      	add	r3, r0
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3375      	adds	r3, #117	; 0x75
 8001ede:	7818      	ldrb	r0, [r3, #0]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	4413      	add	r3, r2
 8001eea:	330b      	adds	r3, #11
 8001eec:	4602      	mov	r2, r0
 8001eee:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7a9b      	ldrb	r3, [r3, #10]
 8001efc:	4619      	mov	r1, r3
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4603      	mov	r3, r0
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4403      	add	r3, r0
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3374      	adds	r3, #116	; 0x74
 8001f0c:	7818      	ldrb	r0, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
 8001f16:	4413      	add	r3, r2
 8001f18:	330c      	adds	r3, #12
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001f24:	4618      	mov	r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7a9b      	ldrb	r3, [r3, #10]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4403      	add	r3, r0
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3373      	adds	r3, #115	; 0x73
 8001f3a:	7818      	ldrb	r0, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	440b      	add	r3, r1
 8001f44:	4413      	add	r3, r2
 8001f46:	330d      	adds	r3, #13
 8001f48:	4602      	mov	r2, r0
 8001f4a:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001f52:	461a      	mov	r2, r3
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3376      	adds	r3, #118	; 0x76
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2d8      	uxtb	r0, r3
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3376      	adds	r3, #118	; 0x76
 8001f76:	4602      	mov	r2, r0
 8001f78:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001f80:	461a      	mov	r2, r3
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3370      	adds	r3, #112	; 0x70
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	1c98      	adds	r0, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001f98:	4619      	mov	r1, r3
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3377      	adds	r3, #119	; 0x77
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	3306      	adds	r3, #6
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f000 f834 	bl	800201c <Send>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <Im_Here>:

void Im_Here(struct rfDataStorage* rfData)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	22fe      	movs	r2, #254	; 0xfe
 8001fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2243      	movs	r2, #67	; 0x43
 8001fd0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	791a      	ldrb	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessageSize = 0;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	//printf("\r\nsending from device: %d->%d", rfData->myDevice.device_id, rfData->activeTxMessage[MSG_FROM_ID_POS]);

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002006:	3306      	adds	r3, #6
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f000 f805 	bl	800201c <Send>

}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <Send>:

}


void Send(uint8_t message[], uint8_t size)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
 800202c:	e00c      	b.n	8002048 <Send+0x2c>
		fullMessage[i] = message[i];
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	7819      	ldrb	r1, [r3, #0]
 8002036:	f107 0208 	add.w	r2, r7, #8
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	4413      	add	r3, r2
 800203e:	460a      	mov	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	429a      	cmp	r2, r3
 800204e:	dbee      	blt.n	800202e <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	e008      	b.n	8002068 <Send+0x4c>
		fullMessage[i] = 0;
 8002056:	f107 0208 	add.w	r2, r7, #8
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	4413      	add	r3, r2
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	3301      	adds	r3, #1
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	2b13      	cmp	r3, #19
 800206c:	ddf3      	ble.n	8002056 <Send+0x3a>
	}
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e00b      	b.n	800208c <Send+0x70>

		printf("\r\nsending rf: %x", fullMessage[i]);
 8002074:	f107 0208 	add.w	r2, r7, #8
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <Send+0x98>)
 8002082:	f005 f8ef 	bl	8007264 <iprintf>
	for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b13      	cmp	r3, #19
 8002090:	ddf0      	ble.n	8002074 <Send+0x58>

	}
	random_delay();
 8002092:	f000 f813 	bl	80020bc <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2214      	movs	r2, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	; (80020b8 <Send+0x9c>)
 80020a0:	f003 f9f8 	bl	8005494 <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 80020a4:	2014      	movs	r0, #20
 80020a6:	f000 fe4d 	bl	8002d44 <HAL_Delay>

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	08008478 	.word	0x08008478
 80020b8:	200000a4 	.word	0x200000a4

080020bc <random_delay>:

void random_delay()	//delays between 0 - 9999 (ms)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80020c2:	463b      	mov	r3, r7
 80020c4:	4619      	mov	r1, r3
 80020c6:	480a      	ldr	r0, [pc, #40]	; (80020f0 <random_delay+0x34>)
 80020c8:	f002 fa59 	bl	800457e <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <random_delay+0x38>)
 80020d0:	fba2 1203 	umull	r1, r2, r2, r3
 80020d4:	0992      	lsrs	r2, r2, #6
 80020d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020da:	fb01 f202 	mul.w	r2, r1, r2
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fe2e 	bl	8002d44 <HAL_Delay>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200001ac 	.word	0x200001ac
 80020f4:	10624dd3 	.word	0x10624dd3

080020f8 <create_queue>:

void create_queue(struct Queue* queue) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <is_full>:

void destroy_queue(struct Queue* queue) {
  free(queue);
}

bool is_full(struct Queue* queue) {
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002132:	2b96      	cmp	r3, #150	; 0x96
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <is_empty>:

bool is_empty(struct Queue* queue) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <enqueue>:

void enqueue(struct Queue* queue, uint8_t value) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffd3 	bl	8002124 <is_full>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11f      	bne.n	80021c4 <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 800218a:	78f9      	ldrb	r1, [r7, #3]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <enqueue+0x60>)
 800219c:	fb83 1302 	smull	r1, r3, r3, r2
 80021a0:	1119      	asrs	r1, r3, #4
 80021a2:	17d3      	asrs	r3, r2, #31
 80021a4:	1acb      	subs	r3, r1, r3
 80021a6:	2196      	movs	r1, #150	; 0x96
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80021c2:	e000      	b.n	80021c6 <enqueue+0x5a>
    return;
 80021c4:	bf00      	nop
}
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	1b4e81b5 	.word	0x1b4e81b5

080021d0 <dequeue>:

int dequeue(struct Queue* queue) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ffb5 	bl	8002148 <is_empty>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	e01f      	b.n	800222a <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <dequeue+0x64>)
 8002202:	fb83 1302 	smull	r1, r3, r3, r2
 8002206:	1119      	asrs	r1, r3, #4
 8002208:	17d3      	asrs	r3, r2, #31
 800220a:	1acb      	subs	r3, r1, r3
 800220c:	2196      	movs	r1, #150	; 0x96
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 8002228:	68fb      	ldr	r3, [r7, #12]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	1b4e81b5 	.word	0x1b4e81b5

08002238 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002244:	f001 f8bc 	bl	80033c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002248:	2001      	movs	r0, #1
 800224a:	f000 fd7b 	bl	8002d44 <HAL_Delay>
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}

08002252 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800225e:	f001 f8af 	bl	80033c0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002262:	2001      	movs	r0, #1
 8002264:	f000 fd6e 	bl	8002d44 <HAL_Delay>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002276:	bf00      	nop
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <SPI_TxByte+0x30>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b02      	cmp	r3, #2
 8002284:	d1f8      	bne.n	8002278 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002286:	1df9      	adds	r1, r7, #7
 8002288:	2364      	movs	r3, #100	; 0x64
 800228a:	2201      	movs	r2, #1
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <SPI_TxByte+0x30>)
 800228e:	f002 fa68 	bl	8004762 <HAL_SPI_Transmit>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001bc 	.word	0x200001bc

080022a0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022ac:	bf00      	nop
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <SPI_TxBuffer+0x30>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d1f8      	bne.n	80022ae <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	2364      	movs	r3, #100	; 0x64
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <SPI_TxBuffer+0x30>)
 80022c4:	f002 fa4d 	bl	8004762 <HAL_SPI_Transmit>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200001bc 	.word	0x200001bc

080022d4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80022da:	23ff      	movs	r3, #255	; 0xff
 80022dc:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80022de:	bf00      	nop
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <SPI_RxByte+0x34>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d1f8      	bne.n	80022e0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80022ee:	1dba      	adds	r2, r7, #6
 80022f0:	1df9      	adds	r1, r7, #7
 80022f2:	2364      	movs	r3, #100	; 0x64
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2301      	movs	r3, #1
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <SPI_RxByte+0x34>)
 80022fa:	f002 fba0 	bl	8004a3e <HAL_SPI_TransmitReceive>

	return data;
 80022fe:	79bb      	ldrb	r3, [r7, #6]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200001bc 	.word	0x200001bc

0800230c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002314:	f7ff ffde 	bl	80022d4 <SPI_RxByte>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <SD_ReadyWait+0x30>)
 8002330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002334:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8002336:	f7ff ffcd 	bl	80022d4 <SPI_RxByte>
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2bff      	cmp	r3, #255	; 0xff
 8002342:	d004      	beq.n	800234e <SD_ReadyWait+0x26>
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <SD_ReadyWait+0x30>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f3      	bne.n	8002336 <SD_ReadyWait+0xe>

	return res;
 800234e:	79fb      	ldrb	r3, [r7, #7]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2000049e 	.word	0x2000049e

0800235c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002362:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002366:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002368:	f7ff ff73 	bl	8002252 <DESELECT>
	for(int i = 0; i < 10; i++)
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	e005      	b.n	800237e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002372:	20ff      	movs	r0, #255	; 0xff
 8002374:	f7ff ff7a 	bl	800226c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b09      	cmp	r3, #9
 8002382:	ddf6      	ble.n	8002372 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002384:	f7ff ff58 	bl	8002238 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8002388:	2340      	movs	r3, #64	; 0x40
 800238a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800239c:	2395      	movs	r3, #149	; 0x95
 800239e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80023a0:	463b      	mov	r3, r7
 80023a2:	2106      	movs	r1, #6
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff7b 	bl	80022a0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80023aa:	e002      	b.n	80023b2 <SD_PowerOn+0x56>
	{
		cnt--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80023b2:	f7ff ff8f 	bl	80022d4 <SPI_RxByte>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d002      	beq.n	80023c2 <SD_PowerOn+0x66>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f4      	bne.n	80023ac <SD_PowerOn+0x50>
	}

	DESELECT();
 80023c2:	f7ff ff46 	bl	8002252 <DESELECT>
	SPI_TxByte(0XFF);
 80023c6:	20ff      	movs	r0, #255	; 0xff
 80023c8:	f7ff ff50 	bl	800226c <SPI_TxByte>

	PowerFlag = 1;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <SD_PowerOn+0x80>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200004a5 	.word	0x200004a5

080023e0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <SD_PowerOff+0x14>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	200004a5 	.word	0x200004a5

080023f8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <SD_CheckPower+0x14>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200004a5 	.word	0x200004a5

08002410 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <SD_RxDataBlock+0x5c>)
 800241c:	22c8      	movs	r2, #200	; 0xc8
 800241e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002420:	f7ff ff58 	bl	80022d4 <SPI_RxByte>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d104      	bne.n	8002438 <SD_RxDataBlock+0x28>
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <SD_RxDataBlock+0x5c>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f3      	bne.n	8002420 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2bfe      	cmp	r3, #254	; 0xfe
 800243c:	d001      	beq.n	8002442 <SD_RxDataBlock+0x32>
 800243e:	2300      	movs	r3, #0
 8002440:	e00f      	b.n	8002462 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5f 	bl	800230c <SPI_RxBytePtr>
	} while(len--);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	603a      	str	r2, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f4      	bne.n	8002442 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8002458:	f7ff ff3c 	bl	80022d4 <SPI_RxByte>
	SPI_RxByte();
 800245c:	f7ff ff3a 	bl	80022d4 <SPI_RxByte>

	return TRUE;
 8002460:	2301      	movs	r3, #1
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000049d 	.word	0x2000049d

08002470 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002480:	f7ff ff52 	bl	8002328 <SD_ReadyWait>
 8002484:	4603      	mov	r3, r0
 8002486:	2bff      	cmp	r3, #255	; 0xff
 8002488:	d001      	beq.n	800248e <SD_TxDataBlock+0x1e>
 800248a:	2300      	movs	r3, #0
 800248c:	e02f      	b.n	80024ee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff feeb 	bl	800226c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	2bfd      	cmp	r3, #253	; 0xfd
 800249a:	d020      	beq.n	80024de <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800249c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fefd 	bl	80022a0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80024a6:	f7ff ff15 	bl	80022d4 <SPI_RxByte>
		SPI_RxByte();
 80024aa:	f7ff ff13 	bl	80022d4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80024ae:	e00b      	b.n	80024c8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80024b0:	f7ff ff10 	bl	80022d4 <SPI_RxByte>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d006      	beq.n	80024d0 <SD_TxDataBlock+0x60>
			i++;
 80024c2:	7bbb      	ldrb	r3, [r7, #14]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80024c8:	7bbb      	ldrb	r3, [r7, #14]
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d9f0      	bls.n	80024b0 <SD_TxDataBlock+0x40>
 80024ce:	e000      	b.n	80024d2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80024d0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80024d2:	bf00      	nop
 80024d4:	f7ff fefe 	bl	80022d4 <SPI_RxByte>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0fa      	beq.n	80024d4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d101      	bne.n	80024ec <SD_TxDataBlock+0x7c>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <SD_TxDataBlock+0x7e>

	return FALSE;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	6039      	str	r1, [r7, #0]
 8002500:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002502:	f7ff ff11 	bl	8002328 <SD_ReadyWait>
 8002506:	4603      	mov	r3, r0
 8002508:	2bff      	cmp	r3, #255	; 0xff
 800250a:	d001      	beq.n	8002510 <SD_SendCmd+0x1a>
 800250c:	23ff      	movs	r3, #255	; 0xff
 800250e:	e042      	b.n	8002596 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff feaa 	bl	800226c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	0e1b      	lsrs	r3, r3, #24
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fea4 	bl	800226c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	0c1b      	lsrs	r3, r3, #16
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe9e 	bl	800226c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	b2db      	uxtb	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fe98 	bl	800226c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fe93 	bl	800226c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d102      	bne.n	8002552 <SD_SendCmd+0x5c>
 800254c:	2395      	movs	r3, #149	; 0x95
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e007      	b.n	8002562 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b48      	cmp	r3, #72	; 0x48
 8002556:	d102      	bne.n	800255e <SD_SendCmd+0x68>
 8002558:	2387      	movs	r3, #135	; 0x87
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <SD_SendCmd+0x6c>
	else crc = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fe81 	bl	800226c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b4c      	cmp	r3, #76	; 0x4c
 800256e:	d101      	bne.n	8002574 <SD_SendCmd+0x7e>
 8002570:	f7ff feb0 	bl	80022d4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002574:	230a      	movs	r3, #10
 8002576:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002578:	f7ff feac 	bl	80022d4 <SPI_RxByte>
 800257c:	4603      	mov	r3, r0
 800257e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002580:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002584:	2b00      	cmp	r3, #0
 8002586:	da05      	bge.n	8002594 <SD_SendCmd+0x9e>
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	3b01      	subs	r3, #1
 800258c:	73bb      	strb	r3, [r7, #14]
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f1      	bne.n	8002578 <SD_SendCmd+0x82>

	return res;
 8002594:	7b7b      	ldrb	r3, [r7, #13]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];
	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SD_disk_initialize+0x14>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0ec      	b.n	800278e <SD_disk_initialize+0x1ee>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80025b4:	4b78      	ldr	r3, [pc, #480]	; (8002798 <SD_disk_initialize+0x1f8>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <SD_disk_initialize+0x2a>
 80025c2:	4b75      	ldr	r3, [pc, #468]	; (8002798 <SD_disk_initialize+0x1f8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	e0e1      	b.n	800278e <SD_disk_initialize+0x1ee>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	4873      	ldr	r0, [pc, #460]	; (800279c <SD_disk_initialize+0x1fc>)
 80025d0:	f000 fef6 	bl	80033c0 <HAL_GPIO_WritePin>
	/* power on */
	SD_PowerOn();
 80025d4:	f7ff fec2 	bl	800235c <SD_PowerOn>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	486f      	ldr	r0, [pc, #444]	; (800279c <SD_disk_initialize+0x1fc>)
 80025de:	f000 feef 	bl	80033c0 <HAL_GPIO_WritePin>
	/* slave select */
	SELECT();
 80025e2:	f7ff fe29 	bl	8002238 <SELECT>
	/* check disk type */
	type = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f0:	486a      	ldr	r0, [pc, #424]	; (800279c <SD_disk_initialize+0x1fc>)
 80025f2:	f000 fee5 	bl	80033c0 <HAL_GPIO_WritePin>
	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80025f6:	2100      	movs	r1, #0
 80025f8:	2040      	movs	r0, #64	; 0x40
 80025fa:	f7ff ff7c 	bl	80024f6 <SD_SendCmd>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b01      	cmp	r3, #1
 8002602:	f040 80ac 	bne.w	800275e <SD_disk_initialize+0x1be>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002606:	2201      	movs	r2, #1
 8002608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260c:	4863      	ldr	r0, [pc, #396]	; (800279c <SD_disk_initialize+0x1fc>)
 800260e:	f000 fed7 	bl	80033c0 <HAL_GPIO_WritePin>
		/* timeout 1 sec */
		Timer1 = 1000;
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <SD_disk_initialize+0x200>)
 8002614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002618:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800261a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800261e:	2048      	movs	r0, #72	; 0x48
 8002620:	f7ff ff69 	bl	80024f6 <SD_SendCmd>
 8002624:	4603      	mov	r3, r0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d158      	bne.n	80026dc <SD_disk_initialize+0x13c>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e00c      	b.n	800264a <SD_disk_initialize+0xaa>
			{
				ocr[n] = SPI_RxByte();
 8002630:	7bfc      	ldrb	r4, [r7, #15]
 8002632:	f7ff fe4f 	bl	80022d4 <SPI_RxByte>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	f104 0310 	add.w	r3, r4, #16
 800263e:	443b      	add	r3, r7
 8002640:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	3301      	adds	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d9ef      	bls.n	8002630 <SD_disk_initialize+0x90>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002650:	7abb      	ldrb	r3, [r7, #10]
 8002652:	2b01      	cmp	r3, #1
 8002654:	f040 8083 	bne.w	800275e <SD_disk_initialize+0x1be>
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	2baa      	cmp	r3, #170	; 0xaa
 800265c:	d17f      	bne.n	800275e <SD_disk_initialize+0x1be>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800265e:	2100      	movs	r1, #0
 8002660:	2077      	movs	r0, #119	; 0x77
 8002662:	f7ff ff48 	bl	80024f6 <SD_SendCmd>
 8002666:	4603      	mov	r3, r0
 8002668:	2b01      	cmp	r3, #1
 800266a:	d807      	bhi.n	800267c <SD_disk_initialize+0xdc>
 800266c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002670:	2069      	movs	r0, #105	; 0x69
 8002672:	f7ff ff40 	bl	80024f6 <SD_SendCmd>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <SD_disk_initialize+0xe8>
				} while (Timer1);
 800267c:	4b48      	ldr	r3, [pc, #288]	; (80027a0 <SD_disk_initialize+0x200>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1eb      	bne.n	800265e <SD_disk_initialize+0xbe>
 8002686:	e000      	b.n	800268a <SD_disk_initialize+0xea>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002688:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <SD_disk_initialize+0x200>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d064      	beq.n	800275e <SD_disk_initialize+0x1be>
 8002694:	2100      	movs	r1, #0
 8002696:	207a      	movs	r0, #122	; 0x7a
 8002698:	f7ff ff2d 	bl	80024f6 <SD_SendCmd>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d15d      	bne.n	800275e <SD_disk_initialize+0x1be>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e00c      	b.n	80026c2 <SD_disk_initialize+0x122>
					{
						ocr[n] = SPI_RxByte();
 80026a8:	7bfc      	ldrb	r4, [r7, #15]
 80026aa:	f7ff fe13 	bl	80022d4 <SPI_RxByte>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	f104 0310 	add.w	r3, r4, #16
 80026b6:	443b      	add	r3, r7
 80026b8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d9ef      	bls.n	80026a8 <SD_disk_initialize+0x108>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80026c8:	7a3b      	ldrb	r3, [r7, #8]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <SD_disk_initialize+0x136>
 80026d2:	230c      	movs	r3, #12
 80026d4:	e000      	b.n	80026d8 <SD_disk_initialize+0x138>
 80026d6:	2304      	movs	r3, #4
 80026d8:	73bb      	strb	r3, [r7, #14]
 80026da:	e040      	b.n	800275e <SD_disk_initialize+0x1be>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80026dc:	2100      	movs	r1, #0
 80026de:	2077      	movs	r0, #119	; 0x77
 80026e0:	f7ff ff09 	bl	80024f6 <SD_SendCmd>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d808      	bhi.n	80026fc <SD_disk_initialize+0x15c>
 80026ea:	2100      	movs	r1, #0
 80026ec:	2069      	movs	r0, #105	; 0x69
 80026ee:	f7ff ff02 	bl	80024f6 <SD_SendCmd>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d801      	bhi.n	80026fc <SD_disk_initialize+0x15c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e000      	b.n	80026fe <SD_disk_initialize+0x15e>
 80026fc:	2301      	movs	r3, #1
 80026fe:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d10e      	bne.n	8002724 <SD_disk_initialize+0x184>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002706:	2100      	movs	r1, #0
 8002708:	2077      	movs	r0, #119	; 0x77
 800270a:	f7ff fef4 	bl	80024f6 <SD_SendCmd>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d80e      	bhi.n	8002732 <SD_disk_initialize+0x192>
 8002714:	2100      	movs	r1, #0
 8002716:	2069      	movs	r0, #105	; 0x69
 8002718:	f7ff feed 	bl	80024f6 <SD_SendCmd>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d107      	bne.n	8002732 <SD_disk_initialize+0x192>
 8002722:	e00d      	b.n	8002740 <SD_disk_initialize+0x1a0>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002724:	2100      	movs	r1, #0
 8002726:	2041      	movs	r0, #65	; 0x41
 8002728:	f7ff fee5 	bl	80024f6 <SD_SendCmd>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <SD_disk_initialize+0x19e>
				}

			} while (Timer1);
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <SD_disk_initialize+0x200>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e1      	bne.n	8002700 <SD_disk_initialize+0x160>
 800273c:	e000      	b.n	8002740 <SD_disk_initialize+0x1a0>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800273e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <SD_disk_initialize+0x200>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <SD_disk_initialize+0x1ba>
 800274a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800274e:	2050      	movs	r0, #80	; 0x50
 8002750:	f7ff fed1 	bl	80024f6 <SD_SendCmd>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <SD_disk_initialize+0x1be>
 800275a:	2300      	movs	r3, #0
 800275c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <SD_disk_initialize+0x204>)
 8002760:	7bbb      	ldrb	r3, [r7, #14]
 8002762:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002764:	f7ff fd75 	bl	8002252 <DESELECT>
	SPI_RxByte();
 8002768:	f7ff fdb4 	bl	80022d4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <SD_disk_initialize+0x1e4>
	{
		Stat &= ~STA_NOINIT;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <SD_disk_initialize+0x1f8>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SD_disk_initialize+0x1f8>)
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e001      	b.n	8002788 <SD_disk_initialize+0x1e8>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002784:	f7ff fe2c 	bl	80023e0 <SD_PowerOff>
	}

	return Stat;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <SD_disk_initialize+0x1f8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	20000004 	.word	0x20000004
 800279c:	48000800 	.word	0x48000800
 80027a0:	2000049d 	.word	0x2000049d
 80027a4:	200004a4 	.word	0x200004a4

080027a8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SD_disk_status+0x14>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e002      	b.n	80027c2 <SD_disk_status+0x1a>
	return Stat;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <SD_disk_status+0x28>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000004 	.word	0x20000004

080027d4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <SD_disk_read+0x1c>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <SD_disk_read+0x20>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e051      	b.n	8002898 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80027f4:	4b2a      	ldr	r3, [pc, #168]	; (80028a0 <SD_disk_read+0xcc>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <SD_disk_read+0x32>
 8002802:	2303      	movs	r3, #3
 8002804:	e048      	b.n	8002898 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <SD_disk_read+0xd0>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <SD_disk_read+0x44>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	025b      	lsls	r3, r3, #9
 8002816:	607b      	str	r3, [r7, #4]

	SELECT();
 8002818:	f7ff fd0e 	bl	8002238 <SELECT>

	if (count == 1)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d111      	bne.n	8002846 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	2051      	movs	r0, #81	; 0x51
 8002826:	f7ff fe66 	bl	80024f6 <SD_SendCmd>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d129      	bne.n	8002884 <SD_disk_read+0xb0>
 8002830:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002834:	68b8      	ldr	r0, [r7, #8]
 8002836:	f7ff fdeb 	bl	8002410 <SD_RxDataBlock>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d021      	beq.n	8002884 <SD_disk_read+0xb0>
 8002840:	2300      	movs	r3, #0
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	e01e      	b.n	8002884 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	2052      	movs	r0, #82	; 0x52
 800284a:	f7ff fe54 	bl	80024f6 <SD_SendCmd>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d117      	bne.n	8002884 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002858:	68b8      	ldr	r0, [r7, #8]
 800285a:	f7ff fdd9 	bl	8002410 <SD_RxDataBlock>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <SD_disk_read+0xa6>
				buff += 512;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800286a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	3b01      	subs	r3, #1
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ed      	bne.n	8002854 <SD_disk_read+0x80>
 8002878:	e000      	b.n	800287c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800287a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800287c:	2100      	movs	r1, #0
 800287e:	204c      	movs	r0, #76	; 0x4c
 8002880:	f7ff fe39 	bl	80024f6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002884:	f7ff fce5 	bl	8002252 <DESELECT>
	SPI_RxByte();
 8002888:	f7ff fd24 	bl	80022d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000004 	.word	0x20000004
 80028a4:	200004a4 	.word	0x200004a4

080028a8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <SD_disk_write+0x1c>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <SD_disk_write+0x20>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e06b      	b.n	80029a0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <SD_disk_write+0x100>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <SD_disk_write+0x32>
 80028d6:	2303      	movs	r3, #3
 80028d8:	e062      	b.n	80029a0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80028da:	4b33      	ldr	r3, [pc, #204]	; (80029a8 <SD_disk_write+0x100>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <SD_disk_write+0x44>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e059      	b.n	80029a0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80028ec:	4b2f      	ldr	r3, [pc, #188]	; (80029ac <SD_disk_write+0x104>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <SD_disk_write+0x56>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	025b      	lsls	r3, r3, #9
 80028fc:	607b      	str	r3, [r7, #4]

	SELECT();
 80028fe:	f7ff fc9b 	bl	8002238 <SELECT>

	if (count == 1)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d110      	bne.n	800292a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	2058      	movs	r0, #88	; 0x58
 800290c:	f7ff fdf3 	bl	80024f6 <SD_SendCmd>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d13a      	bne.n	800298c <SD_disk_write+0xe4>
 8002916:	21fe      	movs	r1, #254	; 0xfe
 8002918:	68b8      	ldr	r0, [r7, #8]
 800291a:	f7ff fda9 	bl	8002470 <SD_TxDataBlock>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d033      	beq.n	800298c <SD_disk_write+0xe4>
			count = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	e030      	b.n	800298c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <SD_disk_write+0x104>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002936:	2100      	movs	r1, #0
 8002938:	2077      	movs	r0, #119	; 0x77
 800293a:	f7ff fddc 	bl	80024f6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	2057      	movs	r0, #87	; 0x57
 8002942:	f7ff fdd8 	bl	80024f6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	2059      	movs	r0, #89	; 0x59
 800294a:	f7ff fdd4 	bl	80024f6 <SD_SendCmd>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d11b      	bne.n	800298c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002954:	21fc      	movs	r1, #252	; 0xfc
 8002956:	68b8      	ldr	r0, [r7, #8]
 8002958:	f7ff fd8a 	bl	8002470 <SD_TxDataBlock>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <SD_disk_write+0xd0>
				buff += 512;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002968:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ee      	bne.n	8002954 <SD_disk_write+0xac>
 8002976:	e000      	b.n	800297a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002978:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800297a:	21fd      	movs	r1, #253	; 0xfd
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fd77 	bl	8002470 <SD_TxDataBlock>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <SD_disk_write+0xe4>
			{
				count = 1;
 8002988:	2301      	movs	r3, #1
 800298a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800298c:	f7ff fc61 	bl	8002252 <DESELECT>
	SPI_RxByte();
 8002990:	f7ff fca0 	bl	80022d4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000004 	.word	0x20000004
 80029ac:	200004a4 	.word	0x200004a4

080029b0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b08b      	sub	sp, #44	; 0x2c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	603a      	str	r2, [r7, #0]
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	460b      	mov	r3, r1
 80029be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <SD_disk_ioctl+0x1e>
 80029ca:	2304      	movs	r3, #4
 80029cc:	e115      	b.n	8002bfa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80029d4:	79bb      	ldrb	r3, [r7, #6]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d124      	bne.n	8002a24 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d012      	beq.n	8002a08 <SD_disk_ioctl+0x58>
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	dc1a      	bgt.n	8002a1c <SD_disk_ioctl+0x6c>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <SD_disk_ioctl+0x40>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d006      	beq.n	80029fc <SD_disk_ioctl+0x4c>
 80029ee:	e015      	b.n	8002a1c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80029f0:	f7ff fcf6 	bl	80023e0 <SD_PowerOff>
			res = RES_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80029fa:	e0fc      	b.n	8002bf6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80029fc:	f7ff fcae 	bl	800235c <SD_PowerOn>
			res = RES_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002a06:	e0f6      	b.n	8002bf6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	1c5c      	adds	r4, r3, #1
 8002a0c:	f7ff fcf4 	bl	80023f8 <SD_CheckPower>
 8002a10:	4603      	mov	r3, r0
 8002a12:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002a1a:	e0ec      	b.n	8002bf6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a22:	e0e8      	b.n	8002bf6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002a24:	4b77      	ldr	r3, [pc, #476]	; (8002c04 <SD_disk_ioctl+0x254>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SD_disk_ioctl+0x86>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0e1      	b.n	8002bfa <SD_disk_ioctl+0x24a>

		SELECT();
 8002a36:	f7ff fbff 	bl	8002238 <SELECT>

		switch (ctrl)
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	2b0d      	cmp	r3, #13
 8002a3e:	f200 80cb 	bhi.w	8002bd8 <SD_disk_ioctl+0x228>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <SD_disk_ioctl+0x98>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002b43 	.word	0x08002b43
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002b33 	.word	0x08002b33
 8002a54:	08002bd9 	.word	0x08002bd9
 8002a58:	08002bd9 	.word	0x08002bd9
 8002a5c:	08002bd9 	.word	0x08002bd9
 8002a60:	08002bd9 	.word	0x08002bd9
 8002a64:	08002bd9 	.word	0x08002bd9
 8002a68:	08002bd9 	.word	0x08002bd9
 8002a6c:	08002bd9 	.word	0x08002bd9
 8002a70:	08002bd9 	.word	0x08002bd9
 8002a74:	08002b55 	.word	0x08002b55
 8002a78:	08002b79 	.word	0x08002b79
 8002a7c:	08002b9d 	.word	0x08002b9d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002a80:	2100      	movs	r1, #0
 8002a82:	2049      	movs	r0, #73	; 0x49
 8002a84:	f7ff fd37 	bl	80024f6 <SD_SendCmd>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f040 80a8 	bne.w	8002be0 <SD_disk_ioctl+0x230>
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2110      	movs	r1, #16
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fcba 	bl	8002410 <SD_RxDataBlock>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 809e 	beq.w	8002be0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002aa4:	7b3b      	ldrb	r3, [r7, #12]
 8002aa6:	099b      	lsrs	r3, r3, #6
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002aae:	7d7b      	ldrb	r3, [r7, #21]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	7d3b      	ldrb	r3, [r7, #20]
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002ac2:	8bfb      	ldrh	r3, [r7, #30]
 8002ac4:	029a      	lsls	r2, r3, #10
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e02e      	b.n	8002b2a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	7dbb      	ldrb	r3, [r7, #22]
 8002ad6:	09db      	lsrs	r3, r3, #7
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	7d7b      	ldrb	r3, [r7, #21]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f003 0306 	and.w	r3, r3, #6
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3302      	adds	r3, #2
 8002af0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002af4:	7d3b      	ldrb	r3, [r7, #20]
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	7cbb      	ldrb	r3, [r7, #18]
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002b1c:	8bfa      	ldrh	r2, [r7, #30]
 8002b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002b22:	3b09      	subs	r3, #9
 8002b24:	409a      	lsls	r2, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002b30:	e056      	b.n	8002be0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b38:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002b40:	e055      	b.n	8002bee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002b42:	f7ff fbf1 	bl	8002328 <SD_ReadyWait>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2bff      	cmp	r3, #255	; 0xff
 8002b4a:	d14b      	bne.n	8002be4 <SD_disk_ioctl+0x234>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002b52:	e047      	b.n	8002be4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002b54:	2100      	movs	r1, #0
 8002b56:	2049      	movs	r0, #73	; 0x49
 8002b58:	f7ff fccd 	bl	80024f6 <SD_SendCmd>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d142      	bne.n	8002be8 <SD_disk_ioctl+0x238>
 8002b62:	2110      	movs	r1, #16
 8002b64:	6a38      	ldr	r0, [r7, #32]
 8002b66:	f7ff fc53 	bl	8002410 <SD_RxDataBlock>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03b      	beq.n	8002be8 <SD_disk_ioctl+0x238>
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002b76:	e037      	b.n	8002be8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002b78:	2100      	movs	r1, #0
 8002b7a:	204a      	movs	r0, #74	; 0x4a
 8002b7c:	f7ff fcbb 	bl	80024f6 <SD_SendCmd>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d132      	bne.n	8002bec <SD_disk_ioctl+0x23c>
 8002b86:	2110      	movs	r1, #16
 8002b88:	6a38      	ldr	r0, [r7, #32]
 8002b8a:	f7ff fc41 	bl	8002410 <SD_RxDataBlock>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02b      	beq.n	8002bec <SD_disk_ioctl+0x23c>
 8002b94:	2300      	movs	r3, #0
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002b9a:	e027      	b.n	8002bec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	207a      	movs	r0, #122	; 0x7a
 8002ba0:	f7ff fca9 	bl	80024f6 <SD_SendCmd>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d116      	bne.n	8002bd8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002bb0:	e00b      	b.n	8002bca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002bb2:	6a3c      	ldr	r4, [r7, #32]
 8002bb4:	1c63      	adds	r3, r4, #1
 8002bb6:	623b      	str	r3, [r7, #32]
 8002bb8:	f7ff fb8c 	bl	80022d4 <SPI_RxByte>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d9ef      	bls.n	8002bb2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002bde:	e006      	b.n	8002bee <SD_disk_ioctl+0x23e>
			break;
 8002be0:	bf00      	nop
 8002be2:	e004      	b.n	8002bee <SD_disk_ioctl+0x23e>
			break;
 8002be4:	bf00      	nop
 8002be6:	e002      	b.n	8002bee <SD_disk_ioctl+0x23e>
			break;
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <SD_disk_ioctl+0x23e>
			break;
 8002bec:	bf00      	nop
		}

		DESELECT();
 8002bee:	f7ff fb30 	bl	8002252 <DESELECT>
		SPI_RxByte();
 8002bf2:	f7ff fb6f 	bl	80022d4 <SPI_RxByte>
	}

	return res;
 8002bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	372c      	adds	r7, #44	; 0x2c
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000004 	.word	0x20000004

08002c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c0c:	f7fe fd48 	bl	80016a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c12:	490d      	ldr	r1, [pc, #52]	; (8002c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <LoopForever+0xe>)
  movs r3, #0
 8002c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c18:	e002      	b.n	8002c20 <LoopCopyDataInit>

08002c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c1e:	3304      	adds	r3, #4

08002c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c24:	d3f9      	bcc.n	8002c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c28:	4c0a      	ldr	r4, [pc, #40]	; (8002c54 <LoopForever+0x16>)
  movs r3, #0
 8002c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c2c:	e001      	b.n	8002c32 <LoopFillZerobss>

08002c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c30:	3204      	adds	r2, #4

08002c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c34:	d3fb      	bcc.n	8002c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c36:	f004 fa01 	bl	800703c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c3a:	f7fe f867 	bl	8000d0c <main>

08002c3e <LoopForever>:

LoopForever:
    b LoopForever
 8002c3e:	e7fe      	b.n	8002c3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c48:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002c4c:	0800857c 	.word	0x0800857c
  ldr r2, =_sbss
 8002c50:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002c54:	200004d0 	.word	0x200004d0

08002c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c58:	e7fe      	b.n	8002c58 <ADC1_2_IRQHandler>

08002c5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 f961 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c6a:	200f      	movs	r0, #15
 8002c6c:	f000 f80e 	bl	8002c8c <HAL_InitTick>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	71fb      	strb	r3, [r7, #7]
 8002c7a:	e001      	b.n	8002c80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c7c:	f7fe fb14 	bl	80012a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c80:	79fb      	ldrb	r3, [r7, #7]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_InitTick+0x6c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d023      	beq.n	8002ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_InitTick+0x70>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_InitTick+0x6c>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f96d 	bl	8002f96 <HAL_SYSTICK_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b0f      	cmp	r3, #15
 8002cc6:	d809      	bhi.n	8002cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd0:	f000 f937 	bl	8002f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_InitTick+0x74>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e007      	b.n	8002cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e004      	b.n	8002cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
 8002ce6:	e001      	b.n	8002cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000008 	.word	0x20000008

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	200004a8 	.word	0x200004a8

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	200004a8 	.word	0x200004a8

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_Delay+0x44>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000000c 	.word	0x2000000c

08002d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	60d3      	str	r3, [r2, #12]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <__NVIC_GetPriorityGrouping+0x18>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	f003 0307 	and.w	r3, r3, #7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	db0b      	blt.n	8002e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	f003 021f 	and.w	r2, r3, #31
 8002e08:	4907      	ldr	r1, [pc, #28]	; (8002e28 <__NVIC_EnableIRQ+0x38>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	2001      	movs	r0, #1
 8002e12:	fa00 f202 	lsl.w	r2, r0, r2
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000e100 	.word	0xe000e100

08002e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	; (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f1c3 0307 	rsb	r3, r3, #7
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	bf28      	it	cs
 8002e9e:	2304      	movcs	r3, #4
 8002ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	2b06      	cmp	r3, #6
 8002ea8:	d902      	bls.n	8002eb0 <NVIC_EncodePriority+0x30>
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3b03      	subs	r3, #3
 8002eae:	e000      	b.n	8002eb2 <NVIC_EncodePriority+0x32>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43d9      	mvns	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed8:	4313      	orrs	r3, r2
         );
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295
 8002f0c:	f7ff ff8e 	bl	8002e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff29 	bl	8002d8c <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff3e 	bl	8002dd4 <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff8e 	bl	8002e80 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5d 	bl	8002e2c <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff31 	bl	8002df0 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d008      	beq.n	8002fd8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e022      	b.n	800301e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020e 	bic.w	r2, r2, #14
 8002fe6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f003 021c 	and.w	r2, r3, #28
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003032:	2300      	movs	r3, #0
 8003034:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d005      	beq.n	800304e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e029      	b.n	80030a2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f003 021c 	and.w	r2, r3, #28
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2101      	movs	r1, #1
 800307c:	fa01 f202 	lsl.w	r2, r1, r2
 8003080:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
    }
  }
  return status;
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ba:	e14e      	b.n	800335a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2101      	movs	r1, #1
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8140 	beq.w	8003354 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d005      	beq.n	80030ec <HAL_GPIO_Init+0x40>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d130      	bne.n	800314e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003122:	2201      	movs	r2, #1
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	091b      	lsrs	r3, r3, #4
 8003138:	f003 0201 	and.w	r2, r3, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b03      	cmp	r3, #3
 8003158:	d017      	beq.n	800318a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	2203      	movs	r2, #3
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43db      	mvns	r3, r3
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d123      	bne.n	80031de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	08da      	lsrs	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3208      	adds	r2, #8
 800319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	08da      	lsrs	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3208      	adds	r2, #8
 80031d8:	6939      	ldr	r1, [r7, #16]
 80031da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 809a 	beq.w	8003354 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003220:	4b55      	ldr	r3, [pc, #340]	; (8003378 <HAL_GPIO_Init+0x2cc>)
 8003222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_GPIO_Init+0x2cc>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6613      	str	r3, [r2, #96]	; 0x60
 800322c:	4b52      	ldr	r3, [pc, #328]	; (8003378 <HAL_GPIO_Init+0x2cc>)
 800322e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003238:	4a50      	ldr	r2, [pc, #320]	; (800337c <HAL_GPIO_Init+0x2d0>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003262:	d013      	beq.n	800328c <HAL_GPIO_Init+0x1e0>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a46      	ldr	r2, [pc, #280]	; (8003380 <HAL_GPIO_Init+0x2d4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00d      	beq.n	8003288 <HAL_GPIO_Init+0x1dc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a45      	ldr	r2, [pc, #276]	; (8003384 <HAL_GPIO_Init+0x2d8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <HAL_GPIO_Init+0x1d8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a44      	ldr	r2, [pc, #272]	; (8003388 <HAL_GPIO_Init+0x2dc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_GPIO_Init+0x1d4>
 800327c:	2303      	movs	r3, #3
 800327e:	e006      	b.n	800328e <HAL_GPIO_Init+0x1e2>
 8003280:	2307      	movs	r3, #7
 8003282:	e004      	b.n	800328e <HAL_GPIO_Init+0x1e2>
 8003284:	2302      	movs	r3, #2
 8003286:	e002      	b.n	800328e <HAL_GPIO_Init+0x1e2>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_GPIO_Init+0x1e2>
 800328c:	2300      	movs	r3, #0
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	f002 0203 	and.w	r2, r2, #3
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	4093      	lsls	r3, r2
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800329e:	4937      	ldr	r1, [pc, #220]	; (800337c <HAL_GPIO_Init+0x2d0>)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ac:	4b37      	ldr	r3, [pc, #220]	; (800338c <HAL_GPIO_Init+0x2e0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032d0:	4a2e      	ldr	r2, [pc, #184]	; (800338c <HAL_GPIO_Init+0x2e0>)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_GPIO_Init+0x2e0>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032fa:	4a24      	ldr	r2, [pc, #144]	; (800338c <HAL_GPIO_Init+0x2e0>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003300:	4b22      	ldr	r3, [pc, #136]	; (800338c <HAL_GPIO_Init+0x2e0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003324:	4a19      	ldr	r2, [pc, #100]	; (800338c <HAL_GPIO_Init+0x2e0>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <HAL_GPIO_Init+0x2e0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800334e:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HAL_GPIO_Init+0x2e0>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	3301      	adds	r3, #1
 8003358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f aea9 	bne.w	80030bc <HAL_GPIO_Init+0x10>
  }
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	40021000 	.word	0x40021000
 800337c:	40010000 	.word	0x40010000
 8003380:	48000400 	.word	0x48000400
 8003384:	48000800 	.word	0x48000800
 8003388:	48000c00 	.word	0x48000c00
 800338c:	40010400 	.word	0x40010400

08003390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	4013      	ands	r3, r2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	e001      	b.n	80033b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	807b      	strh	r3, [r7, #2]
 80033cc:	4613      	mov	r3, r2
 80033ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d0:	787b      	ldrb	r3, [r7, #1]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033d6:	887a      	ldrh	r2, [r7, #2]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033f4:	4b04      	ldr	r3, [pc, #16]	; (8003408 <HAL_PWREx_GetVoltageRange+0x18>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40007000 	.word	0x40007000

0800340c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d130      	bne.n	800347e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003428:	d038      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003432:	4a1e      	ldr	r2, [pc, #120]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2232      	movs	r2, #50	; 0x32
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	3301      	adds	r3, #1
 800344e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003450:	e002      	b.n	8003458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3b01      	subs	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003464:	d102      	bne.n	800346c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f2      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d110      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00f      	b.n	800349e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348a:	d007      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003494:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40007000 	.word	0x40007000
 80034b0:	20000000 	.word	0x20000000
 80034b4:	431bde83 	.word	0x431bde83

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f000 bc4f 	b.w	8003d6a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034cc:	4b97      	ldr	r3, [pc, #604]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d6:	4b95      	ldr	r3, [pc, #596]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80e6 	beq.w	80036ba <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d007      	beq.n	8003504 <HAL_RCC_OscConfig+0x4c>
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	f040 808d 	bne.w	8003616 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	f040 8089 	bne.w	8003616 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003504:	4b89      	ldr	r3, [pc, #548]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <HAL_RCC_OscConfig+0x66>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f000 bc26 	b.w	8003d6a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003522:	4b82      	ldr	r3, [pc, #520]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <HAL_RCC_OscConfig+0x80>
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003536:	e005      	b.n	8003544 <HAL_RCC_OscConfig+0x8c>
 8003538:	4b7c      	ldr	r3, [pc, #496]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800353a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003544:	4293      	cmp	r3, r2
 8003546:	d224      	bcs.n	8003592 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fdd9 	bl	8004104 <RCC_SetFlashLatencyFromMSIRange>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f000 bc06 	b.w	8003d6a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800355e:	4b73      	ldr	r3, [pc, #460]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a72      	ldr	r2, [pc, #456]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	496d      	ldr	r1, [pc, #436]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800357c:	4b6b      	ldr	r3, [pc, #428]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	021b      	lsls	r3, r3, #8
 800358a:	4968      	ldr	r1, [pc, #416]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
 8003590:	e025      	b.n	80035de <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003592:	4b66      	ldr	r3, [pc, #408]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a65      	ldr	r2, [pc, #404]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003598:	f043 0308 	orr.w	r3, r3, #8
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b63      	ldr	r3, [pc, #396]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	4960      	ldr	r1, [pc, #384]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b0:	4b5e      	ldr	r3, [pc, #376]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	495b      	ldr	r1, [pc, #364]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fd98 	bl	8004104 <RCC_SetFlashLatencyFromMSIRange>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e3c5      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035de:	f000 fccd 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	4950      	ldr	r1, [pc, #320]	; (8003730 <HAL_RCC_OscConfig+0x278>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	4a4e      	ldr	r2, [pc, #312]	; (8003734 <HAL_RCC_OscConfig+0x27c>)
 80035fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035fe:	4b4e      	ldr	r3, [pc, #312]	; (8003738 <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fb42 	bl	8002c8c <HAL_InitTick>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d052      	beq.n	80036b8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	e3a9      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d032      	beq.n	8003684 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a42      	ldr	r2, [pc, #264]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800362a:	f7ff fb7f 	bl	8002d2c <HAL_GetTick>
 800362e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003632:	f7ff fb7b 	bl	8002d2c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e392      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003644:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a35      	ldr	r2, [pc, #212]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003656:	f043 0308 	orr.w	r3, r3, #8
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4930      	ldr	r1, [pc, #192]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	492b      	ldr	r1, [pc, #172]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
 8003682:	e01a      	b.n	80036ba <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_RCC_OscConfig+0x274>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003690:	f7ff fb4c 	bl	8002d2c <HAL_GetTick>
 8003694:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003698:	f7ff fb48 	bl	8002d2c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e35f      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e0>
 80036b6:	e000      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d073      	beq.n	80037ae <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_OscConfig+0x220>
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d10e      	bne.n	80036f0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d063      	beq.n	80037ac <HAL_RCC_OscConfig+0x2f4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d15f      	bne.n	80037ac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e33c      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x250>
 80036fa:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a0b      	ldr	r2, [pc, #44]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e025      	b.n	8003754 <HAL_RCC_OscConfig+0x29c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003710:	d114      	bne.n	800373c <HAL_RCC_OscConfig+0x284>
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a02      	ldr	r2, [pc, #8]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e013      	b.n	8003754 <HAL_RCC_OscConfig+0x29c>
 800372c:	40021000 	.word	0x40021000
 8003730:	0800848c 	.word	0x0800848c
 8003734:	20000000 	.word	0x20000000
 8003738:	20000008 	.word	0x20000008
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a8e      	ldr	r2, [pc, #568]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b8c      	ldr	r3, [pc, #560]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a8b      	ldr	r2, [pc, #556]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7ff fae6 	bl	8002d2c <HAL_GetTick>
 8003760:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7ff fae2 	bl	8002d2c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e2f9      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003776:	4b81      	ldr	r3, [pc, #516]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x2ac>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7ff fad2 	bl	8002d2c <HAL_GetTick>
 8003788:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7ff face 	bl	8002d2c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e2e5      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379e:	4b77      	ldr	r3, [pc, #476]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x2d4>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d060      	beq.n	800387c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x314>
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d119      	bne.n	80037fa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d116      	bne.n	80037fa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037cc:	4b6b      	ldr	r3, [pc, #428]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_OscConfig+0x32c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e2c2      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	4962      	ldr	r1, [pc, #392]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f8:	e040      	b.n	800387c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003802:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a5d      	ldr	r2, [pc, #372]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380e:	f7ff fa8d 	bl	8002d2c <HAL_GetTick>
 8003812:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003816:	f7ff fa89 	bl	8002d2c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e2a0      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003828:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	494e      	ldr	r1, [pc, #312]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	e018      	b.n	800387c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384a:	4b4c      	ldr	r3, [pc, #304]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7ff fa69 	bl	8002d2c <HAL_GetTick>
 800385a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385e:	f7ff fa65 	bl	8002d2c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e27c      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003870:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f0      	bne.n	800385e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8082 	beq.w	800398e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d05f      	beq.n	8003952 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8003892:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003898:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d037      	beq.n	8003918 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d006      	beq.n	80038c0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e254      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01b      	beq.n	8003902 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038da:	f7ff fa27 	bl	8002d2c <HAL_GetTick>
 80038de:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e2:	f7ff fa23 	bl	8002d2c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b11      	cmp	r3, #17
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e23a      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1ef      	bne.n	80038e2 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003908:	f023 0210 	bic.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	491a      	ldr	r1, [pc, #104]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003918:	4b18      	ldr	r3, [pc, #96]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800391a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391e:	4a17      	ldr	r2, [pc, #92]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7ff fa00 	bl	8002d2c <HAL_GetTick>
 800392c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003930:	f7ff f9fc 	bl	8002d2c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b11      	cmp	r3, #17
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e213      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCC_OscConfig+0x478>
 8003950:	e01d      	b.n	800398e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	4b0a      	ldr	r3, [pc, #40]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 8003954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003958:	4a08      	ldr	r2, [pc, #32]	; (800397c <HAL_RCC_OscConfig+0x4c4>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003962:	f7ff f9e3 	bl	8002d2c <HAL_GetTick>
 8003966:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800396a:	f7ff f9df 	bl	8002d2c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b11      	cmp	r3, #17
 8003976:	d903      	bls.n	8003980 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1f6      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
 800397c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003980:	4ba9      	ldr	r3, [pc, #676]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1ed      	bne.n	800396a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80bd 	beq.w	8003b16 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039a2:	4ba1      	ldr	r3, [pc, #644]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10e      	bne.n	80039cc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	4b9e      	ldr	r3, [pc, #632]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	4a9d      	ldr	r2, [pc, #628]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 80039b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ba:	4b9b      	ldr	r3, [pc, #620]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039cc:	4b97      	ldr	r3, [pc, #604]	; (8003c2c <HAL_RCC_OscConfig+0x774>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <HAL_RCC_OscConfig+0x774>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a93      	ldr	r2, [pc, #588]	; (8003c2c <HAL_RCC_OscConfig+0x774>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7ff f9a2 	bl	8002d2c <HAL_GetTick>
 80039e8:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7ff f99e 	bl	8002d2c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1b5      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	4b8b      	ldr	r3, [pc, #556]	; (8003c2c <HAL_RCC_OscConfig+0x774>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d02c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003a16:	4b84      	ldr	r3, [pc, #528]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	497f      	ldr	r1, [pc, #508]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d010      	beq.n	8003a5e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a3c:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a42:	4a79      	ldr	r2, [pc, #484]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a4c:	4b76      	ldr	r3, [pc, #472]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	4a75      	ldr	r2, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5c:	e018      	b.n	8003a90 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a5e:	4b72      	ldr	r3, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	4a70      	ldr	r2, [pc, #448]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6e:	e00f      	b.n	8003a90 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a70:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a6c      	ldr	r2, [pc, #432]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a80:	4b69      	ldr	r3, [pc, #420]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a86:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7ff f948 	bl	8002d2c <HAL_GetTick>
 8003a9c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7ff f944 	bl	8002d2c <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e159      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ed      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x5e8>
 8003ac4:	e01d      	b.n	8003b02 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7ff f931 	bl	8002d2c <HAL_GetTick>
 8003aca:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7ff f92d 	bl	8002d2c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e142      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	4b50      	ldr	r3, [pc, #320]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ed      	bne.n	8003ace <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003af2:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4a46      	ldr	r2, [pc, #280]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2a:	4b3f      	ldr	r3, [pc, #252]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b30:	4a3d      	ldr	r2, [pc, #244]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7ff f8f7 	bl	8002d2c <HAL_GetTick>
 8003b3e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b42:	f7ff f8f3 	bl	8002d2c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e10a      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b54:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ef      	beq.n	8003b42 <HAL_RCC_OscConfig+0x68a>
 8003b62:	e01b      	b.n	8003b9c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b74:	f7ff f8da 	bl	8002d2c <HAL_GetTick>
 8003b78:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b7c:	f7ff f8d6 	bl	8002d2c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e0ed      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b8e:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80e1 	beq.w	8003d68 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	f040 80b5 	bne.w	8003d1a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bb0:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0203 	and.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d124      	bne.n	8003c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d11b      	bne.n	8003c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d113      	bne.n	8003c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	085b      	lsrs	r3, r3, #1
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d109      	bne.n	8003c0e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d05f      	beq.n	8003cce <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d05a      	beq.n	8003cca <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <HAL_RCC_OscConfig+0x770>)
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c20:	f7ff f884 	bl	8002d2c <HAL_GetTick>
 8003c24:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c26:	e00c      	b.n	8003c42 <HAL_RCC_OscConfig+0x78a>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7ff f87c 	bl	8002d2c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e093      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c42:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c4e:	4b49      	ldr	r3, [pc, #292]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCC_OscConfig+0x8c0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c5e:	3a01      	subs	r2, #1
 8003c60:	0112      	lsls	r2, r2, #4
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c68:	0212      	lsls	r2, r2, #8
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c70:	0852      	lsrs	r2, r2, #1
 8003c72:	3a01      	subs	r2, #1
 8003c74:	0552      	lsls	r2, r2, #21
 8003c76:	4311      	orrs	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c7c:	0852      	lsrs	r2, r2, #1
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	0652      	lsls	r2, r2, #25
 8003c82:	430a      	orrs	r2, r1
 8003c84:	493b      	ldr	r1, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c8a:	4b3a      	ldr	r3, [pc, #232]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c94:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c96:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a36      	ldr	r2, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ca0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ca2:	f7ff f843 	bl	8002d2c <HAL_GetTick>
 8003ca6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7ff f83f 	bl	8002d2c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e056      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc8:	e04e      	b.n	8003d68 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e04d      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d146      	bne.n	8003d68 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ce4:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cf2:	f7ff f81b 	bl	8002d2c <HAL_GetTick>
 8003cf6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfa:	f7ff f817 	bl	8002d2c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e02e      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x842>
 8003d18:	e026      	b.n	8003d68 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	d021      	beq.n	8003d64 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d20:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fffe 	bl	8002d2c <HAL_GetTick>
 8003d30:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fe fffa 	bl	8002d2c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e011      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d46:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	4a07      	ldr	r2, [pc, #28]	; (8003d74 <HAL_RCC_OscConfig+0x8bc>)
 8003d58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d5c:	f023 0303 	bic.w	r3, r3, #3
 8003d60:	60d3      	str	r3, [r2, #12]
 8003d62:	e001      	b.n	8003d68 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3728      	adds	r7, #40	; 0x28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000
 8003d78:	f99f808c 	.word	0xf99f808c

08003d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0e7      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 0207 	bic.w	r2, r3, #7
 8003da6:	4970      	ldr	r1, [pc, #448]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b6e      	ldr	r3, [pc, #440]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0cf      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d908      	bls.n	8003dee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ddc:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4960      	ldr	r1, [pc, #384]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d04c      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	4b5a      	ldr	r3, [pc, #360]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d121      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0a6      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d107      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d115      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e09a      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e32:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e08e      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e42:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e086      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4943      	ldr	r1, [pc, #268]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e64:	f7fe ff62 	bl	8002d2c <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fe ff5e 	bl	8002d2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e06e      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d208      	bcs.n	8003ec2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	492b      	ldr	r1, [pc, #172]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec2:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d210      	bcs.n	8003ef2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f023 0207 	bic.w	r2, r3, #7
 8003ed8:	4923      	ldr	r1, [pc, #140]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee0:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e036      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4918      	ldr	r1, [pc, #96]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1c:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4910      	ldr	r1, [pc, #64]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f30:	f000 f824 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	490b      	ldr	r1, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1f4>)
 8003f42:	5ccb      	ldrb	r3, [r1, r3]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4c:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <HAL_RCC_ClockConfig+0x1f8>)
 8003f4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1fc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fe99 	bl	8002c8c <HAL_InitTick>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	0800848c 	.word	0x0800848c
 8003f74:	20000000 	.word	0x20000000
 8003f78:	20000008 	.word	0x20000008

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8a:	4b3e      	ldr	r3, [pc, #248]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f94:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d121      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d11e      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fb0:	4b34      	ldr	r3, [pc, #208]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd8:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e004      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <HAL_RCC_GetSysClockFreq+0x114>)
 8004002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d134      	bne.n	8004074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400a:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0xa6>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d003      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0xac>
 8004020:	e005      	b.n	800402e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <HAL_RCC_GetSysClockFreq+0x110>)
 8004024:	617b      	str	r3, [r7, #20]
      break;
 8004026:	e005      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_GetSysClockFreq+0x114>)
 800402a:	617b      	str	r3, [r7, #20]
      break;
 800402c:	e002      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	617b      	str	r3, [r7, #20]
      break;
 8004032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	3301      	adds	r3, #1
 8004040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	fb03 f202 	mul.w	r2, r3, r2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	0e5b      	lsrs	r3, r3, #25
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	3301      	adds	r3, #1
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004074:	69bb      	ldr	r3, [r7, #24]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	; 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	080084a4 	.word	0x080084a4
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200

08004094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20000000 	.word	0x20000000

080040ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040b0:	f7ff fff0 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4904      	ldr	r1, [pc, #16]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000
 80040d4:	0800849c 	.word	0x0800849c

080040d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040dc:	f7ff ffda 	bl	8004094 <HAL_RCC_GetHCLKFreq>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0adb      	lsrs	r3, r3, #11
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ee:	5ccb      	ldrb	r3, [r1, r3]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000
 8004100:	0800849c 	.word	0x0800849c

08004104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004110:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800411c:	f7ff f968 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 8004120:	6178      	str	r0, [r7, #20]
 8004122:	e014      	b.n	800414e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	4a24      	ldr	r2, [pc, #144]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800412a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412e:	6593      	str	r3, [r2, #88]	; 0x58
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800413c:	f7ff f958 	bl	80033f0 <HAL_PWREx_GetVoltageRange>
 8004140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	4a1d      	ldr	r2, [pc, #116]	; (80041bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004154:	d10b      	bne.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b80      	cmp	r3, #128	; 0x80
 800415a:	d919      	bls.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2ba0      	cmp	r3, #160	; 0xa0
 8004160:	d902      	bls.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004162:	2302      	movs	r3, #2
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	e013      	b.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004168:	2301      	movs	r3, #1
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	e010      	b.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d902      	bls.n	800417a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004174:	2303      	movs	r3, #3
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	e00a      	b.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d102      	bne.n	8004186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004180:	2302      	movs	r3, #2
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	e004      	b.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b70      	cmp	r3, #112	; 0x70
 800418a:	d101      	bne.n	8004190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800418c:	2301      	movs	r3, #1
 800418e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f023 0207 	bic.w	r2, r3, #7
 8004198:	4909      	ldr	r1, [pc, #36]	; (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40022000 	.word	0x40022000

080041c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041cc:	2300      	movs	r3, #0
 80041ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041d0:	2300      	movs	r3, #0
 80041d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 809e 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041e6:	4b46      	ldr	r3, [pc, #280]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	4b40      	ldr	r3, [pc, #256]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4a3f      	ldr	r2, [pc, #252]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004206:	6593      	str	r3, [r2, #88]	; 0x58
 8004208:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004214:	2301      	movs	r3, #1
 8004216:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004218:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a39      	ldr	r2, [pc, #228]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004224:	f7fe fd82 	bl	8002d2c <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800422a:	e009      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fe fd7e 	bl	8002d2c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	74fb      	strb	r3, [r7, #19]
        break;
 800423e:	e005      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004240:	4b30      	ldr	r3, [pc, #192]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d15a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004252:	4b2b      	ldr	r3, [pc, #172]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800425c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01e      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	429a      	cmp	r2, r3
 800426c:	d019      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800426e:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004278:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800427a:	4b21      	ldr	r3, [pc, #132]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800427c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004280:	4a1f      	ldr	r2, [pc, #124]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800428a:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004296:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800429a:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d016      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe fd3e 	bl	8002d2c <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b2:	e00b      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fe fd3a 	bl	8002d2c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d902      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	74fb      	strb	r3, [r7, #19]
            break;
 80042ca:	e006      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ec      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042f6:	e009      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
 80042fc:	e006      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x148>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430c:	7c7b      	ldrb	r3, [r7, #17]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b6e      	ldr	r3, [pc, #440]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	4a6d      	ldr	r2, [pc, #436]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432a:	4b68      	ldr	r3, [pc, #416]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 0203 	bic.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4964      	ldr	r1, [pc, #400]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800434c:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 020c 	bic.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	495c      	ldr	r1, [pc, #368]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4953      	ldr	r1, [pc, #332]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004390:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004396:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	494b      	ldr	r1, [pc, #300]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043b2:	4b46      	ldr	r3, [pc, #280]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4942      	ldr	r1, [pc, #264]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043d4:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	493a      	ldr	r1, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f6:	4b35      	ldr	r3, [pc, #212]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4931      	ldr	r1, [pc, #196]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004418:	4b2c      	ldr	r3, [pc, #176]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	4929      	ldr	r1, [pc, #164]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4920      	ldr	r1, [pc, #128]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	4918      	ldr	r1, [pc, #96]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800447c:	4b13      	ldr	r3, [pc, #76]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004482:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004486:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	490a      	ldr	r1, [pc, #40]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000

080044d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e049      	b.n	8004576 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	795b      	ldrb	r3, [r3, #5]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc ffba 	bl	800146c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0204 	orr.w	r2, r2, #4
 800450c:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d104      	bne.n	8004526 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e027      	b.n	8004576 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004526:	f7fe fc01 	bl	8002d2c <HAL_GetTick>
 800452a:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800452c:	e015      	b.n	800455a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800452e:	f7fe fbfd 	bl	8002d2c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d90e      	bls.n	800455a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d107      	bne.n	800455a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2204      	movs	r2, #4
 800454e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e00d      	b.n	8004576 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d0e2      	beq.n	800452e <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004594:	2302      	movs	r3, #2
 8004596:	e03d      	b.n	8004614 <HAL_RNG_GenerateRandomNumber+0x96>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	795b      	ldrb	r3, [r3, #5]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d12c      	bne.n	8004602 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ae:	f7fe fbbd 	bl	8002d2c <HAL_GetTick>
 80045b2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80045b4:	e011      	b.n	80045da <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80045b6:	f7fe fbb9 	bl	8002d2c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d90a      	bls.n	80045da <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e01c      	b.n	8004614 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d1e6      	bne.n	80045b6 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	715a      	strb	r2, [r3, #5]
 8004600:	e004      	b.n	800460c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2204      	movs	r2, #4
 8004606:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	711a      	strb	r2, [r3, #4]

  return status;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e095      	b.n	800475a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d009      	beq.n	8004654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
 8004646:	e005      	b.n	8004654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc ff30 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004694:	d902      	bls.n	800469c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e002      	b.n	80046a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800469c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046aa:	d007      	beq.n	80046bc <HAL_SPI_Init+0xa0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	ea42 0103 	orr.w	r1, r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0204 	and.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b088      	sub	sp, #32
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_SPI_Transmit+0x22>
 8004780:	2302      	movs	r3, #2
 8004782:	e158      	b.n	8004a36 <HAL_SPI_Transmit+0x2d4>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478c:	f7fe face 	bl	8002d2c <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d002      	beq.n	80047a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a6:	e13d      	b.n	8004a24 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x52>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b8:	e134      	b.n	8004a24 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d10f      	bne.n	8004826 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d007      	beq.n	8004844 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800484c:	d94b      	bls.n	80048e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0xfa>
 8004856:	8afb      	ldrh	r3, [r7, #22]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d13e      	bne.n	80048da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004880:	e02b      	b.n	80048da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d112      	bne.n	80048b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b4:	e011      	b.n	80048da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b6:	f7fe fa39 	bl	8002d2c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d803      	bhi.n	80048ce <HAL_SPI_Transmit+0x16c>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x172>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048d8:	e0a4      	b.n	8004a24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1ce      	bne.n	8004882 <HAL_SPI_Transmit+0x120>
 80048e4:	e07c      	b.n	80049e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Transmit+0x192>
 80048ee:	8afb      	ldrh	r3, [r7, #22]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d170      	bne.n	80049d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d912      	bls.n	8004924 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b02      	subs	r3, #2
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004922:	e058      	b.n	80049d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800494a:	e044      	b.n	80049d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d12b      	bne.n	80049b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495e:	b29b      	uxth	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d912      	bls.n	800498a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	881a      	ldrh	r2, [r3, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	1c9a      	adds	r2, r3, #2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b02      	subs	r3, #2
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004988:	e025      	b.n	80049d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b0:	e011      	b.n	80049d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b2:	f7fe f9bb 	bl	8002d2c <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d803      	bhi.n	80049ca <HAL_SPI_Transmit+0x268>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d102      	bne.n	80049d0 <HAL_SPI_Transmit+0x26e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049d4:	e026      	b.n	8004a24 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1b5      	bne.n	800494c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fb5b 	bl	80050a0 <SPI_EndRxTxTransaction>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e000      	b.n	8004a24 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004a22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b08a      	sub	sp, #40	; 0x28
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x26>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e1fb      	b.n	8004e5c <HAL_SPI_TransmitReceive+0x41e>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a6c:	f7fe f95e 	bl	8002d2c <HAL_GetTick>
 8004a70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a80:	887b      	ldrh	r3, [r7, #2]
 8004a82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a88:	7efb      	ldrb	r3, [r7, #27]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d00e      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x6e>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a94:	d106      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x66>
 8004a9e:	7efb      	ldrb	r3, [r7, #27]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d003      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004aaa:	e1cd      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x80>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x80>
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ac4:	e1c0      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d003      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2205      	movs	r2, #5
 8004ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	887a      	ldrh	r2, [r7, #2]
 8004aea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	887a      	ldrh	r2, [r7, #2]
 8004af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	887a      	ldrh	r2, [r7, #2]
 8004b06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b1c:	d802      	bhi.n	8004b24 <HAL_SPI_TransmitReceive+0xe6>
 8004b1e:	8a3b      	ldrh	r3, [r7, #16]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d908      	bls.n	8004b36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	e007      	b.n	8004b46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b50:	2b40      	cmp	r3, #64	; 0x40
 8004b52:	d007      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b6c:	d97c      	bls.n	8004c68 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x13e>
 8004b76:	8a7b      	ldrh	r3, [r7, #18]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d169      	bne.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba0:	e056      	b.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d11b      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x1aa>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x1aa>
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d113      	bne.n	8004be8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d11c      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x1f2>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	b292      	uxth	r2, r2
 8004c0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	1c9a      	adds	r2, r3, #2
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c30:	f7fe f87c 	bl	8002d2c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d807      	bhi.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d003      	beq.n	8004c50 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004c4e:	e0fb      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1a3      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x164>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d19d      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x164>
 8004c66:	e0df      	b.n	8004e28 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_SPI_TransmitReceive+0x23a>
 8004c70:	8a7b      	ldrh	r3, [r7, #18]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f040 80cb 	bne.w	8004e0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d912      	bls.n	8004ca8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b02      	subs	r3, #2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca6:	e0b2      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cce:	e09e      	b.n	8004e0e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d134      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02f      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d12c      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d912      	bls.n	8004d1e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b02      	subs	r3, #2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d1c:	e012      	b.n	8004d44 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	7812      	ldrb	r2, [r2, #0]
 8004d2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d148      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x3aa>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d042      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d923      	bls.n	8004db6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	1c9a      	adds	r2, r3, #2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b02      	subs	r3, #2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d81f      	bhi.n	8004de4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	e016      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f103 020c 	add.w	r2, r3, #12
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004de4:	2301      	movs	r3, #1
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004de8:	f7fd ffa0 	bl	8002d2c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d803      	bhi.n	8004e00 <HAL_SPI_TransmitReceive+0x3c2>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfe:	d102      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x3c8>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e0c:	e01c      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f47f af5b 	bne.w	8004cd0 <HAL_SPI_TransmitReceive+0x292>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f47f af54 	bne.w	8004cd0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e28:	69fa      	ldr	r2, [r7, #28]
 8004e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f937 	bl	80050a0 <SPI_EndRxTxTransaction>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d006      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60
 8004e44:	e000      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3728      	adds	r7, #40	; 0x28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e74:	f7fd ff5a 	bl	8002d2c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e84:	f7fd ff52 	bl	8002d2c <HAL_GetTick>
 8004e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	015b      	lsls	r3, r3, #5
 8004e90:	0d1b      	lsrs	r3, r3, #20
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9a:	e054      	b.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d050      	beq.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea4:	f7fd ff42 	bl	8002d2c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d902      	bls.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d13d      	bne.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d111      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	d004      	beq.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d107      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f00:	d10f      	bne.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e017      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d19b      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000000 	.word	0x20000000

08004f74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f86:	f7fd fed1 	bl	8002d2c <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f96:	f7fd fec9 	bl	8002d2c <HAL_GetTick>
 8004f9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fa4:	4b3d      	ldr	r3, [pc, #244]	; (800509c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00da      	lsls	r2, r3, #3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	0d1b      	lsrs	r3, r3, #20
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fbc:	e060      	b.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fc4:	d107      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d050      	beq.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fde:	f7fd fea5 	bl	8002d2c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d902      	bls.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d13d      	bne.n	8005070 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005002:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500c:	d111      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005016:	d004      	beq.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d107      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503a:	d10f      	bne.n	800505c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e010      	b.n	8005092 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3b01      	subs	r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d196      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000000 	.word	0x20000000

080050a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff ff5b 	bl	8004f74 <SPI_WaitFifoStateUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e027      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fec0 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e014      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff ff34 	bl	8004f74 <SPI_WaitFifoStateUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e000      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e040      	b.n	80051c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc f8ce 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2224      	movs	r2, #36	; 0x24
 8005158:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fe8a 	bl	8005e84 <UART_SetConfig>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e022      	b.n	80051c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f001 f8d8 	bl	8006338 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f001 f95f 	bl	800647c <UART_CheckIdleState>
 80051be:	4603      	mov	r3, r0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051dc:	2b20      	cmp	r3, #32
 80051de:	f040 8082 	bne.w	80052e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <HAL_UART_Transmit+0x26>
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07a      	b.n	80052e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_UART_Transmit+0x38>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e073      	b.n	80052e8 <HAL_UART_Transmit+0x120>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2221      	movs	r2, #33	; 0x21
 8005214:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005216:	f7fd fd89 	bl	8002d2c <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	88fa      	ldrh	r2, [r7, #6]
 8005220:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d108      	bne.n	8005248 <HAL_UART_Transmit+0x80>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d104      	bne.n	8005248 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	e003      	b.n	8005250 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005258:	e02d      	b.n	80052b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2200      	movs	r2, #0
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f001 f952 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e039      	b.n	80052e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005286:	b292      	uxth	r2, r2
 8005288:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	3302      	adds	r3, #2
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	e008      	b.n	80052a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b292      	uxth	r2, r2
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1cb      	bne.n	800525a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f001 f91e 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e005      	b.n	80052e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005304:	2b20      	cmp	r3, #32
 8005306:	f040 80bf 	bne.w	8005488 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <HAL_UART_Receive+0x26>
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0b7      	b.n	800548a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_UART_Receive+0x38>
 8005324:	2302      	movs	r3, #2
 8005326:	e0b0      	b.n	800548a <HAL_UART_Receive+0x19a>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2222      	movs	r2, #34	; 0x22
 800533c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005344:	f7fd fcf2 	bl	8002d2c <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d10e      	bne.n	8005382 <HAL_UART_Receive+0x92>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <HAL_UART_Receive+0x88>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005376:	e02d      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	22ff      	movs	r2, #255	; 0xff
 800537c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005380:	e028      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_UART_Receive+0xb6>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_UART_Receive+0xac>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	22ff      	movs	r2, #255	; 0xff
 8005396:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800539a:	e01b      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	227f      	movs	r2, #127	; 0x7f
 80053a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053a4:	e016      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053ae:	d10d      	bne.n	80053cc <HAL_UART_Receive+0xdc>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_UART_Receive+0xd2>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	227f      	movs	r2, #127	; 0x7f
 80053bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053c0:	e008      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	223f      	movs	r2, #63	; 0x3f
 80053c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ca:	e003      	b.n	80053d4 <HAL_UART_Receive+0xe4>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e4:	d108      	bne.n	80053f8 <HAL_UART_Receive+0x108>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	e003      	b.n	8005400 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005408:	e033      	b.n	8005472 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2120      	movs	r1, #32
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f001 f87a 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e032      	b.n	800548a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10c      	bne.n	8005444 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005430:	b29a      	uxth	r2, r3
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	4013      	ands	r3, r2
 8005436:	b29a      	uxth	r2, r3
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	3302      	adds	r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	e00d      	b.n	8005460 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800544a:	b29b      	uxth	r3, r3
 800544c:	b2da      	uxtb	r2, r3
 800544e:	8a7b      	ldrh	r3, [r7, #18]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	4013      	ands	r3, r2
 8005454:	b2da      	uxtb	r2, r3
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1c5      	bne.n	800540a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005494:	b480      	push	{r7}
 8005496:	b08b      	sub	sp, #44	; 0x2c
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d156      	bne.n	8005558 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <HAL_UART_Transmit_IT+0x22>
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e04f      	b.n	800555a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Transmit_IT+0x34>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e048      	b.n	800555a <HAL_UART_Transmit_IT+0xc6>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	88fa      	ldrh	r2, [r7, #6]
 80054da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2221      	movs	r2, #33	; 0x21
 80054f8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005502:	d107      	bne.n	8005514 <HAL_UART_Transmit_IT+0x80>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4a16      	ldr	r2, [pc, #88]	; (8005568 <HAL_UART_Transmit_IT+0xd4>)
 8005510:	669a      	str	r2, [r3, #104]	; 0x68
 8005512:	e002      	b.n	800551a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <HAL_UART_Transmit_IT+0xd8>)
 8005518:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	e853 3f00 	ldrex	r3, [r3]
 800552e:	613b      	str	r3, [r7, #16]
   return(result);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005544:	69f9      	ldr	r1, [r7, #28]
 8005546:	6a3a      	ldr	r2, [r7, #32]
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	61bb      	str	r3, [r7, #24]
   return(result);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1e6      	bne.n	8005522 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e000      	b.n	800555a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005558:	2302      	movs	r3, #2
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	372c      	adds	r7, #44	; 0x2c
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	08006abf 	.word	0x08006abf
 800556c:	08006a07 	.word	0x08006a07

08005570 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	2b20      	cmp	r3, #32
 8005584:	d142      	bne.n	800560c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_UART_Receive_IT+0x22>
 800558c:	88fb      	ldrh	r3, [r7, #6]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e03b      	b.n	800560e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Receive_IT+0x34>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e034      	b.n	800560e <HAL_UART_Receive_IT+0x9e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a18      	ldr	r2, [pc, #96]	; (8005618 <HAL_UART_Receive_IT+0xa8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01f      	beq.n	80055fc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	613b      	str	r3, [r7, #16]
   return(result);
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	69f9      	ldr	r1, [r7, #28]
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e6      	bne.n	80055ca <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	461a      	mov	r2, r3
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f001 f848 	bl	8006698 <UART_Start_Receive_IT>
 8005608:	4603      	mov	r3, r0
 800560a:	e000      	b.n	800560e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40008000 	.word	0x40008000

0800561c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b0a2      	sub	sp, #136	; 0x88
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8005624:	2301      	movs	r3, #1
 8005626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800563a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800563e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	461a      	mov	r2, r3
 8005648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800564c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800564e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005652:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800565a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e4      	bne.n	800562a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005680:	65ba      	str	r2, [r7, #88]	; 0x58
 8005682:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005698:	2b01      	cmp	r3, #1
 800569a:	d118      	bne.n	80056ce <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ba:	647b      	str	r3, [r7, #68]	; 0x44
 80056bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00f      	beq.n	80056f6 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d104      	bne.n	80056ee <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e8:	4a5e      	ldr	r2, [pc, #376]	; (8005864 <HAL_UART_Abort_IT+0x248>)
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
 80056ec:	e003      	b.n	80056f6 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	2200      	movs	r2, #0
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00f      	beq.n	800571e <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b40      	cmp	r3, #64	; 0x40
 800570a:	d104      	bne.n	8005716 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	4a55      	ldr	r2, [pc, #340]	; (8005868 <HAL_UART_Abort_IT+0x24c>)
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
 8005714:	e003      	b.n	800571e <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	2200      	movs	r2, #0
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005728:	2b80      	cmp	r3, #128	; 0x80
 800572a:	d12d      	bne.n	8005788 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	623b      	str	r3, [r7, #32]
   return(result);
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005742:	677b      	str	r3, [r7, #116]	; 0x74
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3308      	adds	r3, #8
 800574a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800574c:	633a      	str	r2, [r7, #48]	; 0x30
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e5      	bne.n	800572c <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00f      	beq.n	8005788 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576c:	4618      	mov	r0, r3
 800576e:	f7fd fc5c 	bl	800302a <HAL_DMA_Abort_IT>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d004      	beq.n	8005782 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800577c:	2200      	movs	r2, #0
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
 8005780:	e002      	b.n	8005788 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	d130      	bne.n	80057f8 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	673b      	str	r3, [r7, #112]	; 0x70
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80057b6:	61fa      	str	r2, [r7, #28]
 80057b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	69b9      	ldr	r1, [r7, #24]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	617b      	str	r3, [r7, #20]
   return(result);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d012      	beq.n	80057f8 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd fc27 	bl	800302a <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e6:	2200      	movs	r2, #0
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057f0:	e002      	b.n	80057f8 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 80057f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d12b      	bne.n	8005858 <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	220f      	movs	r2, #15
 800582a:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	8b1b      	ldrh	r3, [r3, #24]
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0208 	orr.w	r2, r2, #8
 800583c:	b292      	uxth	r2, r2
 800583e:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fb00 	bl	8005e58 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3788      	adds	r7, #136	; 0x88
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	0800691f 	.word	0x0800691f
 8005868:	08006989 	.word	0x08006989

0800586c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b0ba      	sub	sp, #232	; 0xe8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005896:	f640 030f 	movw	r3, #2063	; 0x80f
 800589a:	4013      	ands	r3, r2
 800589c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d115      	bne.n	80058d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00f      	beq.n	80058d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 82a6 	beq.w	8005e16 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
      }
      return;
 80058d2:	e2a0      	b.n	8005e16 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80058d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8117 	beq.w	8005b0c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058ee:	4b85      	ldr	r3, [pc, #532]	; (8005b04 <HAL_UART_IRQHandler+0x298>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 810a 	beq.w	8005b0c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d011      	beq.n	8005928 <HAL_UART_IRQHandler+0xbc>
 8005904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800591e:	f043 0201 	orr.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d011      	beq.n	8005958 <HAL_UART_IRQHandler+0xec>
 8005934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2202      	movs	r2, #2
 8005946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594e:	f043 0204 	orr.w	r2, r3, #4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d011      	beq.n	8005988 <HAL_UART_IRQHandler+0x11c>
 8005964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2204      	movs	r2, #4
 8005976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800597e:	f043 0202 	orr.w	r2, r3, #2
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d017      	beq.n	80059c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005998:	f003 0320 	and.w	r3, r3, #32
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2208      	movs	r2, #8
 80059b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ba:	f043 0208 	orr.w	r2, r3, #8
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d012      	beq.n	80059f6 <HAL_UART_IRQHandler+0x18a>
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 820c 	beq.w	8005e1a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d04f      	beq.n	8005aee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 feec 	bl	800682c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d141      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3308      	adds	r3, #8
 8005a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1d9      	bne.n	8005a62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <HAL_UART_IRQHandler+0x29c>)
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fab1 	bl	800302a <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d017      	beq.n	8005afe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	e00f      	b.n	8005afe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9b0 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	e00b      	b.n	8005afe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f9ac 	bl	8005e44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e007      	b.n	8005afe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9a8 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005afc:	e18d      	b.n	8005e1a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afe:	bf00      	nop
    return;
 8005b00:	e18b      	b.n	8005e1a <HAL_UART_IRQHandler+0x5ae>
 8005b02:	bf00      	nop
 8005b04:	04000120 	.word	0x04000120
 8005b08:	080068f3 	.word	0x080068f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 8146 	bne.w	8005da2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 813f 	beq.w	8005da2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8138 	beq.w	8005da2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2210      	movs	r2, #16
 8005b38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	f040 80b4 	bne.w	8005cb2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b56:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 815f 	beq.w	8005e1e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	f080 8157 	bcs.w	8005e1e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f040 8085 	bne.w	8005c96 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1da      	bne.n	8005b8c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e1      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e3      	bne.n	8005c12 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c66:	f023 0310 	bic.w	r3, r3, #16
 8005c6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e4      	bne.n	8005c56 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fd f98c 	bl	8002fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8de 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb0:	e0b5      	b.n	8005e1e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80a7 	beq.w	8005e22 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a2 	beq.w	8005e22 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
 8005d02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e4      	bne.n	8005cde <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	623b      	str	r3, [r7, #32]
   return(result);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d38:	633a      	str	r2, [r7, #48]	; 0x30
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e3      	bne.n	8005d14 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e4      	bne.n	8005d5e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f866 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005da0:	e03f      	b.n	8005e22 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <HAL_UART_IRQHandler+0x560>
 8005dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f001 f864 	bl	8006e92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dca:	e02d      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01c      	beq.n	8005e26 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
    }
    return;
 8005df4:	e017      	b.n	8005e26 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d012      	beq.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 feb5 	bl	8006b7e <UART_EndTransmit_IT>
    return;
 8005e14:	e008      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e16:	bf00      	nop
 8005e18:	e006      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e1a:	bf00      	nop
 8005e1c:	e004      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005e26:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e28:	37e8      	adds	r7, #232	; 0xe8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop

08005e30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	460b      	mov	r3, r1
 8005e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b08a      	sub	sp, #40	; 0x28
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b9e      	ldr	r3, [pc, #632]	; (800612c <UART_SetConfig+0x2a8>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a93      	ldr	r2, [pc, #588]	; (8006130 <UART_SetConfig+0x2ac>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	4313      	orrs	r3, r2
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a8a      	ldr	r2, [pc, #552]	; (8006134 <UART_SetConfig+0x2b0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d126      	bne.n	8005f5c <UART_SetConfig+0xd8>
 8005f0e:	4b8a      	ldr	r3, [pc, #552]	; (8006138 <UART_SetConfig+0x2b4>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f003 0303 	and.w	r3, r3, #3
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d81b      	bhi.n	8005f54 <UART_SetConfig+0xd0>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0xa0>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	08005f3d 	.word	0x08005f3d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f3a:	e0ab      	b.n	8006094 <UART_SetConfig+0x210>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f42:	e0a7      	b.n	8006094 <UART_SetConfig+0x210>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4a:	e0a3      	b.n	8006094 <UART_SetConfig+0x210>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f52:	e09f      	b.n	8006094 <UART_SetConfig+0x210>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5a:	e09b      	b.n	8006094 <UART_SetConfig+0x210>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a76      	ldr	r2, [pc, #472]	; (800613c <UART_SetConfig+0x2b8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d138      	bne.n	8005fd8 <UART_SetConfig+0x154>
 8005f66:	4b74      	ldr	r3, [pc, #464]	; (8006138 <UART_SetConfig+0x2b4>)
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	f003 030c 	and.w	r3, r3, #12
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d82d      	bhi.n	8005fd0 <UART_SetConfig+0x14c>
 8005f74:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0xf8>)
 8005f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7a:	bf00      	nop
 8005f7c:	08005fb1 	.word	0x08005fb1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fd1 	.word	0x08005fd1
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb6:	e06d      	b.n	8006094 <UART_SetConfig+0x210>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fbe:	e069      	b.n	8006094 <UART_SetConfig+0x210>
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc6:	e065      	b.n	8006094 <UART_SetConfig+0x210>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fce:	e061      	b.n	8006094 <UART_SetConfig+0x210>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd6:	e05d      	b.n	8006094 <UART_SetConfig+0x210>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a58      	ldr	r2, [pc, #352]	; (8006140 <UART_SetConfig+0x2bc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d125      	bne.n	800602e <UART_SetConfig+0x1aa>
 8005fe2:	4b55      	ldr	r3, [pc, #340]	; (8006138 <UART_SetConfig+0x2b4>)
 8005fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fec:	2b30      	cmp	r3, #48	; 0x30
 8005fee:	d016      	beq.n	800601e <UART_SetConfig+0x19a>
 8005ff0:	2b30      	cmp	r3, #48	; 0x30
 8005ff2:	d818      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d00a      	beq.n	800600e <UART_SetConfig+0x18a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d814      	bhi.n	8006026 <UART_SetConfig+0x1a2>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <UART_SetConfig+0x182>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d008      	beq.n	8006016 <UART_SetConfig+0x192>
 8006004:	e00f      	b.n	8006026 <UART_SetConfig+0x1a2>
 8006006:	2300      	movs	r3, #0
 8006008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600c:	e042      	b.n	8006094 <UART_SetConfig+0x210>
 800600e:	2302      	movs	r3, #2
 8006010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006014:	e03e      	b.n	8006094 <UART_SetConfig+0x210>
 8006016:	2304      	movs	r3, #4
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601c:	e03a      	b.n	8006094 <UART_SetConfig+0x210>
 800601e:	2308      	movs	r3, #8
 8006020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006024:	e036      	b.n	8006094 <UART_SetConfig+0x210>
 8006026:	2310      	movs	r3, #16
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602c:	e032      	b.n	8006094 <UART_SetConfig+0x210>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a3f      	ldr	r2, [pc, #252]	; (8006130 <UART_SetConfig+0x2ac>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d12a      	bne.n	800608e <UART_SetConfig+0x20a>
 8006038:	4b3f      	ldr	r3, [pc, #252]	; (8006138 <UART_SetConfig+0x2b4>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006042:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006046:	d01a      	beq.n	800607e <UART_SetConfig+0x1fa>
 8006048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800604c:	d81b      	bhi.n	8006086 <UART_SetConfig+0x202>
 800604e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006052:	d00c      	beq.n	800606e <UART_SetConfig+0x1ea>
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006058:	d815      	bhi.n	8006086 <UART_SetConfig+0x202>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <UART_SetConfig+0x1e2>
 800605e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006062:	d008      	beq.n	8006076 <UART_SetConfig+0x1f2>
 8006064:	e00f      	b.n	8006086 <UART_SetConfig+0x202>
 8006066:	2300      	movs	r3, #0
 8006068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606c:	e012      	b.n	8006094 <UART_SetConfig+0x210>
 800606e:	2302      	movs	r3, #2
 8006070:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006074:	e00e      	b.n	8006094 <UART_SetConfig+0x210>
 8006076:	2304      	movs	r3, #4
 8006078:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607c:	e00a      	b.n	8006094 <UART_SetConfig+0x210>
 800607e:	2308      	movs	r3, #8
 8006080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006084:	e006      	b.n	8006094 <UART_SetConfig+0x210>
 8006086:	2310      	movs	r3, #16
 8006088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608c:	e002      	b.n	8006094 <UART_SetConfig+0x210>
 800608e:	2310      	movs	r3, #16
 8006090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a25      	ldr	r2, [pc, #148]	; (8006130 <UART_SetConfig+0x2ac>)
 800609a:	4293      	cmp	r3, r2
 800609c:	f040 808a 	bne.w	80061b4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d824      	bhi.n	80060f2 <UART_SetConfig+0x26e>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x22c>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060f3 	.word	0x080060f3
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060f3 	.word	0x080060f3
 80060c0:	080060e3 	.word	0x080060e3
 80060c4:	080060f3 	.word	0x080060f3
 80060c8:	080060f3 	.word	0x080060f3
 80060cc:	080060f3 	.word	0x080060f3
 80060d0:	080060eb 	.word	0x080060eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fd ffea 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e010      	b.n	80060fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060dc:	4b19      	ldr	r3, [pc, #100]	; (8006144 <UART_SetConfig+0x2c0>)
 80060de:	61fb      	str	r3, [r7, #28]
        break;
 80060e0:	e00d      	b.n	80060fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060e2:	f7fd ff4b 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 80060e6:	61f8      	str	r0, [r7, #28]
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8109 	beq.w	8006318 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	4413      	add	r3, r2
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	429a      	cmp	r2, r3
 8006114:	d305      	bcc.n	8006122 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	429a      	cmp	r2, r3
 8006120:	d912      	bls.n	8006148 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006128:	e0f6      	b.n	8006318 <UART_SetConfig+0x494>
 800612a:	bf00      	nop
 800612c:	efff69f3 	.word	0xefff69f3
 8006130:	40008000 	.word	0x40008000
 8006134:	40013800 	.word	0x40013800
 8006138:	40021000 	.word	0x40021000
 800613c:	40004400 	.word	0x40004400
 8006140:	40004800 	.word	0x40004800
 8006144:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	2200      	movs	r2, #0
 800614c:	461c      	mov	r4, r3
 800614e:	4615      	mov	r5, r2
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	022b      	lsls	r3, r5, #8
 800615a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800615e:	0222      	lsls	r2, r4, #8
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	6849      	ldr	r1, [r1, #4]
 8006164:	0849      	lsrs	r1, r1, #1
 8006166:	2000      	movs	r0, #0
 8006168:	4688      	mov	r8, r1
 800616a:	4681      	mov	r9, r0
 800616c:	eb12 0a08 	adds.w	sl, r2, r8
 8006170:	eb43 0b09 	adc.w	fp, r3, r9
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	607a      	str	r2, [r7, #4]
 800617e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006182:	4650      	mov	r0, sl
 8006184:	4659      	mov	r1, fp
 8006186:	f7fa f873 	bl	8000270 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4613      	mov	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006198:	d308      	bcc.n	80061ac <UART_SetConfig+0x328>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a0:	d204      	bcs.n	80061ac <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	60da      	str	r2, [r3, #12]
 80061aa:	e0b5      	b.n	8006318 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80061b2:	e0b1      	b.n	8006318 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061bc:	d15d      	bne.n	800627a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80061be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d827      	bhi.n	8006216 <UART_SetConfig+0x392>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0x348>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061f1 	.word	0x080061f1
 80061d0:	080061f9 	.word	0x080061f9
 80061d4:	08006201 	.word	0x08006201
 80061d8:	08006217 	.word	0x08006217
 80061dc:	08006207 	.word	0x08006207
 80061e0:	08006217 	.word	0x08006217
 80061e4:	08006217 	.word	0x08006217
 80061e8:	08006217 	.word	0x08006217
 80061ec:	0800620f 	.word	0x0800620f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7fd ff5c 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80061f4:	61f8      	str	r0, [r7, #28]
        break;
 80061f6:	e014      	b.n	8006222 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061f8:	f7fd ff6e 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 80061fc:	61f8      	str	r0, [r7, #28]
        break;
 80061fe:	e010      	b.n	8006222 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006200:	4b4c      	ldr	r3, [pc, #304]	; (8006334 <UART_SetConfig+0x4b0>)
 8006202:	61fb      	str	r3, [r7, #28]
        break;
 8006204:	e00d      	b.n	8006222 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006206:	f7fd feb9 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 800620a:	61f8      	str	r0, [r7, #28]
        break;
 800620c:	e009      	b.n	8006222 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	61fb      	str	r3, [r7, #28]
        break;
 8006214:	e005      	b.n	8006222 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d077      	beq.n	8006318 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	005a      	lsls	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	441a      	add	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d916      	bls.n	8006272 <UART_SetConfig+0x3ee>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d212      	bcs.n	8006272 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	b29b      	uxth	r3, r3
 8006250:	f023 030f 	bic.w	r3, r3, #15
 8006254:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	b29b      	uxth	r3, r3
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	b29a      	uxth	r2, r3
 8006262:	8afb      	ldrh	r3, [r7, #22]
 8006264:	4313      	orrs	r3, r2
 8006266:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	8afa      	ldrh	r2, [r7, #22]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e052      	b.n	8006318 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006278:	e04e      	b.n	8006318 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800627a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800627e:	2b08      	cmp	r3, #8
 8006280:	d827      	bhi.n	80062d2 <UART_SetConfig+0x44e>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <UART_SetConfig+0x404>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062d3 	.word	0x080062d3
 80062a0:	080062d3 	.word	0x080062d3
 80062a4:	080062d3 	.word	0x080062d3
 80062a8:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062ac:	f7fd fefe 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80062b0:	61f8      	str	r0, [r7, #28]
        break;
 80062b2:	e014      	b.n	80062de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062b4:	f7fd ff10 	bl	80040d8 <HAL_RCC_GetPCLK2Freq>
 80062b8:	61f8      	str	r0, [r7, #28]
        break;
 80062ba:	e010      	b.n	80062de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <UART_SetConfig+0x4b0>)
 80062be:	61fb      	str	r3, [r7, #28]
        break;
 80062c0:	e00d      	b.n	80062de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fd fe5b 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 80062c6:	61f8      	str	r0, [r7, #28]
        break;
 80062c8:	e009      	b.n	80062de <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	61fb      	str	r3, [r7, #28]
        break;
 80062d0:	e005      	b.n	80062de <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062dc:	bf00      	nop
    }

    if (pclk != 0U)
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d019      	beq.n	8006318 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	085a      	lsrs	r2, r3, #1
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	441a      	add	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2b0f      	cmp	r3, #15
 80062fc:	d909      	bls.n	8006312 <UART_SetConfig+0x48e>
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006304:	d205      	bcs.n	8006312 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	b29a      	uxth	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e002      	b.n	8006318 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006324:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006328:	4618      	mov	r0, r3
 800632a:	3728      	adds	r7, #40	; 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006332:	bf00      	nop
 8006334:	00f42400 	.word	0x00f42400

08006338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	f003 0308 	and.w	r3, r3, #8
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00a      	beq.n	800640c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006436:	d10a      	bne.n	800644e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	605a      	str	r2, [r3, #4]
  }
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af02      	add	r7, sp, #8
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800648c:	f7fc fc4e 	bl	8002d2c <HAL_GetTick>
 8006490:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0308 	and.w	r3, r3, #8
 800649c:	2b08      	cmp	r3, #8
 800649e:	d10e      	bne.n	80064be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f82d 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e023      	b.n	8006506 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d10e      	bne.n	80064ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f817 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e00d      	b.n	8006506 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2220      	movs	r2, #32
 80064ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b09c      	sub	sp, #112	; 0x70
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651e:	e0a5      	b.n	800666c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	f000 80a1 	beq.w	800666c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fc fbff 	bl	8002d2c <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x32>
 800653a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800653c:	2b00      	cmp	r3, #0
 800653e:	d13e      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800654e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006554:	667b      	str	r3, [r7, #100]	; 0x64
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800655e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006560:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800656c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e6      	bne.n	8006540 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	663b      	str	r3, [r7, #96]	; 0x60
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006592:	64ba      	str	r2, [r7, #72]	; 0x48
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e067      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d04f      	beq.n	800666c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065da:	d147      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800660a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e6      	bne.n	80065e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3308      	adds	r3, #8
 800661e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	e853 3f00 	ldrex	r3, [r3]
 8006626:	613b      	str	r3, [r7, #16]
   return(result);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3308      	adds	r3, #8
 8006636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006638:	623a      	str	r2, [r7, #32]
 800663a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	69f9      	ldr	r1, [r7, #28]
 800663e:	6a3a      	ldr	r2, [r7, #32]
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	61bb      	str	r3, [r7, #24]
   return(result);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e5      	bne.n	8006618 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e010      	b.n	800668e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	4013      	ands	r3, r2
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	429a      	cmp	r2, r3
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	429a      	cmp	r2, r3
 8006688:	f43f af4a 	beq.w	8006520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3770      	adds	r7, #112	; 0x70
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006698:	b480      	push	{r7}
 800669a:	b097      	sub	sp, #92	; 0x5c
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	88fa      	ldrh	r2, [r7, #6]
 80066b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ca:	d10e      	bne.n	80066ea <UART_Start_Receive_IT+0x52>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <UART_Start_Receive_IT+0x48>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066de:	e02d      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	22ff      	movs	r2, #255	; 0xff
 80066e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066e8:	e028      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10d      	bne.n	800670e <UART_Start_Receive_IT+0x76>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d104      	bne.n	8006704 <UART_Start_Receive_IT+0x6c>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	22ff      	movs	r2, #255	; 0xff
 80066fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006702:	e01b      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	227f      	movs	r2, #127	; 0x7f
 8006708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670c:	e016      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006716:	d10d      	bne.n	8006734 <UART_Start_Receive_IT+0x9c>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <UART_Start_Receive_IT+0x92>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	227f      	movs	r2, #127	; 0x7f
 8006724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006728:	e008      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	223f      	movs	r2, #63	; 0x3f
 800672e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006732:	e003      	b.n	800673c <UART_Start_Receive_IT+0xa4>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2222      	movs	r2, #34	; 0x22
 8006748:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f043 0301 	orr.w	r3, r3, #1
 8006760:	657b      	str	r3, [r7, #84]	; 0x54
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800676a:	64ba      	str	r2, [r7, #72]	; 0x48
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e5      	bne.n	800674a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006786:	d107      	bne.n	8006798 <UART_Start_Receive_IT+0x100>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d103      	bne.n	8006798 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a24      	ldr	r2, [pc, #144]	; (8006824 <UART_Start_Receive_IT+0x18c>)
 8006794:	665a      	str	r2, [r3, #100]	; 0x64
 8006796:	e002      	b.n	800679e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <UART_Start_Receive_IT+0x190>)
 800679c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d019      	beq.n	80067e2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80067c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
 80067ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_Start_Receive_IT+0x116>
 80067e0:	e018      	b.n	8006814 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	613b      	str	r3, [r7, #16]
   return(result);
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f043 0320 	orr.w	r3, r3, #32
 80067f6:	653b      	str	r3, [r7, #80]	; 0x50
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006800:	623b      	str	r3, [r7, #32]
 8006802:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	69f9      	ldr	r1, [r7, #28]
 8006806:	6a3a      	ldr	r2, [r7, #32]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	61bb      	str	r3, [r7, #24]
   return(result);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	375c      	adds	r7, #92	; 0x5c
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	08006d33 	.word	0x08006d33
 8006828:	08006bd3 	.word	0x08006bd3

0800682c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b095      	sub	sp, #84	; 0x54
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	643b      	str	r3, [r7, #64]	; 0x40
 8006854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e6      	bne.n	8006834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	61fb      	str	r3, [r7, #28]
   return(result);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	64bb      	str	r3, [r7, #72]	; 0x48
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800688c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e5      	bne.n	8006866 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d118      	bne.n	80068d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	647b      	str	r3, [r7, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80068e6:	bf00      	nop
 80068e8:	3754      	adds	r7, #84	; 0x54
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7ff fa97 	bl	8005e44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006930:	2200      	movs	r2, #0
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11c      	bne.n	8006980 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	220f      	movs	r2, #15
 8006964:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff fa6d 	bl	8005e58 <HAL_UART_AbortCpltCallback>
 800697e:	e000      	b.n	8006982 <UART_DMATxAbortCallback+0x64>
      return;
 8006980:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	2200      	movs	r2, #0
 800699c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d126      	bne.n	80069fe <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	220f      	movs	r2, #15
 80069ce:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	8b1b      	ldrh	r3, [r3, #24]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0208 	orr.w	r2, r2, #8
 80069e0:	b292      	uxth	r2, r2
 80069e2:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f7ff fa2e 	bl	8005e58 <HAL_UART_AbortCpltCallback>
 80069fc:	e000      	b.n	8006a00 <UART_DMARxAbortCallback+0x78>
      return;
 80069fe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b08f      	sub	sp, #60	; 0x3c
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a12:	2b21      	cmp	r3, #33	; 0x21
 8006a14:	d14d      	bne.n	8006ab2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d132      	bne.n	8006a88 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a42:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a68:	633b      	str	r3, [r7, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006a86:	e014      	b.n	8006ab2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8c:	781a      	ldrb	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	b292      	uxth	r2, r2
 8006a94:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006ab2:	bf00      	nop
 8006ab4:	373c      	adds	r7, #60	; 0x3c
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b091      	sub	sp, #68	; 0x44
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006aca:	2b21      	cmp	r3, #33	; 0x21
 8006acc:	d151      	bne.n	8006b72 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d132      	bne.n	8006b40 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	633b      	str	r3, [r7, #48]	; 0x30
 8006afa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2a:	61fb      	str	r3, [r7, #28]
 8006b2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	69fa      	ldr	r2, [r7, #28]
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	617b      	str	r3, [r7, #20]
   return(result);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e6      	bne.n	8006b0c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006b3e:	e018      	b.n	8006b72 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b48:	881a      	ldrh	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b52:	b292      	uxth	r2, r2
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006b72:	bf00      	nop
 8006b74:	3744      	adds	r7, #68	; 0x44
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff f933 	bl	8005e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bca:	bf00      	nop
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b096      	sub	sp, #88	; 0x58
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006be0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be8:	2b22      	cmp	r3, #34	; 0x22
 8006bea:	f040 8094 	bne.w	8006d16 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006bf4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006bf8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006bfc:	b2d9      	uxtb	r1, r3
 8006bfe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	400a      	ands	r2, r1
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d179      	bne.n	8006d2a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c54:	647b      	str	r3, [r7, #68]	; 0x44
 8006c56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	623b      	str	r3, [r7, #32]
   return(result);
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c88:	633a      	str	r2, [r7, #48]	; 0x30
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d12e      	bne.n	8006d0e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0310 	bic.w	r3, r3, #16
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	69b9      	ldr	r1, [r7, #24]
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e6      	bne.n	8006cb6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d103      	bne.n	8006cfe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff f8b0 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d0c:	e00d      	b.n	8006d2a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fa f9c2 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 8006d14:	e009      	b.n	8006d2a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	8b1b      	ldrh	r3, [r3, #24]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f042 0208 	orr.w	r2, r2, #8
 8006d26:	b292      	uxth	r2, r2
 8006d28:	831a      	strh	r2, [r3, #24]
}
 8006d2a:	bf00      	nop
 8006d2c:	3758      	adds	r7, #88	; 0x58
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b096      	sub	sp, #88	; 0x58
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d48:	2b22      	cmp	r3, #34	; 0x22
 8006d4a:	f040 8094 	bne.w	8006e76 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d54:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d5e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d62:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d66:	4013      	ands	r3, r2
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d72:	1c9a      	adds	r2, r3, #2
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d179      	bne.n	8006e8a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006db4:	643b      	str	r3, [r7, #64]	; 0x40
 8006db6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f023 0301 	bic.w	r3, r3, #1
 8006dde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3308      	adds	r3, #8
 8006de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d12e      	bne.n	8006e6e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e34:	61bb      	str	r3, [r7, #24]
 8006e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	6979      	ldr	r1, [r7, #20]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	613b      	str	r3, [r7, #16]
   return(result);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e6      	bne.n	8006e16 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d103      	bne.n	8006e5e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff f800 	bl	8005e6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e6c:	e00d      	b.n	8006e8a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa f912 	bl	8001098 <HAL_UART_RxCpltCallback>
}
 8006e74:	e009      	b.n	8006e8a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	8b1b      	ldrh	r3, [r3, #24]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0208 	orr.w	r2, r2, #8
 8006e86:	b292      	uxth	r2, r2
 8006e88:	831a      	strh	r2, [r3, #24]
}
 8006e8a:	bf00      	nop
 8006e8c:	3758      	adds	r7, #88	; 0x58
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
	...

08006ea8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006eac:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <MX_FATFS_Init+0x18>)
 8006eae:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <MX_FATFS_Init+0x1c>)
 8006eb0:	f000 f8ae 	bl	8007010 <FATFS_LinkDriver>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <MX_FATFS_Init+0x20>)
 8006eba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ebc:	bf00      	nop
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	200004b0 	.word	0x200004b0
 8006ec4:	20000010 	.word	0x20000010
 8006ec8:	200004ac 	.word	0x200004ac

08006ecc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fb fb61 	bl	80025a0 <SD_disk_initialize>
 8006ede:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fb fc57 	bl	80027a8 <SD_disk_status>
 8006efa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8006f14:	7bf8      	ldrb	r0, [r7, #15]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	f7fb fc5a 	bl	80027d4 <SD_disk_read>
 8006f20:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8006f3a:	7bf8      	ldrb	r0, [r7, #15]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	f7fb fcb1 	bl	80028a8 <SD_disk_write>
 8006f46:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	603a      	str	r2, [r7, #0]
 8006f5a:	71fb      	strb	r3, [r7, #7]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8006f60:	79b9      	ldrb	r1, [r7, #6]
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fb fd22 	bl	80029b0 <SD_disk_ioctl>
 8006f6c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006f8e:	4b1f      	ldr	r3, [pc, #124]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006f90:	7a5b      	ldrb	r3, [r3, #9]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d131      	bne.n	8006ffc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006f98:	4b1c      	ldr	r3, [pc, #112]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006f9a:	7a5b      	ldrb	r3, [r3, #9]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	4b1a      	ldr	r3, [pc, #104]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fa8:	7a5b      	ldrb	r3, [r3, #9]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	4a17      	ldr	r2, [pc, #92]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fb8:	7a5b      	ldrb	r3, [r3, #9]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b13      	ldr	r3, [pc, #76]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fc0:	4413      	add	r3, r2
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fc8:	7a5b      	ldrb	r3, [r3, #9]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	b2d1      	uxtb	r1, r2
 8006fd0:	4a0e      	ldr	r2, [pc, #56]	; (800700c <FATFS_LinkDriverEx+0x94>)
 8006fd2:	7251      	strb	r1, [r2, #9]
 8006fd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006fd6:	7dbb      	ldrb	r3, [r7, #22]
 8006fd8:	3330      	adds	r3, #48	; 0x30
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	223a      	movs	r2, #58	; 0x3a
 8006fe6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	3302      	adds	r3, #2
 8006fec:	222f      	movs	r2, #47	; 0x2f
 8006fee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3303      	adds	r3, #3
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	200004b4 	.word	0x200004b4

08007010 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff ffaa 	bl	8006f78 <FATFS_LinkDriverEx>
 8007024:	4603      	mov	r3, r0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <__errno>:
 8007030:	4b01      	ldr	r3, [pc, #4]	; (8007038 <__errno+0x8>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20000024 	.word	0x20000024

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	4d0d      	ldr	r5, [pc, #52]	; (8007074 <__libc_init_array+0x38>)
 8007040:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007042:	1b64      	subs	r4, r4, r5
 8007044:	10a4      	asrs	r4, r4, #2
 8007046:	2600      	movs	r6, #0
 8007048:	42a6      	cmp	r6, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	4d0b      	ldr	r5, [pc, #44]	; (800707c <__libc_init_array+0x40>)
 800704e:	4c0c      	ldr	r4, [pc, #48]	; (8007080 <__libc_init_array+0x44>)
 8007050:	f001 f87c 	bl	800814c <_init>
 8007054:	1b64      	subs	r4, r4, r5
 8007056:	10a4      	asrs	r4, r4, #2
 8007058:	2600      	movs	r6, #0
 800705a:	42a6      	cmp	r6, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f855 3b04 	ldr.w	r3, [r5], #4
 8007064:	4798      	blx	r3
 8007066:	3601      	adds	r6, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f855 3b04 	ldr.w	r3, [r5], #4
 800706e:	4798      	blx	r3
 8007070:	3601      	adds	r6, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	08008574 	.word	0x08008574
 8007078:	08008574 	.word	0x08008574
 800707c:	08008574 	.word	0x08008574
 8007080:	08008578 	.word	0x08008578

08007084 <malloc>:
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <malloc+0xc>)
 8007086:	4601      	mov	r1, r0
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	f000 b877 	b.w	800717c <_malloc_r>
 800708e:	bf00      	nop
 8007090:	20000024 	.word	0x20000024

08007094 <memset>:
 8007094:	4402      	add	r2, r0
 8007096:	4603      	mov	r3, r0
 8007098:	4293      	cmp	r3, r2
 800709a:	d100      	bne.n	800709e <memset+0xa>
 800709c:	4770      	bx	lr
 800709e:	f803 1b01 	strb.w	r1, [r3], #1
 80070a2:	e7f9      	b.n	8007098 <memset+0x4>

080070a4 <_free_r>:
 80070a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d044      	beq.n	8007134 <_free_r+0x90>
 80070aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ae:	9001      	str	r0, [sp, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f1a1 0404 	sub.w	r4, r1, #4
 80070b6:	bfb8      	it	lt
 80070b8:	18e4      	addlt	r4, r4, r3
 80070ba:	f000 fca1 	bl	8007a00 <__malloc_lock>
 80070be:	4a1e      	ldr	r2, [pc, #120]	; (8007138 <_free_r+0x94>)
 80070c0:	9801      	ldr	r0, [sp, #4]
 80070c2:	6813      	ldr	r3, [r2, #0]
 80070c4:	b933      	cbnz	r3, 80070d4 <_free_r+0x30>
 80070c6:	6063      	str	r3, [r4, #4]
 80070c8:	6014      	str	r4, [r2, #0]
 80070ca:	b003      	add	sp, #12
 80070cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d0:	f000 bc9c 	b.w	8007a0c <__malloc_unlock>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d908      	bls.n	80070ea <_free_r+0x46>
 80070d8:	6825      	ldr	r5, [r4, #0]
 80070da:	1961      	adds	r1, r4, r5
 80070dc:	428b      	cmp	r3, r1
 80070de:	bf01      	itttt	eq
 80070e0:	6819      	ldreq	r1, [r3, #0]
 80070e2:	685b      	ldreq	r3, [r3, #4]
 80070e4:	1949      	addeq	r1, r1, r5
 80070e6:	6021      	streq	r1, [r4, #0]
 80070e8:	e7ed      	b.n	80070c6 <_free_r+0x22>
 80070ea:	461a      	mov	r2, r3
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	b10b      	cbz	r3, 80070f4 <_free_r+0x50>
 80070f0:	42a3      	cmp	r3, r4
 80070f2:	d9fa      	bls.n	80070ea <_free_r+0x46>
 80070f4:	6811      	ldr	r1, [r2, #0]
 80070f6:	1855      	adds	r5, r2, r1
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d10b      	bne.n	8007114 <_free_r+0x70>
 80070fc:	6824      	ldr	r4, [r4, #0]
 80070fe:	4421      	add	r1, r4
 8007100:	1854      	adds	r4, r2, r1
 8007102:	42a3      	cmp	r3, r4
 8007104:	6011      	str	r1, [r2, #0]
 8007106:	d1e0      	bne.n	80070ca <_free_r+0x26>
 8007108:	681c      	ldr	r4, [r3, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	6053      	str	r3, [r2, #4]
 800710e:	4421      	add	r1, r4
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	e7da      	b.n	80070ca <_free_r+0x26>
 8007114:	d902      	bls.n	800711c <_free_r+0x78>
 8007116:	230c      	movs	r3, #12
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	e7d6      	b.n	80070ca <_free_r+0x26>
 800711c:	6825      	ldr	r5, [r4, #0]
 800711e:	1961      	adds	r1, r4, r5
 8007120:	428b      	cmp	r3, r1
 8007122:	bf04      	itt	eq
 8007124:	6819      	ldreq	r1, [r3, #0]
 8007126:	685b      	ldreq	r3, [r3, #4]
 8007128:	6063      	str	r3, [r4, #4]
 800712a:	bf04      	itt	eq
 800712c:	1949      	addeq	r1, r1, r5
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	6054      	str	r4, [r2, #4]
 8007132:	e7ca      	b.n	80070ca <_free_r+0x26>
 8007134:	b003      	add	sp, #12
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	200004c0 	.word	0x200004c0

0800713c <sbrk_aligned>:
 800713c:	b570      	push	{r4, r5, r6, lr}
 800713e:	4e0e      	ldr	r6, [pc, #56]	; (8007178 <sbrk_aligned+0x3c>)
 8007140:	460c      	mov	r4, r1
 8007142:	6831      	ldr	r1, [r6, #0]
 8007144:	4605      	mov	r5, r0
 8007146:	b911      	cbnz	r1, 800714e <sbrk_aligned+0x12>
 8007148:	f000 f8a4 	bl	8007294 <_sbrk_r>
 800714c:	6030      	str	r0, [r6, #0]
 800714e:	4621      	mov	r1, r4
 8007150:	4628      	mov	r0, r5
 8007152:	f000 f89f 	bl	8007294 <_sbrk_r>
 8007156:	1c43      	adds	r3, r0, #1
 8007158:	d00a      	beq.n	8007170 <sbrk_aligned+0x34>
 800715a:	1cc4      	adds	r4, r0, #3
 800715c:	f024 0403 	bic.w	r4, r4, #3
 8007160:	42a0      	cmp	r0, r4
 8007162:	d007      	beq.n	8007174 <sbrk_aligned+0x38>
 8007164:	1a21      	subs	r1, r4, r0
 8007166:	4628      	mov	r0, r5
 8007168:	f000 f894 	bl	8007294 <_sbrk_r>
 800716c:	3001      	adds	r0, #1
 800716e:	d101      	bne.n	8007174 <sbrk_aligned+0x38>
 8007170:	f04f 34ff 	mov.w	r4, #4294967295
 8007174:	4620      	mov	r0, r4
 8007176:	bd70      	pop	{r4, r5, r6, pc}
 8007178:	200004c4 	.word	0x200004c4

0800717c <_malloc_r>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	1ccd      	adds	r5, r1, #3
 8007182:	f025 0503 	bic.w	r5, r5, #3
 8007186:	3508      	adds	r5, #8
 8007188:	2d0c      	cmp	r5, #12
 800718a:	bf38      	it	cc
 800718c:	250c      	movcc	r5, #12
 800718e:	2d00      	cmp	r5, #0
 8007190:	4607      	mov	r7, r0
 8007192:	db01      	blt.n	8007198 <_malloc_r+0x1c>
 8007194:	42a9      	cmp	r1, r5
 8007196:	d905      	bls.n	80071a4 <_malloc_r+0x28>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	2600      	movs	r6, #0
 800719e:	4630      	mov	r0, r6
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a4:	4e2e      	ldr	r6, [pc, #184]	; (8007260 <_malloc_r+0xe4>)
 80071a6:	f000 fc2b 	bl	8007a00 <__malloc_lock>
 80071aa:	6833      	ldr	r3, [r6, #0]
 80071ac:	461c      	mov	r4, r3
 80071ae:	bb34      	cbnz	r4, 80071fe <_malloc_r+0x82>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ffc2 	bl	800713c <sbrk_aligned>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	4604      	mov	r4, r0
 80071bc:	d14d      	bne.n	800725a <_malloc_r+0xde>
 80071be:	6834      	ldr	r4, [r6, #0]
 80071c0:	4626      	mov	r6, r4
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	d140      	bne.n	8007248 <_malloc_r+0xcc>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	4631      	mov	r1, r6
 80071ca:	4638      	mov	r0, r7
 80071cc:	eb04 0803 	add.w	r8, r4, r3
 80071d0:	f000 f860 	bl	8007294 <_sbrk_r>
 80071d4:	4580      	cmp	r8, r0
 80071d6:	d13a      	bne.n	800724e <_malloc_r+0xd2>
 80071d8:	6821      	ldr	r1, [r4, #0]
 80071da:	3503      	adds	r5, #3
 80071dc:	1a6d      	subs	r5, r5, r1
 80071de:	f025 0503 	bic.w	r5, r5, #3
 80071e2:	3508      	adds	r5, #8
 80071e4:	2d0c      	cmp	r5, #12
 80071e6:	bf38      	it	cc
 80071e8:	250c      	movcc	r5, #12
 80071ea:	4629      	mov	r1, r5
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff ffa5 	bl	800713c <sbrk_aligned>
 80071f2:	3001      	adds	r0, #1
 80071f4:	d02b      	beq.n	800724e <_malloc_r+0xd2>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	442b      	add	r3, r5
 80071fa:	6023      	str	r3, [r4, #0]
 80071fc:	e00e      	b.n	800721c <_malloc_r+0xa0>
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	1b52      	subs	r2, r2, r5
 8007202:	d41e      	bmi.n	8007242 <_malloc_r+0xc6>
 8007204:	2a0b      	cmp	r2, #11
 8007206:	d916      	bls.n	8007236 <_malloc_r+0xba>
 8007208:	1961      	adds	r1, r4, r5
 800720a:	42a3      	cmp	r3, r4
 800720c:	6025      	str	r5, [r4, #0]
 800720e:	bf18      	it	ne
 8007210:	6059      	strne	r1, [r3, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	bf08      	it	eq
 8007216:	6031      	streq	r1, [r6, #0]
 8007218:	5162      	str	r2, [r4, r5]
 800721a:	604b      	str	r3, [r1, #4]
 800721c:	4638      	mov	r0, r7
 800721e:	f104 060b 	add.w	r6, r4, #11
 8007222:	f000 fbf3 	bl	8007a0c <__malloc_unlock>
 8007226:	f026 0607 	bic.w	r6, r6, #7
 800722a:	1d23      	adds	r3, r4, #4
 800722c:	1af2      	subs	r2, r6, r3
 800722e:	d0b6      	beq.n	800719e <_malloc_r+0x22>
 8007230:	1b9b      	subs	r3, r3, r6
 8007232:	50a3      	str	r3, [r4, r2]
 8007234:	e7b3      	b.n	800719e <_malloc_r+0x22>
 8007236:	6862      	ldr	r2, [r4, #4]
 8007238:	42a3      	cmp	r3, r4
 800723a:	bf0c      	ite	eq
 800723c:	6032      	streq	r2, [r6, #0]
 800723e:	605a      	strne	r2, [r3, #4]
 8007240:	e7ec      	b.n	800721c <_malloc_r+0xa0>
 8007242:	4623      	mov	r3, r4
 8007244:	6864      	ldr	r4, [r4, #4]
 8007246:	e7b2      	b.n	80071ae <_malloc_r+0x32>
 8007248:	4634      	mov	r4, r6
 800724a:	6876      	ldr	r6, [r6, #4]
 800724c:	e7b9      	b.n	80071c2 <_malloc_r+0x46>
 800724e:	230c      	movs	r3, #12
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4638      	mov	r0, r7
 8007254:	f000 fbda 	bl	8007a0c <__malloc_unlock>
 8007258:	e7a1      	b.n	800719e <_malloc_r+0x22>
 800725a:	6025      	str	r5, [r4, #0]
 800725c:	e7de      	b.n	800721c <_malloc_r+0xa0>
 800725e:	bf00      	nop
 8007260:	200004c0 	.word	0x200004c0

08007264 <iprintf>:
 8007264:	b40f      	push	{r0, r1, r2, r3}
 8007266:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <iprintf+0x2c>)
 8007268:	b513      	push	{r0, r1, r4, lr}
 800726a:	681c      	ldr	r4, [r3, #0]
 800726c:	b124      	cbz	r4, 8007278 <iprintf+0x14>
 800726e:	69a3      	ldr	r3, [r4, #24]
 8007270:	b913      	cbnz	r3, 8007278 <iprintf+0x14>
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fabe 	bl	80077f4 <__sinit>
 8007278:	ab05      	add	r3, sp, #20
 800727a:	9a04      	ldr	r2, [sp, #16]
 800727c:	68a1      	ldr	r1, [r4, #8]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fbf3 	bl	8007a6c <_vfiprintf_r>
 8007286:	b002      	add	sp, #8
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	b004      	add	sp, #16
 800728e:	4770      	bx	lr
 8007290:	20000024 	.word	0x20000024

08007294 <_sbrk_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d06      	ldr	r5, [pc, #24]	; (80072b0 <_sbrk_r+0x1c>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	602b      	str	r3, [r5, #0]
 80072a0:	f7fa f9c8 	bl	8001634 <_sbrk>
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d102      	bne.n	80072ae <_sbrk_r+0x1a>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b103      	cbz	r3, 80072ae <_sbrk_r+0x1a>
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	200004cc 	.word	0x200004cc

080072b4 <setvbuf>:
 80072b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072b8:	461d      	mov	r5, r3
 80072ba:	4b5d      	ldr	r3, [pc, #372]	; (8007430 <setvbuf+0x17c>)
 80072bc:	681f      	ldr	r7, [r3, #0]
 80072be:	4604      	mov	r4, r0
 80072c0:	460e      	mov	r6, r1
 80072c2:	4690      	mov	r8, r2
 80072c4:	b127      	cbz	r7, 80072d0 <setvbuf+0x1c>
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	b913      	cbnz	r3, 80072d0 <setvbuf+0x1c>
 80072ca:	4638      	mov	r0, r7
 80072cc:	f000 fa92 	bl	80077f4 <__sinit>
 80072d0:	4b58      	ldr	r3, [pc, #352]	; (8007434 <setvbuf+0x180>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d167      	bne.n	80073a6 <setvbuf+0xf2>
 80072d6:	687c      	ldr	r4, [r7, #4]
 80072d8:	f1b8 0f02 	cmp.w	r8, #2
 80072dc:	d006      	beq.n	80072ec <setvbuf+0x38>
 80072de:	f1b8 0f01 	cmp.w	r8, #1
 80072e2:	f200 809f 	bhi.w	8007424 <setvbuf+0x170>
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	f2c0 809c 	blt.w	8007424 <setvbuf+0x170>
 80072ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ee:	07db      	lsls	r3, r3, #31
 80072f0:	d405      	bmi.n	80072fe <setvbuf+0x4a>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	0598      	lsls	r0, r3, #22
 80072f6:	d402      	bmi.n	80072fe <setvbuf+0x4a>
 80072f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fa:	f000 fb19 	bl	8007930 <__retarget_lock_acquire_recursive>
 80072fe:	4621      	mov	r1, r4
 8007300:	4638      	mov	r0, r7
 8007302:	f000 f9e3 	bl	80076cc <_fflush_r>
 8007306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007308:	b141      	cbz	r1, 800731c <setvbuf+0x68>
 800730a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730e:	4299      	cmp	r1, r3
 8007310:	d002      	beq.n	8007318 <setvbuf+0x64>
 8007312:	4638      	mov	r0, r7
 8007314:	f7ff fec6 	bl	80070a4 <_free_r>
 8007318:	2300      	movs	r3, #0
 800731a:	6363      	str	r3, [r4, #52]	; 0x34
 800731c:	2300      	movs	r3, #0
 800731e:	61a3      	str	r3, [r4, #24]
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	0619      	lsls	r1, r3, #24
 8007326:	d503      	bpl.n	8007330 <setvbuf+0x7c>
 8007328:	6921      	ldr	r1, [r4, #16]
 800732a:	4638      	mov	r0, r7
 800732c:	f7ff feba 	bl	80070a4 <_free_r>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	f1b8 0f02 	cmp.w	r8, #2
 800733e:	81a3      	strh	r3, [r4, #12]
 8007340:	d06c      	beq.n	800741c <setvbuf+0x168>
 8007342:	ab01      	add	r3, sp, #4
 8007344:	466a      	mov	r2, sp
 8007346:	4621      	mov	r1, r4
 8007348:	4638      	mov	r0, r7
 800734a:	f000 faf3 	bl	8007934 <__swhatbuf_r>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	4318      	orrs	r0, r3
 8007352:	81a0      	strh	r0, [r4, #12]
 8007354:	2d00      	cmp	r5, #0
 8007356:	d130      	bne.n	80073ba <setvbuf+0x106>
 8007358:	9d00      	ldr	r5, [sp, #0]
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff fe92 	bl	8007084 <malloc>
 8007360:	4606      	mov	r6, r0
 8007362:	2800      	cmp	r0, #0
 8007364:	d155      	bne.n	8007412 <setvbuf+0x15e>
 8007366:	f8dd 9000 	ldr.w	r9, [sp]
 800736a:	45a9      	cmp	r9, r5
 800736c:	d14a      	bne.n	8007404 <setvbuf+0x150>
 800736e:	f04f 35ff 	mov.w	r5, #4294967295
 8007372:	2200      	movs	r2, #0
 8007374:	60a2      	str	r2, [r4, #8]
 8007376:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800737a:	6022      	str	r2, [r4, #0]
 800737c:	6122      	str	r2, [r4, #16]
 800737e:	2201      	movs	r2, #1
 8007380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007384:	6162      	str	r2, [r4, #20]
 8007386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007388:	f043 0302 	orr.w	r3, r3, #2
 800738c:	07d2      	lsls	r2, r2, #31
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	d405      	bmi.n	800739e <setvbuf+0xea>
 8007392:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007396:	d102      	bne.n	800739e <setvbuf+0xea>
 8007398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800739a:	f000 faca 	bl	8007932 <__retarget_lock_release_recursive>
 800739e:	4628      	mov	r0, r5
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a6:	4b24      	ldr	r3, [pc, #144]	; (8007438 <setvbuf+0x184>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d101      	bne.n	80073b0 <setvbuf+0xfc>
 80073ac:	68bc      	ldr	r4, [r7, #8]
 80073ae:	e793      	b.n	80072d8 <setvbuf+0x24>
 80073b0:	4b22      	ldr	r3, [pc, #136]	; (800743c <setvbuf+0x188>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	bf08      	it	eq
 80073b6:	68fc      	ldreq	r4, [r7, #12]
 80073b8:	e78e      	b.n	80072d8 <setvbuf+0x24>
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d0cd      	beq.n	800735a <setvbuf+0xa6>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	b913      	cbnz	r3, 80073c8 <setvbuf+0x114>
 80073c2:	4638      	mov	r0, r7
 80073c4:	f000 fa16 	bl	80077f4 <__sinit>
 80073c8:	f1b8 0f01 	cmp.w	r8, #1
 80073cc:	bf08      	it	eq
 80073ce:	89a3      	ldrheq	r3, [r4, #12]
 80073d0:	6026      	str	r6, [r4, #0]
 80073d2:	bf04      	itt	eq
 80073d4:	f043 0301 	orreq.w	r3, r3, #1
 80073d8:	81a3      	strheq	r3, [r4, #12]
 80073da:	89a2      	ldrh	r2, [r4, #12]
 80073dc:	f012 0308 	ands.w	r3, r2, #8
 80073e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80073e4:	d01c      	beq.n	8007420 <setvbuf+0x16c>
 80073e6:	07d3      	lsls	r3, r2, #31
 80073e8:	bf41      	itttt	mi
 80073ea:	2300      	movmi	r3, #0
 80073ec:	426d      	negmi	r5, r5
 80073ee:	60a3      	strmi	r3, [r4, #8]
 80073f0:	61a5      	strmi	r5, [r4, #24]
 80073f2:	bf58      	it	pl
 80073f4:	60a5      	strpl	r5, [r4, #8]
 80073f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80073f8:	f015 0501 	ands.w	r5, r5, #1
 80073fc:	d115      	bne.n	800742a <setvbuf+0x176>
 80073fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007402:	e7c8      	b.n	8007396 <setvbuf+0xe2>
 8007404:	4648      	mov	r0, r9
 8007406:	f7ff fe3d 	bl	8007084 <malloc>
 800740a:	4606      	mov	r6, r0
 800740c:	2800      	cmp	r0, #0
 800740e:	d0ae      	beq.n	800736e <setvbuf+0xba>
 8007410:	464d      	mov	r5, r9
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	81a3      	strh	r3, [r4, #12]
 800741a:	e7d0      	b.n	80073be <setvbuf+0x10a>
 800741c:	2500      	movs	r5, #0
 800741e:	e7a8      	b.n	8007372 <setvbuf+0xbe>
 8007420:	60a3      	str	r3, [r4, #8]
 8007422:	e7e8      	b.n	80073f6 <setvbuf+0x142>
 8007424:	f04f 35ff 	mov.w	r5, #4294967295
 8007428:	e7b9      	b.n	800739e <setvbuf+0xea>
 800742a:	2500      	movs	r5, #0
 800742c:	e7b7      	b.n	800739e <setvbuf+0xea>
 800742e:	bf00      	nop
 8007430:	20000024 	.word	0x20000024
 8007434:	080084f8 	.word	0x080084f8
 8007438:	08008518 	.word	0x08008518
 800743c:	080084d8 	.word	0x080084d8

08007440 <__swbuf_r>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	460e      	mov	r6, r1
 8007444:	4614      	mov	r4, r2
 8007446:	4605      	mov	r5, r0
 8007448:	b118      	cbz	r0, 8007452 <__swbuf_r+0x12>
 800744a:	6983      	ldr	r3, [r0, #24]
 800744c:	b90b      	cbnz	r3, 8007452 <__swbuf_r+0x12>
 800744e:	f000 f9d1 	bl	80077f4 <__sinit>
 8007452:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <__swbuf_r+0x98>)
 8007454:	429c      	cmp	r4, r3
 8007456:	d12b      	bne.n	80074b0 <__swbuf_r+0x70>
 8007458:	686c      	ldr	r4, [r5, #4]
 800745a:	69a3      	ldr	r3, [r4, #24]
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	071a      	lsls	r2, r3, #28
 8007462:	d52f      	bpl.n	80074c4 <__swbuf_r+0x84>
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	b36b      	cbz	r3, 80074c4 <__swbuf_r+0x84>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	6820      	ldr	r0, [r4, #0]
 800746c:	1ac0      	subs	r0, r0, r3
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	b2f6      	uxtb	r6, r6
 8007472:	4283      	cmp	r3, r0
 8007474:	4637      	mov	r7, r6
 8007476:	dc04      	bgt.n	8007482 <__swbuf_r+0x42>
 8007478:	4621      	mov	r1, r4
 800747a:	4628      	mov	r0, r5
 800747c:	f000 f926 	bl	80076cc <_fflush_r>
 8007480:	bb30      	cbnz	r0, 80074d0 <__swbuf_r+0x90>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	701e      	strb	r6, [r3, #0]
 8007490:	6963      	ldr	r3, [r4, #20]
 8007492:	3001      	adds	r0, #1
 8007494:	4283      	cmp	r3, r0
 8007496:	d004      	beq.n	80074a2 <__swbuf_r+0x62>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	07db      	lsls	r3, r3, #31
 800749c:	d506      	bpl.n	80074ac <__swbuf_r+0x6c>
 800749e:	2e0a      	cmp	r6, #10
 80074a0:	d104      	bne.n	80074ac <__swbuf_r+0x6c>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	f000 f911 	bl	80076cc <_fflush_r>
 80074aa:	b988      	cbnz	r0, 80074d0 <__swbuf_r+0x90>
 80074ac:	4638      	mov	r0, r7
 80074ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <__swbuf_r+0x9c>)
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d101      	bne.n	80074ba <__swbuf_r+0x7a>
 80074b6:	68ac      	ldr	r4, [r5, #8]
 80074b8:	e7cf      	b.n	800745a <__swbuf_r+0x1a>
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <__swbuf_r+0xa0>)
 80074bc:	429c      	cmp	r4, r3
 80074be:	bf08      	it	eq
 80074c0:	68ec      	ldreq	r4, [r5, #12]
 80074c2:	e7ca      	b.n	800745a <__swbuf_r+0x1a>
 80074c4:	4621      	mov	r1, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f80c 	bl	80074e4 <__swsetup_r>
 80074cc:	2800      	cmp	r0, #0
 80074ce:	d0cb      	beq.n	8007468 <__swbuf_r+0x28>
 80074d0:	f04f 37ff 	mov.w	r7, #4294967295
 80074d4:	e7ea      	b.n	80074ac <__swbuf_r+0x6c>
 80074d6:	bf00      	nop
 80074d8:	080084f8 	.word	0x080084f8
 80074dc:	08008518 	.word	0x08008518
 80074e0:	080084d8 	.word	0x080084d8

080074e4 <__swsetup_r>:
 80074e4:	4b32      	ldr	r3, [pc, #200]	; (80075b0 <__swsetup_r+0xcc>)
 80074e6:	b570      	push	{r4, r5, r6, lr}
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	4606      	mov	r6, r0
 80074ec:	460c      	mov	r4, r1
 80074ee:	b125      	cbz	r5, 80074fa <__swsetup_r+0x16>
 80074f0:	69ab      	ldr	r3, [r5, #24]
 80074f2:	b913      	cbnz	r3, 80074fa <__swsetup_r+0x16>
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f97d 	bl	80077f4 <__sinit>
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <__swsetup_r+0xd0>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	d10f      	bne.n	8007520 <__swsetup_r+0x3c>
 8007500:	686c      	ldr	r4, [r5, #4]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007508:	0719      	lsls	r1, r3, #28
 800750a:	d42c      	bmi.n	8007566 <__swsetup_r+0x82>
 800750c:	06dd      	lsls	r5, r3, #27
 800750e:	d411      	bmi.n	8007534 <__swsetup_r+0x50>
 8007510:	2309      	movs	r3, #9
 8007512:	6033      	str	r3, [r6, #0]
 8007514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	e03e      	b.n	800759e <__swsetup_r+0xba>
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <__swsetup_r+0xd4>)
 8007522:	429c      	cmp	r4, r3
 8007524:	d101      	bne.n	800752a <__swsetup_r+0x46>
 8007526:	68ac      	ldr	r4, [r5, #8]
 8007528:	e7eb      	b.n	8007502 <__swsetup_r+0x1e>
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <__swsetup_r+0xd8>)
 800752c:	429c      	cmp	r4, r3
 800752e:	bf08      	it	eq
 8007530:	68ec      	ldreq	r4, [r5, #12]
 8007532:	e7e6      	b.n	8007502 <__swsetup_r+0x1e>
 8007534:	0758      	lsls	r0, r3, #29
 8007536:	d512      	bpl.n	800755e <__swsetup_r+0x7a>
 8007538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753a:	b141      	cbz	r1, 800754e <__swsetup_r+0x6a>
 800753c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007540:	4299      	cmp	r1, r3
 8007542:	d002      	beq.n	800754a <__swsetup_r+0x66>
 8007544:	4630      	mov	r0, r6
 8007546:	f7ff fdad 	bl	80070a4 <_free_r>
 800754a:	2300      	movs	r3, #0
 800754c:	6363      	str	r3, [r4, #52]	; 0x34
 800754e:	89a3      	ldrh	r3, [r4, #12]
 8007550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	2300      	movs	r3, #0
 8007558:	6063      	str	r3, [r4, #4]
 800755a:	6923      	ldr	r3, [r4, #16]
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	f043 0308 	orr.w	r3, r3, #8
 8007564:	81a3      	strh	r3, [r4, #12]
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	b94b      	cbnz	r3, 800757e <__swsetup_r+0x9a>
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007574:	d003      	beq.n	800757e <__swsetup_r+0x9a>
 8007576:	4621      	mov	r1, r4
 8007578:	4630      	mov	r0, r6
 800757a:	f000 fa01 	bl	8007980 <__smakebuf_r>
 800757e:	89a0      	ldrh	r0, [r4, #12]
 8007580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007584:	f010 0301 	ands.w	r3, r0, #1
 8007588:	d00a      	beq.n	80075a0 <__swsetup_r+0xbc>
 800758a:	2300      	movs	r3, #0
 800758c:	60a3      	str	r3, [r4, #8]
 800758e:	6963      	ldr	r3, [r4, #20]
 8007590:	425b      	negs	r3, r3
 8007592:	61a3      	str	r3, [r4, #24]
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	b943      	cbnz	r3, 80075aa <__swsetup_r+0xc6>
 8007598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800759c:	d1ba      	bne.n	8007514 <__swsetup_r+0x30>
 800759e:	bd70      	pop	{r4, r5, r6, pc}
 80075a0:	0781      	lsls	r1, r0, #30
 80075a2:	bf58      	it	pl
 80075a4:	6963      	ldrpl	r3, [r4, #20]
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	e7f4      	b.n	8007594 <__swsetup_r+0xb0>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e7f7      	b.n	800759e <__swsetup_r+0xba>
 80075ae:	bf00      	nop
 80075b0:	20000024 	.word	0x20000024
 80075b4:	080084f8 	.word	0x080084f8
 80075b8:	08008518 	.word	0x08008518
 80075bc:	080084d8 	.word	0x080084d8

080075c0 <__sflush_r>:
 80075c0:	898a      	ldrh	r2, [r1, #12]
 80075c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c6:	4605      	mov	r5, r0
 80075c8:	0710      	lsls	r0, r2, #28
 80075ca:	460c      	mov	r4, r1
 80075cc:	d458      	bmi.n	8007680 <__sflush_r+0xc0>
 80075ce:	684b      	ldr	r3, [r1, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc05      	bgt.n	80075e0 <__sflush_r+0x20>
 80075d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dc02      	bgt.n	80075e0 <__sflush_r+0x20>
 80075da:	2000      	movs	r0, #0
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075e2:	2e00      	cmp	r6, #0
 80075e4:	d0f9      	beq.n	80075da <__sflush_r+0x1a>
 80075e6:	2300      	movs	r3, #0
 80075e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075ec:	682f      	ldr	r7, [r5, #0]
 80075ee:	602b      	str	r3, [r5, #0]
 80075f0:	d032      	beq.n	8007658 <__sflush_r+0x98>
 80075f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	075a      	lsls	r2, r3, #29
 80075f8:	d505      	bpl.n	8007606 <__sflush_r+0x46>
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007600:	b10b      	cbz	r3, 8007606 <__sflush_r+0x46>
 8007602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007604:	1ac0      	subs	r0, r0, r3
 8007606:	2300      	movs	r3, #0
 8007608:	4602      	mov	r2, r0
 800760a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760c:	6a21      	ldr	r1, [r4, #32]
 800760e:	4628      	mov	r0, r5
 8007610:	47b0      	blx	r6
 8007612:	1c43      	adds	r3, r0, #1
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	d106      	bne.n	8007626 <__sflush_r+0x66>
 8007618:	6829      	ldr	r1, [r5, #0]
 800761a:	291d      	cmp	r1, #29
 800761c:	d82c      	bhi.n	8007678 <__sflush_r+0xb8>
 800761e:	4a2a      	ldr	r2, [pc, #168]	; (80076c8 <__sflush_r+0x108>)
 8007620:	40ca      	lsrs	r2, r1
 8007622:	07d6      	lsls	r6, r2, #31
 8007624:	d528      	bpl.n	8007678 <__sflush_r+0xb8>
 8007626:	2200      	movs	r2, #0
 8007628:	6062      	str	r2, [r4, #4]
 800762a:	04d9      	lsls	r1, r3, #19
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	6022      	str	r2, [r4, #0]
 8007630:	d504      	bpl.n	800763c <__sflush_r+0x7c>
 8007632:	1c42      	adds	r2, r0, #1
 8007634:	d101      	bne.n	800763a <__sflush_r+0x7a>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b903      	cbnz	r3, 800763c <__sflush_r+0x7c>
 800763a:	6560      	str	r0, [r4, #84]	; 0x54
 800763c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763e:	602f      	str	r7, [r5, #0]
 8007640:	2900      	cmp	r1, #0
 8007642:	d0ca      	beq.n	80075da <__sflush_r+0x1a>
 8007644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007648:	4299      	cmp	r1, r3
 800764a:	d002      	beq.n	8007652 <__sflush_r+0x92>
 800764c:	4628      	mov	r0, r5
 800764e:	f7ff fd29 	bl	80070a4 <_free_r>
 8007652:	2000      	movs	r0, #0
 8007654:	6360      	str	r0, [r4, #52]	; 0x34
 8007656:	e7c1      	b.n	80075dc <__sflush_r+0x1c>
 8007658:	6a21      	ldr	r1, [r4, #32]
 800765a:	2301      	movs	r3, #1
 800765c:	4628      	mov	r0, r5
 800765e:	47b0      	blx	r6
 8007660:	1c41      	adds	r1, r0, #1
 8007662:	d1c7      	bne.n	80075f4 <__sflush_r+0x34>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0c4      	beq.n	80075f4 <__sflush_r+0x34>
 800766a:	2b1d      	cmp	r3, #29
 800766c:	d001      	beq.n	8007672 <__sflush_r+0xb2>
 800766e:	2b16      	cmp	r3, #22
 8007670:	d101      	bne.n	8007676 <__sflush_r+0xb6>
 8007672:	602f      	str	r7, [r5, #0]
 8007674:	e7b1      	b.n	80075da <__sflush_r+0x1a>
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e7ad      	b.n	80075dc <__sflush_r+0x1c>
 8007680:	690f      	ldr	r7, [r1, #16]
 8007682:	2f00      	cmp	r7, #0
 8007684:	d0a9      	beq.n	80075da <__sflush_r+0x1a>
 8007686:	0793      	lsls	r3, r2, #30
 8007688:	680e      	ldr	r6, [r1, #0]
 800768a:	bf08      	it	eq
 800768c:	694b      	ldreq	r3, [r1, #20]
 800768e:	600f      	str	r7, [r1, #0]
 8007690:	bf18      	it	ne
 8007692:	2300      	movne	r3, #0
 8007694:	eba6 0807 	sub.w	r8, r6, r7
 8007698:	608b      	str	r3, [r1, #8]
 800769a:	f1b8 0f00 	cmp.w	r8, #0
 800769e:	dd9c      	ble.n	80075da <__sflush_r+0x1a>
 80076a0:	6a21      	ldr	r1, [r4, #32]
 80076a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a4:	4643      	mov	r3, r8
 80076a6:	463a      	mov	r2, r7
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b0      	blx	r6
 80076ac:	2800      	cmp	r0, #0
 80076ae:	dc06      	bgt.n	80076be <__sflush_r+0xfe>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e78e      	b.n	80075dc <__sflush_r+0x1c>
 80076be:	4407      	add	r7, r0
 80076c0:	eba8 0800 	sub.w	r8, r8, r0
 80076c4:	e7e9      	b.n	800769a <__sflush_r+0xda>
 80076c6:	bf00      	nop
 80076c8:	20400001 	.word	0x20400001

080076cc <_fflush_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	690b      	ldr	r3, [r1, #16]
 80076d0:	4605      	mov	r5, r0
 80076d2:	460c      	mov	r4, r1
 80076d4:	b913      	cbnz	r3, 80076dc <_fflush_r+0x10>
 80076d6:	2500      	movs	r5, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	b118      	cbz	r0, 80076e6 <_fflush_r+0x1a>
 80076de:	6983      	ldr	r3, [r0, #24]
 80076e0:	b90b      	cbnz	r3, 80076e6 <_fflush_r+0x1a>
 80076e2:	f000 f887 	bl	80077f4 <__sinit>
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <_fflush_r+0x6c>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	d11b      	bne.n	8007724 <_fflush_r+0x58>
 80076ec:	686c      	ldr	r4, [r5, #4]
 80076ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ef      	beq.n	80076d6 <_fflush_r+0xa>
 80076f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f8:	07d0      	lsls	r0, r2, #31
 80076fa:	d404      	bmi.n	8007706 <_fflush_r+0x3a>
 80076fc:	0599      	lsls	r1, r3, #22
 80076fe:	d402      	bmi.n	8007706 <_fflush_r+0x3a>
 8007700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007702:	f000 f915 	bl	8007930 <__retarget_lock_acquire_recursive>
 8007706:	4628      	mov	r0, r5
 8007708:	4621      	mov	r1, r4
 800770a:	f7ff ff59 	bl	80075c0 <__sflush_r>
 800770e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007710:	07da      	lsls	r2, r3, #31
 8007712:	4605      	mov	r5, r0
 8007714:	d4e0      	bmi.n	80076d8 <_fflush_r+0xc>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	059b      	lsls	r3, r3, #22
 800771a:	d4dd      	bmi.n	80076d8 <_fflush_r+0xc>
 800771c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771e:	f000 f908 	bl	8007932 <__retarget_lock_release_recursive>
 8007722:	e7d9      	b.n	80076d8 <_fflush_r+0xc>
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_fflush_r+0x70>)
 8007726:	429c      	cmp	r4, r3
 8007728:	d101      	bne.n	800772e <_fflush_r+0x62>
 800772a:	68ac      	ldr	r4, [r5, #8]
 800772c:	e7df      	b.n	80076ee <_fflush_r+0x22>
 800772e:	4b04      	ldr	r3, [pc, #16]	; (8007740 <_fflush_r+0x74>)
 8007730:	429c      	cmp	r4, r3
 8007732:	bf08      	it	eq
 8007734:	68ec      	ldreq	r4, [r5, #12]
 8007736:	e7da      	b.n	80076ee <_fflush_r+0x22>
 8007738:	080084f8 	.word	0x080084f8
 800773c:	08008518 	.word	0x08008518
 8007740:	080084d8 	.word	0x080084d8

08007744 <std>:
 8007744:	2300      	movs	r3, #0
 8007746:	b510      	push	{r4, lr}
 8007748:	4604      	mov	r4, r0
 800774a:	e9c0 3300 	strd	r3, r3, [r0]
 800774e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007752:	6083      	str	r3, [r0, #8]
 8007754:	8181      	strh	r1, [r0, #12]
 8007756:	6643      	str	r3, [r0, #100]	; 0x64
 8007758:	81c2      	strh	r2, [r0, #14]
 800775a:	6183      	str	r3, [r0, #24]
 800775c:	4619      	mov	r1, r3
 800775e:	2208      	movs	r2, #8
 8007760:	305c      	adds	r0, #92	; 0x5c
 8007762:	f7ff fc97 	bl	8007094 <memset>
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <std+0x38>)
 8007768:	6263      	str	r3, [r4, #36]	; 0x24
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <std+0x3c>)
 800776c:	62a3      	str	r3, [r4, #40]	; 0x28
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <std+0x40>)
 8007770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x44>)
 8007774:	6224      	str	r4, [r4, #32]
 8007776:	6323      	str	r3, [r4, #48]	; 0x30
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	08007ff5 	.word	0x08007ff5
 8007780:	08008017 	.word	0x08008017
 8007784:	0800804f 	.word	0x0800804f
 8007788:	08008073 	.word	0x08008073

0800778c <_cleanup_r>:
 800778c:	4901      	ldr	r1, [pc, #4]	; (8007794 <_cleanup_r+0x8>)
 800778e:	f000 b8af 	b.w	80078f0 <_fwalk_reent>
 8007792:	bf00      	nop
 8007794:	080076cd 	.word	0x080076cd

08007798 <__sfmoreglue>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	2268      	movs	r2, #104	; 0x68
 800779c:	1e4d      	subs	r5, r1, #1
 800779e:	4355      	muls	r5, r2
 80077a0:	460e      	mov	r6, r1
 80077a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077a6:	f7ff fce9 	bl	800717c <_malloc_r>
 80077aa:	4604      	mov	r4, r0
 80077ac:	b140      	cbz	r0, 80077c0 <__sfmoreglue+0x28>
 80077ae:	2100      	movs	r1, #0
 80077b0:	e9c0 1600 	strd	r1, r6, [r0]
 80077b4:	300c      	adds	r0, #12
 80077b6:	60a0      	str	r0, [r4, #8]
 80077b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077bc:	f7ff fc6a 	bl	8007094 <memset>
 80077c0:	4620      	mov	r0, r4
 80077c2:	bd70      	pop	{r4, r5, r6, pc}

080077c4 <__sfp_lock_acquire>:
 80077c4:	4801      	ldr	r0, [pc, #4]	; (80077cc <__sfp_lock_acquire+0x8>)
 80077c6:	f000 b8b3 	b.w	8007930 <__retarget_lock_acquire_recursive>
 80077ca:	bf00      	nop
 80077cc:	200004c9 	.word	0x200004c9

080077d0 <__sfp_lock_release>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_release+0x8>)
 80077d2:	f000 b8ae 	b.w	8007932 <__retarget_lock_release_recursive>
 80077d6:	bf00      	nop
 80077d8:	200004c9 	.word	0x200004c9

080077dc <__sinit_lock_acquire>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sinit_lock_acquire+0x8>)
 80077de:	f000 b8a7 	b.w	8007930 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	200004ca 	.word	0x200004ca

080077e8 <__sinit_lock_release>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__sinit_lock_release+0x8>)
 80077ea:	f000 b8a2 	b.w	8007932 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	200004ca 	.word	0x200004ca

080077f4 <__sinit>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4604      	mov	r4, r0
 80077f8:	f7ff fff0 	bl	80077dc <__sinit_lock_acquire>
 80077fc:	69a3      	ldr	r3, [r4, #24]
 80077fe:	b11b      	cbz	r3, 8007808 <__sinit+0x14>
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f7ff bff0 	b.w	80077e8 <__sinit_lock_release>
 8007808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800780c:	6523      	str	r3, [r4, #80]	; 0x50
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <__sinit+0x68>)
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <__sinit+0x6c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	62a2      	str	r2, [r4, #40]	; 0x28
 8007816:	42a3      	cmp	r3, r4
 8007818:	bf04      	itt	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	61a3      	streq	r3, [r4, #24]
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f820 	bl	8007864 <__sfp>
 8007824:	6060      	str	r0, [r4, #4]
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f81c 	bl	8007864 <__sfp>
 800782c:	60a0      	str	r0, [r4, #8]
 800782e:	4620      	mov	r0, r4
 8007830:	f000 f818 	bl	8007864 <__sfp>
 8007834:	2200      	movs	r2, #0
 8007836:	60e0      	str	r0, [r4, #12]
 8007838:	2104      	movs	r1, #4
 800783a:	6860      	ldr	r0, [r4, #4]
 800783c:	f7ff ff82 	bl	8007744 <std>
 8007840:	68a0      	ldr	r0, [r4, #8]
 8007842:	2201      	movs	r2, #1
 8007844:	2109      	movs	r1, #9
 8007846:	f7ff ff7d 	bl	8007744 <std>
 800784a:	68e0      	ldr	r0, [r4, #12]
 800784c:	2202      	movs	r2, #2
 800784e:	2112      	movs	r1, #18
 8007850:	f7ff ff78 	bl	8007744 <std>
 8007854:	2301      	movs	r3, #1
 8007856:	61a3      	str	r3, [r4, #24]
 8007858:	e7d2      	b.n	8007800 <__sinit+0xc>
 800785a:	bf00      	nop
 800785c:	080084d4 	.word	0x080084d4
 8007860:	0800778d 	.word	0x0800778d

08007864 <__sfp>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	4607      	mov	r7, r0
 8007868:	f7ff ffac 	bl	80077c4 <__sfp_lock_acquire>
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <__sfp+0x84>)
 800786e:	681e      	ldr	r6, [r3, #0]
 8007870:	69b3      	ldr	r3, [r6, #24]
 8007872:	b913      	cbnz	r3, 800787a <__sfp+0x16>
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff ffbd 	bl	80077f4 <__sinit>
 800787a:	3648      	adds	r6, #72	; 0x48
 800787c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007880:	3b01      	subs	r3, #1
 8007882:	d503      	bpl.n	800788c <__sfp+0x28>
 8007884:	6833      	ldr	r3, [r6, #0]
 8007886:	b30b      	cbz	r3, 80078cc <__sfp+0x68>
 8007888:	6836      	ldr	r6, [r6, #0]
 800788a:	e7f7      	b.n	800787c <__sfp+0x18>
 800788c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007890:	b9d5      	cbnz	r5, 80078c8 <__sfp+0x64>
 8007892:	4b16      	ldr	r3, [pc, #88]	; (80078ec <__sfp+0x88>)
 8007894:	60e3      	str	r3, [r4, #12]
 8007896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800789a:	6665      	str	r5, [r4, #100]	; 0x64
 800789c:	f000 f847 	bl	800792e <__retarget_lock_init_recursive>
 80078a0:	f7ff ff96 	bl	80077d0 <__sfp_lock_release>
 80078a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078ac:	6025      	str	r5, [r4, #0]
 80078ae:	61a5      	str	r5, [r4, #24]
 80078b0:	2208      	movs	r2, #8
 80078b2:	4629      	mov	r1, r5
 80078b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078b8:	f7ff fbec 	bl	8007094 <memset>
 80078bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078c4:	4620      	mov	r0, r4
 80078c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c8:	3468      	adds	r4, #104	; 0x68
 80078ca:	e7d9      	b.n	8007880 <__sfp+0x1c>
 80078cc:	2104      	movs	r1, #4
 80078ce:	4638      	mov	r0, r7
 80078d0:	f7ff ff62 	bl	8007798 <__sfmoreglue>
 80078d4:	4604      	mov	r4, r0
 80078d6:	6030      	str	r0, [r6, #0]
 80078d8:	2800      	cmp	r0, #0
 80078da:	d1d5      	bne.n	8007888 <__sfp+0x24>
 80078dc:	f7ff ff78 	bl	80077d0 <__sfp_lock_release>
 80078e0:	230c      	movs	r3, #12
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	e7ee      	b.n	80078c4 <__sfp+0x60>
 80078e6:	bf00      	nop
 80078e8:	080084d4 	.word	0x080084d4
 80078ec:	ffff0001 	.word	0xffff0001

080078f0 <_fwalk_reent>:
 80078f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f4:	4606      	mov	r6, r0
 80078f6:	4688      	mov	r8, r1
 80078f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078fc:	2700      	movs	r7, #0
 80078fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007902:	f1b9 0901 	subs.w	r9, r9, #1
 8007906:	d505      	bpl.n	8007914 <_fwalk_reent+0x24>
 8007908:	6824      	ldr	r4, [r4, #0]
 800790a:	2c00      	cmp	r4, #0
 800790c:	d1f7      	bne.n	80078fe <_fwalk_reent+0xe>
 800790e:	4638      	mov	r0, r7
 8007910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007914:	89ab      	ldrh	r3, [r5, #12]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d907      	bls.n	800792a <_fwalk_reent+0x3a>
 800791a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800791e:	3301      	adds	r3, #1
 8007920:	d003      	beq.n	800792a <_fwalk_reent+0x3a>
 8007922:	4629      	mov	r1, r5
 8007924:	4630      	mov	r0, r6
 8007926:	47c0      	blx	r8
 8007928:	4307      	orrs	r7, r0
 800792a:	3568      	adds	r5, #104	; 0x68
 800792c:	e7e9      	b.n	8007902 <_fwalk_reent+0x12>

0800792e <__retarget_lock_init_recursive>:
 800792e:	4770      	bx	lr

08007930 <__retarget_lock_acquire_recursive>:
 8007930:	4770      	bx	lr

08007932 <__retarget_lock_release_recursive>:
 8007932:	4770      	bx	lr

08007934 <__swhatbuf_r>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	460e      	mov	r6, r1
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	2900      	cmp	r1, #0
 800793e:	b096      	sub	sp, #88	; 0x58
 8007940:	4614      	mov	r4, r2
 8007942:	461d      	mov	r5, r3
 8007944:	da08      	bge.n	8007958 <__swhatbuf_r+0x24>
 8007946:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	602a      	str	r2, [r5, #0]
 800794e:	061a      	lsls	r2, r3, #24
 8007950:	d410      	bmi.n	8007974 <__swhatbuf_r+0x40>
 8007952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007956:	e00e      	b.n	8007976 <__swhatbuf_r+0x42>
 8007958:	466a      	mov	r2, sp
 800795a:	f000 fbb1 	bl	80080c0 <_fstat_r>
 800795e:	2800      	cmp	r0, #0
 8007960:	dbf1      	blt.n	8007946 <__swhatbuf_r+0x12>
 8007962:	9a01      	ldr	r2, [sp, #4]
 8007964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800796c:	425a      	negs	r2, r3
 800796e:	415a      	adcs	r2, r3
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	e7ee      	b.n	8007952 <__swhatbuf_r+0x1e>
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	2000      	movs	r0, #0
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	b016      	add	sp, #88	; 0x58
 800797c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007980 <__smakebuf_r>:
 8007980:	898b      	ldrh	r3, [r1, #12]
 8007982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007984:	079d      	lsls	r5, r3, #30
 8007986:	4606      	mov	r6, r0
 8007988:	460c      	mov	r4, r1
 800798a:	d507      	bpl.n	800799c <__smakebuf_r+0x1c>
 800798c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	6123      	str	r3, [r4, #16]
 8007994:	2301      	movs	r3, #1
 8007996:	6163      	str	r3, [r4, #20]
 8007998:	b002      	add	sp, #8
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	ab01      	add	r3, sp, #4
 800799e:	466a      	mov	r2, sp
 80079a0:	f7ff ffc8 	bl	8007934 <__swhatbuf_r>
 80079a4:	9900      	ldr	r1, [sp, #0]
 80079a6:	4605      	mov	r5, r0
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff fbe7 	bl	800717c <_malloc_r>
 80079ae:	b948      	cbnz	r0, 80079c4 <__smakebuf_r+0x44>
 80079b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b4:	059a      	lsls	r2, r3, #22
 80079b6:	d4ef      	bmi.n	8007998 <__smakebuf_r+0x18>
 80079b8:	f023 0303 	bic.w	r3, r3, #3
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	e7e3      	b.n	800798c <__smakebuf_r+0xc>
 80079c4:	4b0d      	ldr	r3, [pc, #52]	; (80079fc <__smakebuf_r+0x7c>)
 80079c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	6020      	str	r0, [r4, #0]
 80079cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	9b00      	ldr	r3, [sp, #0]
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	6120      	str	r0, [r4, #16]
 80079da:	b15b      	cbz	r3, 80079f4 <__smakebuf_r+0x74>
 80079dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e0:	4630      	mov	r0, r6
 80079e2:	f000 fb7f 	bl	80080e4 <_isatty_r>
 80079e6:	b128      	cbz	r0, 80079f4 <__smakebuf_r+0x74>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	f043 0301 	orr.w	r3, r3, #1
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	89a0      	ldrh	r0, [r4, #12]
 80079f6:	4305      	orrs	r5, r0
 80079f8:	81a5      	strh	r5, [r4, #12]
 80079fa:	e7cd      	b.n	8007998 <__smakebuf_r+0x18>
 80079fc:	0800778d 	.word	0x0800778d

08007a00 <__malloc_lock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__malloc_lock+0x8>)
 8007a02:	f7ff bf95 	b.w	8007930 <__retarget_lock_acquire_recursive>
 8007a06:	bf00      	nop
 8007a08:	200004c8 	.word	0x200004c8

08007a0c <__malloc_unlock>:
 8007a0c:	4801      	ldr	r0, [pc, #4]	; (8007a14 <__malloc_unlock+0x8>)
 8007a0e:	f7ff bf90 	b.w	8007932 <__retarget_lock_release_recursive>
 8007a12:	bf00      	nop
 8007a14:	200004c8 	.word	0x200004c8

08007a18 <__sfputc_r>:
 8007a18:	6893      	ldr	r3, [r2, #8]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	b410      	push	{r4}
 8007a20:	6093      	str	r3, [r2, #8]
 8007a22:	da08      	bge.n	8007a36 <__sfputc_r+0x1e>
 8007a24:	6994      	ldr	r4, [r2, #24]
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	db01      	blt.n	8007a2e <__sfputc_r+0x16>
 8007a2a:	290a      	cmp	r1, #10
 8007a2c:	d103      	bne.n	8007a36 <__sfputc_r+0x1e>
 8007a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a32:	f7ff bd05 	b.w	8007440 <__swbuf_r>
 8007a36:	6813      	ldr	r3, [r2, #0]
 8007a38:	1c58      	adds	r0, r3, #1
 8007a3a:	6010      	str	r0, [r2, #0]
 8007a3c:	7019      	strb	r1, [r3, #0]
 8007a3e:	4608      	mov	r0, r1
 8007a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <__sfputs_r>:
 8007a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a48:	4606      	mov	r6, r0
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	18d5      	adds	r5, r2, r3
 8007a50:	42ac      	cmp	r4, r5
 8007a52:	d101      	bne.n	8007a58 <__sfputs_r+0x12>
 8007a54:	2000      	movs	r0, #0
 8007a56:	e007      	b.n	8007a68 <__sfputs_r+0x22>
 8007a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5c:	463a      	mov	r2, r7
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff ffda 	bl	8007a18 <__sfputc_r>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d1f3      	bne.n	8007a50 <__sfputs_r+0xa>
 8007a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a6c <_vfiprintf_r>:
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	460d      	mov	r5, r1
 8007a72:	b09d      	sub	sp, #116	; 0x74
 8007a74:	4614      	mov	r4, r2
 8007a76:	4698      	mov	r8, r3
 8007a78:	4606      	mov	r6, r0
 8007a7a:	b118      	cbz	r0, 8007a84 <_vfiprintf_r+0x18>
 8007a7c:	6983      	ldr	r3, [r0, #24]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <_vfiprintf_r+0x18>
 8007a80:	f7ff feb8 	bl	80077f4 <__sinit>
 8007a84:	4b89      	ldr	r3, [pc, #548]	; (8007cac <_vfiprintf_r+0x240>)
 8007a86:	429d      	cmp	r5, r3
 8007a88:	d11b      	bne.n	8007ac2 <_vfiprintf_r+0x56>
 8007a8a:	6875      	ldr	r5, [r6, #4]
 8007a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a8e:	07d9      	lsls	r1, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_vfiprintf_r+0x32>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	059a      	lsls	r2, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_vfiprintf_r+0x32>
 8007a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9a:	f7ff ff49 	bl	8007930 <__retarget_lock_acquire_recursive>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	071b      	lsls	r3, r3, #28
 8007aa2:	d501      	bpl.n	8007aa8 <_vfiprintf_r+0x3c>
 8007aa4:	692b      	ldr	r3, [r5, #16]
 8007aa6:	b9eb      	cbnz	r3, 8007ae4 <_vfiprintf_r+0x78>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f7ff fd1a 	bl	80074e4 <__swsetup_r>
 8007ab0:	b1c0      	cbz	r0, 8007ae4 <_vfiprintf_r+0x78>
 8007ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ab4:	07dc      	lsls	r4, r3, #31
 8007ab6:	d50e      	bpl.n	8007ad6 <_vfiprintf_r+0x6a>
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8007abc:	b01d      	add	sp, #116	; 0x74
 8007abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac2:	4b7b      	ldr	r3, [pc, #492]	; (8007cb0 <_vfiprintf_r+0x244>)
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	d101      	bne.n	8007acc <_vfiprintf_r+0x60>
 8007ac8:	68b5      	ldr	r5, [r6, #8]
 8007aca:	e7df      	b.n	8007a8c <_vfiprintf_r+0x20>
 8007acc:	4b79      	ldr	r3, [pc, #484]	; (8007cb4 <_vfiprintf_r+0x248>)
 8007ace:	429d      	cmp	r5, r3
 8007ad0:	bf08      	it	eq
 8007ad2:	68f5      	ldreq	r5, [r6, #12]
 8007ad4:	e7da      	b.n	8007a8c <_vfiprintf_r+0x20>
 8007ad6:	89ab      	ldrh	r3, [r5, #12]
 8007ad8:	0598      	lsls	r0, r3, #22
 8007ada:	d4ed      	bmi.n	8007ab8 <_vfiprintf_r+0x4c>
 8007adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ade:	f7ff ff28 	bl	8007932 <__retarget_lock_release_recursive>
 8007ae2:	e7e9      	b.n	8007ab8 <_vfiprintf_r+0x4c>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae8:	2320      	movs	r3, #32
 8007aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af2:	2330      	movs	r3, #48	; 0x30
 8007af4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cb8 <_vfiprintf_r+0x24c>
 8007af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007afc:	f04f 0901 	mov.w	r9, #1
 8007b00:	4623      	mov	r3, r4
 8007b02:	469a      	mov	sl, r3
 8007b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b08:	b10a      	cbz	r2, 8007b0e <_vfiprintf_r+0xa2>
 8007b0a:	2a25      	cmp	r2, #37	; 0x25
 8007b0c:	d1f9      	bne.n	8007b02 <_vfiprintf_r+0x96>
 8007b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b12:	d00b      	beq.n	8007b2c <_vfiprintf_r+0xc0>
 8007b14:	465b      	mov	r3, fp
 8007b16:	4622      	mov	r2, r4
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ff93 	bl	8007a46 <__sfputs_r>
 8007b20:	3001      	adds	r0, #1
 8007b22:	f000 80aa 	beq.w	8007c7a <_vfiprintf_r+0x20e>
 8007b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b28:	445a      	add	r2, fp
 8007b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80a2 	beq.w	8007c7a <_vfiprintf_r+0x20e>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b40:	f10a 0a01 	add.w	sl, sl, #1
 8007b44:	9304      	str	r3, [sp, #16]
 8007b46:	9307      	str	r3, [sp, #28]
 8007b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b4e:	4654      	mov	r4, sl
 8007b50:	2205      	movs	r2, #5
 8007b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b56:	4858      	ldr	r0, [pc, #352]	; (8007cb8 <_vfiprintf_r+0x24c>)
 8007b58:	f7f8 fb3a 	bl	80001d0 <memchr>
 8007b5c:	9a04      	ldr	r2, [sp, #16]
 8007b5e:	b9d8      	cbnz	r0, 8007b98 <_vfiprintf_r+0x12c>
 8007b60:	06d1      	lsls	r1, r2, #27
 8007b62:	bf44      	itt	mi
 8007b64:	2320      	movmi	r3, #32
 8007b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b6a:	0713      	lsls	r3, r2, #28
 8007b6c:	bf44      	itt	mi
 8007b6e:	232b      	movmi	r3, #43	; 0x2b
 8007b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b74:	f89a 3000 	ldrb.w	r3, [sl]
 8007b78:	2b2a      	cmp	r3, #42	; 0x2a
 8007b7a:	d015      	beq.n	8007ba8 <_vfiprintf_r+0x13c>
 8007b7c:	9a07      	ldr	r2, [sp, #28]
 8007b7e:	4654      	mov	r4, sl
 8007b80:	2000      	movs	r0, #0
 8007b82:	f04f 0c0a 	mov.w	ip, #10
 8007b86:	4621      	mov	r1, r4
 8007b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b8c:	3b30      	subs	r3, #48	; 0x30
 8007b8e:	2b09      	cmp	r3, #9
 8007b90:	d94e      	bls.n	8007c30 <_vfiprintf_r+0x1c4>
 8007b92:	b1b0      	cbz	r0, 8007bc2 <_vfiprintf_r+0x156>
 8007b94:	9207      	str	r2, [sp, #28]
 8007b96:	e014      	b.n	8007bc2 <_vfiprintf_r+0x156>
 8007b98:	eba0 0308 	sub.w	r3, r0, r8
 8007b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	46a2      	mov	sl, r4
 8007ba6:	e7d2      	b.n	8007b4e <_vfiprintf_r+0xe2>
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	1d19      	adds	r1, r3, #4
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	9103      	str	r1, [sp, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	bfbb      	ittet	lt
 8007bb4:	425b      	neglt	r3, r3
 8007bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bba:	9307      	strge	r3, [sp, #28]
 8007bbc:	9307      	strlt	r3, [sp, #28]
 8007bbe:	bfb8      	it	lt
 8007bc0:	9204      	strlt	r2, [sp, #16]
 8007bc2:	7823      	ldrb	r3, [r4, #0]
 8007bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8007bc6:	d10c      	bne.n	8007be2 <_vfiprintf_r+0x176>
 8007bc8:	7863      	ldrb	r3, [r4, #1]
 8007bca:	2b2a      	cmp	r3, #42	; 0x2a
 8007bcc:	d135      	bne.n	8007c3a <_vfiprintf_r+0x1ce>
 8007bce:	9b03      	ldr	r3, [sp, #12]
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	9203      	str	r2, [sp, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfb8      	it	lt
 8007bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bde:	3402      	adds	r4, #2
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cc8 <_vfiprintf_r+0x25c>
 8007be6:	7821      	ldrb	r1, [r4, #0]
 8007be8:	2203      	movs	r2, #3
 8007bea:	4650      	mov	r0, sl
 8007bec:	f7f8 faf0 	bl	80001d0 <memchr>
 8007bf0:	b140      	cbz	r0, 8007c04 <_vfiprintf_r+0x198>
 8007bf2:	2340      	movs	r3, #64	; 0x40
 8007bf4:	eba0 000a 	sub.w	r0, r0, sl
 8007bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8007bfc:	9b04      	ldr	r3, [sp, #16]
 8007bfe:	4303      	orrs	r3, r0
 8007c00:	3401      	adds	r4, #1
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c08:	482c      	ldr	r0, [pc, #176]	; (8007cbc <_vfiprintf_r+0x250>)
 8007c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c0e:	2206      	movs	r2, #6
 8007c10:	f7f8 fade 	bl	80001d0 <memchr>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d03f      	beq.n	8007c98 <_vfiprintf_r+0x22c>
 8007c18:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <_vfiprintf_r+0x254>)
 8007c1a:	bb1b      	cbnz	r3, 8007c64 <_vfiprintf_r+0x1f8>
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	3307      	adds	r3, #7
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	3308      	adds	r3, #8
 8007c26:	9303      	str	r3, [sp, #12]
 8007c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c2a:	443b      	add	r3, r7
 8007c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c2e:	e767      	b.n	8007b00 <_vfiprintf_r+0x94>
 8007c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c34:	460c      	mov	r4, r1
 8007c36:	2001      	movs	r0, #1
 8007c38:	e7a5      	b.n	8007b86 <_vfiprintf_r+0x11a>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	3401      	adds	r4, #1
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f04f 0c0a 	mov.w	ip, #10
 8007c46:	4620      	mov	r0, r4
 8007c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c4c:	3a30      	subs	r2, #48	; 0x30
 8007c4e:	2a09      	cmp	r2, #9
 8007c50:	d903      	bls.n	8007c5a <_vfiprintf_r+0x1ee>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0c5      	beq.n	8007be2 <_vfiprintf_r+0x176>
 8007c56:	9105      	str	r1, [sp, #20]
 8007c58:	e7c3      	b.n	8007be2 <_vfiprintf_r+0x176>
 8007c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c5e:	4604      	mov	r4, r0
 8007c60:	2301      	movs	r3, #1
 8007c62:	e7f0      	b.n	8007c46 <_vfiprintf_r+0x1da>
 8007c64:	ab03      	add	r3, sp, #12
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	462a      	mov	r2, r5
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <_vfiprintf_r+0x258>)
 8007c6c:	a904      	add	r1, sp, #16
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f3af 8000 	nop.w
 8007c74:	4607      	mov	r7, r0
 8007c76:	1c78      	adds	r0, r7, #1
 8007c78:	d1d6      	bne.n	8007c28 <_vfiprintf_r+0x1bc>
 8007c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c7c:	07d9      	lsls	r1, r3, #31
 8007c7e:	d405      	bmi.n	8007c8c <_vfiprintf_r+0x220>
 8007c80:	89ab      	ldrh	r3, [r5, #12]
 8007c82:	059a      	lsls	r2, r3, #22
 8007c84:	d402      	bmi.n	8007c8c <_vfiprintf_r+0x220>
 8007c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c88:	f7ff fe53 	bl	8007932 <__retarget_lock_release_recursive>
 8007c8c:	89ab      	ldrh	r3, [r5, #12]
 8007c8e:	065b      	lsls	r3, r3, #25
 8007c90:	f53f af12 	bmi.w	8007ab8 <_vfiprintf_r+0x4c>
 8007c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c96:	e711      	b.n	8007abc <_vfiprintf_r+0x50>
 8007c98:	ab03      	add	r3, sp, #12
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	462a      	mov	r2, r5
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <_vfiprintf_r+0x258>)
 8007ca0:	a904      	add	r1, sp, #16
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	f000 f880 	bl	8007da8 <_printf_i>
 8007ca8:	e7e4      	b.n	8007c74 <_vfiprintf_r+0x208>
 8007caa:	bf00      	nop
 8007cac:	080084f8 	.word	0x080084f8
 8007cb0:	08008518 	.word	0x08008518
 8007cb4:	080084d8 	.word	0x080084d8
 8007cb8:	08008538 	.word	0x08008538
 8007cbc:	08008542 	.word	0x08008542
 8007cc0:	00000000 	.word	0x00000000
 8007cc4:	08007a47 	.word	0x08007a47
 8007cc8:	0800853e 	.word	0x0800853e

08007ccc <_printf_common>:
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	688a      	ldr	r2, [r1, #8]
 8007cd6:	690b      	ldr	r3, [r1, #16]
 8007cd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	bfb8      	it	lt
 8007ce0:	4613      	movlt	r3, r2
 8007ce2:	6033      	str	r3, [r6, #0]
 8007ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ce8:	4607      	mov	r7, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b10a      	cbz	r2, 8007cf2 <_printf_common+0x26>
 8007cee:	3301      	adds	r3, #1
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	6823      	ldr	r3, [r4, #0]
 8007cf4:	0699      	lsls	r1, r3, #26
 8007cf6:	bf42      	ittt	mi
 8007cf8:	6833      	ldrmi	r3, [r6, #0]
 8007cfa:	3302      	addmi	r3, #2
 8007cfc:	6033      	strmi	r3, [r6, #0]
 8007cfe:	6825      	ldr	r5, [r4, #0]
 8007d00:	f015 0506 	ands.w	r5, r5, #6
 8007d04:	d106      	bne.n	8007d14 <_printf_common+0x48>
 8007d06:	f104 0a19 	add.w	sl, r4, #25
 8007d0a:	68e3      	ldr	r3, [r4, #12]
 8007d0c:	6832      	ldr	r2, [r6, #0]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	42ab      	cmp	r3, r5
 8007d12:	dc26      	bgt.n	8007d62 <_printf_common+0x96>
 8007d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d18:	1e13      	subs	r3, r2, #0
 8007d1a:	6822      	ldr	r2, [r4, #0]
 8007d1c:	bf18      	it	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	0692      	lsls	r2, r2, #26
 8007d22:	d42b      	bmi.n	8007d7c <_printf_common+0xb0>
 8007d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	47c0      	blx	r8
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d01e      	beq.n	8007d70 <_printf_common+0xa4>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	68e5      	ldr	r5, [r4, #12]
 8007d36:	6832      	ldr	r2, [r6, #0]
 8007d38:	f003 0306 	and.w	r3, r3, #6
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	bf08      	it	eq
 8007d40:	1aad      	subeq	r5, r5, r2
 8007d42:	68a3      	ldr	r3, [r4, #8]
 8007d44:	6922      	ldr	r2, [r4, #16]
 8007d46:	bf0c      	ite	eq
 8007d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d4c:	2500      	movne	r5, #0
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	bfc4      	itt	gt
 8007d52:	1a9b      	subgt	r3, r3, r2
 8007d54:	18ed      	addgt	r5, r5, r3
 8007d56:	2600      	movs	r6, #0
 8007d58:	341a      	adds	r4, #26
 8007d5a:	42b5      	cmp	r5, r6
 8007d5c:	d11a      	bne.n	8007d94 <_printf_common+0xc8>
 8007d5e:	2000      	movs	r0, #0
 8007d60:	e008      	b.n	8007d74 <_printf_common+0xa8>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4652      	mov	r2, sl
 8007d66:	4649      	mov	r1, r9
 8007d68:	4638      	mov	r0, r7
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d103      	bne.n	8007d78 <_printf_common+0xac>
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295
 8007d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d78:	3501      	adds	r5, #1
 8007d7a:	e7c6      	b.n	8007d0a <_printf_common+0x3e>
 8007d7c:	18e1      	adds	r1, r4, r3
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	2030      	movs	r0, #48	; 0x30
 8007d82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d86:	4422      	add	r2, r4
 8007d88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d90:	3302      	adds	r3, #2
 8007d92:	e7c7      	b.n	8007d24 <_printf_common+0x58>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4622      	mov	r2, r4
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c0      	blx	r8
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d0e6      	beq.n	8007d70 <_printf_common+0xa4>
 8007da2:	3601      	adds	r6, #1
 8007da4:	e7d9      	b.n	8007d5a <_printf_common+0x8e>
	...

08007da8 <_printf_i>:
 8007da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dac:	7e0f      	ldrb	r7, [r1, #24]
 8007dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db0:	2f78      	cmp	r7, #120	; 0x78
 8007db2:	4691      	mov	r9, r2
 8007db4:	4680      	mov	r8, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	469a      	mov	sl, r3
 8007dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dbe:	d807      	bhi.n	8007dd0 <_printf_i+0x28>
 8007dc0:	2f62      	cmp	r7, #98	; 0x62
 8007dc2:	d80a      	bhi.n	8007dda <_printf_i+0x32>
 8007dc4:	2f00      	cmp	r7, #0
 8007dc6:	f000 80d8 	beq.w	8007f7a <_printf_i+0x1d2>
 8007dca:	2f58      	cmp	r7, #88	; 0x58
 8007dcc:	f000 80a3 	beq.w	8007f16 <_printf_i+0x16e>
 8007dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dd8:	e03a      	b.n	8007e50 <_printf_i+0xa8>
 8007dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dde:	2b15      	cmp	r3, #21
 8007de0:	d8f6      	bhi.n	8007dd0 <_printf_i+0x28>
 8007de2:	a101      	add	r1, pc, #4	; (adr r1, 8007de8 <_printf_i+0x40>)
 8007de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007de8:	08007e41 	.word	0x08007e41
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007dd1 	.word	0x08007dd1
 8007df4:	08007dd1 	.word	0x08007dd1
 8007df8:	08007dd1 	.word	0x08007dd1
 8007dfc:	08007dd1 	.word	0x08007dd1
 8007e00:	08007e55 	.word	0x08007e55
 8007e04:	08007dd1 	.word	0x08007dd1
 8007e08:	08007dd1 	.word	0x08007dd1
 8007e0c:	08007dd1 	.word	0x08007dd1
 8007e10:	08007dd1 	.word	0x08007dd1
 8007e14:	08007f61 	.word	0x08007f61
 8007e18:	08007e85 	.word	0x08007e85
 8007e1c:	08007f43 	.word	0x08007f43
 8007e20:	08007dd1 	.word	0x08007dd1
 8007e24:	08007dd1 	.word	0x08007dd1
 8007e28:	08007f83 	.word	0x08007f83
 8007e2c:	08007dd1 	.word	0x08007dd1
 8007e30:	08007e85 	.word	0x08007e85
 8007e34:	08007dd1 	.word	0x08007dd1
 8007e38:	08007dd1 	.word	0x08007dd1
 8007e3c:	08007f4b 	.word	0x08007f4b
 8007e40:	682b      	ldr	r3, [r5, #0]
 8007e42:	1d1a      	adds	r2, r3, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	602a      	str	r2, [r5, #0]
 8007e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0a3      	b.n	8007f9c <_printf_i+0x1f4>
 8007e54:	6820      	ldr	r0, [r4, #0]
 8007e56:	6829      	ldr	r1, [r5, #0]
 8007e58:	0606      	lsls	r6, r0, #24
 8007e5a:	f101 0304 	add.w	r3, r1, #4
 8007e5e:	d50a      	bpl.n	8007e76 <_printf_i+0xce>
 8007e60:	680e      	ldr	r6, [r1, #0]
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	da03      	bge.n	8007e70 <_printf_i+0xc8>
 8007e68:	232d      	movs	r3, #45	; 0x2d
 8007e6a:	4276      	negs	r6, r6
 8007e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e70:	485e      	ldr	r0, [pc, #376]	; (8007fec <_printf_i+0x244>)
 8007e72:	230a      	movs	r3, #10
 8007e74:	e019      	b.n	8007eaa <_printf_i+0x102>
 8007e76:	680e      	ldr	r6, [r1, #0]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e7e:	bf18      	it	ne
 8007e80:	b236      	sxthne	r6, r6
 8007e82:	e7ef      	b.n	8007e64 <_printf_i+0xbc>
 8007e84:	682b      	ldr	r3, [r5, #0]
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	6029      	str	r1, [r5, #0]
 8007e8c:	0601      	lsls	r1, r0, #24
 8007e8e:	d501      	bpl.n	8007e94 <_printf_i+0xec>
 8007e90:	681e      	ldr	r6, [r3, #0]
 8007e92:	e002      	b.n	8007e9a <_printf_i+0xf2>
 8007e94:	0646      	lsls	r6, r0, #25
 8007e96:	d5fb      	bpl.n	8007e90 <_printf_i+0xe8>
 8007e98:	881e      	ldrh	r6, [r3, #0]
 8007e9a:	4854      	ldr	r0, [pc, #336]	; (8007fec <_printf_i+0x244>)
 8007e9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2308      	moveq	r3, #8
 8007ea2:	230a      	movne	r3, #10
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eaa:	6865      	ldr	r5, [r4, #4]
 8007eac:	60a5      	str	r5, [r4, #8]
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	bfa2      	ittt	ge
 8007eb2:	6821      	ldrge	r1, [r4, #0]
 8007eb4:	f021 0104 	bicge.w	r1, r1, #4
 8007eb8:	6021      	strge	r1, [r4, #0]
 8007eba:	b90e      	cbnz	r6, 8007ec0 <_printf_i+0x118>
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d04d      	beq.n	8007f5c <_printf_i+0x1b4>
 8007ec0:	4615      	mov	r5, r2
 8007ec2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ec6:	fb03 6711 	mls	r7, r3, r1, r6
 8007eca:	5dc7      	ldrb	r7, [r0, r7]
 8007ecc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed0:	4637      	mov	r7, r6
 8007ed2:	42bb      	cmp	r3, r7
 8007ed4:	460e      	mov	r6, r1
 8007ed6:	d9f4      	bls.n	8007ec2 <_printf_i+0x11a>
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d10b      	bne.n	8007ef4 <_printf_i+0x14c>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	07de      	lsls	r6, r3, #31
 8007ee0:	d508      	bpl.n	8007ef4 <_printf_i+0x14c>
 8007ee2:	6923      	ldr	r3, [r4, #16]
 8007ee4:	6861      	ldr	r1, [r4, #4]
 8007ee6:	4299      	cmp	r1, r3
 8007ee8:	bfde      	ittt	le
 8007eea:	2330      	movle	r3, #48	; 0x30
 8007eec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ef4:	1b52      	subs	r2, r2, r5
 8007ef6:	6122      	str	r2, [r4, #16]
 8007ef8:	f8cd a000 	str.w	sl, [sp]
 8007efc:	464b      	mov	r3, r9
 8007efe:	aa03      	add	r2, sp, #12
 8007f00:	4621      	mov	r1, r4
 8007f02:	4640      	mov	r0, r8
 8007f04:	f7ff fee2 	bl	8007ccc <_printf_common>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d14c      	bne.n	8007fa6 <_printf_i+0x1fe>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	b004      	add	sp, #16
 8007f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f16:	4835      	ldr	r0, [pc, #212]	; (8007fec <_printf_i+0x244>)
 8007f18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f1c:	6829      	ldr	r1, [r5, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f24:	6029      	str	r1, [r5, #0]
 8007f26:	061d      	lsls	r5, r3, #24
 8007f28:	d514      	bpl.n	8007f54 <_printf_i+0x1ac>
 8007f2a:	07df      	lsls	r7, r3, #31
 8007f2c:	bf44      	itt	mi
 8007f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f32:	6023      	strmi	r3, [r4, #0]
 8007f34:	b91e      	cbnz	r6, 8007f3e <_printf_i+0x196>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f023 0320 	bic.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2310      	movs	r3, #16
 8007f40:	e7b0      	b.n	8007ea4 <_printf_i+0xfc>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	f043 0320 	orr.w	r3, r3, #32
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	2378      	movs	r3, #120	; 0x78
 8007f4c:	4828      	ldr	r0, [pc, #160]	; (8007ff0 <_printf_i+0x248>)
 8007f4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f52:	e7e3      	b.n	8007f1c <_printf_i+0x174>
 8007f54:	0659      	lsls	r1, r3, #25
 8007f56:	bf48      	it	mi
 8007f58:	b2b6      	uxthmi	r6, r6
 8007f5a:	e7e6      	b.n	8007f2a <_printf_i+0x182>
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	e7bb      	b.n	8007ed8 <_printf_i+0x130>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	6826      	ldr	r6, [r4, #0]
 8007f64:	6961      	ldr	r1, [r4, #20]
 8007f66:	1d18      	adds	r0, r3, #4
 8007f68:	6028      	str	r0, [r5, #0]
 8007f6a:	0635      	lsls	r5, r6, #24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	d501      	bpl.n	8007f74 <_printf_i+0x1cc>
 8007f70:	6019      	str	r1, [r3, #0]
 8007f72:	e002      	b.n	8007f7a <_printf_i+0x1d2>
 8007f74:	0670      	lsls	r0, r6, #25
 8007f76:	d5fb      	bpl.n	8007f70 <_printf_i+0x1c8>
 8007f78:	8019      	strh	r1, [r3, #0]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	4615      	mov	r5, r2
 8007f80:	e7ba      	b.n	8007ef8 <_printf_i+0x150>
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	1d1a      	adds	r2, r3, #4
 8007f86:	602a      	str	r2, [r5, #0]
 8007f88:	681d      	ldr	r5, [r3, #0]
 8007f8a:	6862      	ldr	r2, [r4, #4]
 8007f8c:	2100      	movs	r1, #0
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f7f8 f91e 	bl	80001d0 <memchr>
 8007f94:	b108      	cbz	r0, 8007f9a <_printf_i+0x1f2>
 8007f96:	1b40      	subs	r0, r0, r5
 8007f98:	6060      	str	r0, [r4, #4]
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa4:	e7a8      	b.n	8007ef8 <_printf_i+0x150>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4649      	mov	r1, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	47d0      	blx	sl
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0ab      	beq.n	8007f0c <_printf_i+0x164>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	079b      	lsls	r3, r3, #30
 8007fb8:	d413      	bmi.n	8007fe2 <_printf_i+0x23a>
 8007fba:	68e0      	ldr	r0, [r4, #12]
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	4298      	cmp	r0, r3
 8007fc0:	bfb8      	it	lt
 8007fc2:	4618      	movlt	r0, r3
 8007fc4:	e7a4      	b.n	8007f10 <_printf_i+0x168>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4640      	mov	r0, r8
 8007fce:	47d0      	blx	sl
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d09b      	beq.n	8007f0c <_printf_i+0x164>
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	9903      	ldr	r1, [sp, #12]
 8007fda:	1a5b      	subs	r3, r3, r1
 8007fdc:	42ab      	cmp	r3, r5
 8007fde:	dcf2      	bgt.n	8007fc6 <_printf_i+0x21e>
 8007fe0:	e7eb      	b.n	8007fba <_printf_i+0x212>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	f104 0619 	add.w	r6, r4, #25
 8007fe8:	e7f5      	b.n	8007fd6 <_printf_i+0x22e>
 8007fea:	bf00      	nop
 8007fec:	08008549 	.word	0x08008549
 8007ff0:	0800855a 	.word	0x0800855a

08007ff4 <__sread>:
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffc:	f000 f894 	bl	8008128 <_read_r>
 8008000:	2800      	cmp	r0, #0
 8008002:	bfab      	itete	ge
 8008004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008006:	89a3      	ldrhlt	r3, [r4, #12]
 8008008:	181b      	addge	r3, r3, r0
 800800a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800800e:	bfac      	ite	ge
 8008010:	6563      	strge	r3, [r4, #84]	; 0x54
 8008012:	81a3      	strhlt	r3, [r4, #12]
 8008014:	bd10      	pop	{r4, pc}

08008016 <__swrite>:
 8008016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801a:	461f      	mov	r7, r3
 800801c:	898b      	ldrh	r3, [r1, #12]
 800801e:	05db      	lsls	r3, r3, #23
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	4616      	mov	r6, r2
 8008026:	d505      	bpl.n	8008034 <__swrite+0x1e>
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	2302      	movs	r3, #2
 800802e:	2200      	movs	r2, #0
 8008030:	f000 f868 	bl	8008104 <_lseek_r>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800803a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	4632      	mov	r2, r6
 8008042:	463b      	mov	r3, r7
 8008044:	4628      	mov	r0, r5
 8008046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	f000 b817 	b.w	800807c <_write_r>

0800804e <__sseek>:
 800804e:	b510      	push	{r4, lr}
 8008050:	460c      	mov	r4, r1
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 f855 	bl	8008104 <_lseek_r>
 800805a:	1c43      	adds	r3, r0, #1
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	bf15      	itete	ne
 8008060:	6560      	strne	r0, [r4, #84]	; 0x54
 8008062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800806a:	81a3      	strheq	r3, [r4, #12]
 800806c:	bf18      	it	ne
 800806e:	81a3      	strhne	r3, [r4, #12]
 8008070:	bd10      	pop	{r4, pc}

08008072 <__sclose>:
 8008072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008076:	f000 b813 	b.w	80080a0 <_close_r>
	...

0800807c <_write_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	4d07      	ldr	r5, [pc, #28]	; (800809c <_write_r+0x20>)
 8008080:	4604      	mov	r4, r0
 8008082:	4608      	mov	r0, r1
 8008084:	4611      	mov	r1, r2
 8008086:	2200      	movs	r2, #0
 8008088:	602a      	str	r2, [r5, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	f7f9 f874 	bl	8001178 <_write>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_write_r+0x1e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_write_r+0x1e>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	200004cc 	.word	0x200004cc

080080a0 <_close_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d06      	ldr	r5, [pc, #24]	; (80080bc <_close_r+0x1c>)
 80080a4:	2300      	movs	r3, #0
 80080a6:	4604      	mov	r4, r0
 80080a8:	4608      	mov	r0, r1
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	f7f9 f890 	bl	80011d0 <_close>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_close_r+0x1a>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_close_r+0x1a>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	200004cc 	.word	0x200004cc

080080c0 <_fstat_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d07      	ldr	r5, [pc, #28]	; (80080e0 <_fstat_r+0x20>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	602b      	str	r3, [r5, #0]
 80080ce:	f7f9 f8cf 	bl	8001270 <_fstat>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	d102      	bne.n	80080dc <_fstat_r+0x1c>
 80080d6:	682b      	ldr	r3, [r5, #0]
 80080d8:	b103      	cbz	r3, 80080dc <_fstat_r+0x1c>
 80080da:	6023      	str	r3, [r4, #0]
 80080dc:	bd38      	pop	{r3, r4, r5, pc}
 80080de:	bf00      	nop
 80080e0:	200004cc 	.word	0x200004cc

080080e4 <_isatty_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d06      	ldr	r5, [pc, #24]	; (8008100 <_isatty_r+0x1c>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7f9 f82c 	bl	800114c <_isatty>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_isatty_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_isatty_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	200004cc 	.word	0x200004cc

08008104 <_lseek_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d07      	ldr	r5, [pc, #28]	; (8008124 <_lseek_r+0x20>)
 8008108:	4604      	mov	r4, r0
 800810a:	4608      	mov	r0, r1
 800810c:	4611      	mov	r1, r2
 800810e:	2200      	movs	r2, #0
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 f873 	bl	80011fe <_lseek>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_lseek_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_lseek_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200004cc 	.word	0x200004cc

08008128 <_read_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_read_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 f872 	bl	8001220 <_read>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_read_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_read_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200004cc 	.word	0x200004cc

0800814c <_init>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	bf00      	nop
 8008150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008152:	bc08      	pop	{r3}
 8008154:	469e      	mov	lr, r3
 8008156:	4770      	bx	lr

08008158 <_fini>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr
