
stmMother.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012a0  080135c0  080135c0  000235c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014860  08014860  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08014860  08014860  00024860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014868  08014868  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014868  08014868  00024868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801486c  0801486c  0002486c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08014870  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000214  08014a84  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08014a84  00030974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021bb7  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d56  00000000  00000000  00051dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00056b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001858  00000000  00000000  000585c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002268e  00000000  00000000  00059e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000282ef  00000000  00000000  0007c4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c27be  00000000  00000000  000a4795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082fc  00000000  00000000  00166fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0016f2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0016f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080135a8 	.word	0x080135a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	080135a8 	.word	0x080135a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <decodeMeasurementData>:
	}

	*dataSize = iterator;
}

void decodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t dataSize){
 8000eac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000eb0:	b089      	sub	sp, #36	; 0x24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71fb      	strb	r3, [r7, #7]

	uint64_t measurementValue = 0;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for(int i = 0;i<dataSize;i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e022      	b.n	8000f14 <decodeMeasurementData+0x68>
		measurementValue = measurementValue | (((uint64_t)dataArray[i])<<i*8);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4698      	mov	r8, r3
 8000edc:	4691      	mov	r9, r2
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	f1a3 0120 	sub.w	r1, r3, #32
 8000ee6:	f1c3 0220 	rsb	r2, r3, #32
 8000eea:	fa09 f503 	lsl.w	r5, r9, r3
 8000eee:	fa08 f101 	lsl.w	r1, r8, r1
 8000ef2:	430d      	orrs	r5, r1
 8000ef4:	fa28 f202 	lsr.w	r2, r8, r2
 8000ef8:	4315      	orrs	r5, r2
 8000efa:	fa08 f403 	lsl.w	r4, r8, r3
 8000efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f02:	ea42 0a04 	orr.w	sl, r2, r4
 8000f06:	ea43 0b05 	orr.w	fp, r3, r5
 8000f0a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	for(int i = 0;i<dataSize;i++){
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbd8      	blt.n	8000ece <decodeMeasurementData+0x22>
	}

	uint8_t depthSign = ((uint8_t)(measurementValue>>depthValueSignShift))&depthValueSignMask;
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	74fb      	strb	r3, [r7, #19]
	data->depthValue = ((uint16_t)(measurementValue>>depthValueShift))&depthValueMask;
 8000f24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	0842      	lsrs	r2, r0, #1
 8000f32:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8000f36:	084b      	lsrs	r3, r1, #1
 8000f38:	b293      	uxth	r3, r2
 8000f3a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
	if(!depthSign) data->depthValue = data->depthValue * -1;
 8000f42:	7cfb      	ldrb	r3, [r7, #19]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <decodeMeasurementData+0xa6>
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	425a      	negs	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

	data->waterPressureValue = ((uint32_t)(measurementValue>>waterPressureShift))&waterPressureMask;
 8000f52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	0b42      	lsrs	r2, r0, #13
 8000f60:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8000f64:	0b4b      	lsrs	r3, r1, #13
 8000f66:	4613      	mov	r3, r2
 8000f68:	f3c3 0210 	ubfx	r2, r3, #0, #17
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	605a      	str	r2, [r3, #4]

	uint8_t surfaceTemperatureSign = ((uint8_t)(measurementValue>>surfaceTemperatureSignShift))&surfaceTemperatureSignMask;
 8000f70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	0f82      	lsrs	r2, r0, #30
 8000f7e:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8000f82:	0f8b      	lsrs	r3, r1, #30
 8000f84:	b2d3      	uxtb	r3, r2
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	74bb      	strb	r3, [r7, #18]
	data->surfaceTemperatureValue = ((uint16_t)(measurementValue>>surfaceTemperatureShift))&surfaceTemperatureMask;
 8000f8c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	0fc2      	lsrs	r2, r0, #31
 8000f9a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000f9e:	0fcb      	lsrs	r3, r1, #31
 8000fa0:	b293      	uxth	r3, r2
 8000fa2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	609a      	str	r2, [r3, #8]
	if(!surfaceTemperatureSign)	data->surfaceTemperatureValue = data->surfaceTemperatureValue * -1;
 8000faa:	7cbb      	ldrb	r3, [r7, #18]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <decodeMeasurementData+0x10e>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	425a      	negs	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	609a      	str	r2, [r3, #8]

	uint8_t undergroundTemperatureSign = ((uint8_t)(measurementValue>>undergroundTemperatureSignShift))&undergroundTemperatureSignMask;
 8000fba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	0aca      	lsrs	r2, r1, #11
 8000fc8:	2300      	movs	r3, #0
 8000fca:	b2d3      	uxtb	r3, r2
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	747b      	strb	r3, [r7, #17]
	data->undergroundTemperatureValue = ((uint16_t)(measurementValue>>undergroundTemperatureShift))&undergroundTemperatureMask;
 8000fd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	0b0a      	lsrs	r2, r1, #12
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b293      	uxth	r3, r2
 8000fe4:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	60da      	str	r2, [r3, #12]
	if(!undergroundTemperatureSign)	data->undergroundTemperatureValue = data->undergroundTemperatureValue * -1;
 8000fec:	7c7b      	ldrb	r3, [r7, #17]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d104      	bne.n	8000ffc <decodeMeasurementData+0x150>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	425a      	negs	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	60da      	str	r2, [r3, #12]

	data->batteryStatus = ((uint8_t)(measurementValue>>batteryStatusShift))&batteryStatusMask;
 8000ffc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	0e0a      	lsrs	r2, r1, #24
 800100a:	2300      	movs	r3, #0
 800100c:	b2d3      	uxtb	r3, r2
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	611a      	str	r2, [r3, #16]

}
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001020:	4770      	bx	lr
	...

08001024 <Flash_Write_Data>:
 */

#include "../Inc/FlashMemoryAccess.h"

uint32_t Flash_Write_Data (uint32_t startAddress, uint64_t *data, int numberOfWords)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]

	uint32_t address = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]

	address = startAddress;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	61bb      	str	r3, [r7, #24]


	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 800103c:	f006 f9a4 	bl	8007388 <HAL_FLASH_Unlock>
	   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <Flash_Write_Data+0xc4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <Flash_Write_Data+0xc4>)
 8001046:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <Flash_Write_Data+0xc4>)
 800104e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001052:	611a      	str	r2, [r3, #16]

	   /* Erase the user Flash area*/
	   if(address<FLASH_BASE || address>FLASH_END-FLASH_PAGE_SIZE) return 0;
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800105a:	d303      	bcc.n	8001064 <Flash_Write_Data+0x40>
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <Flash_Write_Data+0xc8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d301      	bcc.n	8001068 <Flash_Write_Data+0x44>
 8001064:	2300      	movs	r3, #0
 8001066:	e03a      	b.n	80010de <Flash_Write_Data+0xba>

	   //uint32_t StartPage = (StartAddress-FLASH_BASE)/FLASH_PAGE_SIZE;
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <Flash_Write_Data+0xcc>)
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = (address-FLASH_BASE)/FLASH_PAGE_SIZE;
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001074:	0adb      	lsrs	r3, r3, #11
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <Flash_Write_Data+0xcc>)
 8001078:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = 2;//(numberOfWords/FLASH_PAGE_SIZE) +1;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <Flash_Write_Data+0xcc>)
 800107c:	2202      	movs	r2, #2
 800107e:	60da      	str	r2, [r3, #12]
	   EraseInitStruct.Banks = FLASH_BANK_1;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <Flash_Write_Data+0xcc>)
 8001082:	2201      	movs	r2, #1
 8001084:	605a      	str	r2, [r3, #4]
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4818      	ldr	r0, [pc, #96]	; (80010f0 <Flash_Write_Data+0xcc>)
 800108e:	f006 fa6d 	bl	800756c <HAL_FLASHEx_Erase>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01b      	beq.n	80010d0 <Flash_Write_Data+0xac>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001098:	f006 f9a8 	bl	80073ec <HAL_FLASH_GetError>
 800109c:	4603      	mov	r3, r0
 800109e:	e01e      	b.n	80010de <Flash_Write_Data+0xba>
	   }

	   /* Program the user Flash area word by word*/
	 while (sofar<numberOfWords)
	 {
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[sofar]) == HAL_OK)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	4413      	add	r3, r2
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	2000      	movs	r0, #0
 80010b0:	f006 f8fe 	bl	80072b0 <HAL_FLASH_Program>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <Flash_Write_Data+0xa4>
		 {
			 address += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	3308      	adds	r3, #8
 80010be:	61bb      	str	r3, [r7, #24]
			 sofar++;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e003      	b.n	80010d0 <Flash_Write_Data+0xac>
		 }
		 else{
		     /* Error occurred while writing data in Flash memory*/
			 return HAL_FLASH_GetError ();
 80010c8:	f006 f990 	bl	80073ec <HAL_FLASH_GetError>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e006      	b.n	80010de <Flash_Write_Data+0xba>
	 while (sofar<numberOfWords)
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbe3      	blt.n	80010a0 <Flash_Write_Data+0x7c>
		 }
	 }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80010d8:	f006 f978 	bl	80073cc <HAL_FLASH_Lock>

	   return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000
 80010ec:	0801f800 	.word	0x0801f800
 80010f0:	20000230 	.word	0x20000230

080010f4 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	4613      	mov	r3, r2
 8001100:	80fb      	strh	r3, [r7, #6]
	while (1)
	{
		if (!(numberofwords)) break;
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <Flash_Read_Data+0x34>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3308      	adds	r3, #8
 800111e:	60bb      	str	r3, [r7, #8]
		numberofwords--;
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	3b01      	subs	r3, #1
 8001124:	80fb      	strh	r3, [r7, #6]
		if (!(numberofwords)) break;
 8001126:	e7ec      	b.n	8001102 <Flash_Read_Data+0xe>
 8001128:	bf00      	nop
	}
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <addDeviceData>:
#include <ManagementMother.h>
#include <FlashMemoryAccess.h>
#include <retarget.h>
#include <ctype.h>

void addDeviceData(struct CommunicationHandles* handles, struct deviceData* devices, struct timeData* time, int numberOfDevices){
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af04      	add	r7, sp, #16
 8001142:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8001146:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
 800114a:	6020      	str	r0, [r4, #0]
 800114c:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001150:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
 8001154:	6001      	str	r1, [r0, #0]
 8001156:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800115a:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800115e:	600a      	str	r2, [r1, #0]
 8001160:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001164:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8001168:	6013      	str	r3, [r2, #0]

	FATFS fs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres;

	sdData.fs = &fs;
 800116a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800116e:	f103 0310 	add.w	r3, r3, #16
 8001172:	3b0c      	subs	r3, #12
 8001174:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8001178:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800117c:	6013      	str	r3, [r2, #0]
	sdData.fil = &fil;
 800117e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001182:	3b3c      	subs	r3, #60	; 0x3c
 8001184:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8001188:	6013      	str	r3, [r2, #0]
	sdData.fres = &fres;
 800118a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800118e:	3b3d      	subs	r3, #61	; 0x3d
 8001190:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8001194:	f102 0204 	add.w	r2, r2, #4
 8001198:	6013      	str	r3, [r2, #0]

	if(setupCard(&sdData)){
 800119a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800119e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 f92a 	bl	80053fc <setupCard>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 823a 	beq.w	8001624 <addDeviceData+0x4ec>

		for(int i = 0;i<numberOfDevices;i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80011b6:	f102 020c 	add.w	r2, r2, #12
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e217      	b.n	80015ee <addDeviceData+0x4b6>

			if(devices[i].deviceStatus){
 80011be:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80011c2:	f103 030c 	add.w	r3, r3, #12
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	1a9b      	subs	r3, r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011d6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4413      	add	r3, r2
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 81df 	beq.w	80015a4 <addDeviceData+0x46c>

				char folderName[40];

				char fileName[100];

				sprintf(folderName, "Device_%d", devices[i].deviceID);
 80011e6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80011ea:	f103 030c 	add.w	r3, r3, #12
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	1a9b      	subs	r3, r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	461a      	mov	r2, r3
 80011fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011fe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4413      	add	r3, r2
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	49d9      	ldr	r1, [pc, #868]	; (8001574 <addDeviceData+0x43c>)
 800120e:	4618      	mov	r0, r3
 8001210:	f00f fa60 	bl	80106d4 <siprintf>

				for(int n = 0; n<NUM_READINGS_MAX;n++){
 8001214:	2300      	movs	r3, #0
 8001216:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800121a:	f102 0208 	add.w	r2, r2, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e19f      	b.n	8001562 <addDeviceData+0x42a>

					sprintf(buf, "%d::%d::%d %d/%d/%d\n", time->hours, time->minutes, time->seconds, time->day, time->month, time->year);
 8001222:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001226:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689d      	ldr	r5, [r3, #8]
 800122e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001232:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685e      	ldr	r6, [r3, #4]
 800123a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800123e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800124a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	68d2      	ldr	r2, [r2, #12]
 8001252:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8001256:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 800125a:	6809      	ldr	r1, [r1, #0]
 800125c:	6909      	ldr	r1, [r1, #16]
 800125e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001262:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8001266:	6800      	ldr	r0, [r0, #0]
 8001268:	6944      	ldr	r4, [r0, #20]
 800126a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800126e:	3818      	subs	r0, #24
 8001270:	9403      	str	r4, [sp, #12]
 8001272:	9102      	str	r1, [sp, #8]
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4633      	mov	r3, r6
 800127a:	462a      	mov	r2, r5
 800127c:	49be      	ldr	r1, [pc, #760]	; (8001578 <addDeviceData+0x440>)
 800127e:	f00f fa29 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/Time.txt", folderName);
 8001282:	f107 0210 	add.w	r2, r7, #16
 8001286:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800128a:	3b24      	subs	r3, #36	; 0x24
 800128c:	49bb      	ldr	r1, [pc, #748]	; (800157c <addDeviceData+0x444>)
 800128e:	4618      	mov	r0, r3
 8001290:	f00f fa20 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 8001294:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001298:	3a18      	subs	r2, #24
 800129a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800129e:	3b24      	subs	r3, #36	; 0x24
 80012a0:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 80012a4:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80012a8:	4619      	mov	r1, r3
 80012aa:	f004 f853 	bl	8005354 <sendSD>

					sprintf(buf, "%f\n", ((float)devices[i].measurement.depthValue/10));
 80012ae:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80012b2:	f103 030c 	add.w	r3, r3, #12
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	461a      	mov	r2, r3
 80012c2:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80012c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e0:	ee16 0a90 	vmov	r0, s13
 80012e4:	f7ff f930 	bl	8000548 <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80012f0:	3818      	subs	r0, #24
 80012f2:	49a3      	ldr	r1, [pc, #652]	; (8001580 <addDeviceData+0x448>)
 80012f4:	f00f f9ee 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/DepthChange(mm).txt", folderName);
 80012f8:	f107 0210 	add.w	r2, r7, #16
 80012fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001300:	3b24      	subs	r3, #36	; 0x24
 8001302:	49a0      	ldr	r1, [pc, #640]	; (8001584 <addDeviceData+0x44c>)
 8001304:	4618      	mov	r0, r3
 8001306:	f00f f9e5 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 800130a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800130e:	3a18      	subs	r2, #24
 8001310:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001314:	3b24      	subs	r3, #36	; 0x24
 8001316:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 800131a:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 800131e:	4619      	mov	r1, r3
 8001320:	f004 f818 	bl	8005354 <sendSD>

					sprintf(buf, "%d\n", devices[i].measurement.waterPressureValue);
 8001324:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001328:	f103 030c 	add.w	r3, r3, #12
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800133c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800134a:	3b18      	subs	r3, #24
 800134c:	498e      	ldr	r1, [pc, #568]	; (8001588 <addDeviceData+0x450>)
 800134e:	4618      	mov	r0, r3
 8001350:	f00f f9c0 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/PressureValue(Pa).txt", folderName);
 8001354:	f107 0210 	add.w	r2, r7, #16
 8001358:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800135c:	3b24      	subs	r3, #36	; 0x24
 800135e:	498b      	ldr	r1, [pc, #556]	; (800158c <addDeviceData+0x454>)
 8001360:	4618      	mov	r0, r3
 8001362:	f00f f9b7 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 8001366:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800136a:	3a18      	subs	r2, #24
 800136c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001370:	3b24      	subs	r3, #36	; 0x24
 8001372:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 8001376:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 800137a:	4619      	mov	r1, r3
 800137c:	f003 ffea 	bl	8005354 <sendSD>

					sprintf(buf, "%f\n", ((float)devices[i].measurement.undergroundTemperatureValue/100));
 8001380:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001384:	f103 030c 	add.w	r3, r3, #12
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	461a      	mov	r2, r3
 8001394:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001398:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	ee07 3a90 	vmov	s15, r3
 80013a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013aa:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001590 <addDeviceData+0x458>
 80013ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b2:	ee16 0a90 	vmov	r0, s13
 80013b6:	f7ff f8c7 	bl	8000548 <__aeabi_f2d>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80013c2:	3818      	subs	r0, #24
 80013c4:	496e      	ldr	r1, [pc, #440]	; (8001580 <addDeviceData+0x448>)
 80013c6:	f00f f985 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/UndergroundTemperature(deg).txt", folderName);
 80013ca:	f107 0210 	add.w	r2, r7, #16
 80013ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013d2:	3b24      	subs	r3, #36	; 0x24
 80013d4:	496f      	ldr	r1, [pc, #444]	; (8001594 <addDeviceData+0x45c>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f00f f97c 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 80013dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80013e0:	3a18      	subs	r2, #24
 80013e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80013e6:	3b24      	subs	r3, #36	; 0x24
 80013e8:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 80013ec:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80013f0:	4619      	mov	r1, r3
 80013f2:	f003 ffaf 	bl	8005354 <sendSD>

					sprintf(buf, "%f\n", ((float)devices[i].measurement.surfaceTemperatureValue/100));
 80013f6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80013fa:	f103 030c 	add.w	r3, r3, #12
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	461a      	mov	r2, r3
 800140a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800140e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4413      	add	r3, r2
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001590 <addDeviceData+0x458>
 8001424:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001428:	ee16 0a90 	vmov	r0, s13
 800142c:	f7ff f88c 	bl	8000548 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001438:	3818      	subs	r0, #24
 800143a:	4951      	ldr	r1, [pc, #324]	; (8001580 <addDeviceData+0x448>)
 800143c:	f00f f94a 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/SurfaceTemperature(deg).txt", folderName);
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001448:	3b24      	subs	r3, #36	; 0x24
 800144a:	4953      	ldr	r1, [pc, #332]	; (8001598 <addDeviceData+0x460>)
 800144c:	4618      	mov	r0, r3
 800144e:	f00f f941 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 8001452:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001456:	3a18      	subs	r2, #24
 8001458:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800145c:	3b24      	subs	r3, #36	; 0x24
 800145e:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 8001462:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8001466:	4619      	mov	r1, r3
 8001468:	f003 ff74 	bl	8005354 <sendSD>

					if(devices[i].measurement.batteryStatus == 2){
 800146c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001470:	f103 030c 	add.w	r3, r3, #12
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4613      	mov	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	1a9b      	subs	r3, r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	461a      	mov	r2, r3
 8001480:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001484:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d12e      	bne.n	80014f0 <addDeviceData+0x3b8>
						printf("\r\nadding low battery Device");
 8001492:	4842      	ldr	r0, [pc, #264]	; (800159c <addDeviceData+0x464>)
 8001494:	f00f f818 	bl	80104c8 <iprintf>
						addLowBatteryDevice(&sdData, devices[i].deviceID);
 8001498:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800149c:	f103 030c 	add.w	r3, r3, #12
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	1a9b      	subs	r3, r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	461a      	mov	r2, r3
 80014ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80014b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80014c0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 fb3c 	bl	8002b44 <addLowBatteryDevice>
						devices[i].measurement.batteryStatus = 0;
 80014cc:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80014d0:	f103 030c 	add.w	r3, r3, #12
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80014e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
					}

					sprintf(buf, "%d\n", devices[i].measurement.batteryStatus);
 80014f0:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80014f4:	f103 030c 	add.w	r3, r3, #12
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	461a      	mov	r2, r3
 8001504:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001508:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	699a      	ldr	r2, [r3, #24]
 8001512:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001516:	3b18      	subs	r3, #24
 8001518:	491b      	ldr	r1, [pc, #108]	; (8001588 <addDeviceData+0x450>)
 800151a:	4618      	mov	r0, r3
 800151c:	f00f f8da 	bl	80106d4 <siprintf>
					sprintf(fileName, "%s/BatteryStatus.txt", folderName);
 8001520:	f107 0210 	add.w	r2, r7, #16
 8001524:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001528:	3b24      	subs	r3, #36	; 0x24
 800152a:	491d      	ldr	r1, [pc, #116]	; (80015a0 <addDeviceData+0x468>)
 800152c:	4618      	mov	r0, r3
 800152e:	f00f f8d1 	bl	80106d4 <siprintf>
					sendSD(&sdData, fileName, buf);
 8001532:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001536:	3a18      	subs	r2, #24
 8001538:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800153c:	3b24      	subs	r3, #36	; 0x24
 800153e:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 8001542:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 8001546:	4619      	mov	r1, r3
 8001548:	f003 ff04 	bl	8005354 <sendSD>
				for(int n = 0; n<NUM_READINGS_MAX;n++){
 800154c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001550:	f103 0308 	add.w	r3, r3, #8
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800155c:	f102 0208 	add.w	r2, r2, #8
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8001566:	f103 0308 	add.w	r3, r3, #8
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f77f ae58 	ble.w	8001222 <addDeviceData+0xea>
 8001572:	e031      	b.n	80015d8 <addDeviceData+0x4a0>
 8001574:	080135c0 	.word	0x080135c0
 8001578:	080135cc 	.word	0x080135cc
 800157c:	080135e4 	.word	0x080135e4
 8001580:	080135f0 	.word	0x080135f0
 8001584:	080135f4 	.word	0x080135f4
 8001588:	0801360c 	.word	0x0801360c
 800158c:	08013610 	.word	0x08013610
 8001590:	42c80000 	.word	0x42c80000
 8001594:	0801362c 	.word	0x0801362c
 8001598:	08013650 	.word	0x08013650
 800159c:	08013670 	.word	0x08013670
 80015a0:	0801368c 	.word	0x0801368c

				}
			}
			else{
				addBrokenDevice(&sdData, devices[i].deviceID);
 80015a4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015a8:	f103 030c 	add.w	r3, r3, #12
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	461a      	mov	r2, r3
 80015b8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80015cc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 fa94 	bl	8002b00 <addBrokenDevice>
		for(int i = 0;i<numberOfDevices;i++){
 80015d8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80015dc:	f103 030c 	add.w	r3, r3, #12
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80015e8:	f102 020c 	add.w	r2, r2, #12
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80015f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015f6:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80015fa:	f102 020c 	add.w	r2, r2, #12
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	f6ff addb 	blt.w	80011be <addDeviceData+0x86>
			}
		}

		if(!stopCard(&sdData)){
 8001608:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800160c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001610:	4618      	mov	r0, r3
 8001612:	f003 ff0f 	bl	8005434 <stopCard>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <addDeviceData+0x4f2>

			printf("\r\nSD stop error");
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <addDeviceData+0x500>)
 800161e:	f00e ff53 	bl	80104c8 <iprintf>
	else{

		printf("\r\nSD start error");

	}
}
 8001622:	e002      	b.n	800162a <addDeviceData+0x4f2>
		printf("\r\nSD start error");
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <addDeviceData+0x504>)
 8001626:	f00e ff4f 	bl	80104c8 <iprintf>
}
 800162a:	bf00      	nop
 800162c:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	bf00      	nop
 8001638:	080136a4 	.word	0x080136a4
 800163c:	080136b4 	.word	0x080136b4

08001640 <requestRFData>:

void requestRFData(struct CommunicationHandles* handles, struct deviceData* device, struct rfDataStorage* rfData){
 8001640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001644:	b08e      	sub	sp, #56	; 0x38
 8001646:	af02      	add	r7, sp, #8
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]

	//Define message to send
	rfData->activeTxMessageSize = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22fe      	movs	r2, #254	; 0xfe
 800165a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_DATA;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2247      	movs	r2, #71	; 0x47
 8001662:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = device->deviceID;
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791a      	ldrb	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	int requestSuccessful = false;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int t = 0;t<3;t++){
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
 8001698:	e121      	b.n	80018de <requestRFData+0x29e>

		if(!requestSuccessful){
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 811b 	bne.w	80018d8 <requestRFData+0x298>

			int listeningCounter = 20;
 80016a2:	2314      	movs	r3, #20
 80016a4:	61bb      	str	r3, [r7, #24]

			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80016b2:	3306      	adds	r3, #6
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f003 fd51 	bl	8005160 <Send>

			printf("\r\nScanning for %d", device->deviceID);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4619      	mov	r1, r3
 80016c4:	488d      	ldr	r0, [pc, #564]	; (80018fc <requestRFData+0x2bc>)
 80016c6:	f00e feff 	bl	80104c8 <iprintf>

			for(int c = 0;c<listeningCounter;c++){
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	e0fc      	b.n	80018ca <requestRFData+0x28a>

				Comms_Handler(rfData);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f003 f8e5 	bl	80048a0 <Comms_Handler>

				for(int i = 0; i<rfData->messageNum; i++){
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	e0e5      	b.n	80018a8 <requestRFData+0x268>
					printf("\r\nmessage %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	3373      	adds	r3, #115	; 0x73
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	6a39      	ldr	r1, [r7, #32]
 80016f2:	4883      	ldr	r0, [pc, #524]	; (8001900 <requestRFData+0x2c0>)
 80016f4:	f00e fee8 	bl	80104c8 <iprintf>

					if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_IM_HERE){
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	6a3a      	ldr	r2, [r7, #32]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3373      	adds	r3, #115	; 0x73
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b43      	cmp	r3, #67	; 0x43
 800170c:	d135      	bne.n	800177a <requestRFData+0x13a>
						printf("\r\New device found", rfData->activeRxMessage[i][MSG_FROM_ID_POS]);
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	3375      	adds	r3, #117	; 0x75
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4619      	mov	r1, r3
 8001722:	4878      	ldr	r0, [pc, #480]	; (8001904 <requestRFData+0x2c4>)
 8001724:	f00e fed0 	bl	80104c8 <iprintf>
						acknowledgeDevice(rfData->activeRxMessage[i][MSG_FROM_ID_POS], handles, rfData);
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	6a3a      	ldr	r2, [r7, #32]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	3375      	adds	r3, #117	; 0x75
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68f9      	ldr	r1, [r7, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	f000 fd04 	bl	800214c <acknowledgeDevice>
						rfData->newDevices.newDevices[rfData->newDevices.numOfNewDevices] = rfData->activeRxMessage[i][MSG_FROM_ID_POS];
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	6a3a      	ldr	r2, [r7, #32]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3375      	adds	r3, #117	; 0x75
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800175c:	b291      	uxth	r1, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	339c      	adds	r3, #156	; 0x9c
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	80da      	strh	r2, [r3, #6]
						rfData->newDevices.numOfNewDevices++;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001770:	3301      	adds	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

					}

					if(rfData->activeRxMessage[i][MSG_FROM_ID_POS] == device->deviceID){
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	6a3a      	ldr	r2, [r7, #32]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3375      	adds	r3, #117	; 0x75
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	f040 8085 	bne.w	80018a2 <requestRFData+0x262>
 8001798:	466b      	mov	r3, sp
 800179a:	469a      	mov	sl, r3
						printf("got scan reply from: %d", device->deviceID);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4859      	ldr	r0, [pc, #356]	; (8001908 <requestRFData+0x2c8>)
 80017a4:	f00e fe90 	bl	80104c8 <iprintf>
						requestSuccessful = true;
 80017a8:	2301      	movs	r3, #1
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
						device->deviceStatus = 1;
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2201      	movs	r2, #1
 80017b0:	605a      	str	r2, [r3, #4]
						printf("\r\ndecoding data");
 80017b2:	4856      	ldr	r0, [pc, #344]	; (800190c <requestRFData+0x2cc>)
 80017b4:	f00e fe88 	bl	80104c8 <iprintf>
						uint8_t allData[rfData->activeRxMessage[i][MSG_SIZE_POS]];
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	6a3a      	ldr	r2, [r7, #32]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3377      	adds	r3, #119	; 0x77
 80017c8:	7819      	ldrb	r1, [r3, #0]
 80017ca:	460b      	mov	r3, r1
 80017cc:	3b01      	subs	r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	b2cb      	uxtb	r3, r1
 80017d2:	2200      	movs	r2, #0
 80017d4:	461c      	mov	r4, r3
 80017d6:	4615      	mov	r5, r2
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	00eb      	lsls	r3, r5, #3
 80017e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017e6:	00e2      	lsls	r2, r4, #3
 80017e8:	b2cb      	uxtb	r3, r1
 80017ea:	2200      	movs	r2, #0
 80017ec:	4698      	mov	r8, r3
 80017ee:	4691      	mov	r9, r2
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001800:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001804:	460b      	mov	r3, r1
 8001806:	3307      	adds	r3, #7
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	ebad 0d03 	sub.w	sp, sp, r3
 8001810:	ab02      	add	r3, sp, #8
 8001812:	3300      	adds	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
						for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	e013      	b.n	8001844 <requestRFData+0x204>

								allData[n] = rfData->activeRxMessage[i][n+MSG_BODY_START];
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	1d99      	adds	r1, r3, #6
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4403      	add	r3, r0
 800182e:	440b      	add	r3, r1
 8001830:	3372      	adds	r3, #114	; 0x72
 8001832:	7819      	ldrb	r1, [r3, #0]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	460a      	mov	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
						for(int n = 0;n<rfData->activeRxMessage[i][MSG_SIZE_POS];n++){
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6a3a      	ldr	r2, [r7, #32]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3377      	adds	r3, #119	; 0x77
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	4293      	cmp	r3, r2
 800185c:	dbde      	blt.n	800181c <requestRFData+0x1dc>

						}
						decodeMeasurementData(&(device->measurement), allData, rfData->activeRxMessage[i][MSG_SIZE_POS]);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f103 0008 	add.w	r0, r3, #8
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6a3a      	ldr	r2, [r7, #32]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	3377      	adds	r3, #119	; 0x77
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	6939      	ldr	r1, [r7, #16]
 800187a:	f7ff fb17 	bl	8000eac <decodeMeasurementData>

						printf("\r\nResulting measurement data: %d, %d, %d, %d, %d",
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	68d8      	ldr	r0, [r3, #12]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	691e      	ldr	r6, [r3, #16]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	6992      	ldr	r2, [r2, #24]
 8001892:	9201      	str	r2, [sp, #4]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4633      	mov	r3, r6
 8001898:	4602      	mov	r2, r0
 800189a:	481d      	ldr	r0, [pc, #116]	; (8001910 <requestRFData+0x2d0>)
 800189c:	f00e fe14 	bl	80104c8 <iprintf>
 80018a0:	46d5      	mov	sp, sl
				for(int i = 0; i<rfData->messageNum; i++){
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	3301      	adds	r3, #1
 80018a6:	623b      	str	r3, [r7, #32]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f6ff af12 	blt.w	80016dc <requestRFData+0x9c>
								device->measurement.batteryStatus);

					}
				}

				if(requestSuccessful) break;
 80018b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <requestRFData+0x296>

				HAL_Delay(100);
 80018be:	2064      	movs	r0, #100	; 0x64
 80018c0:	f004 fb7c 	bl	8005fbc <HAL_Delay>
			for(int c = 0;c<listeningCounter;c++){
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	3301      	adds	r3, #1
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	f6ff aefe 	blt.w	80016d0 <requestRFData+0x90>
 80018d4:	e000      	b.n	80018d8 <requestRFData+0x298>
				if(requestSuccessful) break;
 80018d6:	bf00      	nop
	for(int t = 0;t<3;t++){
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	3301      	adds	r3, #1
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80018de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	f77f aeda 	ble.w	800169a <requestRFData+0x5a>

			}
		}
	}

	if(!requestSuccessful){
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <requestRFData+0x2b2>
		device->deviceStatus = 0;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
	}

}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	; 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018fc:	080136c8 	.word	0x080136c8
 8001900:	080136dc 	.word	0x080136dc
 8001904:	080136f4 	.word	0x080136f4
 8001908:	08013708 	.word	0x08013708
 800190c:	08013720 	.word	0x08013720
 8001910:	08013730 	.word	0x08013730

08001914 <scanDeviceForData>:

void scanDeviceForData(struct rfDataStorage* rfData, struct CommunicationHandles* handles, struct timeData* time){
 8001914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001918:	b0b5      	sub	sp, #212	; 0xd4
 800191a:	af00      	add	r7, sp, #0
 800191c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8001920:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001924:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001928:	466b      	mov	r3, sp
 800192a:	461e      	mov	r6, r3

	printf("\r\nScanning devices");
 800192c:	48ca      	ldr	r0, [pc, #808]	; (8001c58 <scanDeviceForData+0x344>)
 800192e:	f00e fdcb 	bl	80104c8 <iprintf>

	//get device number
	uint64_t deviceNum[1];
	Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8001932:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001936:	2201      	movs	r2, #1
 8001938:	4619      	mov	r1, r3
 800193a:	48c8      	ldr	r0, [pc, #800]	; (8001c5c <scanDeviceForData+0x348>)
 800193c:	f7ff fbda 	bl	80010f4 <Flash_Read_Data>

	//get device IDs
	uint64_t deviceIds[deviceNum[0]+1];
 8001940:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001944:	f112 0a01 	adds.w	sl, r2, #1
 8001948:	f143 0b00 	adc.w	fp, r3, #0
 800194c:	4653      	mov	r3, sl
 800194e:	3b01      	subs	r3, #1
 8001950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001954:	4652      	mov	r2, sl
 8001956:	2300      	movs	r3, #0
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	01ab      	lsls	r3, r5, #6
 8001966:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800196a:	01a2      	lsls	r2, r4, #6
 800196c:	4652      	mov	r2, sl
 800196e:	2300      	movs	r3, #0
 8001970:	4690      	mov	r8, r2
 8001972:	4699      	mov	r9, r3
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001980:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001984:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001988:	4653      	mov	r3, sl
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	3307      	adds	r3, #7
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	ebad 0d03 	sub.w	sp, sp, r3
 8001996:	466b      	mov	r3, sp
 8001998:	3307      	adds	r3, #7
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	Flash_Read_Data(deviceIDListStartAddress, deviceIds,  deviceNum[0]);
 80019a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80019a6:	b293      	uxth	r3, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80019ae:	48ac      	ldr	r0, [pc, #688]	; (8001c60 <scanDeviceForData+0x34c>)
 80019b0:	f7ff fba0 	bl	80010f4 <Flash_Read_Data>
	//retrieve battery statuses
	uint64_t deviceLowBatteryStatuses[1];
	Flash_Read_Data(deviceLowBatteryStatusStartAddress1, deviceLowBatteryStatuses, 1);
 80019b4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019b8:	2201      	movs	r2, #1
 80019ba:	4619      	mov	r1, r3
 80019bc:	48a9      	ldr	r0, [pc, #676]	; (8001c64 <scanDeviceForData+0x350>)
 80019be:	f7ff fb99 	bl	80010f4 <Flash_Read_Data>
	uint64_t deviceSeparateLowBatteryStatuses[deviceNum[0]];
 80019c2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80019c6:	4603      	mov	r3, r0
 80019c8:	3b01      	subs	r3, #1
 80019ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019ce:	4602      	mov	r2, r0
 80019d0:	2300      	movs	r3, #0
 80019d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80019d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80019e2:	464c      	mov	r4, r9
 80019e4:	01a3      	lsls	r3, r4, #6
 80019e6:	4644      	mov	r4, r8
 80019e8:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 80019ec:	4644      	mov	r4, r8
 80019ee:	01a2      	lsls	r2, r4, #6
 80019f0:	4602      	mov	r2, r0
 80019f2:	2300      	movs	r3, #0
 80019f4:	663a      	str	r2, [r7, #96]	; 0x60
 80019f6:	667b      	str	r3, [r7, #100]	; 0x64
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001a04:	464c      	mov	r4, r9
 8001a06:	01a3      	lsls	r3, r4, #6
 8001a08:	4644      	mov	r4, r8
 8001a0a:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001a0e:	4644      	mov	r4, r8
 8001a10:	01a2      	lsls	r2, r4, #6
 8001a12:	4603      	mov	r3, r0
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	3307      	adds	r3, #7
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a20:	466b      	mov	r3, sp
 8001a22:	3307      	adds	r3, #7
 8001a24:	08db      	lsrs	r3, r3, #3
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	struct deviceData allDeviceData[deviceNum[0]];
 8001a2c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001a30:	4623      	mov	r3, r4
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a38:	4622      	mov	r2, r4
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a40:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8001a44:	4642      	mov	r2, r8
 8001a46:	464b      	mov	r3, r9
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	f04f 0100 	mov.w	r1, #0
 8001a50:	00d9      	lsls	r1, r3, #3
 8001a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a56:	00d0      	lsls	r0, r2, #3
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4641      	mov	r1, r8
 8001a5e:	1a51      	subs	r1, r2, r1
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	4649      	mov	r1, r9
 8001a64:	eb63 0301 	sbc.w	r3, r3, r1
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a76:	4649      	mov	r1, r9
 8001a78:	014b      	lsls	r3, r1, #5
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001a80:	4641      	mov	r1, r8
 8001a82:	014a      	lsls	r2, r1, #5
 8001a84:	4622      	mov	r2, r4
 8001a86:	2300      	movs	r3, #0
 8001a88:	653a      	str	r2, [r7, #80]	; 0x50
 8001a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8001a8c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a90:	4642      	mov	r2, r8
 8001a92:	464b      	mov	r3, r9
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	00d9      	lsls	r1, r3, #3
 8001a9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aa2:	00d0      	lsls	r0, r2, #3
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	1a51      	subs	r1, r2, r1
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	4649      	mov	r1, r9
 8001ab0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	014b      	lsls	r3, r1, #5
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8001acc:	4641      	mov	r1, r8
 8001ace:	014a      	lsls	r2, r1, #5
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3307      	adds	r3, #7
 8001adc:	08db      	lsrs	r3, r3, #3
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	ebad 0d03 	sub.w	sp, sp, r3
 8001ae4:	466b      	mov	r3, sp
 8001ae6:	3303      	adds	r3, #3
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	uint8_t lostDevices[deviceNum[0]];
 8001af0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001af4:	4603      	mov	r3, r0
 8001af6:	3b01      	subs	r3, #1
 8001af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001afc:	4602      	mov	r2, r0
 8001afe:	2300      	movs	r3, #0
 8001b00:	64ba      	str	r2, [r7, #72]	; 0x48
 8001b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001b10:	464c      	mov	r4, r9
 8001b12:	00e3      	lsls	r3, r4, #3
 8001b14:	4644      	mov	r4, r8
 8001b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1a:	4644      	mov	r4, r8
 8001b1c:	00e2      	lsls	r2, r4, #3
 8001b1e:	4602      	mov	r2, r0
 8001b20:	2300      	movs	r3, #0
 8001b22:	643a      	str	r2, [r7, #64]	; 0x40
 8001b24:	647b      	str	r3, [r7, #68]	; 0x44
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001b32:	464c      	mov	r4, r9
 8001b34:	00e3      	lsls	r3, r4, #3
 8001b36:	4644      	mov	r4, r8
 8001b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3c:	4644      	mov	r4, r8
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4603      	mov	r3, r0
 8001b42:	3307      	adds	r3, #7
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4c:	466b      	mov	r3, sp
 8001b4e:	3300      	adds	r3, #0
 8001b50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint8_t lostDevicesNum = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	printf("\r\nDevices to scan: %ld", (uint32_t)deviceNum[0]);
 8001b5a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b5e:	4613      	mov	r3, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	4841      	ldr	r0, [pc, #260]	; (8001c68 <scanDeviceForData+0x354>)
 8001b64:	f00e fcb0 	bl	80104c8 <iprintf>
	for(int i = 0;i< deviceNum[0];i++){
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b6e:	e056      	b.n	8001c1e <scanDeviceForData+0x30a>

		allDeviceData[i].deviceID = deviceIds[i];
 8001b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001b74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	4610      	mov	r0, r2
 8001b82:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001b86:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	6018      	str	r0, [r3, #0]
		deviceSeparateLowBatteryStatuses[i] = (deviceLowBatteryStatuses[0]>>i)&(0x01);
 8001b96:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b9a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8001b9e:	f1c4 0120 	rsb	r1, r4, #32
 8001ba2:	f1a4 0020 	sub.w	r0, r4, #32
 8001ba6:	fa22 f504 	lsr.w	r5, r2, r4
 8001baa:	67bd      	str	r5, [r7, #120]	; 0x78
 8001bac:	fa03 f101 	lsl.w	r1, r3, r1
 8001bb0:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8001bb2:	430d      	orrs	r5, r1
 8001bb4:	67bd      	str	r5, [r7, #120]	; 0x78
 8001bb6:	fa23 f000 	lsr.w	r0, r3, r0
 8001bba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001bbc:	4301      	orrs	r1, r0
 8001bbe:	67b9      	str	r1, [r7, #120]	; 0x78
 8001bc0:	40e3      	lsrs	r3, r4
 8001bc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001be0:	e9c3 1200 	strd	r1, r2, [r3]
		printf("\r\nDevice %ld low battery status: %ld", (uint32_t)allDeviceData[i].deviceID, (uint32_t)deviceSeparateLowBatteryStatuses[i]);
 8001be4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <scanDeviceForData+0x358>)
 8001c10:	f00e fc5a 	bl	80104c8 <iprintf>
	for(int i = 0;i< deviceNum[0];i++){
 8001c14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	17da      	asrs	r2, r3, #31
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
 8001c26:	637a      	str	r2, [r7, #52]	; 0x34
 8001c28:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001c2c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c30:	4621      	mov	r1, r4
 8001c32:	4291      	cmp	r1, r2
 8001c34:	4629      	mov	r1, r5
 8001c36:	eb71 0303 	sbcs.w	r3, r1, r3
 8001c3a:	d399      	bcc.n	8001b70 <scanDeviceForData+0x25c>

	}

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	480b      	ldr	r0, [pc, #44]	; (8001c70 <scanDeviceForData+0x35c>)
 8001c44:	f005 ff40 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001c48:	2064      	movs	r0, #100	; 0x64
 8001c4a:	f004 f9b7 	bl	8005fbc <HAL_Delay>
	for(int i = 0; i<deviceNum[0];i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c54:	e090      	b.n	8001d78 <scanDeviceForData+0x464>
 8001c56:	bf00      	nop
 8001c58:	08013764 	.word	0x08013764
 8001c5c:	0801b000 	.word	0x0801b000
 8001c60:	0801b008 	.word	0x0801b008
 8001c64:	0801a000 	.word	0x0801a000
 8001c68:	08013778 	.word	0x08013778
 8001c6c:	08013790 	.word	0x08013790
 8001c70:	48000400 	.word	0x48000400

		printf("\r\nrequesting from: %d", allDeviceData[i].deviceID);
 8001c74:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001c78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	488e      	ldr	r0, [pc, #568]	; (8001ec4 <scanDeviceForData+0x5b0>)
 8001c8c:	f00e fc1c 	bl	80104c8 <iprintf>
		requestRFData(handles, &(allDeviceData[i]), rfData);
 8001c90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001cac:	f7ff fcc8 	bl	8001640 <requestRFData>

		if(!allDeviceData[i].deviceStatus){
 8001cb0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001cb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d122      	bne.n	8001d10 <scanDeviceForData+0x3fc>
			printf("\r\ndevice %d not found", allDeviceData[i].deviceID);
 8001cca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4879      	ldr	r0, [pc, #484]	; (8001ec8 <scanDeviceForData+0x5b4>)
 8001ce2:	f00e fbf1 	bl	80104c8 <iprintf>
			lostDevices[lostDevicesNum] = allDeviceData[i].deviceID;
 8001ce6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001d04:	548b      	strb	r3, [r1, r2]
			lostDevicesNum++;
 8001d06:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
		}

		if(allDeviceData[i].measurement.batteryStatus == 0){
 8001d10:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001d14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3318      	adds	r3, #24
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d121      	bne.n	8001d6e <scanDeviceForData+0x45a>
			if(!deviceSeparateLowBatteryStatuses[i]){
 8001d2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	d117      	bne.n	8001d6e <scanDeviceForData+0x45a>

				allDeviceData[i].measurement.batteryStatus = 2;
 8001d3e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001d42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3318      	adds	r3, #24
 8001d52:	2202      	movs	r2, #2
 8001d54:	601a      	str	r2, [r3, #0]
				deviceSeparateLowBatteryStatuses[i] = 1;
 8001d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	18d1      	adds	r1, r2, r3
 8001d62:	f04f 0201 	mov.w	r2, #1
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i<deviceNum[0];i++){
 8001d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d72:	3301      	adds	r3, #1
 8001d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d7c:	17da      	asrs	r2, r3, #31
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d82:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001d86:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	4291      	cmp	r1, r2
 8001d8e:	4629      	mov	r1, r5
 8001d90:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d94:	f4ff af6e 	bcc.w	8001c74 <scanDeviceForData+0x360>
			}
		}
	}

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9e:	484b      	ldr	r0, [pc, #300]	; (8001ecc <scanDeviceForData+0x5b8>)
 8001da0:	f005 fe92 	bl	8007ac8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	4848      	ldr	r0, [pc, #288]	; (8001ecc <scanDeviceForData+0x5b8>)
 8001daa:	f005 fe8d 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001dae:	2064      	movs	r0, #100	; 0x64
 8001db0:	f004 f904 	bl	8005fbc <HAL_Delay>
	addDeviceData(handles, allDeviceData, time, deviceNum[0]);
 8001db4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001db8:	4613      	mov	r3, r2
 8001dba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dbe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001dc2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001dc6:	f7ff f9b7 	bl	8001138 <addDeviceData>

	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	483f      	ldr	r0, [pc, #252]	; (8001ecc <scanDeviceForData+0x5b8>)
 8001dd0:	f005 fe7a 	bl	8007ac8 <HAL_GPIO_WritePin>

	removeDevices(lostDevices, lostDevicesNum);
 8001dd4:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001dde:	f000 fa07 	bl	80021f0 <removeDevices>

	for(int i = 0;i<deviceNum[0];i++){
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001de8:	e03a      	b.n	8001e60 <scanDeviceForData+0x54c>
		deviceLowBatteryStatuses[0] = deviceLowBatteryStatuses[0] | ((deviceSeparateLowBatteryStatuses[i]&0x01)<<i);
 8001dea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001dee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001df2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f002 0301 	and.w	r3, r2, #1
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
 8001e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e0c:	f1a3 0420 	sub.w	r4, r3, #32
 8001e10:	f1c3 0220 	rsb	r2, r3, #32
 8001e14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e18:	464d      	mov	r5, r9
 8001e1a:	409d      	lsls	r5, r3
 8001e1c:	677d      	str	r5, [r7, #116]	; 0x74
 8001e1e:	4645      	mov	r5, r8
 8001e20:	fa05 f404 	lsl.w	r4, r5, r4
 8001e24:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8001e26:	4325      	orrs	r5, r4
 8001e28:	677d      	str	r5, [r7, #116]	; 0x74
 8001e2a:	4644      	mov	r4, r8
 8001e2c:	fa24 f202 	lsr.w	r2, r4, r2
 8001e30:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8001e32:	4314      	orrs	r4, r2
 8001e34:	677c      	str	r4, [r7, #116]	; 0x74
 8001e36:	4642      	mov	r2, r8
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	673b      	str	r3, [r7, #112]	; 0x70
 8001e3e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001e42:	4623      	mov	r3, r4
 8001e44:	4303      	orrs	r3, r0
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	462b      	mov	r3, r5
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e52:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	for(int i = 0;i<deviceNum[0];i++){
 8001e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e64:	17da      	asrs	r2, r3, #31
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	617a      	str	r2, [r7, #20]
 8001e6a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001e6e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001e72:	4621      	mov	r1, r4
 8001e74:	4291      	cmp	r1, r2
 8001e76:	4629      	mov	r1, r5
 8001e78:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e7c:	d3b5      	bcc.n	8001dea <scanDeviceForData+0x4d6>
	}
	Flash_Write_Data(changingDeviceDataStart, deviceLowBatteryStatuses, 1);
 8001e7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e82:	2201      	movs	r2, #1
 8001e84:	4619      	mov	r1, r3
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <scanDeviceForData+0x5bc>)
 8001e88:	f7ff f8cc 	bl	8001024 <Flash_Write_Data>

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e92:	480e      	ldr	r0, [pc, #56]	; (8001ecc <scanDeviceForData+0x5b8>)
 8001e94:	f005 fe18 	bl	8007ac8 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8001e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e9c:	f004 f88e 	bl	8005fbc <HAL_Delay>
	scanConfirmation(handles, rfData);
 8001ea0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001ea4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ea8:	f000 f814 	bl	8001ed4 <scanConfirmation>

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eb2:	4806      	ldr	r0, [pc, #24]	; (8001ecc <scanDeviceForData+0x5b8>)
 8001eb4:	f005 fe08 	bl	8007ac8 <HAL_GPIO_WritePin>
 8001eb8:	46b5      	mov	sp, r6

}
 8001eba:	bf00      	nop
 8001ebc:	37d4      	adds	r7, #212	; 0xd4
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec4:	080137b8 	.word	0x080137b8
 8001ec8:	080137d0 	.word	0x080137d0
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	0801a000 	.word	0x0801a000

08001ed4 <scanConfirmation>:

void scanConfirmation(struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 8001ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed8:	b08d      	sub	sp, #52	; 0x34
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
 8001ee0:	466b      	mov	r3, sp
 8001ee2:	461e      	mov	r6, r3

	printf("Confirming Scan");
 8001ee4:	4852      	ldr	r0, [pc, #328]	; (8002030 <scanConfirmation+0x15c>)
 8001ee6:	f00e faef 	bl	80104c8 <iprintf>
	uint64_t deviceNum[1];
	Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8001eea:	f107 0320 	add.w	r3, r7, #32
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4850      	ldr	r0, [pc, #320]	; (8002034 <scanConfirmation+0x160>)
 8001ef4:	f7ff f8fe 	bl	80010f4 <Flash_Read_Data>

	uint64_t deviceIds[deviceNum[0]+1];
 8001ef8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001efc:	f112 0a01 	adds.w	sl, r2, #1
 8001f00:	f143 0b00 	adc.w	fp, r3, #0
 8001f04:	4653      	mov	r3, sl
 8001f06:	3b01      	subs	r3, #1
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4690      	mov	r8, r2
 8001f10:	4699      	mov	r9, r3
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f26:	4652      	mov	r2, sl
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4614      	mov	r4, r2
 8001f2c:	461d      	mov	r5, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	01ab      	lsls	r3, r5, #6
 8001f38:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8001f3c:	01a2      	lsls	r2, r4, #6
 8001f3e:	4653      	mov	r3, sl
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	3307      	adds	r3, #7
 8001f44:	08db      	lsrs	r3, r3, #3
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	ebad 0d03 	sub.w	sp, sp, r3
 8001f4c:	466b      	mov	r3, sp
 8001f4e:	3307      	adds	r3, #7
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
	Flash_Read_Data(deviceIDListStartAddress, deviceIds, deviceNum[0]);
 8001f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f5a:	b293      	uxth	r3, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f60:	4835      	ldr	r0, [pc, #212]	; (8002038 <scanConfirmation+0x164>)
 8001f62:	f7ff f8c7 	bl	80010f4 <Flash_Read_Data>
	rfData->activeTxMessageSize = 3;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	22fe      	movs	r2, #254	; 0xfe
 8001f72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_DONE;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2248      	movs	r2, #72	; 0x48
 8001f7a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	791a      	ldrb	r2, [r3, #4]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	printf("\r\nconfirming scan for %ld devices", (uint32_t)deviceNum[0]);
 8001f9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4825      	ldr	r0, [pc, #148]	; (800203c <scanConfirmation+0x168>)
 8001fa6:	f00e fa8f 	bl	80104c8 <iprintf>
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f107 010c 	add.w	r1, r7, #12
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f007 f80e 	bl	8008fd6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f107 0108 	add.w	r1, r7, #8
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f007 f8e9 	bl	800919c <HAL_RTC_GetDate>

	rfData->activeTxMessage[MSG_BODY_START] = sTime.Hours;
 8001fca:	7b3a      	ldrb	r2, [r7, #12]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	rfData->activeTxMessage[MSG_BODY_START+1] = sTime.Minutes;
 8001fd2:	7b7a      	ldrb	r2, [r7, #13]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	rfData->activeTxMessage[MSG_BODY_START+2] = sTime.Seconds;
 8001fda:	7bba      	ldrb	r2, [r7, #14]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	rfData->activeTxMessage[MSG_TO_ID_POS] = 0;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001ff6:	3306      	adds	r3, #6
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f003 f8af 	bl	8005160 <Send>
	HAL_Delay(2000);
 8002002:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002006:	f003 ffd9 	bl	8005fbc <HAL_Delay>
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002016:	3306      	adds	r3, #6
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f003 f89f 	bl	8005160 <Send>
 8002022:	46b5      	mov	sp, r6
}
 8002024:	bf00      	nop
 8002026:	3734      	adds	r7, #52	; 0x34
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800202e:	bf00      	nop
 8002030:	080137e8 	.word	0x080137e8
 8002034:	0801b000 	.word	0x0801b000
 8002038:	0801b008 	.word	0x0801b008
 800203c:	080137f8 	.word	0x080137f8

08002040 <checkForNewDevices>:

void checkForNewDevices(struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002050:	483a      	ldr	r0, [pc, #232]	; (800213c <checkForNewDevices+0xfc>)
 8002052:	f005 fd39 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002056:	2064      	movs	r0, #100	; 0x64
 8002058:	f003 ffb0 	bl	8005fbc <HAL_Delay>
	int listeningCounter = 50;
 800205c:	2332      	movs	r3, #50	; 0x32
 800205e:	60fb      	str	r3, [r7, #12]

	printf("\r\Checking for new devices");
 8002060:	4837      	ldr	r0, [pc, #220]	; (8002140 <checkForNewDevices+0x100>)
 8002062:	f00e fa31 	bl	80104c8 <iprintf>
	for(int i = 0;i<listeningCounter;i++){
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e056      	b.n	800211a <checkForNewDevices+0xda>

		Comms_Handler(rfData);
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f002 fc17 	bl	80048a0 <Comms_Handler>
		for(int i = 0; i<rfData->messageNum; i++){
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	e043      	b.n	8002100 <checkForNewDevices+0xc0>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_IM_HERE){
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3373      	adds	r3, #115	; 0x73
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b43      	cmp	r3, #67	; 0x43
 800208c:	d135      	bne.n	80020fa <checkForNewDevices+0xba>
				printf("\r\New device found", rfData->activeRxMessage[i][MSG_FROM_ID_POS]);
 800208e:	6839      	ldr	r1, [r7, #0]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	3375      	adds	r3, #117	; 0x75
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <checkForNewDevices+0x104>)
 80020a4:	f00e fa10 	bl	80104c8 <iprintf>
				acknowledgeDevice(rfData->activeRxMessage[i][MSG_FROM_ID_POS], handles, rfData);
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3375      	adds	r3, #117	; 0x75
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f844 	bl	800214c <acknowledgeDevice>
				rfData->newDevices.newDevices[rfData->newDevices.numOfNewDevices] = rfData->activeRxMessage[i][MSG_FROM_ID_POS];
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3375      	adds	r3, #117	; 0x75
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80020dc:	b291      	uxth	r1, r2
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	339c      	adds	r3, #156	; 0x9c
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	460a      	mov	r2, r1
 80020e8:	80da      	strh	r2, [r3, #6]
				rfData->newDevices.numOfNewDevices++;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
		for(int i = 0; i<rfData->messageNum; i++){
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	3301      	adds	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002106:	461a      	mov	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4293      	cmp	r3, r2
 800210c:	dbb4      	blt.n	8002078 <checkForNewDevices+0x38>

			}
		}
		HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f003 ff54 	bl	8005fbc <HAL_Delay>
	for(int i = 0;i<listeningCounter;i++){
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	429a      	cmp	r2, r3
 8002120:	dba4      	blt.n	800206c <checkForNewDevices+0x2c>

	}
	printf("\r\Check done");
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <checkForNewDevices+0x108>)
 8002124:	f00e f9d0 	bl	80104c8 <iprintf>
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf activation pin
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <checkForNewDevices+0xfc>)
 8002130:	f005 fcca 	bl	8007ac8 <HAL_GPIO_WritePin>

}
 8002134:	bf00      	nop
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	48000400 	.word	0x48000400
 8002140:	0801381c 	.word	0x0801381c
 8002144:	080136f4 	.word	0x080136f4
 8002148:	08013838 	.word	0x08013838

0800214c <acknowledgeDevice>:

void acknowledgeDevice(int deviceNumber, struct CommunicationHandles* handles, struct rfDataStorage* rfData){
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]

	rfData->activeTxMessageSize = 3;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2203      	movs	r2, #3
 800215c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	22fe      	movs	r2, #254	; 0xfe
 8002164:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_YOUR_THERE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2245      	movs	r2, #69	; 0x45
 800216c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	791a      	ldrb	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_TO_ID_POS] = deviceNumber;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f107 0114 	add.w	r1, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 ff17 	bl	8008fd6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f107 0110 	add.w	r1, r7, #16
 80021b0:	2200      	movs	r2, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f006 fff2 	bl	800919c <HAL_RTC_GetDate>

	rfData->activeTxMessage[MSG_BODY_START] = sTime.Hours;
 80021b8:	7d3a      	ldrb	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	rfData->activeTxMessage[MSG_BODY_START+1] = sTime.Minutes;
 80021c0:	7d7a      	ldrb	r2, [r7, #21]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	rfData->activeTxMessage[MSG_BODY_START+2] = sTime.Seconds;
 80021c8:	7dba      	ldrb	r2, [r7, #22]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+6);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80021dc:	3306      	adds	r3, #6
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f002 ffbc 	bl	8005160 <Send>

}
 80021e8:	bf00      	nop
 80021ea:	3728      	adds	r7, #40	; 0x28
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <removeDevices>:

void removeDevices(uint8_t deviceToRemove[], uint8_t numOfDeviceToRemove){
 80021f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f4:	b09b      	sub	sp, #108	; 0x6c
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	63f8      	str	r0, [r7, #60]	; 0x3c
 80021fa:	460b      	mov	r3, r1
 80021fc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	if(numOfDeviceToRemove>0){
 8002200:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80e6 	beq.w	80023d6 <removeDevices+0x1e6>
 800220a:	466b      	mov	r3, sp
 800220c:	461e      	mov	r6, r3

		uint64_t deviceNum[1];
		Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 800220e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002212:	2201      	movs	r2, #1
 8002214:	4619      	mov	r1, r3
 8002216:	4872      	ldr	r0, [pc, #456]	; (80023e0 <removeDevices+0x1f0>)
 8002218:	f7fe ff6c 	bl	80010f4 <Flash_Read_Data>

		uint64_t allDeviceData[deviceNum[0]+2];
 800221c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002220:	f112 0a02 	adds.w	sl, r2, #2
 8002224:	f143 0b00 	adc.w	fp, r3, #0
 8002228:	4653      	mov	r3, sl
 800222a:	3b01      	subs	r3, #1
 800222c:	65bb      	str	r3, [r7, #88]	; 0x58
 800222e:	4652      	mov	r2, sl
 8002230:	2300      	movs	r3, #0
 8002232:	4614      	mov	r4, r2
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	01ab      	lsls	r3, r5, #6
 8002240:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8002244:	01a2      	lsls	r2, r4, #6
 8002246:	4652      	mov	r2, sl
 8002248:	2300      	movs	r3, #0
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800225a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800225e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002262:	4653      	mov	r3, sl
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	3307      	adds	r3, #7
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	ebad 0d03 	sub.w	sp, sp, r3
 8002270:	466b      	mov	r3, sp
 8002272:	3307      	adds	r3, #7
 8002274:	08db      	lsrs	r3, r3, #3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	657b      	str	r3, [r7, #84]	; 0x54

		uint64_t deviceIds[deviceNum[0]+1];
 800227a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800227e:	1c51      	adds	r1, r2, #1
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	f143 0300 	adc.w	r3, r3, #0
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	e9d7 4500 	ldrd	r4, r5, [r7]
 800228c:	4623      	mov	r3, r4
 800228e:	3b01      	subs	r3, #1
 8002290:	653b      	str	r3, [r7, #80]	; 0x50
 8002292:	4622      	mov	r2, r4
 8002294:	2300      	movs	r3, #0
 8002296:	633a      	str	r2, [r7, #48]	; 0x30
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 80022a6:	4649      	mov	r1, r9
 80022a8:	018b      	lsls	r3, r1, #6
 80022aa:	4641      	mov	r1, r8
 80022ac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022b0:	4641      	mov	r1, r8
 80022b2:	018a      	lsls	r2, r1, #6
 80022b4:	4622      	mov	r2, r4
 80022b6:	2300      	movs	r3, #0
 80022b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80022c8:	4649      	mov	r1, r9
 80022ca:	018b      	lsls	r3, r1, #6
 80022cc:	4641      	mov	r1, r8
 80022ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022d2:	4641      	mov	r1, r8
 80022d4:	018a      	lsls	r2, r1, #6
 80022d6:	4623      	mov	r3, r4
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	3307      	adds	r3, #7
 80022dc:	08db      	lsrs	r3, r3, #3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	ebad 0d03 	sub.w	sp, sp, r3
 80022e4:	466b      	mov	r3, sp
 80022e6:	3307      	adds	r3, #7
 80022e8:	08db      	lsrs	r3, r3, #3
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		Flash_Read_Data(deviceIDListStartAddress, deviceIds, deviceNum[0]);
 80022ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022f2:	b293      	uxth	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80022f8:	483a      	ldr	r0, [pc, #232]	; (80023e4 <removeDevices+0x1f4>)
 80022fa:	f7fe fefb 	bl	80010f4 <Flash_Read_Data>

		for(int i = 0;i<deviceNum[0]; i++){
 80022fe:	2300      	movs	r3, #0
 8002300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002302:	e037      	b.n	8002374 <removeDevices+0x184>
			int deviceCanBeKept = 1;
 8002304:	2301      	movs	r3, #1
 8002306:	663b      	str	r3, [r7, #96]	; 0x60
			for(int n = 0;n<numOfDeviceToRemove;n++){
 8002308:	2300      	movs	r3, #0
 800230a:	667b      	str	r3, [r7, #100]	; 0x64
 800230c:	e01a      	b.n	8002344 <removeDevices+0x154>

				if(deviceIds[i] == deviceToRemove[n]){
 800230e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800231c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800231e:	4401      	add	r1, r0
 8002320:	7809      	ldrb	r1, [r1, #0]
 8002322:	b2c9      	uxtb	r1, r1
 8002324:	2000      	movs	r0, #0
 8002326:	6239      	str	r1, [r7, #32]
 8002328:	6278      	str	r0, [r7, #36]	; 0x24
 800232a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800232e:	4621      	mov	r1, r4
 8002330:	4628      	mov	r0, r5
 8002332:	4283      	cmp	r3, r0
 8002334:	bf08      	it	eq
 8002336:	428a      	cmpeq	r2, r1
 8002338:	d101      	bne.n	800233e <removeDevices+0x14e>

					deviceCanBeKept = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	663b      	str	r3, [r7, #96]	; 0x60
			for(int n = 0;n<numOfDeviceToRemove;n++){
 800233e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002340:	3301      	adds	r3, #1
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
 8002344:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002348:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800234a:	429a      	cmp	r2, r3
 800234c:	dbdf      	blt.n	800230e <removeDevices+0x11e>

				}

			}

			if(deviceCanBeKept){
 800234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <removeDevices+0x17e>

				allDeviceData[i+1] = deviceIds[i];
 8002354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002356:	1c59      	adds	r1, r3, #1
 8002358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800235a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002366:	00c9      	lsls	r1, r1, #3
 8002368:	4401      	add	r1, r0
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0;i<deviceNum[0]; i++){
 800236e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002370:	3301      	adds	r3, #1
 8002372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002376:	17da      	asrs	r2, r3, #31
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	61fa      	str	r2, [r7, #28]
 800237c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002380:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002384:	4621      	mov	r1, r4
 8002386:	4291      	cmp	r1, r2
 8002388:	4629      	mov	r1, r5
 800238a:	eb71 0303 	sbcs.w	r3, r1, r3
 800238e:	d3b9      	bcc.n	8002304 <removeDevices+0x114>

			}
		}

		deviceNum[0]-=numOfDeviceToRemove;
 8002390:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002394:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8002398:	2000      	movs	r0, #0
 800239a:	6139      	str	r1, [r7, #16]
 800239c:	6178      	str	r0, [r7, #20]
 800239e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023a2:	4621      	mov	r1, r4
 80023a4:	1a51      	subs	r1, r2, r1
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	4629      	mov	r1, r5
 80023aa:	eb63 0301 	sbc.w	r3, r3, r1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023b4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

		allDeviceData[0] = deviceNum[0];
 80023b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023be:	e9c1 2300 	strd	r2, r3, [r1]

		Flash_Write_Data(deviceDataStartAddr, allDeviceData, deviceNum[0]+1);
 80023c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023c6:	4613      	mov	r3, r2
 80023c8:	3301      	adds	r3, #1
 80023ca:	461a      	mov	r2, r3
 80023cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023ce:	4804      	ldr	r0, [pc, #16]	; (80023e0 <removeDevices+0x1f0>)
 80023d0:	f7fe fe28 	bl	8001024 <Flash_Write_Data>
 80023d4:	46b5      	mov	sp, r6

	}

}
 80023d6:	bf00      	nop
 80023d8:	376c      	adds	r7, #108	; 0x6c
 80023da:	46bd      	mov	sp, r7
 80023dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e0:	0801b000 	.word	0x0801b000
 80023e4:	0801b008 	.word	0x0801b008

080023e8 <addNewDevices>:

void addNewDevices(struct rfDataStorage* rfData){
 80023e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ec:	f5ad 5d05 	sub.w	sp, sp, #8512	; 0x2140
 80023f0:	b087      	sub	sp, #28
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80023f8:	f843 0cdc 	str.w	r0, [r3, #-220]

	if(rfData->newDevices.numOfNewDevices>0){
 80023fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002400:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002404:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 82a9 	beq.w	8002960 <addNewDevices+0x578>
 800240e:	466b      	mov	r3, sp
 8002410:	461e      	mov	r6, r3

		printf("\r\nAdding new devices");
 8002412:	48a7      	ldr	r0, [pc, #668]	; (80026b0 <addNewDevices+0x2c8>)
 8002414:	f00e f858 	bl	80104c8 <iprintf>
		uint64_t deviceNum[1];
		Flash_Read_Data(numberOfDevicesAddress, deviceNum, 1);
 8002418:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800241c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002420:	2201      	movs	r2, #1
 8002422:	4619      	mov	r1, r3
 8002424:	48a3      	ldr	r0, [pc, #652]	; (80026b4 <addNewDevices+0x2cc>)
 8002426:	f7fe fe65 	bl	80010f4 <Flash_Read_Data>

		uint64_t allDeviceData[deviceNum[0]+rfData->newDevices.numOfNewDevices+1];
 800242a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800242e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800243a:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 800243e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2200      	movs	r2, #0
 8002446:	469a      	mov	sl, r3
 8002448:	4693      	mov	fp, r2
 800244a:	eb10 040a 	adds.w	r4, r0, sl
 800244e:	eb41 050b 	adc.w	r5, r1, fp
 8002452:	1c63      	adds	r3, r4, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	f145 0300 	adc.w	r3, r5, #0
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002460:	4623      	mov	r3, r4
 8002462:	3b01      	subs	r3, #1
 8002464:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002468:	f102 0204 	add.w	r2, r2, #4
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4622      	mov	r2, r4
 8002470:	2300      	movs	r3, #0
 8002472:	4690      	mov	r8, r2
 8002474:	4699      	mov	r9, r3
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800248a:	4622      	mov	r2, r4
 800248c:	2300      	movs	r3, #0
 800248e:	673a      	str	r2, [r7, #112]	; 0x70
 8002490:	677b      	str	r3, [r7, #116]	; 0x74
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800249e:	4649      	mov	r1, r9
 80024a0:	018b      	lsls	r3, r1, #6
 80024a2:	4641      	mov	r1, r8
 80024a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a8:	4641      	mov	r1, r8
 80024aa:	018a      	lsls	r2, r1, #6
 80024ac:	4623      	mov	r3, r4
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	3307      	adds	r3, #7
 80024b2:	08db      	lsrs	r3, r3, #3
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	ebad 0d03 	sub.w	sp, sp, r3
 80024ba:	466b      	mov	r3, sp
 80024bc:	3307      	adds	r3, #7
 80024be:	08db      	lsrs	r3, r3, #3
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80024c6:	6013      	str	r3, [r2, #0]

		uint64_t deviceIds[deviceNum[0]+1];
 80024c8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80024cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	1c51      	adds	r1, r2, #1
 80024d6:	6039      	str	r1, [r7, #0]
 80024d8:	f143 0300 	adc.w	r3, r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024e2:	4623      	mov	r3, r4
 80024e4:	3b01      	subs	r3, #1
 80024e6:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80024ea:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4622      	mov	r2, r4
 80024f2:	2300      	movs	r3, #0
 80024f4:	66ba      	str	r2, [r7, #104]	; 0x68
 80024f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8002504:	4649      	mov	r1, r9
 8002506:	018b      	lsls	r3, r1, #6
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800250e:	4641      	mov	r1, r8
 8002510:	018a      	lsls	r2, r1, #6
 8002512:	4622      	mov	r2, r4
 8002514:	2300      	movs	r3, #0
 8002516:	663a      	str	r2, [r7, #96]	; 0x60
 8002518:	667b      	str	r3, [r7, #100]	; 0x64
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002526:	4649      	mov	r1, r9
 8002528:	018b      	lsls	r3, r1, #6
 800252a:	4641      	mov	r1, r8
 800252c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002530:	4641      	mov	r1, r8
 8002532:	018a      	lsls	r2, r1, #6
 8002534:	4623      	mov	r3, r4
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	3307      	adds	r3, #7
 800253a:	08db      	lsrs	r3, r3, #3
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	ebad 0d03 	sub.w	sp, sp, r3
 8002542:	466b      	mov	r3, sp
 8002544:	3307      	adds	r3, #7
 8002546:	08db      	lsrs	r3, r3, #3
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800254e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8002552:	6013      	str	r3, [r2, #0]

		Flash_Read_Data(deviceIDListStartAddress, deviceIds, deviceNum[0]);
 8002554:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002558:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	b293      	uxth	r3, r2
 8002562:	461a      	mov	r2, r3
 8002564:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002568:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	4852      	ldr	r0, [pc, #328]	; (80026b8 <addNewDevices+0x2d0>)
 8002570:	f7fe fdc0 	bl	80010f4 <Flash_Read_Data>
		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002574:	2300      	movs	r3, #0
 8002576:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800257a:	f102 0208 	add.w	r2, r2, #8
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e03d      	b.n	80025fe <addNewDevices+0x216>
			deviceIds[deviceNum[0]+i] = rfData->newDevices.newDevices[i];
 8002582:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002586:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 800258a:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800258e:	f103 0308 	add.w	r3, r3, #8
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	339c      	adds	r3, #156	; 0x9c
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	88dc      	ldrh	r4, [r3, #6]
 800259c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80025a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80025a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a8:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80025ac:	f101 0108 	add.w	r1, r1, #8
 80025b0:	6809      	ldr	r1, [r1, #0]
 80025b2:	17c8      	asrs	r0, r1, #31
 80025b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b6:	65f8      	str	r0, [r7, #92]	; 0x5c
 80025b8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80025bc:	4641      	mov	r1, r8
 80025be:	1851      	adds	r1, r2, r1
 80025c0:	6539      	str	r1, [r7, #80]	; 0x50
 80025c2:	4649      	mov	r1, r9
 80025c4:	414b      	adcs	r3, r1
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
 80025c8:	b2a3      	uxth	r3, r4
 80025ca:	2200      	movs	r2, #0
 80025cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025d0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80025d4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80025e4:	e9c3 1200 	strd	r1, r2, [r3]
		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 80025e8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80025ec:	f103 0308 	add.w	r3, r3, #8
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80025f8:	f102 0208 	add.w	r2, r2, #8
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002602:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002606:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800260a:	461a      	mov	r2, r3
 800260c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002610:	f103 0308 	add.w	r3, r3, #8
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4293      	cmp	r3, r2
 8002618:	dbb3      	blt.n	8002582 <addNewDevices+0x19a>
		}

		for(int i = 0;i<deviceNum[0];i++){
 800261a:	2300      	movs	r3, #0
 800261c:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002620:	f102 020c 	add.w	r2, r2, #12
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e025      	b.n	8002674 <addNewDevices+0x28c>

			allDeviceData[i+1] = deviceIds[i];
 8002628:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800262c:	f103 030c 	add.w	r3, r3, #12
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1c5c      	adds	r4, r3, #1
 8002634:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002638:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002642:	f103 030c 	add.w	r3, r3, #12
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002650:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	00e3      	lsls	r3, r4, #3
 8002658:	4413      	add	r3, r2
 800265a:	e9c3 0100 	strd	r0, r1, [r3]
		for(int i = 0;i<deviceNum[0];i++){
 800265e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002662:	f103 030c 	add.w	r3, r3, #12
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800266e:	f102 020c 	add.w	r2, r2, #12
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002678:	f103 030c 	add.w	r3, r3, #12
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	17da      	asrs	r2, r3, #31
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
 8002682:	647a      	str	r2, [r7, #68]	; 0x44
 8002684:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002688:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002694:	4621      	mov	r1, r4
 8002696:	4291      	cmp	r1, r2
 8002698:	4629      	mov	r1, r5
 800269a:	eb71 0303 	sbcs.w	r3, r1, r3
 800269e:	d3c3      	bcc.n	8002628 <addNewDevices+0x240>

		}

		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 80026a6:	f102 0210 	add.w	r2, r2, #16
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	e05c      	b.n	8002768 <addNewDevices+0x380>
 80026ae:	bf00      	nop
 80026b0:	08013844 	.word	0x08013844
 80026b4:	0801b000 	.word	0x0801b000
 80026b8:	0801b008 	.word	0x0801b008
			printf("\r\nAdding device %d to flash", rfData->newDevices.newDevices[i]);
 80026bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80026c0:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80026c4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80026c8:	f103 0310 	add.w	r3, r3, #16
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	339c      	adds	r3, #156	; 0x9c
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	88db      	ldrh	r3, [r3, #6]
 80026d6:	4619      	mov	r1, r3
 80026d8:	48a5      	ldr	r0, [pc, #660]	; (8002970 <addNewDevices+0x588>)
 80026da:	f00d fef5 	bl	80104c8 <iprintf>
			allDeviceData[deviceNum[0]+i+1] = rfData->newDevices.newDevices[i];
 80026de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80026e2:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80026e6:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80026ea:	f103 0310 	add.w	r3, r3, #16
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	339c      	adds	r3, #156	; 0x9c
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	88dc      	ldrh	r4, [r3, #6]
 80026f8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80026fc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 8002708:	f101 0110 	add.w	r1, r1, #16
 800270c:	6809      	ldr	r1, [r1, #0]
 800270e:	17c8      	asrs	r0, r1, #31
 8002710:	63b9      	str	r1, [r7, #56]	; 0x38
 8002712:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002714:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002718:	4641      	mov	r1, r8
 800271a:	1851      	adds	r1, r2, r1
 800271c:	6339      	str	r1, [r7, #48]	; 0x30
 800271e:	4649      	mov	r1, r9
 8002720:	414b      	adcs	r3, r1
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
 8002724:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002728:	460b      	mov	r3, r1
 800272a:	3301      	adds	r3, #1
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
 800272e:	4613      	mov	r3, r2
 8002730:	f143 0300 	adc.w	r3, r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	b2a3      	uxth	r3, r4
 8002738:	2200      	movs	r2, #0
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	627a      	str	r2, [r7, #36]	; 0x24
 800273e:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800274e:	e9c3 1200 	strd	r1, r2, [r3]
		for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 8002752:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002756:	f103 0310 	add.w	r3, r3, #16
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002762:	f102 0210 	add.w	r2, r2, #16
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800276c:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002770:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002774:	461a      	mov	r2, r3
 8002776:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 800277a:	f103 0310 	add.w	r3, r3, #16
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4293      	cmp	r3, r2
 8002782:	db9b      	blt.n	80026bc <addNewDevices+0x2d4>
		}

		deviceNum[0]+=rfData->newDevices.numOfNewDevices;
 8002784:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002788:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002794:	f851 1cdc 	ldr.w	r1, [r1, #-220]
 8002798:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
 800279c:	b2c9      	uxtb	r1, r1
 800279e:	2000      	movs	r0, #0
 80027a0:	61b9      	str	r1, [r7, #24]
 80027a2:	61f8      	str	r0, [r7, #28]
 80027a4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80027a8:	4621      	mov	r1, r4
 80027aa:	1851      	adds	r1, r2, r1
 80027ac:	6139      	str	r1, [r7, #16]
 80027ae:	4629      	mov	r1, r5
 80027b0:	eb43 0101 	adc.w	r1, r3, r1
 80027b4:	6179      	str	r1, [r7, #20]
 80027b6:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80027ba:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80027be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80027c2:	e9c2 3400 	strd	r3, r4, [r2]

		allDeviceData[0] = deviceNum[0];
 80027c6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80027ca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80027ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d2:	f507 5105 	add.w	r1, r7, #8512	; 0x2140
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	e9c1 2300 	strd	r2, r3, [r1]

		Flash_Write_Data(deviceDataStartAddr, allDeviceData, deviceNum[0]+1);
 80027dc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80027e0:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	4613      	mov	r3, r2
 80027ea:	3301      	adds	r3, #1
 80027ec:	461a      	mov	r2, r3
 80027ee:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	485f      	ldr	r0, [pc, #380]	; (8002974 <addNewDevices+0x58c>)
 80027f6:	f7fe fc15 	bl	8001024 <Flash_Write_Data>

		HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	485e      	ldr	r0, [pc, #376]	; (8002978 <addNewDevices+0x590>)
 8002800:	f005 f962 	bl	8007ac8 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002804:	2064      	movs	r0, #100	; 0x64
 8002806:	f003 fbd9 	bl	8005fbc <HAL_Delay>

			FATFS fs; 	//Fatfs handle
			FIL fil; 		//File handle
			FRESULT fres;

			config.fs = &fs;
 800280a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800280e:	f103 0318 	add.w	r3, r3, #24
 8002812:	3b10      	subs	r3, #16
 8002814:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8002818:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800281c:	6013      	str	r3, [r2, #0]
			config.fil = &fil;
 800281e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002822:	3b20      	subs	r3, #32
 8002824:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8002828:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800282c:	6013      	str	r3, [r2, #0]
			config.fres = &fres;
 800282e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002832:	f103 0323 	add.w	r3, r3, #35	; 0x23
 8002836:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 800283a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800283e:	6013      	str	r3, [r2, #0]

			if(stopCard(&config)){
 8002840:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002844:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fdf3 	bl	8005434 <stopCard>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <addNewDevices+0x474>
				printf("\r\ncard unmounted");
 8002854:	4849      	ldr	r0, [pc, #292]	; (800297c <addNewDevices+0x594>)
 8002856:	f00d fe37 	bl	80104c8 <iprintf>
 800285a:	e002      	b.n	8002862 <addNewDevices+0x47a>
			}
			else{

				printf("\r\nfail to unmount card");
 800285c:	4848      	ldr	r0, [pc, #288]	; (8002980 <addNewDevices+0x598>)
 800285e:	f00d fe33 	bl	80104c8 <iprintf>
			}

			if(setupCard(&config)){
 8002862:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8002866:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fdc6 	bl	80053fc <setupCard>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d06b      	beq.n	800294e <addNewDevices+0x566>
				printf("\r\ncard mounted");
 8002876:	4843      	ldr	r0, [pc, #268]	; (8002984 <addNewDevices+0x59c>)
 8002878:	f00d fe26 	bl	80104c8 <iprintf>

				char buffer[50];


				for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 800287c:	2300      	movs	r3, #0
 800287e:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002882:	f102 0214 	add.w	r2, r2, #20
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e041      	b.n	800290e <addNewDevices+0x526>
					printf("saving initial data for %d device", rfData->newDevices.newDevices[i]);
 800288a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800288e:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8002892:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002896:	f103 0314 	add.w	r3, r3, #20
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	339c      	adds	r3, #156	; 0x9c
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	88db      	ldrh	r3, [r3, #6]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4838      	ldr	r0, [pc, #224]	; (8002988 <addNewDevices+0x5a0>)
 80028a8:	f00d fe0e 	bl	80104c8 <iprintf>
					sprintf(buffer, "Device_%d\n", (uint16_t)rfData->newDevices.newDevices[i]);
 80028ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80028b0:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 80028b4:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80028b8:	f103 0314 	add.w	r3, r3, #20
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	339c      	adds	r3, #156	; 0x9c
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	88db      	ldrh	r3, [r3, #6]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028cc:	3b14      	subs	r3, #20
 80028ce:	492f      	ldr	r1, [pc, #188]	; (800298c <addNewDevices+0x5a4>)
 80028d0:	4618      	mov	r0, r3
 80028d2:	f00d feff 	bl	80106d4 <siprintf>
					sendSD(&config, "AllDeviceInfo.txt", buffer);
 80028d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028da:	3b14      	subs	r3, #20
 80028dc:	f507 5004 	add.w	r0, r7, #8448	; 0x2100
 80028e0:	f100 0024 	add.w	r0, r0, #36	; 0x24
 80028e4:	461a      	mov	r2, r3
 80028e6:	492a      	ldr	r1, [pc, #168]	; (8002990 <addNewDevices+0x5a8>)
 80028e8:	f002 fd34 	bl	8005354 <sendSD>
					f_mkdir(buffer);
 80028ec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028f0:	3b14      	subs	r3, #20
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00c fd8b 	bl	800f40e <f_mkdir>
				for(int i = 0;i<rfData->newDevices.numOfNewDevices; i++){
 80028f8:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80028fc:	f103 0314 	add.w	r3, r3, #20
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8002908:	f102 0214 	add.w	r2, r2, #20
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002912:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 8002916:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800291a:	461a      	mov	r2, r3
 800291c:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 8002920:	f103 0314 	add.w	r3, r3, #20
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	dbaf      	blt.n	800288a <addNewDevices+0x4a2>
				}

				if(stopCard(&config)){
 800292a:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800292e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002932:	4618      	mov	r0, r3
 8002934:	f002 fd7e 	bl	8005434 <stopCard>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <addNewDevices+0x55e>
					printf("\r\ncard unmounted");
 800293e:	480f      	ldr	r0, [pc, #60]	; (800297c <addNewDevices+0x594>)
 8002940:	f00d fdc2 	bl	80104c8 <iprintf>
 8002944:	e006      	b.n	8002954 <addNewDevices+0x56c>
				}
				else{

					printf("\r\nfail to unmount card");
 8002946:	480e      	ldr	r0, [pc, #56]	; (8002980 <addNewDevices+0x598>)
 8002948:	f00d fdbe 	bl	80104c8 <iprintf>
 800294c:	e002      	b.n	8002954 <addNewDevices+0x56c>
				}
			}
			else{

				printf("\r\nfail to mount card");
 800294e:	4811      	ldr	r0, [pc, #68]	; (8002994 <addNewDevices+0x5ac>)
 8002950:	f00d fdba 	bl	80104c8 <iprintf>
			}

		HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	; 0x80
 8002958:	4807      	ldr	r0, [pc, #28]	; (8002978 <addNewDevices+0x590>)
 800295a:	f005 f8b5 	bl	8007ac8 <HAL_GPIO_WritePin>
 800295e:	46b5      	mov	sp, r6
	}
}
 8002960:	bf00      	nop
 8002962:	f507 5705 	add.w	r7, r7, #8512	; 0x2140
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800296e:	bf00      	nop
 8002970:	0801385c 	.word	0x0801385c
 8002974:	0801b000 	.word	0x0801b000
 8002978:	48000400 	.word	0x48000400
 800297c:	08013878 	.word	0x08013878
 8002980:	0801388c 	.word	0x0801388c
 8002984:	080138a4 	.word	0x080138a4
 8002988:	080138b4 	.word	0x080138b4
 800298c:	080138d8 	.word	0x080138d8
 8002990:	080138e4 	.word	0x080138e4
 8002994:	080138f8 	.word	0x080138f8

08002998 <setupSDcard>:

void setupSDcard(){
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800299e:	b08b      	sub	sp, #44	; 0x2c
 80029a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 80029a2:	2201      	movs	r2, #1
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	484f      	ldr	r0, [pc, #316]	; (8002ae4 <setupSDcard+0x14c>)
 80029a8:	f005 f88e 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80029ac:	2064      	movs	r0, #100	; 0x64
 80029ae:	f003 fb05 	bl	8005fbc <HAL_Delay>

		FATFS fs; 	//Fatfs handle
		FIL fil; 		//File handle
		FRESULT fres;

		config.fs = &fs;
 80029b2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80029b6:	f103 0308 	add.w	r3, r3, #8
 80029ba:	3b04      	subs	r3, #4
 80029bc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80029c0:	f102 021c 	add.w	r2, r2, #28
 80029c4:	6013      	str	r3, [r2, #0]
		config.fil = &fil;
 80029c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029ca:	3b34      	subs	r3, #52	; 0x34
 80029cc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80029d0:	f102 0220 	add.w	r2, r2, #32
 80029d4:	6013      	str	r3, [r2, #0]
		config.fres = &fres;
 80029d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029da:	3b35      	subs	r3, #53	; 0x35
 80029dc:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80029e0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80029e4:	6013      	str	r3, [r2, #0]

		if(stopCard(&config)){
 80029e6:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80029ea:	f103 031c 	add.w	r3, r3, #28
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fd20 	bl	8005434 <stopCard>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <setupSDcard+0x6a>
			printf("\r\ncard unmounted");
 80029fa:	483b      	ldr	r0, [pc, #236]	; (8002ae8 <setupSDcard+0x150>)
 80029fc:	f00d fd64 	bl	80104c8 <iprintf>
 8002a00:	e002      	b.n	8002a08 <setupSDcard+0x70>
		}
		else{

			printf("\r\nfail to unmount card");
 8002a02:	483a      	ldr	r0, [pc, #232]	; (8002aec <setupSDcard+0x154>)
 8002a04:	f00d fd60 	bl	80104c8 <iprintf>
		}

		if(setupCard(&config)){
 8002a08:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002a0c:	f103 031c 	add.w	r3, r3, #28
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fcf3 	bl	80053fc <setupCard>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d054      	beq.n	8002ac6 <setupSDcard+0x12e>
			printf("\r\ncard mounted");
 8002a1c:	4834      	ldr	r0, [pc, #208]	; (8002af0 <setupSDcard+0x158>)
 8002a1e:	f00d fd53 	bl	80104c8 <iprintf>

			char buffer[50];

			*config.fres = f_open(config.fil, "BrokenDevices.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002a22:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002a26:	f103 0320 	add.w	r3, r3, #32
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002a30:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a34:	6814      	ldr	r4, [r2, #0]
 8002a36:	2213      	movs	r2, #19
 8002a38:	492e      	ldr	r1, [pc, #184]	; (8002af4 <setupSDcard+0x15c>)
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f00b fd5c 	bl	800e4f8 <f_open>
 8002a40:	4603      	mov	r3, r0
 8002a42:	7023      	strb	r3, [r4, #0]
			*config.fres = f_close(config.fil);
 8002a44:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002a48:	f103 0320 	add.w	r3, r3, #32
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002a52:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a56:	6814      	ldr	r4, [r2, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f00c fa8a 	bl	800ef72 <f_close>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	7023      	strb	r3, [r4, #0]

			*config.fres = f_open(config.fil, "LowBatteryDevices.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002a62:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002a66:	f103 0320 	add.w	r3, r3, #32
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002a70:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a74:	6814      	ldr	r4, [r2, #0]
 8002a76:	2213      	movs	r2, #19
 8002a78:	491f      	ldr	r1, [pc, #124]	; (8002af8 <setupSDcard+0x160>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00b fd3c 	bl	800e4f8 <f_open>
 8002a80:	4603      	mov	r3, r0
 8002a82:	7023      	strb	r3, [r4, #0]
			*config.fres = f_close(config.fil);
 8002a84:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002a88:	f103 0320 	add.w	r3, r3, #32
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8002a92:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002a96:	6814      	ldr	r4, [r2, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f00c fa6a 	bl	800ef72 <f_close>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	7023      	strb	r3, [r4, #0]


			if(stopCard(&config)){
 8002aa2:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8002aa6:	f103 031c 	add.w	r3, r3, #28
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fcc2 	bl	8005434 <stopCard>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <setupSDcard+0x126>
				printf("\r\ncard unmounted");
 8002ab6:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <setupSDcard+0x150>)
 8002ab8:	f00d fd06 	bl	80104c8 <iprintf>
 8002abc:	e006      	b.n	8002acc <setupSDcard+0x134>
			}
			else{

				printf("\r\nfail to unmount card");
 8002abe:	480b      	ldr	r0, [pc, #44]	; (8002aec <setupSDcard+0x154>)
 8002ac0:	f00d fd02 	bl	80104c8 <iprintf>
 8002ac4:	e002      	b.n	8002acc <setupSDcard+0x134>
			}
		}
		else{

			printf("\r\nfail to mount card");
 8002ac6:	480d      	ldr	r0, [pc, #52]	; (8002afc <setupSDcard+0x164>)
 8002ac8:	f00d fcfe 	bl	80104c8 <iprintf>
		}

	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	4804      	ldr	r0, [pc, #16]	; (8002ae4 <setupSDcard+0x14c>)
 8002ad2:	f004 fff9 	bl	8007ac8 <HAL_GPIO_WritePin>
}
 8002ad6:	bf00      	nop
 8002ad8:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8002adc:	372c      	adds	r7, #44	; 0x2c
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	08013878 	.word	0x08013878
 8002aec:	0801388c 	.word	0x0801388c
 8002af0:	080138a4 	.word	0x080138a4
 8002af4:	08013910 	.word	0x08013910
 8002af8:	08013924 	.word	0x08013924
 8002afc:	080138f8 	.word	0x080138f8

08002b00 <addBrokenDevice>:

		printf("\r\nfail to mount card");
	}
}

void addBrokenDevice(struct SDinfo* config, uint16_t deviceID){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]

	char buf[10];
	printf("\r\nAddign broken device");
 8002b0c:	480a      	ldr	r0, [pc, #40]	; (8002b38 <addBrokenDevice+0x38>)
 8002b0e:	f00d fcdb 	bl	80104c8 <iprintf>
	sprintf(buf, "Device_%d\n", deviceID);
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4908      	ldr	r1, [pc, #32]	; (8002b3c <addBrokenDevice+0x3c>)
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f00d fdda 	bl	80106d4 <siprintf>
	sendSD(config, "BrokenDevices.txt", buf);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	461a      	mov	r2, r3
 8002b26:	4906      	ldr	r1, [pc, #24]	; (8002b40 <addBrokenDevice+0x40>)
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f002 fc13 	bl	8005354 <sendSD>

}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	0801396c 	.word	0x0801396c
 8002b3c:	080138d8 	.word	0x080138d8
 8002b40:	08013910 	.word	0x08013910

08002b44 <addLowBatteryDevice>:

void addLowBatteryDevice(struct SDinfo* config, uint16_t deviceID){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]

	char buf[10];
	printf("\r\nAdding low battery device");
 8002b50:	480a      	ldr	r0, [pc, #40]	; (8002b7c <addLowBatteryDevice+0x38>)
 8002b52:	f00d fcb9 	bl	80104c8 <iprintf>
	sprintf(buf, "Device_%d\n", deviceID);
 8002b56:	887a      	ldrh	r2, [r7, #2]
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	4908      	ldr	r1, [pc, #32]	; (8002b80 <addLowBatteryDevice+0x3c>)
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f00d fdb8 	bl	80106d4 <siprintf>
	sendSD(config, "LowBatteryDevices.txt", buf);
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4906      	ldr	r1, [pc, #24]	; (8002b84 <addLowBatteryDevice+0x40>)
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f002 fbf1 	bl	8005354 <sendSD>

}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08013984 	.word	0x08013984
 8002b80:	080138d8 	.word	0x080138d8
 8002b84:	08013924 	.word	0x08013924

08002b88 <getDevices>:

void getDevices(struct SDinfo* config, char* listFile, uint16_t* data, uint8_t* num){
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	f507 6482 	add.w	r4, r7, #1040	; 0x410
 8002b94:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
 8002b98:	6020      	str	r0, [r4, #0]
 8002b9a:	f507 6082 	add.w	r0, r7, #1040	; 0x410
 8002b9e:	f5a0 6081 	sub.w	r0, r0, #1032	; 0x408
 8002ba2:	6001      	str	r1, [r0, #0]
 8002ba4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8002ba8:	f2a1 410c 	subw	r1, r1, #1036	; 0x40c
 8002bac:	600a      	str	r2, [r1, #0]
 8002bae:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002bb2:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 8002bb6:	6013      	str	r3, [r2, #0]

	char buf[1000];
	printf("\r\ngetting SD data");
 8002bb8:	485f      	ldr	r0, [pc, #380]	; (8002d38 <getDevices+0x1b0>)
 8002bba:	f00d fc85 	bl	80104c8 <iprintf>
	getSD(config, listFile, buf);
 8002bbe:	f107 0214 	add.w	r2, r7, #20
 8002bc2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002bc6:	f5a3 6181 	sub.w	r1, r3, #1032	; 0x408
 8002bca:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002bce:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	f002 fc45 	bl	8005464 <getSD>
	printf("\r\nretrieved data: %s", buf);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4856      	ldr	r0, [pc, #344]	; (8002d3c <getDevices+0x1b4>)
 8002be2:	f00d fc71 	bl	80104c8 <iprintf>
	int iterator = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	for(int i = 0; i<strlen(buf);i++){
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8002bf2:	e087      	b.n	8002d04 <getDevices+0x17c>
		printf("\r\nCurrent data: %c", buf[i]);
 8002bf4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002bf8:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002bfc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002c00:	4413      	add	r3, r2
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	484e      	ldr	r0, [pc, #312]	; (8002d40 <getDevices+0x1b8>)
 8002c08:	f00d fc5e 	bl	80104c8 <iprintf>
		if(buf[i]=='_'){
 8002c0c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c10:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002c14:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002c18:	4413      	add	r3, r2
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b5f      	cmp	r3, #95	; 0x5f
 8002c1e:	d16c      	bne.n	8002cfa <getDevices+0x172>
			int numberIterator = i+1;
 8002c20:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002c24:	3301      	adds	r3, #1
 8002c26:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

			uint16_t gatheredNum = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
			printf("\r\nnumber started");
 8002c30:	4844      	ldr	r0, [pc, #272]	; (8002d44 <getDevices+0x1bc>)
 8002c32:	f00d fc49 	bl	80104c8 <iprintf>
			int gettingNumber = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
			while(gettingNumber){
 8002c3c:	e048      	b.n	8002cd0 <getDevices+0x148>
				printf("\r\nchecking data: %c", buf[numberIterator]);
 8002c3e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c42:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002c46:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	483d      	ldr	r0, [pc, #244]	; (8002d48 <getDevices+0x1c0>)
 8002c52:	f00d fc39 	bl	80104c8 <iprintf>
				if(isdigit(buf[numberIterator])){
 8002c56:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c5a:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002c5e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a38      	ldr	r2, [pc, #224]	; (8002d4c <getDevices+0x1c4>)
 8002c6a:	4413      	add	r3, r2
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d024      	beq.n	8002cc0 <getDevices+0x138>
					printf("\r\nadding number %c to %d", buf[i], gatheredNum);
 8002c76:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c7a:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002c7e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4830      	ldr	r0, [pc, #192]	; (8002d50 <getDevices+0x1c8>)
 8002c90:	f00d fc1a 	bl	80104c8 <iprintf>
					gatheredNum = gatheredNum*10 + (buf[numberIterator] - '0');
 8002c94:	f8b7 3402 	ldrh.w	r3, [r7, #1026]	; 0x402
 8002c98:	461a      	mov	r2, r3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002ca6:	f5a3 717f 	sub.w	r1, r3, #1020	; 0x3fc
 8002caa:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002cae:	440b      	add	r3, r1
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b30      	subs	r3, #48	; 0x30
 8002cba:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
 8002cbe:	e002      	b.n	8002cc6 <getDevices+0x13e>

				}
				else{
					gettingNumber = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
				}
				numberIterator++;
 8002cc6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
			while(gettingNumber){
 8002cd0:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1b2      	bne.n	8002c3e <getDevices+0xb6>
			}

			data[iterator] = gatheredNum;
 8002cd8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8002ce2:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 8002cee:	801a      	strh	r2, [r3, #0]
			iterator++;
 8002cf0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	for(int i = 0; i<strlen(buf);i++){
 8002cfa:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fa61 	bl	80001d0 <strlen>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f63f af6d 	bhi.w	8002bf4 <getDevices+0x6c>
		}

	}

	*num = iterator;
 8002d1a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002d24:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	701a      	strb	r2, [r3, #0]

}
 8002d2c:	bf00      	nop
 8002d2e:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	080139a0 	.word	0x080139a0
 8002d3c:	080139b4 	.word	0x080139b4
 8002d40:	080139cc 	.word	0x080139cc
 8002d44:	080139e0 	.word	0x080139e0
 8002d48:	080139f4 	.word	0x080139f4
 8002d4c:	08014468 	.word	0x08014468
 8002d50:	08013a08 	.word	0x08013a08

08002d54 <checkForRemote>:

void checkForRemote(struct rfDataStorage* rfData){
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 8002d5c:	f107 0308 	add.w	r3, r7, #8
 8002d60:	2202      	movs	r2, #2
 8002d62:	4619      	mov	r1, r3
 8002d64:	4831      	ldr	r0, [pc, #196]	; (8002e2c <checkForRemote+0xd8>)
 8002d66:	f7fe f9c5 	bl	80010f4 <Flash_Read_Data>

	init_comms(rfData, DEVICE_PARENT, managementBuf[0], 0);
 8002d6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f001 fd48 	bl	8004808 <init_comms>

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7e:	482c      	ldr	r0, [pc, #176]	; (8002e30 <checkForRemote+0xdc>)
 8002d80:	f004 fea2 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002d84:	2064      	movs	r0, #100	; 0x64
 8002d86:	f003 f919 	bl	8005fbc <HAL_Delay>

	for(int i = 0;i<10;i++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e03f      	b.n	8002e10 <checkForRemote+0xbc>

		Comms_Handler(rfData);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 fd85 	bl	80048a0 <Comms_Handler>
		for(int i = 0; i<rfData->messageNum; i++){
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e02b      	b.n	8002df4 <checkForRemote+0xa0>
			//add device
			printf("\r\nReceived message type: %x", rfData->activeRxMessage[i][MSG_TYPE_POS]);
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3373      	adds	r3, #115	; 0x73
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	4619      	mov	r1, r3
 8002db0:	4820      	ldr	r0, [pc, #128]	; (8002e34 <checkForRemote+0xe0>)
 8002db2:	f00d fb89 	bl	80104c8 <iprintf>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_STATUS_DATA){
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3373      	adds	r3, #115	; 0x73
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b51      	cmp	r3, #81	; 0x51
 8002dca:	d110      	bne.n	8002dee <checkForRemote+0x9a>
				printf("\r\nsending data to remote");
 8002dcc:	481a      	ldr	r0, [pc, #104]	; (8002e38 <checkForRemote+0xe4>)
 8002dce:	f00d fb7b 	bl	80104c8 <iprintf>
				sentDataToRemote(rfData, rfData->activeRxMessage[i][MSG_FROM_ID_POS]);
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3375      	adds	r3, #117	; 0x75
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f828 	bl	8002e3c <sentDataToRemote>
				break;
 8002dec:	e009      	b.n	8002e02 <checkForRemote+0xae>
		for(int i = 0; i<rfData->messageNum; i++){
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	dbcc      	blt.n	8002d9c <checkForRemote+0x48>
			}
		}
		HAL_Delay(1000);
 8002e02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e06:	f003 f8d9 	bl	8005fbc <HAL_Delay>
	for(int i = 0;i<10;i++){
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	ddbc      	ble.n	8002d90 <checkForRemote+0x3c>
	}

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8002e16:	2200      	movs	r2, #0
 8002e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e1c:	4804      	ldr	r0, [pc, #16]	; (8002e30 <checkForRemote+0xdc>)
 8002e1e:	f004 fe53 	bl	8007ac8 <HAL_GPIO_WritePin>

}
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08019000 	.word	0x08019000
 8002e30:	48000400 	.word	0x48000400
 8002e34:	08013a24 	.word	0x08013a24
 8002e38:	08013a40 	.word	0x08013a40

08002e3c <sentDataToRemote>:

void sentDataToRemote(struct rfDataStorage* rfData, int remoteId){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	f5ad 5d08 	sub.w	sp, sp, #8704	; 0x2200
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002e4a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8002e4e:	6018      	str	r0, [r3, #0]
 8002e50:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002e54:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8002e58:	6019      	str	r1, [r3, #0]

	FATFS fs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres;

	sdData.fs = &fs;
 8002e5a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002e5e:	f103 0308 	add.w	r3, r3, #8
 8002e62:	3b18      	subs	r3, #24
 8002e64:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002e68:	f102 0208 	add.w	r2, r2, #8
 8002e6c:	6013      	str	r3, [r2, #0]
	sdData.fil = &fil;
 8002e6e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e72:	3b08      	subs	r3, #8
 8002e74:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002e78:	f102 020c 	add.w	r2, r2, #12
 8002e7c:	6013      	str	r3, [r2, #0]
	sdData.fres = &fres;
 8002e7e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8002e82:	3b09      	subs	r3, #9
 8002e84:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002e88:	f102 0210 	add.w	r2, r2, #16
 8002e8c:	6013      	str	r3, [r2, #0]

	uint16_t lowBatteryDevices[100];
	uint16_t brokenDevices[100];

	uint8_t lowBatteryNum = 0;
 8002e8e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002e92:	f2a3 231d 	subw	r3, r3, #541	; 0x21d
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
	uint8_t brokenNum = 0;
 8002e9a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002e9e:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2180      	movs	r1, #128	; 0x80
 8002eaa:	48b6      	ldr	r0, [pc, #728]	; (8003184 <sentDataToRemote+0x348>)
 8002eac:	f004 fe0c 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002eb0:	2064      	movs	r0, #100	; 0x64
 8002eb2:	f003 f883 	bl	8005fbc <HAL_Delay>

	if(setupCard(&sdData)){
 8002eb6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002eba:	f103 0308 	add.w	r3, r3, #8
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 fa9c 	bl	80053fc <setupCard>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d027      	beq.n	8002f1a <sentDataToRemote+0xde>

		getDevices(&sdData, "BrokenDevices.txt",  brokenDevices, &brokenNum);
 8002eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ece:	3b1e      	subs	r3, #30
 8002ed0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ed4:	3a1c      	subs	r2, #28
 8002ed6:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8002eda:	f100 0008 	add.w	r0, r0, #8
 8002ede:	49aa      	ldr	r1, [pc, #680]	; (8003188 <sentDataToRemote+0x34c>)
 8002ee0:	f7ff fe52 	bl	8002b88 <getDevices>
		getDevices(&sdData, "LowBatteryDevices.txt",  lowBatteryDevices, &lowBatteryNum);
 8002ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee8:	3b1d      	subs	r3, #29
 8002eea:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8002eee:	3a14      	subs	r2, #20
 8002ef0:	f507 5008 	add.w	r0, r7, #8704	; 0x2200
 8002ef4:	f100 0008 	add.w	r0, r0, #8
 8002ef8:	49a4      	ldr	r1, [pc, #656]	; (800318c <sentDataToRemote+0x350>)
 8002efa:	f7ff fe45 	bl	8002b88 <getDevices>
		if(!stopCard(&sdData)){
 8002efe:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002f02:	f103 0308 	add.w	r3, r3, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fa94 	bl	8005434 <stopCard>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <sentDataToRemote+0xe4>

			printf("\r\nSD stop error");
 8002f12:	489f      	ldr	r0, [pc, #636]	; (8003190 <sentDataToRemote+0x354>)
 8002f14:	f00d fad8 	bl	80104c8 <iprintf>
 8002f18:	e002      	b.n	8002f20 <sentDataToRemote+0xe4>
		}

	}
	else{

		printf("\r\nSD start error");
 8002f1a:	489e      	ldr	r0, [pc, #632]	; (8003194 <sentDataToRemote+0x358>)
 8002f1c:	f00d fad4 	bl	80104c8 <iprintf>

	}

	HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	4897      	ldr	r0, [pc, #604]	; (8003184 <sentDataToRemote+0x348>)
 8002f26:	f004 fdcf 	bl	8007ac8 <HAL_GPIO_WritePin>

	printf("\r\nbroken devices: %d", brokenNum);
 8002f2a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002f2e:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	4898      	ldr	r0, [pc, #608]	; (8003198 <sentDataToRemote+0x35c>)
 8002f38:	f00d fac6 	bl	80104c8 <iprintf>
	for(int i = 0;i<brokenNum;i++){
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002f42:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	e019      	b.n	8002f7e <sentDataToRemote+0x142>

		printf("\r\n%d", brokenDevices[i]);
 8002f4a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002f4e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8002f52:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002f56:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f60:	4619      	mov	r1, r3
 8002f62:	488e      	ldr	r0, [pc, #568]	; (800319c <sentDataToRemote+0x360>)
 8002f64:	f00d fab0 	bl	80104c8 <iprintf>
	for(int i = 0;i<brokenNum;i++){
 8002f68:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002f6c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002f78:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002f82:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002f8e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	dbd8      	blt.n	8002f4a <sentDataToRemote+0x10e>

	}
	printf("\r\nlow battery devices: %d", lowBatteryNum);
 8002f98:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002f9c:	f2a3 231d 	subw	r3, r3, #541	; 0x21d
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	487e      	ldr	r0, [pc, #504]	; (80031a0 <sentDataToRemote+0x364>)
 8002fa6:	f00d fa8f 	bl	80104c8 <iprintf>
	for(int i = 0;i<lowBatteryNum;i++){
 8002faa:	2300      	movs	r3, #0
 8002fac:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002fb0:	f102 0220 	add.w	r2, r2, #32
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e019      	b.n	8002fec <sentDataToRemote+0x1b0>

		printf("\r\n%d", lowBatteryDevices[i]);
 8002fb8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002fbc:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002fc0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002fc4:	f102 0220 	add.w	r2, r2, #32
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4872      	ldr	r0, [pc, #456]	; (800319c <sentDataToRemote+0x360>)
 8002fd2:	f00d fa79 	bl	80104c8 <iprintf>
	for(int i = 0;i<lowBatteryNum;i++){
 8002fd6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002fda:	f103 0320 	add.w	r3, r3, #32
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8002fe6:	f102 0220 	add.w	r2, r2, #32
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002ff0:	f2a3 231d 	subw	r3, r3, #541	; 0x21d
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8002ffc:	f103 0320 	add.w	r3, r3, #32
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4293      	cmp	r3, r2
 8003004:	dbd8      	blt.n	8002fb8 <sentDataToRemote+0x17c>

	}

	//broken devices
	rfData->activeTxMessageSize = brokenNum;
 8003006:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800300a:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003014:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 800301e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003022:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22fe      	movs	r2, #254	; 0xfe
 800302a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_BROKEN_DATA;
 800302e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003032:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2250      	movs	r2, #80	; 0x50
 800303a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = remoteId;
 800303e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003042:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800304e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8003058:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800305c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	791a      	ldrb	r2, [r3, #4]
 8003064:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003068:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8003072:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003076:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003082:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003086:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003090:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003094:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	int iterator = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80030a4:	f102 021c 	add.w	r2, r2, #28
 80030a8:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b0:	4834      	ldr	r0, [pc, #208]	; (8003184 <sentDataToRemote+0x348>)
 80030b2:	f004 fd09 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80030b6:	2064      	movs	r0, #100	; 0x64
 80030b8:	f002 ff80 	bl	8005fbc <HAL_Delay>

	for(int i = 0;i<brokenNum;i++){
 80030bc:	2300      	movs	r3, #0
 80030be:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80030c2:	f102 0218 	add.w	r2, r2, #24
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e082      	b.n	80031d0 <sentDataToRemote+0x394>

		rfData->activeTxMessage[iterator+MSG_BODY_START] = brokenDevices[i];
 80030ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80030ce:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80030d2:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80030d6:	f102 0218 	add.w	r2, r2, #24
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80030e0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80030e4:	f103 031c 	add.w	r3, r3, #28
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3306      	adds	r3, #6
 80030ec:	b2d1      	uxtb	r1, r2
 80030ee:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80030f2:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	460a      	mov	r2, r1
 80030fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		if(iterator==8){
 8003100:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003104:	f103 031c 	add.w	r3, r3, #28
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d14a      	bne.n	80031a4 <sentDataToRemote+0x368>
			rfData->activeTxMessageSize = iterator;
 800310e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003112:	f103 031c 	add.w	r3, r3, #28
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800311e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003128:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800312c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003136:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800313a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003144:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003148:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003152:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003156:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003160:	3306      	adds	r3, #6
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	4610      	mov	r0, r2
 8003168:	f001 fffa 	bl	8005160 <Send>
			iterator = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003172:	f102 021c 	add.w	r2, r2, #28
 8003176:	6013      	str	r3, [r2, #0]
			HAL_Delay(300);
 8003178:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800317c:	f002 ff1e 	bl	8005fbc <HAL_Delay>
 8003180:	e01b      	b.n	80031ba <sentDataToRemote+0x37e>
 8003182:	bf00      	nop
 8003184:	48000400 	.word	0x48000400
 8003188:	08013910 	.word	0x08013910
 800318c:	08013924 	.word	0x08013924
 8003190:	080136a4 	.word	0x080136a4
 8003194:	080136b4 	.word	0x080136b4
 8003198:	08013a5c 	.word	0x08013a5c
 800319c:	08013a74 	.word	0x08013a74
 80031a0:	08013a7c 	.word	0x08013a7c
		}
		else{
			iterator++;
 80031a4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80031a8:	f103 031c 	add.w	r3, r3, #28
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80031b4:	f102 021c 	add.w	r2, r2, #28
 80031b8:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<brokenNum;i++){
 80031ba:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80031be:	f103 0318 	add.w	r3, r3, #24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80031ca:	f102 0218 	add.w	r2, r2, #24
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80031d4:	f2a3 231e 	subw	r3, r3, #542	; 0x21e
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80031e0:	f103 0318 	add.w	r3, r3, #24
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	f6ff af6f 	blt.w	80030ca <sentDataToRemote+0x28e>
		}
	}

	if(iterator>0){
 80031ec:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80031f0:	f103 031c 	add.w	r3, r3, #28
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	dd32      	ble.n	8003260 <sentDataToRemote+0x424>
		rfData->activeTxMessageSize = iterator;
 80031fa:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80031fe:	f103 031c 	add.w	r3, r3, #28
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800320a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003214:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003218:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8003222:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003226:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003230:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003234:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800323e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003242:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800324c:	3306      	adds	r3, #6
 800324e:	b2db      	uxtb	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f001 ff84 	bl	8005160 <Send>
		HAL_Delay(300);
 8003258:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800325c:	f002 feae 	bl	8005fbc <HAL_Delay>
	}

	//low battery devices
	rfData->activeTxMessageSize = lowBatteryNum;
 8003260:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003264:	f2a3 231d 	subw	r3, r3, #541	; 0x21d
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800326e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8003278:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800327c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	22fe      	movs	r2, #254	; 0xfe
 8003284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_GIVE_LOW_BATTERY_DATA;
 8003288:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800328c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2252      	movs	r2, #82	; 0x52
 8003294:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = remoteId;
 8003298:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800329c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032a8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 80032b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032b6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	791a      	ldrb	r2, [r3, #4]
 80032be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032c2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80032cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032d0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80032dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032e0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80032ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80032ee:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	iterator = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80032fe:	f102 021c 	add.w	r2, r2, #28
 8003302:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<lowBatteryNum;i++){
 8003304:	2300      	movs	r3, #0
 8003306:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800330a:	f102 0214 	add.w	r2, r2, #20
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e06b      	b.n	80033ea <sentDataToRemote+0x5ae>

		rfData->activeTxMessage[iterator+MSG_BODY_START] = lowBatteryDevices[i];
 8003312:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003316:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800331a:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800331e:	f102 0214 	add.w	r2, r2, #20
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003328:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800332c:	f103 031c 	add.w	r3, r3, #28
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3306      	adds	r3, #6
 8003334:	b2d1      	uxtb	r1, r2
 8003336:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800333a:	f5a2 7209 	sub.w	r2, r2, #548	; 0x224
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	4413      	add	r3, r2
 8003342:	460a      	mov	r2, r1
 8003344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		if(iterator==8){
 8003348:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800334c:	f103 031c 	add.w	r3, r3, #28
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b08      	cmp	r3, #8
 8003354:	d133      	bne.n	80033be <sentDataToRemote+0x582>
			rfData->activeTxMessageSize = iterator;
 8003356:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800335a:	f103 031c 	add.w	r3, r3, #28
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003366:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
			rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8003370:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003374:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800337e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003382:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 800338c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003390:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800339a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800339e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80033a8:	3306      	adds	r3, #6
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f001 fed6 	bl	8005160 <Send>
			HAL_Delay(300);
 80033b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033b8:	f002 fe00 	bl	8005fbc <HAL_Delay>
 80033bc:	e00a      	b.n	80033d4 <sentDataToRemote+0x598>
		}
		else{
		    iterator++;
 80033be:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80033c2:	f103 031c 	add.w	r3, r3, #28
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80033ce:	f102 021c 	add.w	r2, r2, #28
 80033d2:	6013      	str	r3, [r2, #0]
	for(int i = 0;i<lowBatteryNum;i++){
 80033d4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80033d8:	f103 0314 	add.w	r3, r3, #20
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80033e4:	f102 0214 	add.w	r2, r2, #20
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80033ee:	f2a3 231d 	subw	r3, r3, #541	; 0x21d
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80033fa:	f103 0314 	add.w	r3, r3, #20
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4293      	cmp	r3, r2
 8003402:	db86      	blt.n	8003312 <sentDataToRemote+0x4d6>
		}
	}
	if(iterator>0){
 8003404:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003408:	f103 031c 	add.w	r3, r3, #28
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dd32      	ble.n	8003478 <sentDataToRemote+0x63c>
		rfData->activeTxMessageSize = iterator;
 8003412:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003416:	f103 031c 	add.w	r3, r3, #28
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b2da      	uxtb	r2, r3
 800341e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003422:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
		rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 800342c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003430:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800343a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800343e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 8003448:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800344c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003456:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800345a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003464:	3306      	adds	r3, #6
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f001 fe78 	bl	8005160 <Send>
		HAL_Delay(300);
 8003470:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003474:	f002 fda2 	bl	8005fbc <HAL_Delay>
	}
	HAL_Delay(3000);
 8003478:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800347c:	f002 fd9e 	bl	8005fbc <HAL_Delay>
	printf("\r\nSending DONE message");
 8003480:	4836      	ldr	r0, [pc, #216]	; (800355c <sentDataToRemote+0x720>)
 8003482:	f00d f821 	bl	80104c8 <iprintf>
	rfData->activeTxMessageSize = 0;
 8003486:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800348a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_REMOTE_DONE;
 8003496:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800349a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2254      	movs	r2, #84	; 0x54
 80034a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_TO_ID_POS] = remoteId;
 80034a6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034aa:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034b6:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 80034c0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034c4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	791a      	ldrb	r2, [r3, #4]
 80034cc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034d0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80034da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034de:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 80034ea:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034ee:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80034f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034fc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003506:	3306      	adds	r3, #6
 8003508:	b2db      	uxtb	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f001 fe27 	bl	8005160 <Send>
	HAL_Delay(3000);
 8003512:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003516:	f002 fd51 	bl	8005fbc <HAL_Delay>
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 800351a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800351e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003528:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800352c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003536:	3306      	adds	r3, #6
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f001 fe0f 	bl	8005160 <Send>

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8003542:	2200      	movs	r2, #0
 8003544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <sentDataToRemote+0x724>)
 800354a:	f004 fabd 	bl	8007ac8 <HAL_GPIO_WritePin>
}
 800354e:	bf00      	nop
 8003550:	f507 5708 	add.w	r7, r7, #8704	; 0x2200
 8003554:	3728      	adds	r7, #40	; 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	08013a98 	.word	0x08013a98
 8003560:	48000400 	.word	0x48000400

08003564 <memorySetup>:

void memorySetup(){
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0

	//printf("setting up memory");
	uint64_t setupData[managementDataNum];
	Flash_Read_Data(managementDataAddr, setupData, managementDataNum);
 800356a:	f107 0310 	add.w	r3, r7, #16
 800356e:	2202      	movs	r2, #2
 8003570:	4619      	mov	r1, r3
 8003572:	4818      	ldr	r0, [pc, #96]	; (80035d4 <memorySetup+0x70>)
 8003574:	f7fd fdbe 	bl	80010f4 <Flash_Read_Data>
	//printf("read memory");
	setupData[1] = 1;
 8003578:	f04f 0201 	mov.w	r2, #1
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//printf("writting memory");
	Flash_Write_Data(managementDataAddr, setupData, managementDataNum);
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	2202      	movs	r2, #2
 800358a:	4619      	mov	r1, r3
 800358c:	4811      	ldr	r0, [pc, #68]	; (80035d4 <memorySetup+0x70>)
 800358e:	f7fd fd49 	bl	8001024 <Flash_Write_Data>
	//printf("memory setup done");

	uint64_t deviceNum[] = {0};
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Flash_Write_Data(numberOfDevicesAddress, deviceNum, 1);
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	2201      	movs	r2, #1
 80035a4:	4619      	mov	r1, r3
 80035a6:	480c      	ldr	r0, [pc, #48]	; (80035d8 <memorySetup+0x74>)
 80035a8:	f7fd fd3c 	bl	8001024 <Flash_Write_Data>

	uint64_t statusData[1];
	statusData[0] = 0;
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9c7 2300 	strd	r2, r3, [r7]
	printf("\r\nsetting up statuses");
 80035b8:	4808      	ldr	r0, [pc, #32]	; (80035dc <memorySetup+0x78>)
 80035ba:	f00c ff85 	bl	80104c8 <iprintf>
	Flash_Write_Data(changingDeviceDataStart, statusData, 1);
 80035be:	463b      	mov	r3, r7
 80035c0:	2201      	movs	r2, #1
 80035c2:	4619      	mov	r1, r3
 80035c4:	4806      	ldr	r0, [pc, #24]	; (80035e0 <memorySetup+0x7c>)
 80035c6:	f7fd fd2d 	bl	8001024 <Flash_Write_Data>
}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	08019000 	.word	0x08019000
 80035d8:	0801b000 	.word	0x0801b000
 80035dc:	08013ab0 	.word	0x08013ab0
 80035e0:	0801a000 	.word	0x0801a000

080035e4 <mainSetupMother>:

int mainSetupMother(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

	printf("\r\nSetting up");
 80035ee:	481a      	ldr	r0, [pc, #104]	; (8003658 <mainSetupMother+0x74>)
 80035f0:	f00c ff6a 	bl	80104c8 <iprintf>
	if(IDhandling()){
 80035f4:	f000 f86c 	bl	80036d0 <IDhandling>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <mainSetupMother+0x1e>
		return 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	e026      	b.n	8003650 <mainSetupMother+0x6c>
	}

	if(remoteAccessHandling(rfData)){
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f832 	bl	800366c <remoteAccessHandling>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <mainSetupMother+0x34>
		printf("\r\nhandling remote");
 800360e:	4813      	ldr	r0, [pc, #76]	; (800365c <mainSetupMother+0x78>)
 8003610:	f00c ff5a 	bl	80104c8 <iprintf>
		setShutdownModeMother();
 8003614:	f000 f8de 	bl	80037d4 <setShutdownModeMother>

	}

	uint64_t setupBit[1];
	Flash_Read_Data(setupAddr, setupBit, 1);
 8003618:	f107 0308 	add.w	r3, r7, #8
 800361c:	2201      	movs	r2, #1
 800361e:	4619      	mov	r1, r3
 8003620:	480f      	ldr	r0, [pc, #60]	; (8003660 <mainSetupMother+0x7c>)
 8003622:	f7fd fd67 	bl	80010f4 <Flash_Read_Data>

	if(setupBit[0]!=1){
 8003626:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800362a:	1e51      	subs	r1, r2, #1
 800362c:	430b      	orrs	r3, r1
 800362e:	d00e      	beq.n	800364e <mainSetupMother+0x6a>
		printf("\r\nperforming setup");
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <mainSetupMother+0x80>)
 8003632:	f00c ff49 	bl	80104c8 <iprintf>
		//Flash_Read_Data(numberOfDevicesAddress, &deviceNumber, 1);

		//uint64_t deviceIds[deviceNumber+1];
		//Flash_Read_Data(deviceIDListStartAddress, deviceIds, deviceNumber);

		setupSDcard();
 8003636:	f7ff f9af 	bl	8002998 <setupSDcard>

		memorySetup();
 800363a:	f7ff ff93 	bl	8003564 <memorySetup>
		printf("\r\nSetup done");
 800363e:	480a      	ldr	r0, [pc, #40]	; (8003668 <mainSetupMother+0x84>)
 8003640:	f00c ff42 	bl	80104c8 <iprintf>
		setShutdownModeMother(handles->RTChandle);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f8c3 	bl	80037d4 <setShutdownModeMother>

	}

	return 1;
 800364e:	2301      	movs	r3, #1

}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	08013ac8 	.word	0x08013ac8
 800365c:	08013ad8 	.word	0x08013ad8
 8003660:	08019008 	.word	0x08019008
 8003664:	08013aec 	.word	0x08013aec
 8003668:	08013b00 	.word	0x08013b00

0800366c <remoteAccessHandling>:

int remoteAccessHandling(struct rfDataStorage* rfData){
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

	int remoteListening = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	2180      	movs	r1, #128	; 0x80
 800367c:	4811      	ldr	r0, [pc, #68]	; (80036c4 <remoteAccessHandling+0x58>)
 800367e:	f004 fa23 	bl	8007ac8 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(remoteGPIO, remoteGPIOPin)== GPIO_PIN_SET)
 8003682:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003686:	4810      	ldr	r0, [pc, #64]	; (80036c8 <remoteAccessHandling+0x5c>)
 8003688:	f004 fa06 	bl	8007a98 <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d113      	bne.n	80036ba <remoteAccessHandling+0x4e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003692:	2201      	movs	r2, #1
 8003694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003698:	480a      	ldr	r0, [pc, #40]	; (80036c4 <remoteAccessHandling+0x58>)
 800369a:	f004 fa15 	bl	8007ac8 <HAL_GPIO_WritePin>
		remoteListening = 1;
 800369e:	2301      	movs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
		printf("\r\nchecking remote");
 80036a2:	480a      	ldr	r0, [pc, #40]	; (80036cc <remoteAccessHandling+0x60>)
 80036a4:	f00c ff10 	bl	80104c8 <iprintf>
		checkForRemote(rfData);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff fb53 	bl	8002d54 <checkForRemote>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80036ae:	2200      	movs	r2, #0
 80036b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <remoteAccessHandling+0x58>)
 80036b6:	f004 fa07 	bl	8007ac8 <HAL_GPIO_WritePin>
	}

	return remoteListening;
 80036ba:	68fb      	ldr	r3, [r7, #12]

}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	48000800 	.word	0x48000800
 80036c8:	48000400 	.word	0x48000400
 80036cc:	08013b10 	.word	0x08013b10

080036d0 <IDhandling>:

int IDhandling(){
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	; 0x30
 80036d4:	af00      	add	r7, sp, #0

	printf("\r\nChecking ID set pin : %d ", HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin));
 80036d6:	2104      	movs	r1, #4
 80036d8:	4834      	ldr	r0, [pc, #208]	; (80037ac <IDhandling+0xdc>)
 80036da:	f004 f9dd 	bl	8007a98 <HAL_GPIO_ReadPin>
 80036de:	4603      	mov	r3, r0
 80036e0:	4619      	mov	r1, r3
 80036e2:	4833      	ldr	r0, [pc, #204]	; (80037b0 <IDhandling+0xe0>)
 80036e4:	f00c fef0 	bl	80104c8 <iprintf>

	if(HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin)== GPIO_PIN_SET)
 80036e8:	2104      	movs	r1, #4
 80036ea:	4830      	ldr	r0, [pc, #192]	; (80037ac <IDhandling+0xdc>)
 80036ec:	f004 f9d4 	bl	8007a98 <HAL_GPIO_ReadPin>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d154      	bne.n	80037a0 <IDhandling+0xd0>
	{
		uint64_t managementBuf[managementDataNum];
		uint64_t rxBuf[2];
		uint32_t buf;

		printf("\r\nSet device ID");
 80036f6:	482f      	ldr	r0, [pc, #188]	; (80037b4 <IDhandling+0xe4>)
 80036f8:	f00c fee6 	bl	80104c8 <iprintf>

		scanf("%ld", &buf);
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	4619      	mov	r1, r3
 8003702:	482d      	ldr	r0, [pc, #180]	; (80037b8 <IDhandling+0xe8>)
 8003704:	f00c ff08 	bl	8010518 <iscanf>
		printf("\r\nData to write: %ld", (uint32_t)buf);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4619      	mov	r1, r3
 800370c:	482b      	ldr	r0, [pc, #172]	; (80037bc <IDhandling+0xec>)
 800370e:	f00c fedb 	bl	80104c8 <iprintf>
		managementBuf[0] = 70;
 8003712:	f04f 0246 	mov.w	r2, #70	; 0x46
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9c7 2308 	strd	r2, r3, [r7, #32]

		managementBuf[1] = 0;
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if(Flash_Write_Data(managementDataAddr, managementBuf, managementDataNum) == HAL_OK){
 800372a:	f107 0320 	add.w	r3, r7, #32
 800372e:	2202      	movs	r2, #2
 8003730:	4619      	mov	r1, r3
 8003732:	4823      	ldr	r0, [pc, #140]	; (80037c0 <IDhandling+0xf0>)
 8003734:	f7fd fc76 	bl	8001024 <Flash_Write_Data>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d114      	bne.n	8003768 <IDhandling+0x98>

			Flash_Read_Data(managementDataAddr, rxBuf, managementDataNum);
 800373e:	f107 0310 	add.w	r3, r7, #16
 8003742:	2202      	movs	r2, #2
 8003744:	4619      	mov	r1, r3
 8003746:	481e      	ldr	r0, [pc, #120]	; (80037c0 <IDhandling+0xf0>)
 8003748:	f7fd fcd4 	bl	80010f4 <Flash_Read_Data>
			printf("\r\nID set to %ld", (uint32_t)rxBuf[0]);
 800374c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003750:	4613      	mov	r3, r2
 8003752:	4619      	mov	r1, r3
 8003754:	481b      	ldr	r0, [pc, #108]	; (80037c4 <IDhandling+0xf4>)
 8003756:	f00c feb7 	bl	80104c8 <iprintf>
			printf("\r\nSetup bit set to: %ld", (uint32_t)rxBuf[1]);
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	4613      	mov	r3, r2
 8003760:	4619      	mov	r1, r3
 8003762:	4819      	ldr	r0, [pc, #100]	; (80037c8 <IDhandling+0xf8>)
 8003764:	f00c feb0 	bl	80104c8 <iprintf>
		}
		uint64_t deviceBuf[1] = {0};
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9c7 2300 	strd	r2, r3, [r7]
		Flash_Write_Data(numberOfDevicesAddress, deviceBuf, 1);
 8003774:	463b      	mov	r3, r7
 8003776:	2201      	movs	r2, #1
 8003778:	4619      	mov	r1, r3
 800377a:	4814      	ldr	r0, [pc, #80]	; (80037cc <IDhandling+0xfc>)
 800377c:	f7fd fc52 	bl	8001024 <Flash_Write_Data>
		Flash_Read_Data(numberOfDevicesAddress, rxBuf, 1);
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	2201      	movs	r2, #1
 8003786:	4619      	mov	r1, r3
 8003788:	4810      	ldr	r0, [pc, #64]	; (80037cc <IDhandling+0xfc>)
 800378a:	f7fd fcb3 	bl	80010f4 <Flash_Read_Data>
		printf("\r\nSet device num to %ld", (uint32_t)rxBuf[0]);
 800378e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003792:	4613      	mov	r3, r2
 8003794:	4619      	mov	r1, r3
 8003796:	480e      	ldr	r0, [pc, #56]	; (80037d0 <IDhandling+0x100>)
 8003798:	f00c fe96 	bl	80104c8 <iprintf>
		return 1;
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <IDhandling+0xd2>
	}

	return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3730      	adds	r7, #48	; 0x30
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	48000400 	.word	0x48000400
 80037b0:	08013b24 	.word	0x08013b24
 80037b4:	08013b40 	.word	0x08013b40
 80037b8:	08013b50 	.word	0x08013b50
 80037bc:	08013b54 	.word	0x08013b54
 80037c0:	08019000 	.word	0x08019000
 80037c4:	08013b6c 	.word	0x08013b6c
 80037c8:	08013b7c 	.word	0x08013b7c
 80037cc:	0801b000 	.word	0x0801b000
 80037d0:	08013b94 	.word	0x08013b94

080037d4 <setShutdownModeMother>:

void setShutdownModeMother(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0

	HAL_SuspendTick();
 80037d8:	f002 fc14 	bl	8006004 <HAL_SuspendTick>
	printf("\r\nEntering Shutdown Mode");
 80037dc:	4803      	ldr	r0, [pc, #12]	; (80037ec <setShutdownModeMother+0x18>)
 80037de:	f00c fe73 	bl	80104c8 <iprintf>
	HAL_PWREx_EnterSHUTDOWNMode();
 80037e2:	f004 f9fd 	bl	8007be0 <HAL_PWREx_EnterSHUTDOWNMode>

}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	08013bac 	.word	0x08013bac

080037f0 <mainOperationMother>:

void mainOperationMother(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0aa      	sub	sp, #168	; 0xa8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8003802:	2200      	movs	r2, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f005 fbe6 	bl	8008fd6 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003812:	2200      	movs	r2, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f005 fcc1 	bl	800919c <HAL_RTC_GetDate>
	printf("\r\nOperating at %02d::%02d::%02d",  sTime.Hours, sTime.Minutes, sTime.Seconds);
 800381a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800381e:	4619      	mov	r1, r3
 8003820:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003824:	461a      	mov	r2, r3
 8003826:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800382a:	4828      	ldr	r0, [pc, #160]	; (80038cc <mainOperationMother+0xdc>)
 800382c:	f00c fe4c 	bl	80104c8 <iprintf>

	struct timeData timeInfo;
	timeInfo.seconds = sTime.Seconds;
 8003830:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003834:	67bb      	str	r3, [r7, #120]	; 0x78
	timeInfo.minutes = sTime.Minutes;
 8003836:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800383a:	67fb      	str	r3, [r7, #124]	; 0x7c
	timeInfo.hours = sTime.Hours;
 800383c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	timeInfo.day = sDate.Date;
 8003844:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	timeInfo.month = sDate.Month;
 800384c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8003850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	timeInfo.year = sDate.Year;
 8003854:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	struct newDevicesStorage newDevices;
	newDevices.numOfNewDevices = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	743b      	strb	r3, [r7, #16]
	rfData->newDevices = newDevices;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003866:	f107 0110 	add.w	r1, r7, #16
 800386a:	2266      	movs	r2, #102	; 0x66
 800386c:	4618      	mov	r0, r3
 800386e:	f00c f8cb 	bl	800fa08 <memcpy>
	HAL_Delay(5000);
 8003872:	f241 3088 	movw	r0, #5000	; 0x1388
 8003876:	f002 fba1 	bl	8005fbc <HAL_Delay>

	uint64_t idBuf[1];
	Flash_Read_Data(IDaddressAddr, idBuf, 1);
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	2201      	movs	r2, #1
 8003880:	4619      	mov	r1, r3
 8003882:	4813      	ldr	r0, [pc, #76]	; (80038d0 <mainOperationMother+0xe0>)
 8003884:	f7fd fc36 	bl	80010f4 <Flash_Read_Data>

	init_comms(rfData, DEVICE_PARENT, idBuf[0], 0);
 8003888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388c:	2300      	movs	r3, #0
 800388e:	2100      	movs	r1, #0
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 ffb9 	bl	8004808 <init_comms>

	rfData->count = 0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	725a      	strb	r2, [r3, #9]
	rfData->num_fwds = 0;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	729a      	strb	r2, [r3, #10]

	checkForNewDevices(handles, rfData);
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	6838      	ldr	r0, [r7, #0]
 80038a6:	f7fe fbcb 	bl	8002040 <checkForNewDevices>
	scanDeviceForData(rfData, handles, &timeInfo);
 80038aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038ae:	461a      	mov	r2, r3
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe f82e 	bl	8001914 <scanDeviceForData>
	addNewDevices(rfData);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fe fd95 	bl	80023e8 <addNewDevices>

	setShutdownModeMother();
 80038be:	f7ff ff89 	bl	80037d4 <setShutdownModeMother>
}
 80038c2:	bf00      	nop
 80038c4:	37a8      	adds	r7, #168	; 0xa8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	08013bc8 	.word	0x08013bc8
 80038d0:	08019000 	.word	0x08019000

080038d4 <SDcardTest>:
 */

#include <UnitTests.h>


void SDcardTest(){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0

	printf("Performing SD card test");
 80038de:	483e      	ldr	r0, [pc, #248]	; (80039d8 <SDcardTest+0x104>)
 80038e0:	f00c fdf2 	bl	80104c8 <iprintf>

	FATFS fs;
	  FIL fil;
	  HAL_Delay(500);
 80038e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038e8:	f002 fb68 	bl	8005fbc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80038ec:	2201      	movs	r2, #1
 80038ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80038f2:	483a      	ldr	r0, [pc, #232]	; (80039dc <SDcardTest+0x108>)
 80038f4:	f004 f8e8 	bl	8007ac8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80038f8:	2064      	movs	r0, #100	; 0x64
 80038fa:	f002 fb5f 	bl	8005fbc <HAL_Delay>
	  if(f_mount(&fs, "/", 0)==FR_OK){
 80038fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003902:	f103 0308 	add.w	r3, r3, #8
 8003906:	3b18      	subs	r3, #24
 8003908:	2200      	movs	r2, #0
 800390a:	4935      	ldr	r1, [pc, #212]	; (80039e0 <SDcardTest+0x10c>)
 800390c:	4618      	mov	r0, r3
 800390e:	f00a fdad 	bl	800e46c <f_mount>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d152      	bne.n	80039be <SDcardTest+0xea>
		  HAL_Delay(100);
 8003918:	2064      	movs	r0, #100	; 0x64
 800391a:	f002 fb4f 	bl	8005fbc <HAL_Delay>
		  printf("\r\nSD card mounted");
 800391e:	4831      	ldr	r0, [pc, #196]	; (80039e4 <SDcardTest+0x110>)
 8003920:	f00c fdd2 	bl	80104c8 <iprintf>
		  if(f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ)==FR_OK){
 8003924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003928:	3b28      	subs	r3, #40	; 0x28
 800392a:	2213      	movs	r2, #19
 800392c:	492e      	ldr	r1, [pc, #184]	; (80039e8 <SDcardTest+0x114>)
 800392e:	4618      	mov	r0, r3
 8003930:	f00a fde2 	bl	800e4f8 <f_open>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <SDcardTest+0x6e>

			  printf("\r\nFile opend");
 800393a:	482c      	ldr	r0, [pc, #176]	; (80039ec <SDcardTest+0x118>)
 800393c:	f00c fdc4 	bl	80104c8 <iprintf>
 8003940:	e002      	b.n	8003948 <SDcardTest+0x74>

		  }
		  else{
			  printf("\r\nCould not open File");
 8003942:	482b      	ldr	r0, [pc, #172]	; (80039f0 <SDcardTest+0x11c>)
 8003944:	f00c fdc0 	bl	80104c8 <iprintf>
		  }
		  HAL_Delay(100);
 8003948:	2064      	movs	r0, #100	; 0x64
 800394a:	f002 fb37 	bl	8005fbc <HAL_Delay>
		  f_lseek(&fil, f_size(&fil));
 800394e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003952:	f853 2c5c 	ldr.w	r2, [r3, #-92]
 8003956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800395a:	3b28      	subs	r3, #40	; 0x28
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	f00b fb31 	bl	800efc6 <f_lseek>
		  HAL_Delay(100);
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	f002 fb29 	bl	8005fbc <HAL_Delay>
		  f_puts("Hello World\n", &fil);
 800396a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800396e:	3b28      	subs	r3, #40	; 0x28
 8003970:	4619      	mov	r1, r3
 8003972:	4820      	ldr	r0, [pc, #128]	; (80039f4 <SDcardTest+0x120>)
 8003974:	f00b fecf 	bl	800f716 <f_puts>
		  HAL_Delay(100);
 8003978:	2064      	movs	r0, #100	; 0x64
 800397a:	f002 fb1f 	bl	8005fbc <HAL_Delay>
		  if(f_close(&fil)==FR_OK){
 800397e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003982:	3b28      	subs	r3, #40	; 0x28
 8003984:	4618      	mov	r0, r3
 8003986:	f00b faf4 	bl	800ef72 <f_close>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <SDcardTest+0xc4>

			  printf("\r\nFile closed");
 8003990:	4819      	ldr	r0, [pc, #100]	; (80039f8 <SDcardTest+0x124>)
 8003992:	f00c fd99 	bl	80104c8 <iprintf>
 8003996:	e002      	b.n	800399e <SDcardTest+0xca>

		  }
		  else{
			  printf("\r\nCould not close File");
 8003998:	4818      	ldr	r0, [pc, #96]	; (80039fc <SDcardTest+0x128>)
 800399a:	f00c fd95 	bl	80104c8 <iprintf>
		  }
		  if(f_mount(NULL, "/", 1)==FR_OK){
 800399e:	2201      	movs	r2, #1
 80039a0:	490f      	ldr	r1, [pc, #60]	; (80039e0 <SDcardTest+0x10c>)
 80039a2:	2000      	movs	r0, #0
 80039a4:	f00a fd62 	bl	800e46c <f_mount>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <SDcardTest+0xe2>

			  printf("\r\nSD card closed");
 80039ae:	4814      	ldr	r0, [pc, #80]	; (8003a00 <SDcardTest+0x12c>)
 80039b0:	f00c fd8a 	bl	80104c8 <iprintf>
 80039b4:	e006      	b.n	80039c4 <SDcardTest+0xf0>

		  }
		  else{
			  printf("\r\nFailed to close");
 80039b6:	4813      	ldr	r0, [pc, #76]	; (8003a04 <SDcardTest+0x130>)
 80039b8:	f00c fd86 	bl	80104c8 <iprintf>
 80039bc:	e002      	b.n	80039c4 <SDcardTest+0xf0>
		  }
	  }
	  else{
		  printf("\r\nSD card error");
 80039be:	4812      	ldr	r0, [pc, #72]	; (8003a08 <SDcardTest+0x134>)
 80039c0:	f00c fd82 	bl	80104c8 <iprintf>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
		printf("SD start error");

	}
*/
	printf("SD test done");
 80039c4:	4811      	ldr	r0, [pc, #68]	; (8003a0c <SDcardTest+0x138>)
 80039c6:	f00c fd7f 	bl	80104c8 <iprintf>
}
 80039ca:	bf00      	nop
 80039cc:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08013be8 	.word	0x08013be8
 80039dc:	48000400 	.word	0x48000400
 80039e0:	08013c00 	.word	0x08013c00
 80039e4:	08013c04 	.word	0x08013c04
 80039e8:	08013c18 	.word	0x08013c18
 80039ec:	08013c24 	.word	0x08013c24
 80039f0:	08013c34 	.word	0x08013c34
 80039f4:	08013c4c 	.word	0x08013c4c
 80039f8:	08013c5c 	.word	0x08013c5c
 80039fc:	08013c6c 	.word	0x08013c6c
 8003a00:	08013c84 	.word	0x08013c84
 8003a04:	08013c98 	.word	0x08013c98
 8003a08:	08013cac 	.word	0x08013cac
 8003a0c:	08013cbc 	.word	0x08013cbc

08003a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buf[100];

	struct CommunicationHandles handles;
    handles.SPIhandle = &hspi2;
 8003a18:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <main+0xd4>)
 8003a1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	handles.RTChandle = &hrtc;
 8003a1e:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <main+0xd8>)
 8003a20:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a24:	f002 fa55 	bl	8005ed2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a28:	f000 f86e 	bl	8003b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a2c:	f000 fae6 	bl	8003ffc <MX_GPIO_Init>
  MX_FATFS_Init();
 8003a30:	f008 fad2 	bl	800bfd8 <MX_FATFS_Init>
  MX_RTC_Init();
 8003a34:	f000 f9a4 	bl	8003d80 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8003a38:	f000 f932 	bl	8003ca0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8003a3c:	f000 f95c 	bl	8003cf8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8003a40:	f000 fa9e 	bl	8003f80 <MX_SPI2_Init>
  MX_RNG_Init();
 8003a44:	f000 f988 	bl	8003d58 <MX_RNG_Init>
  MX_ADC1_Init();
 8003a48:	f000 f8b4 	bl	8003bb4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8003a4c:	4827      	ldr	r0, [pc, #156]	; (8003aec <main+0xdc>)
 8003a4e:	f000 fb89 	bl	8004164 <RetargetInit>

struct rfDataStorage rfData;
rfData.RXFIFO = &RXFIFO;
 8003a52:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003a56:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8003a5a:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <main+0xe0>)
 8003a5c:	601a      	str	r2, [r3, #0]

HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8003a5e:	2214      	movs	r2, #20
 8003a60:	4924      	ldr	r1, [pc, #144]	; (8003af4 <main+0xe4>)
 8003a62:	4825      	ldr	r0, [pc, #148]	; (8003af8 <main+0xe8>)
 8003a64:	f006 fe1c 	bl	800a6a0 <HAL_UART_Receive_IT>

if(mainSetupMother(&rfData, &handles)){
 8003a68:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fdb7 	bl	80035e4 <mainSetupMother>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <main+0x7a>
   mainOperationMother(&rfData, &handles);
 8003a7c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8003a80:	463b      	mov	r3, r7
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff feb3 	bl	80037f0 <mainOperationMother>
}

HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	481b      	ldr	r0, [pc, #108]	; (8003afc <main+0xec>)
 8003a90:	f004 f81a 	bl	8007ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003a94:	2201      	movs	r2, #1
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	4818      	ldr	r0, [pc, #96]	; (8003afc <main+0xec>)
 8003a9a:	f004 f815 	bl	8007ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aa4:	4815      	ldr	r0, [pc, #84]	; (8003afc <main+0xec>)
 8003aa6:	f004 f80f 	bl	8007ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ab0:	4812      	ldr	r0, [pc, #72]	; (8003afc <main+0xec>)
 8003ab2:	f004 f809 	bl	8007ac8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2180      	movs	r1, #128	; 0x80
 8003aba:	4811      	ldr	r0, [pc, #68]	; (8003b00 <main+0xf0>)
 8003abc:	f004 f804 	bl	8007ac8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8003ac0:	2064      	movs	r0, #100	; 0x64
 8003ac2:	f002 fa7b 	bl	8005fbc <HAL_Delay>
	  SDcardTest();
 8003ac6:	f7ff ff05 	bl	80038d4 <SDcardTest>
	  HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_RESET);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	480c      	ldr	r0, [pc, #48]	; (8003b00 <main+0xf0>)
 8003ad0:	f003 fffa 	bl	8007ac8 <HAL_GPIO_WritePin>

	  printf("Loop");
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <main+0xf4>)
 8003ad6:	f00c fcf7 	bl	80104c8 <iprintf>
	  HAL_Delay(1000);
 8003ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ade:	f002 fa6d 	bl	8005fbc <HAL_Delay>
	  HAL_GPIO_WritePin(SDcardGPIO, SDcardGPIOPin, GPIO_PIN_SET);
 8003ae2:	e7e8      	b.n	8003ab6 <main+0xa6>
 8003ae4:	200003e8 	.word	0x200003e8
 8003ae8:	200003bc 	.word	0x200003bc
 8003aec:	20000328 	.word	0x20000328
 8003af0:	2000044c 	.word	0x2000044c
 8003af4:	200006b0 	.word	0x200006b0
 8003af8:	200002a4 	.word	0x200002a4
 8003afc:	48000800 	.word	0x48000800
 8003b00:	48000400 	.word	0x48000400
 8003b04:	08013d88 	.word	0x08013d88

08003b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b096      	sub	sp, #88	; 0x58
 8003b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b0e:	f107 0314 	add.w	r3, r7, #20
 8003b12:	2244      	movs	r2, #68	; 0x44
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f00b ff84 	bl	800fa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b2e:	f004 f801 	bl	8007b34 <HAL_PWREx_ControlVoltageScaling>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003b38:	f000 fb0e 	bl	8004158 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b3c:	f003 ffdc 	bl	8007af8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <SystemClock_Config+0xa8>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <SystemClock_Config+0xa8>)
 8003b48:	f023 0318 	bic.w	r3, r3, #24
 8003b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003b50:	2314      	movs	r3, #20
 8003b52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b54:	2301      	movs	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b60:	2360      	movs	r3, #96	; 0x60
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b68:	f107 0314 	add.w	r3, r7, #20
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f004 f851 	bl	8007c14 <HAL_RCC_OscConfig>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8003b78:	f000 faee 	bl	8004158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b7c:	230f      	movs	r3, #15
 8003b7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003b80:	2300      	movs	r3, #0
 8003b82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b84:	2300      	movs	r3, #0
 8003b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b90:	463b      	mov	r3, r7
 8003b92:	2100      	movs	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 fc9f 	bl	80084d8 <HAL_RCC_ClockConfig>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ba0:	f000 fada 	bl	8004158 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003ba4:	f005 f842 	bl	8008c2c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003ba8:	bf00      	nop
 8003baa:	3758      	adds	r7, #88	; 0x58
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
 8003bd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bd8:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <MX_ADC1_Init+0xe4>)
 8003bda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bdc:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bf4:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bfa:	4b26      	ldr	r3, [pc, #152]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8003c06:	4b23      	ldr	r3, [pc, #140]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c36:	4817      	ldr	r0, [pc, #92]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c38:	f002 fb94 	bl	8006364 <HAL_ADC_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003c42:	f000 fa89 	bl	8004158 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4810      	ldr	r0, [pc, #64]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c52:	f003 f8f9 	bl	8006e48 <HAL_ADCEx_MultiModeConfigChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003c5c:	f000 fa7c 	bl	8004158 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003c60:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_ADC1_Init+0xe8>)
 8003c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c64:	2306      	movs	r3, #6
 8003c66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c6c:	237f      	movs	r3, #127	; 0x7f
 8003c6e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c70:	2304      	movs	r3, #4
 8003c72:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c78:	1d3b      	adds	r3, r7, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4805      	ldr	r0, [pc, #20]	; (8003c94 <MX_ADC1_Init+0xe0>)
 8003c7e:	f002 fcc1 	bl	8006604 <HAL_ADC_ConfigChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003c88:	f000 fa66 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000240 	.word	0x20000240
 8003c98:	50040000 	.word	0x50040000
 8003c9c:	19200040 	.word	0x19200040

08003ca0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003ca4:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <MX_LPUART1_UART_Init+0x54>)
 8003ca8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003cb0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb2:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003cdc:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <MX_LPUART1_UART_Init+0x50>)
 8003cde:	f006 fabd 	bl	800a25c <HAL_UART_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003ce8:	f000 fa36 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200002a4 	.word	0x200002a4
 8003cf4:	40008000 	.word	0x40008000

08003cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003cfc:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003cfe:	4a15      	ldr	r2, [pc, #84]	; (8003d54 <MX_USART3_UART_Init+0x5c>)
 8003d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d02:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d0a:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d10:	4b0f      	ldr	r3, [pc, #60]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d1e:	220c      	movs	r2, #12
 8003d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_USART3_UART_Init+0x58>)
 8003d3c:	f006 fa8e 	bl	800a25c <HAL_UART_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003d46:	f000 fa07 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000328 	.word	0x20000328
 8003d54:	40004800 	.word	0x40004800

08003d58 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_RNG_Init+0x20>)
 8003d5e:	4a07      	ldr	r2, [pc, #28]	; (8003d7c <MX_RNG_Init+0x24>)
 8003d60:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <MX_RNG_Init+0x20>)
 8003d64:	f004 ff72 	bl	8008c4c <HAL_RNG_Init>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003d6e:	f000 f9f3 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200003ac 	.word	0x200003ac
 8003d7c:	50060800 	.word	0x50060800

08003d80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b092      	sub	sp, #72	; 0x48
 8003d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	609a      	str	r2, [r3, #8]
 8003d92:	60da      	str	r2, [r3, #12]
 8003d94:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d96:	2300      	movs	r3, #0
 8003d98:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	222c      	movs	r2, #44	; 0x2c
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00b fe3f 	bl	800fa24 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003da6:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003da8:	4a73      	ldr	r2, [pc, #460]	; (8003f78 <MX_RTC_Init+0x1f8>)
 8003daa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dac:	4b71      	ldr	r3, [pc, #452]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003db2:	4b70      	ldr	r3, [pc, #448]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003db4:	227f      	movs	r2, #127	; 0x7f
 8003db6:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003db8:	4b6e      	ldr	r3, [pc, #440]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dba:	22ff      	movs	r2, #255	; 0xff
 8003dbc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003dbe:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003dc4:	4b6b      	ldr	r3, [pc, #428]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003dca:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dd6:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003dd8:	4b66      	ldr	r3, [pc, #408]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dde:	4865      	ldr	r0, [pc, #404]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003de0:	f004 ffda 	bl	8008d98 <HAL_RTC_Init>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8003dea:	f000 f9b5 	bl	8004158 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BKUP_DEFINE_CODE)
 8003dee:	2100      	movs	r1, #0
 8003df0:	4860      	ldr	r0, [pc, #384]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003df2:	f005 fc8e 	bl	8009712 <HAL_RTCEx_BKUPRead>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f240 3227 	movw	r2, #807	; 0x327
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d037      	beq.n	8003e70 <MX_RTC_Init+0xf0>
  	// Clear Backup registor : recover to current RTC information

  	// Set to Time/Date from current Time/Date

  	// Write a data in ad RTC Backup data register
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BKUP_DEFINE_CODE);
 8003e00:	f240 3227 	movw	r2, #807	; 0x327
 8003e04:	2100      	movs	r1, #0
 8003e06:	485b      	ldr	r0, [pc, #364]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003e08:	f005 fc63 	bl	80096d2 <HAL_RTCEx_BKUPWrite>

  	  sTime.Hours = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	  sTime.Minutes = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	  sTime.Seconds = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	643b      	str	r3, [r7, #64]	; 0x40
  	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	647b      	str	r3, [r7, #68]	; 0x44
  	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003e26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4851      	ldr	r0, [pc, #324]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003e30:	f005 f834 	bl	8008e9c <HAL_RTC_SetTime>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_RTC_Init+0xbe>
  	  {
  		Error_Handler();
 8003e3a:	f000 f98d 	bl	8004158 <Error_Handler>
  	  }
  	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  	  sDate.Month = RTC_MONTH_JANUARY;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  	  sDate.Date = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  	  sDate.Year = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4845      	ldr	r0, [pc, #276]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003e60:	f005 f915 	bl	800908e <HAL_RTC_SetDate>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d010      	beq.n	8003e8c <MX_RTC_Init+0x10c>
  	  {
  		Error_Handler();
 8003e6a:	f000 f975 	bl	8004158 <Error_Handler>
 8003e6e:	e00d      	b.n	8003e8c <MX_RTC_Init+0x10c>
  	  }

    } else
    {
  	// Only read time and date
  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e74:	2200      	movs	r2, #0
 8003e76:	4619      	mov	r1, r3
 8003e78:	483e      	ldr	r0, [pc, #248]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003e7a:	f005 f8ac 	bl	8008fd6 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	483b      	ldr	r0, [pc, #236]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003e88:	f005 f988 	bl	800919c <HAL_RTC_GetDate>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003ea6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4619      	mov	r1, r3
 8003eae:	4831      	ldr	r0, [pc, #196]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003eb0:	f004 fff4 	bl	8008e9c <HAL_RTC_SetTime>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <MX_RTC_Init+0x13e>
  {
    Error_Handler();
 8003eba:	f000 f94d 	bl	8004158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eda:	2200      	movs	r2, #0
 8003edc:	4619      	mov	r1, r3
 8003ede:	4825      	ldr	r0, [pc, #148]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003ee0:	f005 f8d5 	bl	800908e <HAL_RTC_SetDate>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <MX_RTC_Init+0x16e>
  {
    Error_Handler();
 8003eea:	f000 f935 	bl	8004158 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <MX_RTC_Init+0x1fc>)
 8003f08:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8003f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	2200      	movs	r2, #0
 8003f24:	4619      	mov	r1, r3
 8003f26:	4813      	ldr	r0, [pc, #76]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003f28:	f005 f986 	bl	8009238 <HAL_RTC_SetAlarm_IT>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_RTC_Init+0x1b6>
  {
    Error_Handler();
 8003f32:	f000 f911 	bl	8004158 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 30;
 8003f36:	231e      	movs	r3, #30
 8003f38:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8003f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003f44:	1d3b      	adds	r3, r7, #4
 8003f46:	2200      	movs	r2, #0
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480a      	ldr	r0, [pc, #40]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003f4c:	f005 f974 	bl	8009238 <HAL_RTC_SetAlarm_IT>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_RTC_Init+0x1da>
  {
    Error_Handler();
 8003f56:	f000 f8ff 	bl	8004158 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4805      	ldr	r0, [pc, #20]	; (8003f74 <MX_RTC_Init+0x1f4>)
 8003f5e:	f005 fb67 	bl	8009630 <HAL_RTCEx_SetCalibrationOutPut>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_RTC_Init+0x1ec>
  {
    Error_Handler();
 8003f68:	f000 f8f6 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f6c:	bf00      	nop
 8003f6e:	3748      	adds	r7, #72	; 0x48
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200003bc 	.word	0x200003bc
 8003f78:	40002800 	.word	0x40002800
 8003f7c:	80808000 	.word	0x80808000

08003f80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <MX_SPI2_Init+0x78>)
 8003f88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003f9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fce:	2207      	movs	r2, #7
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fda:	2208      	movs	r2, #8
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fde:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <MX_SPI2_Init+0x74>)
 8003fe0:	f005 fbb4 	bl	800974c <HAL_SPI_Init>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003fea:	f000 f8b5 	bl	8004158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200003e8 	.word	0x200003e8
 8003ff8:	40003800 	.word	0x40003800

08003ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	4a34      	ldr	r2, [pc, #208]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800401e:	4b32      	ldr	r3, [pc, #200]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <MX_GPIO_Init+0xec>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	4b29      	ldr	r3, [pc, #164]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <MX_GPIO_Init+0xec>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <MX_GPIO_Init+0xec>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8004072:	2200      	movs	r2, #0
 8004074:	f44f 519e 	mov.w	r1, #5056	; 0x13c0
 8004078:	481c      	ldr	r0, [pc, #112]	; (80040ec <MX_GPIO_Init+0xf0>)
 800407a:	f003 fd25 	bl	8007ac8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800407e:	2200      	movs	r2, #0
 8004080:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8004084:	481a      	ldr	r0, [pc, #104]	; (80040f0 <MX_GPIO_Init+0xf4>)
 8004086:	f003 fd1f 	bl	8007ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800408a:	f240 4304 	movw	r3, #1028	; 0x404
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	4619      	mov	r1, r3
 800409e:	4813      	ldr	r0, [pc, #76]	; (80040ec <MX_GPIO_Init+0xf0>)
 80040a0:	f003 fb88 	bl	80077b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80040a4:	f44f 539e 	mov.w	r3, #5056	; 0x13c0
 80040a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b2:	2300      	movs	r3, #0
 80040b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	480b      	ldr	r0, [pc, #44]	; (80040ec <MX_GPIO_Init+0xf0>)
 80040be:	f003 fb79 	bl	80077b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80040c2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80040c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c8:	2301      	movs	r3, #1
 80040ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	4805      	ldr	r0, [pc, #20]	; (80040f0 <MX_GPIO_Init+0xf4>)
 80040dc:	f003 fb6a 	bl	80077b4 <HAL_GPIO_Init>

}
 80040e0:	bf00      	nop
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	48000400 	.word	0x48000400
 80040f0:	48000800 	.word	0x48000800

080040f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	//printf("\r\nreceived uart message");
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e00f      	b.n	8004122 <HAL_UART_RxCpltCallback+0x2e>
	{
			//printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <HAL_UART_RxCpltCallback+0x58>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4810      	ldr	r0, [pc, #64]	; (8004150 <HAL_UART_RxCpltCallback+0x5c>)
 800410e:	f001 f8bb 	bl	8005288 <enqueue>
			UART2_rxBuffer[i] = 0;
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <HAL_UART_RxCpltCallback+0x58>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	3301      	adds	r3, #1
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b13      	cmp	r3, #19
 8004126:	ddec      	ble.n	8004102 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8004128:	2214      	movs	r2, #20
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <HAL_UART_RxCpltCallback+0x58>)
 800412c:	4809      	ldr	r0, [pc, #36]	; (8004154 <HAL_UART_RxCpltCallback+0x60>)
 800412e:	f006 fab7 	bl	800a6a0 <HAL_UART_Receive_IT>
	HAL_UART_Abort_IT(&hlpuart1);
 8004132:	4808      	ldr	r0, [pc, #32]	; (8004154 <HAL_UART_RxCpltCallback+0x60>)
 8004134:	f006 fb0a 	bl	800a74c <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8004138:	2214      	movs	r2, #20
 800413a:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_UART_RxCpltCallback+0x58>)
 800413c:	4805      	ldr	r0, [pc, #20]	; (8004154 <HAL_UART_RxCpltCallback+0x60>)
 800413e:	f006 faaf 	bl	800a6a0 <HAL_UART_Receive_IT>
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200006b0 	.word	0x200006b0
 8004150:	2000044c 	.word	0x2000044c
 8004154:	200002a4 	.word	0x200002a4

08004158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800415c:	b672      	cpsid	i
}
 800415e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004160:	e7fe      	b.n	8004160 <Error_Handler+0x8>
	...

08004164 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <RetargetInit+0x28>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <RetargetInit+0x2c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6898      	ldr	r0, [r3, #8]
 8004178:	2300      	movs	r3, #0
 800417a:	2202      	movs	r2, #2
 800417c:	2100      	movs	r1, #0
 800417e:	f00c f9e3 	bl	8010548 <setvbuf>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000714 	.word	0x20000714
 8004190:	20000044 	.word	0x20000044

08004194 <_isatty>:

int _isatty(int fd) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	db04      	blt.n	80041ac <_isatty+0x18>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	dc01      	bgt.n	80041ac <_isatty+0x18>
    return 1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e005      	b.n	80041b8 <_isatty+0x24>

  errno = EBADF;
 80041ac:	f00b fbfa 	bl	800f9a4 <__errno>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2209      	movs	r2, #9
 80041b4:	601a      	str	r2, [r3, #0]
  return 0;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <_write>:

int _write(int fd, char* ptr, int len) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d002      	beq.n	80041d8 <_write+0x18>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d111      	bne.n	80041fc <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <_write+0x54>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	b29a      	uxth	r2, r3
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	f006 f887 	bl	800a2f8 <HAL_UART_Transmit>
 80041ea:	4603      	mov	r3, r0
 80041ec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <_write+0x38>
      return len;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	e008      	b.n	800420a <_write+0x4a>
    else
      return EIO;
 80041f8:	2305      	movs	r3, #5
 80041fa:	e006      	b.n	800420a <_write+0x4a>
  }
  errno = EBADF;
 80041fc:	f00b fbd2 	bl	800f9a4 <__errno>
 8004200:	4603      	mov	r3, r0
 8004202:	2209      	movs	r2, #9
 8004204:	601a      	str	r2, [r3, #0]
  return -1;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000714 	.word	0x20000714

08004218 <_close>:

int _close(int fd) {
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	db04      	blt.n	8004230 <_close+0x18>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b02      	cmp	r3, #2
 800422a:	dc01      	bgt.n	8004230 <_close+0x18>
    return 0;
 800422c:	2300      	movs	r3, #0
 800422e:	e006      	b.n	800423e <_close+0x26>

  errno = EBADF;
 8004230:	f00b fbb8 	bl	800f9a4 <__errno>
 8004234:	4603      	mov	r3, r0
 8004236:	2209      	movs	r2, #9
 8004238:	601a      	str	r2, [r3, #0]
  return -1;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8004252:	f00b fba7 	bl	800f9a4 <__errno>
 8004256:	4603      	mov	r3, r0
 8004258:	2209      	movs	r2, #9
 800425a:	601a      	str	r2, [r3, #0]
  return -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_read>:

int _read(int fd, char* ptr, int len) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d110      	bne.n	800429c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <_read+0x4c>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	2201      	movs	r2, #1
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	f006 f8cb 	bl	800a420 <HAL_UART_Receive>
 800428a:	4603      	mov	r3, r0
 800428c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <_read+0x30>
      return 1;
 8004294:	2301      	movs	r3, #1
 8004296:	e008      	b.n	80042aa <_read+0x42>
    else
      return EIO;
 8004298:	2305      	movs	r3, #5
 800429a:	e006      	b.n	80042aa <_read+0x42>
  }
  errno = EBADF;
 800429c:	f00b fb82 	bl	800f9a4 <__errno>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2209      	movs	r2, #9
 80042a4:	601a      	str	r2, [r3, #0]
  return -1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000714 	.word	0x20000714

080042b8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	db08      	blt.n	80042da <_fstat+0x22>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	dc05      	bgt.n	80042da <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042d4:	605a      	str	r2, [r3, #4]
    return 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e005      	b.n	80042e6 <_fstat+0x2e>
  }

  errno = EBADF;
 80042da:	f00b fb63 	bl	800f9a4 <__errno>
 80042de:	4603      	mov	r3, r0
 80042e0:	2209      	movs	r2, #9
 80042e2:	601a      	str	r2, [r3, #0]
  return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_MspInit+0x44>)
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <HAL_MspInit+0x44>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6613      	str	r3, [r2, #96]	; 0x60
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_MspInit+0x44>)
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	607b      	str	r3, [r7, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_MspInit+0x44>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_MspInit+0x44>)
 8004314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004318:	6593      	str	r3, [r2, #88]	; 0x58
 800431a:	4b06      	ldr	r3, [pc, #24]	; (8004334 <HAL_MspInit+0x44>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40021000 	.word	0x40021000

08004338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a15      	ldr	r2, [pc, #84]	; (80043ac <HAL_ADC_MspInit+0x74>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d124      	bne.n	80043a4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	4a14      	ldr	r2, [pc, #80]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 8004360:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437e:	4b0c      	ldr	r3, [pc, #48]	; (80043b0 <HAL_ADC_MspInit+0x78>)
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800438a:	2302      	movs	r3, #2
 800438c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800438e:	230b      	movs	r3, #11
 8004390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	4619      	mov	r1, r3
 800439c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043a0:	f003 fa08 	bl	80077b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043a4:	bf00      	nop
 80043a6:	3728      	adds	r7, #40	; 0x28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	50040000 	.word	0x50040000
 80043b0:	40021000 	.word	0x40021000

080043b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b098      	sub	sp, #96	; 0x60
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	605a      	str	r2, [r3, #4]
 80043c6:	609a      	str	r2, [r3, #8]
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043cc:	f107 0318 	add.w	r3, r7, #24
 80043d0:	2234      	movs	r2, #52	; 0x34
 80043d2:	2100      	movs	r1, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f00b fb25 	bl	800fa24 <memset>
  if(huart->Instance==LPUART1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a41      	ldr	r2, [pc, #260]	; (80044e4 <HAL_UART_MspInit+0x130>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d13f      	bne.n	8004464 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80043e4:	2320      	movs	r3, #32
 80043e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043ec:	f107 0318 	add.w	r3, r7, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 fa95 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043fc:	f7ff feac 	bl	8004158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_UART_MspInit+0x134>)
 8004402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004404:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <HAL_UART_MspInit+0x134>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_UART_MspInit+0x134>)
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <HAL_UART_MspInit+0x134>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	4a32      	ldr	r2, [pc, #200]	; (80044e8 <HAL_UART_MspInit+0x134>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_UART_MspInit+0x134>)
 8004426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004430:	230c      	movs	r3, #12
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004434:	2302      	movs	r3, #2
 8004436:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800443c:	2303      	movs	r3, #3
 800443e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004440:	2308      	movs	r3, #8
 8004442:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004444:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004448:	4619      	mov	r1, r3
 800444a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800444e:	f003 f9b1 	bl	80077b4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004452:	2200      	movs	r2, #0
 8004454:	2100      	movs	r1, #0
 8004456:	2046      	movs	r0, #70	; 0x46
 8004458:	f002 fe75 	bl	8007146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800445c:	2046      	movs	r0, #70	; 0x46
 800445e:	f002 fe8e 	bl	800717e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004462:	e03b      	b.n	80044dc <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART3)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a20      	ldr	r2, [pc, #128]	; (80044ec <HAL_UART_MspInit+0x138>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d136      	bne.n	80044dc <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800446e:	2304      	movs	r3, #4
 8004470:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004476:	f107 0318 	add.w	r3, r7, #24
 800447a:	4618      	mov	r0, r3
 800447c:	f004 fa50 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8004486:	f7ff fe67 	bl	8004158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <HAL_UART_MspInit+0x134>)
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <HAL_UART_MspInit+0x134>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <HAL_UART_MspInit+0x134>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a2:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HAL_UART_MspInit+0x134>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <HAL_UART_MspInit+0x134>)
 80044a8:	f043 0304 	orr.w	r3, r3, #4
 80044ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_UART_MspInit+0x134>)
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 80044ba:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044cc:	2307      	movs	r3, #7
 80044ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044d4:	4619      	mov	r1, r3
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <HAL_UART_MspInit+0x13c>)
 80044d8:	f003 f96c 	bl	80077b4 <HAL_GPIO_Init>
}
 80044dc:	bf00      	nop
 80044de:	3760      	adds	r7, #96	; 0x60
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40008000 	.word	0x40008000
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40004800 	.word	0x40004800
 80044f0:	48000800 	.word	0x48000800

080044f4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b090      	sub	sp, #64	; 0x40
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	2234      	movs	r2, #52	; 0x34
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f00b fa8d 	bl	800fa24 <memset>
  if(hrng->Instance==RNG)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_RNG_MspInit+0x60>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d11b      	bne.n	800454c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004514:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004518:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 800451a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	4618      	mov	r0, r3
 8004526:	f004 f9fb 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004530:	f7ff fe12 	bl	8004158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004534:	4b08      	ldr	r3, [pc, #32]	; (8004558 <HAL_RNG_MspInit+0x64>)
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	4a07      	ldr	r2, [pc, #28]	; (8004558 <HAL_RNG_MspInit+0x64>)
 800453a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RNG_MspInit+0x64>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004544:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800454c:	bf00      	nop
 800454e:	3740      	adds	r7, #64	; 0x40
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	50060800 	.word	0x50060800
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b096      	sub	sp, #88	; 0x58
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004564:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004574:	f107 0310 	add.w	r3, r7, #16
 8004578:	2234      	movs	r2, #52	; 0x34
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f00b fa51 	bl	800fa24 <memset>
  if(hrtc->Instance==RTC)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1c      	ldr	r2, [pc, #112]	; (80045f8 <HAL_RTC_MspInit+0x9c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d131      	bne.n	80045f0 <HAL_RTC_MspInit+0x94>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800458c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004590:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004598:	f107 0310 	add.w	r3, r7, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f004 f9bf 	bl	8008920 <HAL_RCCEx_PeriphCLKConfig>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80045a8:	f7ff fdd6 	bl	8004158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045ac:	4b13      	ldr	r3, [pc, #76]	; (80045fc <HAL_RTC_MspInit+0xa0>)
 80045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b2:	4a12      	ldr	r2, [pc, #72]	; (80045fc <HAL_RTC_MspInit+0xa0>)
 80045b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <HAL_RTC_MspInit+0xa0>)
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_RTC_MspInit+0xa0>)
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <HAL_RTC_MspInit+0xa0>)
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT_CALIB
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045d8:	4619      	mov	r1, r3
 80045da:	4809      	ldr	r0, [pc, #36]	; (8004600 <HAL_RTC_MspInit+0xa4>)
 80045dc:	f003 f8ea 	bl	80077b4 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80045e0:	2200      	movs	r2, #0
 80045e2:	2100      	movs	r1, #0
 80045e4:	2029      	movs	r0, #41	; 0x29
 80045e6:	f002 fdae 	bl	8007146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80045ea:	2029      	movs	r0, #41	; 0x29
 80045ec:	f002 fdc7 	bl	800717e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045f0:	bf00      	nop
 80045f2:	3758      	adds	r7, #88	; 0x58
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40002800 	.word	0x40002800
 80045fc:	40021000 	.word	0x40021000
 8004600:	48000800 	.word	0x48000800

08004604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	; 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_SPI_MspInit+0x7c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d128      	bne.n	8004678 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_SPI_MspInit+0x80>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <HAL_SPI_MspInit+0x80>)
 800462c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004630:	6593      	str	r3, [r2, #88]	; 0x58
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_SPI_MspInit+0x80>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_SPI_MspInit+0x80>)
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <HAL_SPI_MspInit+0x80>)
 8004644:	f043 0302 	orr.w	r3, r3, #2
 8004648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <HAL_SPI_MspInit+0x80>)
 800464c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004656:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800465a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800465c:	2302      	movs	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004664:	2303      	movs	r3, #3
 8004666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004668:	2305      	movs	r3, #5
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4619      	mov	r1, r3
 8004672:	4805      	ldr	r0, [pc, #20]	; (8004688 <HAL_SPI_MspInit+0x84>)
 8004674:	f003 f89e 	bl	80077b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004678:	bf00      	nop
 800467a:	3728      	adds	r7, #40	; 0x28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40003800 	.word	0x40003800
 8004684:	40021000 	.word	0x40021000
 8004688:	48000400 	.word	0x48000400

0800468c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004690:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <SDTimer_Handler+0x40>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <SDTimer_Handler+0x1c>
    Timer1--;
 800469a:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <SDTimer_Handler+0x40>)
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	4b09      	ldr	r3, [pc, #36]	; (80046cc <SDTimer_Handler+0x40>)
 80046a6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <SDTimer_Handler+0x44>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <SDTimer_Handler+0x34>
    Timer2--;
 80046b2:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <SDTimer_Handler+0x44>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <SDTimer_Handler+0x44>)
 80046be:	701a      	strb	r2, [r3, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20000719 	.word	0x20000719
 80046d0:	2000071a 	.word	0x2000071a

080046d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <NMI_Handler+0x4>

080046da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046da:	b480      	push	{r7}
 80046dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046de:	e7fe      	b.n	80046de <HardFault_Handler+0x4>

080046e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046e4:	e7fe      	b.n	80046e4 <MemManage_Handler+0x4>

080046e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e6:	b480      	push	{r7}
 80046e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ea:	e7fe      	b.n	80046ea <BusFault_Handler+0x4>

080046ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046f0:	e7fe      	b.n	80046f0 <UsageFault_Handler+0x4>

080046f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046f2:	b480      	push	{r7}
 80046f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <SysTick_Handler+0x30>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	3301      	adds	r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <SysTick_Handler+0x30>)
 800472c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <SysTick_Handler+0x30>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b09      	cmp	r3, #9
 8004736:	d904      	bls.n	8004742 <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <SysTick_Handler+0x30>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800473e:	f7ff ffa5 	bl	800468c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004742:	f001 fc1b 	bl	8005f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000718 	.word	0x20000718

08004750 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <RTC_Alarm_IRQHandler+0x10>)
 8004756:	f004 fe5f 	bl	8009418 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	200003bc 	.word	0x200003bc

08004764 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <LPUART1_IRQHandler+0x10>)
 800476a:	f006 f917 	bl	800a99c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200002a4 	.word	0x200002a4

08004778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <_sbrk+0x5c>)
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <_sbrk+0x60>)
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800478c:	4b13      	ldr	r3, [pc, #76]	; (80047dc <_sbrk+0x64>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <_sbrk+0x64>)
 8004796:	4a12      	ldr	r2, [pc, #72]	; (80047e0 <_sbrk+0x68>)
 8004798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <_sbrk+0x64>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d207      	bcs.n	80047b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a8:	f00b f8fc 	bl	800f9a4 <__errno>
 80047ac:	4603      	mov	r3, r0
 80047ae:	220c      	movs	r2, #12
 80047b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e009      	b.n	80047cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b8:	4b08      	ldr	r3, [pc, #32]	; (80047dc <_sbrk+0x64>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047be:	4b07      	ldr	r3, [pc, #28]	; (80047dc <_sbrk+0x64>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	4a05      	ldr	r2, [pc, #20]	; (80047dc <_sbrk+0x64>)
 80047c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000a000 	.word	0x2000a000
 80047d8:	00000400 	.word	0x00000400
 80047dc:	2000071c 	.word	0x2000071c
 80047e0:	20000978 	.word	0x20000978

080047e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80047e8:	4b06      	ldr	r3, [pc, #24]	; (8004804 <SystemInit+0x20>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	4a05      	ldr	r2, [pc, #20]	; (8004804 <SystemInit+0x20>)
 80047f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <init_comms>:

//uint8_t devices;
//device rfData->myDevice;

void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	460b      	mov	r3, r1
 8004816:	72fb      	strb	r3, [r7, #11]

	create_queue(rfData->RXFIFO);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fcf9 	bl	8005214 <create_queue>
	rfData->myDevice.device_id = id;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	711a      	strb	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	7afa      	ldrb	r2, [r7, #11]
 800482e:	715a      	strb	r2, [r3, #5]
	rfData->myDevice.device_is_discovered = discovered;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2da      	uxtb	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	71da      	strb	r2, [r3, #7]

	rfData->count = 0;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	725a      	strb	r2, [r3, #9]
	rfData->num_fwds = 0;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	729a      	strb	r2, [r3, #10]

	for(int i = 0;i<MAX_NUM_FWDS;i++){
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e01d      	b.n	800488e <init_comms+0x86>

		rfData->FWDFIFO[i].from_id = 0;
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	440b      	add	r3, r1
 800485e:	330b      	adds	r3, #11
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 8004864:	68f9      	ldr	r1, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	440b      	add	r3, r1
 8004870:	330c      	adds	r3, #12
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4613      	mov	r3, r2
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4413      	add	r3, r2
 8004880:	440b      	add	r3, r1
 8004882:	330d      	adds	r3, #13
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b13      	cmp	r3, #19
 8004892:	ddde      	ble.n	8004852 <init_comms+0x4a>

	}

}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <Comms_Handler>:

void Comms_Handler(struct rfDataStorage* rfData)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	795b      	ldrb	r3, [r3, #5]
 80048ac:	2b99      	cmp	r3, #153	; 0x99
 80048ae:	f040 8163 	bne.w	8004b78 <Comms_Handler+0x2d8>
	{
		uint8_t data = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73bb      	strb	r3, [r7, #14]
		rfData->messageNum = 0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 80048be:	e143      	b.n	8004b48 <Comms_Handler+0x2a8>
		{
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fd11 	bl	80052ec <dequeue>
 80048ca:	4603      	mov	r3, r0
 80048cc:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 80048ce:	7bbb      	ldrb	r3, [r7, #14]
 80048d0:	2bfe      	cmp	r3, #254	; 0xfe
 80048d2:	f040 8139 	bne.w	8004b48 <Comms_Handler+0x2a8>
			{
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80048dc:	4619      	mov	r1, r3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	3372      	adds	r3, #114	; 0x72
 80048ec:	22fe      	movs	r2, #254	; 0xfe
 80048ee:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fcf9 	bl	80052ec <dequeue>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004904:	4619      	mov	r1, r3
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	460b      	mov	r3, r1
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	3373      	adds	r3, #115	; 0x73
 8004914:	7bba      	ldrb	r2, [r7, #14]
 8004916:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fce5 	bl	80052ec <dequeue>
 8004922:	4603      	mov	r3, r0
 8004924:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800492c:	4619      	mov	r1, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	460b      	mov	r3, r1
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	3374      	adds	r3, #116	; 0x74
 800493c:	7bba      	ldrb	r2, [r7, #14]
 800493e:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fcd1 	bl	80052ec <dequeue>
 800494a:	4603      	mov	r3, r0
 800494c:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004954:	4619      	mov	r1, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	3375      	adds	r3, #117	; 0x75
 8004964:	7bba      	ldrb	r2, [r7, #14]
 8004966:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fcbd 	bl	80052ec <dequeue>
 8004972:	4603      	mov	r3, r0
 8004974:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800497c:	4619      	mov	r1, r3
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	3376      	adds	r3, #118	; 0x76
 800498c:	7bba      	ldrb	r2, [r7, #14]
 800498e:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fca9 	bl	80052ec <dequeue>
 800499a:	4603      	mov	r3, r0
 800499c:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80049a4:	4619      	mov	r1, r3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	3377      	adds	r3, #119	; 0x77
 80049b4:	7bba      	ldrb	r2, [r7, #14]
 80049b6:	701a      	strb	r2, [r3, #0]

				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e019      	b.n	80049f2 <Comms_Handler+0x152>
				{
					data = dequeue(rfData->RXFIFO);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc92 	bl	80052ec <dequeue>
 80049c8:	4603      	mov	r3, r0
 80049ca:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80049d2:	4618      	mov	r0, r3
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	1d9a      	adds	r2, r3, #6
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4603      	mov	r3, r0
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4403      	add	r3, r0
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	4413      	add	r3, r2
 80049e6:	3372      	adds	r3, #114	; 0x72
 80049e8:	7bba      	ldrb	r2, [r7, #14]
 80049ea:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	3301      	adds	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80049f8:	4619      	mov	r1, r3
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	3377      	adds	r3, #119	; 0x77
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	dbd5      	blt.n	80049be <Comms_Handler+0x11e>

				}
				printf("\r\nID comparison: %d %d", rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS], rfData->myDevice.device_id);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a18:	4619      	mov	r1, r3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	3374      	adds	r3, #116	; 0x74
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	461a      	mov	r2, r3
 8004a32:	48b0      	ldr	r0, [pc, #704]	; (8004cf4 <Comms_Handler+0x454>)
 8004a34:	f00b fd48 	bl	80104c8 <iprintf>

				if (rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] != rfData->myDevice.device_id)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a3e:	4619      	mov	r1, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3374      	adds	r3, #116	; 0x74
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d002      	beq.n	8004a5e <Comms_Handler+0x1be>
				{
						Message_Forwarder(rfData);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9e5 	bl	8004e28 <Message_Forwarder>
				}

				int newMessage = 1;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	623b      	str	r3, [r7, #32]
				if(rfData->messageNum>0){
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d062      	beq.n	8004b32 <Comms_Handler+0x292>
					for(int i = 1;i<=rfData->messageNum;i++){
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e058      	b.n	8004b24 <Comms_Handler+0x284>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a78:	4619      	mov	r1, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	3373      	adds	r3, #115	; 0x73
 8004a88:	7819      	ldrb	r1, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004a90:	461a      	mov	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	1ad2      	subs	r2, r2, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4403      	add	r3, r0
 8004aa2:	3373      	adds	r3, #115	; 0x73
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	4299      	cmp	r1, r3
 8004aa8:	d139      	bne.n	8004b1e <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	3375      	adds	r3, #117	; 0x75
 8004ac0:	7819      	ldrb	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ac8:	461a      	mov	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4403      	add	r3, r0
 8004ada:	3375      	adds	r3, #117	; 0x75
 8004adc:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	d11d      	bne.n	8004b1e <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ae8:	4619      	mov	r1, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	3374      	adds	r3, #116	; 0x74
 8004af8:	7819      	ldrb	r1, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004b00:	461a      	mov	r2, r3
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	1ad2      	subs	r2, r2, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4403      	add	r3, r0
 8004b12:	3374      	adds	r3, #116	; 0x74
 8004b14:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8004b16:	4299      	cmp	r1, r3
 8004b18:	d101      	bne.n	8004b1e <Comms_Handler+0x27e>
								newMessage = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
					for(int i = 1;i<=rfData->messageNum;i++){
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3301      	adds	r3, #1
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	dd9f      	ble.n	8004a72 <Comms_Handler+0x1d2>
							}
					}
				}
				if(newMessage){
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <Comms_Handler+0x2a8>

					rfData->messageNum++;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004b3e:	3301      	adds	r3, #1
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fb89 	bl	8005264 <is_empty>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f083 0301 	eor.w	r3, r3, #1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f aeb0 	bne.w	80048c0 <Comms_Handler+0x20>

				}
			}
		}

		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	79db      	ldrb	r3, [r3, #7]
 8004b64:	f083 0301 	eor.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 813b 	beq.w	8004de6 <Comms_Handler+0x546>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f93d 	bl	8004df0 <Discovery_Handler>
			}
		}

	}

}
 8004b76:	e136      	b.n	8004de6 <Comms_Handler+0x546>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	795b      	ldrb	r3, [r3, #5]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f040 8132 	bne.w	8004de6 <Comms_Handler+0x546>
		rfData->messageNum = 0;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004b8a:	e120      	b.n	8004dce <Comms_Handler+0x52e>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fbab 	bl	80052ec <dequeue>
 8004b96:	4603      	mov	r3, r0
 8004b98:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
 8004b9c:	2bfe      	cmp	r3, #254	; 0xfe
 8004b9e:	f040 8116 	bne.w	8004dce <Comms_Handler+0x52e>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ba8:	4619      	mov	r1, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3372      	adds	r3, #114	; 0x72
 8004bb8:	22fe      	movs	r2, #254	; 0xfe
 8004bba:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fb93 	bl	80052ec <dequeue>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	3373      	adds	r3, #115	; 0x73
 8004be0:	7bfa      	ldrb	r2, [r7, #15]
 8004be2:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb7f 	bl	80052ec <dequeue>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	3374      	adds	r3, #116	; 0x74
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fb6b 	bl	80052ec <dequeue>
 8004c16:	4603      	mov	r3, r0
 8004c18:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c20:	4619      	mov	r1, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3375      	adds	r3, #117	; 0x75
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fb57 	bl	80052ec <dequeue>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c48:	4619      	mov	r1, r3
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	3376      	adds	r3, #118	; 0x76
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fb43 	bl	80052ec <dequeue>
 8004c66:	4603      	mov	r3, r0
 8004c68:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c70:	4619      	mov	r1, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3377      	adds	r3, #119	; 0x77
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e019      	b.n	8004cbe <Comms_Handler+0x41e>
					data = dequeue(rfData->RXFIFO);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fb2c 	bl	80052ec <dequeue>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1d9a      	adds	r2, r3, #6
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4403      	add	r3, r0
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	4413      	add	r3, r2
 8004cb2:	3372      	adds	r3, #114	; 0x72
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	3377      	adds	r3, #119	; 0x77
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	dbd5      	blt.n	8004c8a <Comms_Handler+0x3ea>
				int newMessage = 1;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d065      	beq.n	8004db8 <Comms_Handler+0x518>
					for(int i = 1;i<=rfData->messageNum;i++){
 8004cec:	2301      	movs	r3, #1
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	e05b      	b.n	8004daa <Comms_Handler+0x50a>
 8004cf2:	bf00      	nop
 8004cf4:	08013d90 	.word	0x08013d90
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004cfe:	4619      	mov	r1, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3373      	adds	r3, #115	; 0x73
 8004d0e:	7819      	ldrb	r1, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004d16:	461a      	mov	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4403      	add	r3, r0
 8004d28:	3373      	adds	r3, #115	; 0x73
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	4299      	cmp	r1, r3
 8004d2e:	d139      	bne.n	8004da4 <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004d36:	4619      	mov	r1, r3
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	3375      	adds	r3, #117	; 0x75
 8004d46:	7819      	ldrb	r1, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004d4e:	461a      	mov	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4403      	add	r3, r0
 8004d60:	3375      	adds	r3, #117	; 0x75
 8004d62:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8004d64:	4299      	cmp	r1, r3
 8004d66:	d11d      	bne.n	8004da4 <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004d6e:	4619      	mov	r1, r3
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3374      	adds	r3, #116	; 0x74
 8004d7e:	7819      	ldrb	r1, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004d86:	461a      	mov	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4403      	add	r3, r0
 8004d98:	3374      	adds	r3, #116	; 0x74
 8004d9a:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d101      	bne.n	8004da4 <Comms_Handler+0x504>
								newMessage = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004db0:	461a      	mov	r2, r3
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4293      	cmp	r3, r2
 8004db6:	dd9f      	ble.n	8004cf8 <Comms_Handler+0x458>
				if(newMessage){
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <Comms_Handler+0x52e>
					rfData->messageNum++;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa46 	bl	8005264 <is_empty>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f083 0301 	eor.w	r3, r3, #1
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f47f aed3 	bne.w	8004b8c <Comms_Handler+0x2ec>
}
 8004de6:	bf00      	nop
 8004de8:	3728      	adds	r7, #40	; 0x28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop

08004df0 <Discovery_Handler>:

void Discovery_Handler(struct rfDataStorage* rfData)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 8004df8:	20c8      	movs	r0, #200	; 0xc8
 8004dfa:	f001 f8df 	bl	8005fbc <HAL_Delay>
	if(rfData->count == 0)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7a5b      	ldrb	r3, [r3, #9]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f97a 	bl	8005100 <Im_Here>
		rfData->count = 5;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2205      	movs	r2, #5
 8004e10:	725a      	strb	r2, [r3, #9]
	else
	{
		rfData->count--;
	}

}
 8004e12:	e005      	b.n	8004e20 <Discovery_Handler+0x30>
		rfData->count--;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7a5b      	ldrb	r3, [r3, #9]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	725a      	strb	r2, [r3, #9]
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <Message_Forwarder>:
	}

}

void Message_Forwarder(struct rfDataStorage* rfData)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	//printf("\r\nForwarding message, fwds: %d", rfData->num_fwds);
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS) )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7a9b      	ldrb	r3, [r3, #10]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 8084 	bne.w	8004f42 <Message_Forwarder+0x11a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	33c2      	adds	r3, #194	; 0xc2
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d87f      	bhi.n	8004f42 <Message_Forwarder+0x11a>
	{
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	3376      	adds	r3, #118	; 0x76
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2d8      	uxtb	r0, r3
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	3376      	adds	r3, #118	; 0x76
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	701a      	strb	r2, [r3, #0]
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004e76:	461a      	mov	r2, r3
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3370      	adds	r3, #112	; 0x70
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	4413      	add	r3, r2
 8004e86:	1c98      	adds	r0, r3, #2
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004e8e:	4619      	mov	r1, r3
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3377      	adds	r3, #119	; 0x77
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	3306      	adds	r3, #6
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f000 f95b 	bl	8005160 <Send>
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7a9b      	ldrb	r3, [r3, #10]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4603      	mov	r3, r0
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4403      	add	r3, r0
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3375      	adds	r3, #117	; 0x75
 8004ec6:	7818      	ldrb	r0, [r3, #0]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	440b      	add	r3, r1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	330b      	adds	r3, #11
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004ede:	4618      	mov	r0, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7a9b      	ldrb	r3, [r3, #10]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	4603      	mov	r3, r0
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4403      	add	r3, r0
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3374      	adds	r3, #116	; 0x74
 8004ef4:	7818      	ldrb	r0, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	440b      	add	r3, r1
 8004efe:	4413      	add	r3, r2
 8004f00:	330c      	adds	r3, #12
 8004f02:	4602      	mov	r2, r0
 8004f04:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	7a9b      	ldrb	r3, [r3, #10]
 8004f12:	4619      	mov	r1, r3
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4603      	mov	r3, r0
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4403      	add	r3, r0
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	3373      	adds	r3, #115	; 0x73
 8004f22:	7818      	ldrb	r0, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	440b      	add	r3, r1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	330d      	adds	r3, #13
 8004f30:	4602      	mov	r2, r0
 8004f32:	701a      	strb	r2, [r3, #0]
		rfData->num_fwds++;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	7a9b      	ldrb	r3, [r3, #10]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	729a      	strb	r2, [r3, #10]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
	//printf("Forwarding done");
}
 8004f40:	e0da      	b.n	80050f8 <Message_Forwarder+0x2d0>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	33c2      	adds	r3, #194	; 0xc2
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	f200 80d6 	bhi.w	80050f8 <Message_Forwarder+0x2d0>
		int dupe = false;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
 8004f54:	e047      	b.n	8004fe6 <Message_Forwarder+0x1be>
			if ( rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->FWDFIFO[i].from_id )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	3375      	adds	r3, #117	; 0x75
 8004f6c:	7819      	ldrb	r1, [r3, #0]
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4413      	add	r3, r2
 8004f78:	4403      	add	r3, r0
 8004f7a:	330b      	adds	r3, #11
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	4299      	cmp	r1, r3
 8004f80:	d12e      	bne.n	8004fe0 <Message_Forwarder+0x1b8>
				if ( rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->FWDFIFO[i].to_id )
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004f88:	4619      	mov	r1, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	3374      	adds	r3, #116	; 0x74
 8004f98:	7819      	ldrb	r1, [r3, #0]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4403      	add	r3, r0
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	4299      	cmp	r1, r3
 8004fac:	d118      	bne.n	8004fe0 <Message_Forwarder+0x1b8>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3373      	adds	r3, #115	; 0x73
 8004fc4:	7819      	ldrb	r1, [r3, #0]
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	330d      	adds	r3, #13
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4299      	cmp	r1, r3
 8004fd8:	d102      	bne.n	8004fe0 <Message_Forwarder+0x1b8>
						dupe = true;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
						break;
 8004fde:	e008      	b.n	8004ff2 <Message_Forwarder+0x1ca>
		for (int i = 0; i < rfData->num_fwds; i++)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	7a9b      	ldrb	r3, [r3, #10]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	dbb1      	blt.n	8004f56 <Message_Forwarder+0x12e>
		if (dupe == false)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d17f      	bne.n	80050f8 <Message_Forwarder+0x2d0>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	7a9b      	ldrb	r3, [r3, #10]
 8004ffc:	2b14      	cmp	r3, #20
 8004ffe:	d102      	bne.n	8005006 <Message_Forwarder+0x1de>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	729a      	strb	r2, [r3, #10]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800500c:	4618      	mov	r0, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	7a9b      	ldrb	r3, [r3, #10]
 8005012:	4619      	mov	r1, r3
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4603      	mov	r3, r0
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4403      	add	r3, r0
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	3375      	adds	r3, #117	; 0x75
 8005022:	7818      	ldrb	r0, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	440b      	add	r3, r1
 800502c:	4413      	add	r3, r2
 800502e:	330b      	adds	r3, #11
 8005030:	4602      	mov	r2, r0
 8005032:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800503a:	4618      	mov	r0, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	7a9b      	ldrb	r3, [r3, #10]
 8005040:	4619      	mov	r1, r3
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	4603      	mov	r3, r0
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4403      	add	r3, r0
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	3374      	adds	r3, #116	; 0x74
 8005050:	7818      	ldrb	r0, [r3, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	440b      	add	r3, r1
 800505a:	4413      	add	r3, r2
 800505c:	330c      	adds	r3, #12
 800505e:	4602      	mov	r2, r0
 8005060:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005068:	4618      	mov	r0, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	7a9b      	ldrb	r3, [r3, #10]
 800506e:	4619      	mov	r1, r3
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4603      	mov	r3, r0
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4403      	add	r3, r0
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	3373      	adds	r3, #115	; 0x73
 800507e:	7818      	ldrb	r0, [r3, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	440b      	add	r3, r1
 8005088:	4413      	add	r3, r2
 800508a:	330d      	adds	r3, #13
 800508c:	4602      	mov	r2, r0
 800508e:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005096:	461a      	mov	r2, r3
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	440b      	add	r3, r1
 80050a4:	3376      	adds	r3, #118	; 0x76
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	3301      	adds	r3, #1
 80050aa:	b2d8      	uxtb	r0, r3
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3376      	adds	r3, #118	; 0x76
 80050ba:	4602      	mov	r2, r0
 80050bc:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80050c4:	461a      	mov	r2, r3
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3370      	adds	r3, #112	; 0x70
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4413      	add	r3, r2
 80050d4:	1c98      	adds	r0, r3, #2
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80050dc:	4619      	mov	r1, r3
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	3377      	adds	r3, #119	; 0x77
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	3306      	adds	r3, #6
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	4619      	mov	r1, r3
 80050f4:	f000 f834 	bl	8005160 <Send>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <Im_Here>:

void Im_Here(struct rfDataStorage* rfData)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	22fe      	movs	r2, #254	; 0xfe
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2243      	movs	r2, #67	; 0x43
 8005114:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	791a      	ldrb	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessageSize = 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	//printf("\r\nsending from device: %d->%d", rfData->myDevice.device_id, rfData->activeTxMessage[MSG_FROM_ID_POS]);

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800514a:	3306      	adds	r3, #6
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	4610      	mov	r0, r2
 8005152:	f000 f805 	bl	8005160 <Send>

}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <Send>:

}


void Send(uint8_t message[], uint8_t size)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	; 0x28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	e00c      	b.n	800518c <Send+0x2c>
		fullMessage[i] = message[i];
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	7819      	ldrb	r1, [r3, #0]
 800517a:	f107 020c 	add.w	r2, r7, #12
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	4413      	add	r3, r2
 8005182:	460a      	mov	r2, r1
 8005184:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	3301      	adds	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	429a      	cmp	r2, r3
 8005192:	dbee      	blt.n	8005172 <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	e008      	b.n	80051ac <Send+0x4c>
		fullMessage[i] = 0;
 800519a:	f107 020c 	add.w	r2, r7, #12
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	4413      	add	r3, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	3301      	adds	r3, #1
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	2b13      	cmp	r3, #19
 80051b0:	ddf3      	ble.n	800519a <Send+0x3a>
	/*for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){

		printf("\r\nsending rf: %x", fullMessage[i]);

	}*/
	random_delay();
 80051b2:	f000 f811 	bl	80051d8 <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 80051b6:	f107 030c 	add.w	r3, r7, #12
 80051ba:	2214      	movs	r2, #20
 80051bc:	4619      	mov	r1, r3
 80051be:	4805      	ldr	r0, [pc, #20]	; (80051d4 <Send+0x74>)
 80051c0:	f005 fa00 	bl	800a5c4 <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 80051c4:	2014      	movs	r0, #20
 80051c6:	f000 fef9 	bl	8005fbc <HAL_Delay>

}
 80051ca:	bf00      	nop
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200002a4 	.word	0x200002a4

080051d8 <random_delay>:

void random_delay()	//delays between 0 - 9999 (ms)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80051de:	463b      	mov	r3, r7
 80051e0:	4619      	mov	r1, r3
 80051e2:	480a      	ldr	r0, [pc, #40]	; (800520c <random_delay+0x34>)
 80051e4:	f003 fd89 	bl	8008cfa <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <random_delay+0x38>)
 80051ec:	fba2 1203 	umull	r1, r2, r2, r3
 80051f0:	0992      	lsrs	r2, r2, #6
 80051f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80051f6:	fb01 f202 	mul.w	r2, r1, r2
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fedc 	bl	8005fbc <HAL_Delay>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200003ac 	.word	0x200003ac
 8005210:	10624dd3 	.word	0x10624dd3

08005214 <create_queue>:

void create_queue(struct Queue* queue) {
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <is_full>:

void destroy_queue(struct Queue* queue) {
  free(queue);
}

bool is_full(struct Queue* queue) {
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800524e:	2b96      	cmp	r3, #150	; 0x96
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <is_empty>:

bool is_empty(struct Queue* queue) {
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8005272:	2b00      	cmp	r3, #0
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <enqueue>:

void enqueue(struct Queue* queue, uint8_t value) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ffd3 	bl	8005240 <is_full>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d11f      	bne.n	80052e0 <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 80052a6:	78f9      	ldrb	r1, [r7, #3]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80052b4:	1c5a      	adds	r2, r3, #1
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <enqueue+0x60>)
 80052b8:	fb83 1302 	smull	r1, r3, r3, r2
 80052bc:	1119      	asrs	r1, r3, #4
 80052be:	17d3      	asrs	r3, r2, #31
 80052c0:	1acb      	subs	r3, r1, r3
 80052c2:	2196      	movs	r1, #150	; 0x96
 80052c4:	fb01 f303 	mul.w	r3, r1, r3
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80052de:	e000      	b.n	80052e2 <enqueue+0x5a>
    return;
 80052e0:	bf00      	nop
}
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	1b4e81b5 	.word	0x1b4e81b5

080052ec <dequeue>:

int dequeue(struct Queue* queue) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ffb5 	bl	8005264 <is_empty>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
 8005304:	e01f      	b.n	8005346 <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005312:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <dequeue+0x64>)
 800531e:	fb83 1302 	smull	r1, r3, r3, r2
 8005322:	1119      	asrs	r1, r3, #4
 8005324:	17d3      	asrs	r3, r2, #31
 8005326:	1acb      	subs	r3, r1, r3
 8005328:	2196      	movs	r1, #150	; 0x96
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 8005344:	68fb      	ldr	r3, [r7, #12]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	1b4e81b5 	.word	0x1b4e81b5

08005354 <sendSD>:
  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
  printf("SD Card Unmounted Successfully!!!\r\n");
}

void sendSD(struct SDinfo* config, char* file, char* data){
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]

	  HAL_Delay(50);
 8005360:	2032      	movs	r0, #50	; 0x32
 8005362:	f000 fe2b 	bl	8005fbc <HAL_Delay>
	  *config->fres = f_open(config->fil, file, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6858      	ldr	r0, [r3, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689c      	ldr	r4, [r3, #8]
 800536e:	2213      	movs	r2, #19
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	f009 f8c1 	bl	800e4f8 <f_open>
 8005376:	4603      	mov	r3, r0
 8005378:	7023      	strb	r3, [r4, #0]
	  if(*config->fres == FR_OK){
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <sendSD+0x3a>

		  printf("\r\nFile %s opened", file);
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	4819      	ldr	r0, [pc, #100]	; (80053ec <sendSD+0x98>)
 8005388:	f00b f89e 	bl	80104c8 <iprintf>
 800538c:	e003      	b.n	8005396 <sendSD+0x42>

	  }
	  else{

		  printf("\r\ncould not open %s file", file);
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	4817      	ldr	r0, [pc, #92]	; (80053f0 <sendSD+0x9c>)
 8005392:	f00b f899 	bl	80104c8 <iprintf>

	  }
	  *config->fres = f_lseek(config->fil, f_size(config->fil));
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	68d9      	ldr	r1, [r3, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689c      	ldr	r4, [r3, #8]
 80053a4:	4610      	mov	r0, r2
 80053a6:	f009 fe0e 	bl	800efc6 <f_lseek>
 80053aa:	4603      	mov	r3, r0
 80053ac:	7023      	strb	r3, [r4, #0]
	  f_puts(data, config->fil);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f00a f9ae 	bl	800f716 <f_puts>
	  *config->fres = f_close(config->fil);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689c      	ldr	r4, [r3, #8]
 80053c2:	4610      	mov	r0, r2
 80053c4:	f009 fdd5 	bl	800ef72 <f_close>
 80053c8:	4603      	mov	r3, r0
 80053ca:	7023      	strb	r3, [r4, #0]
	  if(*config->fres == FR_OK){
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <sendSD+0x8a>

		  printf("\r\nFile closed");
 80053d6:	4807      	ldr	r0, [pc, #28]	; (80053f4 <sendSD+0xa0>)
 80053d8:	f00b f876 	bl	80104c8 <iprintf>
	  else{

		  printf("\r\ncould not close file");

	  }
}
 80053dc:	e002      	b.n	80053e4 <sendSD+0x90>
		  printf("\r\ncould not close file");
 80053de:	4806      	ldr	r0, [pc, #24]	; (80053f8 <sendSD+0xa4>)
 80053e0:	f00b f872 	bl	80104c8 <iprintf>
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}
 80053ec:	08013edc 	.word	0x08013edc
 80053f0:	08013ef0 	.word	0x08013ef0
 80053f4:	08013f0c 	.word	0x08013f0c
 80053f8:	08013f1c 	.word	0x08013f1c

080053fc <setupCard>:

int setupCard(struct SDinfo* sdData){
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]


	FRESULT fresult = f_mount(sdData->fs, "/", 1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2201      	movs	r2, #1
 800540a:	4909      	ldr	r1, [pc, #36]	; (8005430 <setupCard+0x34>)
 800540c:	4618      	mov	r0, r3
 800540e:	f009 f82d 	bl	800e46c <f_mount>
 8005412:	4603      	mov	r3, r0
 8005414:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100);
 8005416:	2064      	movs	r0, #100	; 0x64
 8005418:	f000 fdd0 	bl	8005fbc <HAL_Delay>
	return (fresult == FR_OK);
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf0c      	ite	eq
 8005422:	2301      	moveq	r3, #1
 8005424:	2300      	movne	r3, #0
 8005426:	b2db      	uxtb	r3, r3

}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	08013f34 	.word	0x08013f34

08005434 <stopCard>:

int stopCard(struct SDinfo* sdData){
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

	FRESULT fresult = f_mount(NULL, "/", 1);
 800543c:	2201      	movs	r2, #1
 800543e:	4908      	ldr	r1, [pc, #32]	; (8005460 <stopCard+0x2c>)
 8005440:	2000      	movs	r0, #0
 8005442:	f009 f813 	bl	800e46c <f_mount>
 8005446:	4603      	mov	r3, r0
 8005448:	73fb      	strb	r3, [r7, #15]

	return (fresult == FR_OK);
 800544a:	7bfb      	ldrb	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3

}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	08013f34 	.word	0x08013f34

08005464 <getSD>:

void getSD(struct SDinfo* config, char* file, char* buffer){
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]

	UINT br;
	  if(f_open(config->fil, file, FA_READ) != FR_OK){
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f009 f83d 	bl	800e4f8 <f_open>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <getSD+0x28>

		  printf("\r\ncould not open %s file for reading", file);
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4810      	ldr	r0, [pc, #64]	; (80054c8 <getSD+0x64>)
 8005488:	f00b f81e 	bl	80104c8 <iprintf>
	  }
	  // Reads line by line until the end
	  if(f_read (config->fil, buffer, f_size(config->fil), &br) != FR_OK){
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6858      	ldr	r0, [r3, #4]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	f107 0314 	add.w	r3, r7, #20
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	f009 f9f8 	bl	800e890 <f_read>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <getSD+0x4a>

		  printf("\r\ncould not read %s file", file);
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4808      	ldr	r0, [pc, #32]	; (80054cc <getSD+0x68>)
 80054aa:	f00b f80d 	bl	80104c8 <iprintf>
	  }

	  printf("\r\nread dat: %s", buffer);
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4807      	ldr	r0, [pc, #28]	; (80054d0 <getSD+0x6c>)
 80054b2:	f00b f809 	bl	80104c8 <iprintf>

	  f_close(config->fil);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f009 fd59 	bl	800ef72 <f_close>

}
 80054c0:	bf00      	nop
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	08013f38 	.word	0x08013f38
 80054cc:	08013f60 	.word	0x08013f60
 80054d0:	08013f7c 	.word	0x08013f7c

080054d4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054de:	4804      	ldr	r0, [pc, #16]	; (80054f0 <SELECT+0x1c>)
 80054e0:	f002 faf2 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80054e4:	2001      	movs	r0, #1
 80054e6:	f000 fd69 	bl	8005fbc <HAL_Delay>
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	48000400 	.word	0x48000400

080054f4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80054f8:	2201      	movs	r2, #1
 80054fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054fe:	4804      	ldr	r0, [pc, #16]	; (8005510 <DESELECT+0x1c>)
 8005500:	f002 fae2 	bl	8007ac8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8005504:	2001      	movs	r0, #1
 8005506:	f000 fd59 	bl	8005fbc <HAL_Delay>
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	48000400 	.word	0x48000400

08005514 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	4603      	mov	r3, r0
 800551c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800551e:	bf00      	nop
 8005520:	4b08      	ldr	r3, [pc, #32]	; (8005544 <SPI_TxByte+0x30>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d1f8      	bne.n	8005520 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800552e:	1df9      	adds	r1, r7, #7
 8005530:	2364      	movs	r3, #100	; 0x64
 8005532:	2201      	movs	r2, #1
 8005534:	4803      	ldr	r0, [pc, #12]	; (8005544 <SPI_TxByte+0x30>)
 8005536:	f004 f9ac 	bl	8009892 <HAL_SPI_Transmit>
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	200003e8 	.word	0x200003e8

08005548 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005554:	bf00      	nop
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <SPI_TxBuffer+0x30>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b02      	cmp	r3, #2
 8005562:	d1f8      	bne.n	8005556 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	2364      	movs	r3, #100	; 0x64
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4803      	ldr	r0, [pc, #12]	; (8005578 <SPI_TxBuffer+0x30>)
 800556c:	f004 f991 	bl	8009892 <HAL_SPI_Transmit>
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	200003e8 	.word	0x200003e8

0800557c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8005582:	23ff      	movs	r3, #255	; 0xff
 8005584:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8005586:	bf00      	nop
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <SPI_RxByte+0x34>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d1f8      	bne.n	8005588 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8005596:	1dba      	adds	r2, r7, #6
 8005598:	1df9      	adds	r1, r7, #7
 800559a:	2364      	movs	r3, #100	; 0x64
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2301      	movs	r3, #1
 80055a0:	4803      	ldr	r0, [pc, #12]	; (80055b0 <SPI_RxByte+0x34>)
 80055a2:	f004 fae4 	bl	8009b6e <HAL_SPI_TransmitReceive>

	return data;
 80055a6:	79bb      	ldrb	r3, [r7, #6]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	200003e8 	.word	0x200003e8

080055b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80055bc:	f7ff ffde 	bl	800557c <SPI_RxByte>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	701a      	strb	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80055d6:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <SD_ReadyWait+0x30>)
 80055d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80055dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80055de:	f7ff ffcd 	bl	800557c <SPI_RxByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2bff      	cmp	r3, #255	; 0xff
 80055ea:	d004      	beq.n	80055f6 <SD_ReadyWait+0x26>
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <SD_ReadyWait+0x30>)
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f3      	bne.n	80055de <SD_ReadyWait+0xe>

	return res;
 80055f6:	79fb      	ldrb	r3, [r7, #7]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	2000071a 	.word	0x2000071a

08005604 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800560a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800560e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8005610:	f7ff ff70 	bl	80054f4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]
 8005618:	e005      	b.n	8005626 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800561a:	20ff      	movs	r0, #255	; 0xff
 800561c:	f7ff ff7a 	bl	8005514 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	3301      	adds	r3, #1
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b09      	cmp	r3, #9
 800562a:	ddf6      	ble.n	800561a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800562c:	f7ff ff52 	bl	80054d4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8005630:	2340      	movs	r3, #64	; 0x40
 8005632:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8005644:	2395      	movs	r3, #149	; 0x95
 8005646:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8005648:	463b      	mov	r3, r7
 800564a:	2106      	movs	r1, #6
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff ff7b 	bl	8005548 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8005652:	e002      	b.n	800565a <SD_PowerOn+0x56>
	{
		cnt--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800565a:	f7ff ff8f 	bl	800557c <SPI_RxByte>
 800565e:	4603      	mov	r3, r0
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <SD_PowerOn+0x66>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f4      	bne.n	8005654 <SD_PowerOn+0x50>
	}

	DESELECT();
 800566a:	f7ff ff43 	bl	80054f4 <DESELECT>
	SPI_TxByte(0XFF);
 800566e:	20ff      	movs	r0, #255	; 0xff
 8005670:	f7ff ff50 	bl	8005514 <SPI_TxByte>

	PowerFlag = 1;
 8005674:	4b03      	ldr	r3, [pc, #12]	; (8005684 <SD_PowerOn+0x80>)
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000721 	.word	0x20000721

08005688 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800568c:	4b03      	ldr	r3, [pc, #12]	; (800569c <SD_PowerOff+0x14>)
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000721 	.word	0x20000721

080056a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80056a4:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <SD_CheckPower+0x14>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000721 	.word	0x20000721

080056b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <SD_RxDataBlock+0x5c>)
 80056c4:	22c8      	movs	r2, #200	; 0xc8
 80056c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80056c8:	f7ff ff58 	bl	800557c <SPI_RxByte>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2bff      	cmp	r3, #255	; 0xff
 80056d4:	d104      	bne.n	80056e0 <SD_RxDataBlock+0x28>
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <SD_RxDataBlock+0x5c>)
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f3      	bne.n	80056c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2bfe      	cmp	r3, #254	; 0xfe
 80056e4:	d001      	beq.n	80056ea <SD_RxDataBlock+0x32>
 80056e6:	2300      	movs	r3, #0
 80056e8:	e00f      	b.n	800570a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff ff5f 	bl	80055b4 <SPI_RxBytePtr>
	} while(len--);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	1e5a      	subs	r2, r3, #1
 80056fa:	603a      	str	r2, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f4      	bne.n	80056ea <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8005700:	f7ff ff3c 	bl	800557c <SPI_RxByte>
	SPI_RxByte();
 8005704:	f7ff ff3a 	bl	800557c <SPI_RxByte>

	return TRUE;
 8005708:	2301      	movs	r3, #1
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000719 	.word	0x20000719

08005718 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8005728:	f7ff ff52 	bl	80055d0 <SD_ReadyWait>
 800572c:	4603      	mov	r3, r0
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d001      	beq.n	8005736 <SD_TxDataBlock+0x1e>
 8005732:	2300      	movs	r3, #0
 8005734:	e02f      	b.n	8005796 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff feeb 	bl	8005514 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	2bfd      	cmp	r3, #253	; 0xfd
 8005742:	d020      	beq.n	8005786 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8005744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fefd 	bl	8005548 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800574e:	f7ff ff15 	bl	800557c <SPI_RxByte>
		SPI_RxByte();
 8005752:	f7ff ff13 	bl	800557c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8005756:	e00b      	b.n	8005770 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8005758:	f7ff ff10 	bl	800557c <SPI_RxByte>
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	2b05      	cmp	r3, #5
 8005768:	d006      	beq.n	8005778 <SD_TxDataBlock+0x60>
			i++;
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	3301      	adds	r3, #1
 800576e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d9f0      	bls.n	8005758 <SD_TxDataBlock+0x40>
 8005776:	e000      	b.n	800577a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8005778:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800577a:	bf00      	nop
 800577c:	f7ff fefe 	bl	800557c <SPI_RxByte>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0fa      	beq.n	800577c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	f003 031f 	and.w	r3, r3, #31
 800578c:	2b05      	cmp	r3, #5
 800578e:	d101      	bne.n	8005794 <SD_TxDataBlock+0x7c>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <SD_TxDataBlock+0x7e>

	return FALSE;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	4603      	mov	r3, r0
 80057a6:	6039      	str	r1, [r7, #0]
 80057a8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80057aa:	f7ff ff11 	bl	80055d0 <SD_ReadyWait>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2bff      	cmp	r3, #255	; 0xff
 80057b2:	d001      	beq.n	80057b8 <SD_SendCmd+0x1a>
 80057b4:	23ff      	movs	r3, #255	; 0xff
 80057b6:	e042      	b.n	800583e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff feaa 	bl	8005514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	0e1b      	lsrs	r3, r3, #24
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fea4 	bl	8005514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fe9e 	bl	8005514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fe98 	bl	8005514 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fe93 	bl	8005514 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d102      	bne.n	80057fa <SD_SendCmd+0x5c>
 80057f4:	2395      	movs	r3, #149	; 0x95
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e007      	b.n	800580a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	2b48      	cmp	r3, #72	; 0x48
 80057fe:	d102      	bne.n	8005806 <SD_SendCmd+0x68>
 8005800:	2387      	movs	r3, #135	; 0x87
 8005802:	73fb      	strb	r3, [r7, #15]
 8005804:	e001      	b.n	800580a <SD_SendCmd+0x6c>
	else crc = 1;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800580a:	7bfb      	ldrb	r3, [r7, #15]
 800580c:	4618      	mov	r0, r3
 800580e:	f7ff fe81 	bl	8005514 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	2b4c      	cmp	r3, #76	; 0x4c
 8005816:	d101      	bne.n	800581c <SD_SendCmd+0x7e>
 8005818:	f7ff feb0 	bl	800557c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800581c:	230a      	movs	r3, #10
 800581e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8005820:	f7ff feac 	bl	800557c <SPI_RxByte>
 8005824:	4603      	mov	r3, r0
 8005826:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8005828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da05      	bge.n	800583c <SD_SendCmd+0x9e>
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	3b01      	subs	r3, #1
 8005834:	73bb      	strb	r3, [r7, #14]
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f1      	bne.n	8005820 <SD_SendCmd+0x82>

	return res;
 800583c:	7b7b      	ldrb	r3, [r7, #13]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];
	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <SD_disk_initialize+0x14>
 8005858:	2301      	movs	r3, #1
 800585a:	e0d6      	b.n	8005a0a <SD_disk_initialize+0x1c2>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800585c:	4b6d      	ldr	r3, [pc, #436]	; (8005a14 <SD_disk_initialize+0x1cc>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <SD_disk_initialize+0x2a>
 800586a:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <SD_disk_initialize+0x1cc>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b2db      	uxtb	r3, r3
 8005870:	e0cb      	b.n	8005a0a <SD_disk_initialize+0x1c2>
	/* power on */
	SD_PowerOn();
 8005872:	f7ff fec7 	bl	8005604 <SD_PowerOn>
	/* slave select */
	SELECT();
 8005876:	f7ff fe2d 	bl	80054d4 <SELECT>
	/* check disk type */
	type = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	73bb      	strb	r3, [r7, #14]
	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800587e:	2100      	movs	r1, #0
 8005880:	2040      	movs	r0, #64	; 0x40
 8005882:	f7ff ff8c 	bl	800579e <SD_SendCmd>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	f040 80a6 	bne.w	80059da <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800588e:	4b62      	ldr	r3, [pc, #392]	; (8005a18 <SD_disk_initialize+0x1d0>)
 8005890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005894:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8005896:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800589a:	2048      	movs	r0, #72	; 0x48
 800589c:	f7ff ff7f 	bl	800579e <SD_SendCmd>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d158      	bne.n	8005958 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]
 80058aa:	e00c      	b.n	80058c6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80058ac:	7bfc      	ldrb	r4, [r7, #15]
 80058ae:	f7ff fe65 	bl	800557c <SPI_RxByte>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
 80058b6:	f104 0310 	add.w	r3, r4, #16
 80058ba:	443b      	add	r3, r7
 80058bc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	3301      	adds	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d9ef      	bls.n	80058ac <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80058cc:	7abb      	ldrb	r3, [r7, #10]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	f040 8083 	bne.w	80059da <SD_disk_initialize+0x192>
 80058d4:	7afb      	ldrb	r3, [r7, #11]
 80058d6:	2baa      	cmp	r3, #170	; 0xaa
 80058d8:	d17f      	bne.n	80059da <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80058da:	2100      	movs	r1, #0
 80058dc:	2077      	movs	r0, #119	; 0x77
 80058de:	f7ff ff5e 	bl	800579e <SD_SendCmd>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d807      	bhi.n	80058f8 <SD_disk_initialize+0xb0>
 80058e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058ec:	2069      	movs	r0, #105	; 0x69
 80058ee:	f7ff ff56 	bl	800579e <SD_SendCmd>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80058f8:	4b47      	ldr	r3, [pc, #284]	; (8005a18 <SD_disk_initialize+0x1d0>)
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1eb      	bne.n	80058da <SD_disk_initialize+0x92>
 8005902:	e000      	b.n	8005906 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8005904:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8005906:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <SD_disk_initialize+0x1d0>)
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d064      	beq.n	80059da <SD_disk_initialize+0x192>
 8005910:	2100      	movs	r1, #0
 8005912:	207a      	movs	r0, #122	; 0x7a
 8005914:	f7ff ff43 	bl	800579e <SD_SendCmd>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d15d      	bne.n	80059da <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800591e:	2300      	movs	r3, #0
 8005920:	73fb      	strb	r3, [r7, #15]
 8005922:	e00c      	b.n	800593e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8005924:	7bfc      	ldrb	r4, [r7, #15]
 8005926:	f7ff fe29 	bl	800557c <SPI_RxByte>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	f104 0310 	add.w	r3, r4, #16
 8005932:	443b      	add	r3, r7
 8005934:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	3301      	adds	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d9ef      	bls.n	8005924 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8005944:	7a3b      	ldrb	r3, [r7, #8]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <SD_disk_initialize+0x10a>
 800594e:	230c      	movs	r3, #12
 8005950:	e000      	b.n	8005954 <SD_disk_initialize+0x10c>
 8005952:	2304      	movs	r3, #4
 8005954:	73bb      	strb	r3, [r7, #14]
 8005956:	e040      	b.n	80059da <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8005958:	2100      	movs	r1, #0
 800595a:	2077      	movs	r0, #119	; 0x77
 800595c:	f7ff ff1f 	bl	800579e <SD_SendCmd>
 8005960:	4603      	mov	r3, r0
 8005962:	2b01      	cmp	r3, #1
 8005964:	d808      	bhi.n	8005978 <SD_disk_initialize+0x130>
 8005966:	2100      	movs	r1, #0
 8005968:	2069      	movs	r0, #105	; 0x69
 800596a:	f7ff ff18 	bl	800579e <SD_SendCmd>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d801      	bhi.n	8005978 <SD_disk_initialize+0x130>
 8005974:	2302      	movs	r3, #2
 8005976:	e000      	b.n	800597a <SD_disk_initialize+0x132>
 8005978:	2301      	movs	r3, #1
 800597a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d10e      	bne.n	80059a0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8005982:	2100      	movs	r1, #0
 8005984:	2077      	movs	r0, #119	; 0x77
 8005986:	f7ff ff0a 	bl	800579e <SD_SendCmd>
 800598a:	4603      	mov	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d80e      	bhi.n	80059ae <SD_disk_initialize+0x166>
 8005990:	2100      	movs	r1, #0
 8005992:	2069      	movs	r0, #105	; 0x69
 8005994:	f7ff ff03 	bl	800579e <SD_SendCmd>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <SD_disk_initialize+0x166>
 800599e:	e00d      	b.n	80059bc <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80059a0:	2100      	movs	r1, #0
 80059a2:	2041      	movs	r0, #65	; 0x41
 80059a4:	f7ff fefb 	bl	800579e <SD_SendCmd>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80059ae:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <SD_disk_initialize+0x1d0>)
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e1      	bne.n	800597c <SD_disk_initialize+0x134>
 80059b8:	e000      	b.n	80059bc <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80059ba:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80059bc:	4b16      	ldr	r3, [pc, #88]	; (8005a18 <SD_disk_initialize+0x1d0>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <SD_disk_initialize+0x18e>
 80059c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059ca:	2050      	movs	r0, #80	; 0x50
 80059cc:	f7ff fee7 	bl	800579e <SD_SendCmd>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <SD_disk_initialize+0x192>
 80059d6:	2300      	movs	r3, #0
 80059d8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80059da:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <SD_disk_initialize+0x1d4>)
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80059e0:	f7ff fd88 	bl	80054f4 <DESELECT>
	SPI_RxByte();
 80059e4:	f7ff fdca 	bl	800557c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <SD_disk_initialize+0x1cc>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <SD_disk_initialize+0x1cc>)
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e001      	b.n	8005a04 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8005a00:	f7ff fe42 	bl	8005688 <SD_PowerOff>
	}

	return Stat;
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <SD_disk_initialize+0x1cc>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd90      	pop	{r4, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000004 	.word	0x20000004
 8005a18:	20000719 	.word	0x20000719
 8005a1c:	20000720 	.word	0x20000720

08005a20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <SD_disk_status+0x14>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e002      	b.n	8005a3a <SD_disk_status+0x1a>
	return Stat;
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <SD_disk_status+0x28>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	20000004 	.word	0x20000004

08005a4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <SD_disk_read+0x1c>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <SD_disk_read+0x20>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	e051      	b.n	8005b10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <SD_disk_read+0xcc>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <SD_disk_read+0x32>
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e048      	b.n	8005b10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005a7e:	4b27      	ldr	r3, [pc, #156]	; (8005b1c <SD_disk_read+0xd0>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <SD_disk_read+0x44>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	025b      	lsls	r3, r3, #9
 8005a8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8005a90:	f7ff fd20 	bl	80054d4 <SELECT>

	if (count == 1)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d111      	bne.n	8005abe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	2051      	movs	r0, #81	; 0x51
 8005a9e:	f7ff fe7e 	bl	800579e <SD_SendCmd>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d129      	bne.n	8005afc <SD_disk_read+0xb0>
 8005aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005aac:	68b8      	ldr	r0, [r7, #8]
 8005aae:	f7ff fe03 	bl	80056b8 <SD_RxDataBlock>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d021      	beq.n	8005afc <SD_disk_read+0xb0>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	e01e      	b.n	8005afc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	2052      	movs	r0, #82	; 0x52
 8005ac2:	f7ff fe6c 	bl	800579e <SD_SendCmd>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d117      	bne.n	8005afc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8005acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ad0:	68b8      	ldr	r0, [r7, #8]
 8005ad2:	f7ff fdf1 	bl	80056b8 <SD_RxDataBlock>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <SD_disk_read+0xa6>
				buff += 512;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ae2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	603b      	str	r3, [r7, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ed      	bne.n	8005acc <SD_disk_read+0x80>
 8005af0:	e000      	b.n	8005af4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8005af2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8005af4:	2100      	movs	r1, #0
 8005af6:	204c      	movs	r0, #76	; 0x4c
 8005af8:	f7ff fe51 	bl	800579e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8005afc:	f7ff fcfa 	bl	80054f4 <DESELECT>
	SPI_RxByte();
 8005b00:	f7ff fd3c 	bl	800557c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000004 	.word	0x20000004
 8005b1c:	20000720 	.word	0x20000720

08005b20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <SD_disk_write+0x1c>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <SD_disk_write+0x20>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	e06b      	b.n	8005c18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <SD_disk_write+0x100>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <SD_disk_write+0x32>
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e062      	b.n	8005c18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8005b52:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <SD_disk_write+0x100>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <SD_disk_write+0x44>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e059      	b.n	8005c18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8005b64:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <SD_disk_write+0x104>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <SD_disk_write+0x56>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	025b      	lsls	r3, r3, #9
 8005b74:	607b      	str	r3, [r7, #4]

	SELECT();
 8005b76:	f7ff fcad 	bl	80054d4 <SELECT>

	if (count == 1)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d110      	bne.n	8005ba2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	2058      	movs	r0, #88	; 0x58
 8005b84:	f7ff fe0b 	bl	800579e <SD_SendCmd>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13a      	bne.n	8005c04 <SD_disk_write+0xe4>
 8005b8e:	21fe      	movs	r1, #254	; 0xfe
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	f7ff fdc1 	bl	8005718 <SD_TxDataBlock>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d033      	beq.n	8005c04 <SD_disk_write+0xe4>
			count = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	e030      	b.n	8005c04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <SD_disk_write+0x104>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8005bae:	2100      	movs	r1, #0
 8005bb0:	2077      	movs	r0, #119	; 0x77
 8005bb2:	f7ff fdf4 	bl	800579e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	2057      	movs	r0, #87	; 0x57
 8005bba:	f7ff fdf0 	bl	800579e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	2059      	movs	r0, #89	; 0x59
 8005bc2:	f7ff fdec 	bl	800579e <SD_SendCmd>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d11b      	bne.n	8005c04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005bcc:	21fc      	movs	r1, #252	; 0xfc
 8005bce:	68b8      	ldr	r0, [r7, #8]
 8005bd0:	f7ff fda2 	bl	8005718 <SD_TxDataBlock>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <SD_disk_write+0xd0>
				buff += 512;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005be0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <SD_disk_write+0xac>
 8005bee:	e000      	b.n	8005bf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8005bf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8005bf2:	21fd      	movs	r1, #253	; 0xfd
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f7ff fd8f 	bl	8005718 <SD_TxDataBlock>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <SD_disk_write+0xe4>
			{
				count = 1;
 8005c00:	2301      	movs	r3, #1
 8005c02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8005c04:	f7ff fc76 	bl	80054f4 <DESELECT>
	SPI_RxByte();
 8005c08:	f7ff fcb8 	bl	800557c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf14      	ite	ne
 8005c12:	2301      	movne	r3, #1
 8005c14:	2300      	moveq	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000004 	.word	0x20000004
 8005c24:	20000720 	.word	0x20000720

08005c28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b08b      	sub	sp, #44	; 0x2c
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	603a      	str	r2, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
 8005c34:	460b      	mov	r3, r1
 8005c36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SD_disk_ioctl+0x1e>
 8005c42:	2304      	movs	r3, #4
 8005c44:	e115      	b.n	8005e72 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8005c4c:	79bb      	ldrb	r3, [r7, #6]
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d124      	bne.n	8005c9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d012      	beq.n	8005c80 <SD_disk_ioctl+0x58>
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	dc1a      	bgt.n	8005c94 <SD_disk_ioctl+0x6c>
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <SD_disk_ioctl+0x40>
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d006      	beq.n	8005c74 <SD_disk_ioctl+0x4c>
 8005c66:	e015      	b.n	8005c94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8005c68:	f7ff fd0e 	bl	8005688 <SD_PowerOff>
			res = RES_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005c72:	e0fc      	b.n	8005e6e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8005c74:	f7ff fcc6 	bl	8005604 <SD_PowerOn>
			res = RES_OK;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005c7e:	e0f6      	b.n	8005e6e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	1c5c      	adds	r4, r3, #1
 8005c84:	f7ff fd0c 	bl	80056a0 <SD_CheckPower>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005c92:	e0ec      	b.n	8005e6e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c9a:	e0e8      	b.n	8005e6e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c9c:	4b77      	ldr	r3, [pc, #476]	; (8005e7c <SD_disk_ioctl+0x254>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <SD_disk_ioctl+0x86>
 8005caa:	2303      	movs	r3, #3
 8005cac:	e0e1      	b.n	8005e72 <SD_disk_ioctl+0x24a>

		SELECT();
 8005cae:	f7ff fc11 	bl	80054d4 <SELECT>

		switch (ctrl)
 8005cb2:	79bb      	ldrb	r3, [r7, #6]
 8005cb4:	2b0d      	cmp	r3, #13
 8005cb6:	f200 80cb 	bhi.w	8005e50 <SD_disk_ioctl+0x228>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <SD_disk_ioctl+0x98>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005dbb 	.word	0x08005dbb
 8005cc4:	08005cf9 	.word	0x08005cf9
 8005cc8:	08005dab 	.word	0x08005dab
 8005ccc:	08005e51 	.word	0x08005e51
 8005cd0:	08005e51 	.word	0x08005e51
 8005cd4:	08005e51 	.word	0x08005e51
 8005cd8:	08005e51 	.word	0x08005e51
 8005cdc:	08005e51 	.word	0x08005e51
 8005ce0:	08005e51 	.word	0x08005e51
 8005ce4:	08005e51 	.word	0x08005e51
 8005ce8:	08005e51 	.word	0x08005e51
 8005cec:	08005dcd 	.word	0x08005dcd
 8005cf0:	08005df1 	.word	0x08005df1
 8005cf4:	08005e15 	.word	0x08005e15
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	2049      	movs	r0, #73	; 0x49
 8005cfc:	f7ff fd4f 	bl	800579e <SD_SendCmd>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f040 80a8 	bne.w	8005e58 <SD_disk_ioctl+0x230>
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fcd2 	bl	80056b8 <SD_RxDataBlock>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 809e 	beq.w	8005e58 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8005d1c:	7b3b      	ldrb	r3, [r7, #12]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d10e      	bne.n	8005d44 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005d26:	7d7b      	ldrb	r3, [r7, #21]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	7d3b      	ldrb	r3, [r7, #20]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3301      	adds	r3, #1
 8005d38:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8005d3a:	8bfb      	ldrh	r3, [r7, #30]
 8005d3c:	029a      	lsls	r2, r3, #10
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e02e      	b.n	8005da2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005d44:	7c7b      	ldrb	r3, [r7, #17]
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	7dbb      	ldrb	r3, [r7, #22]
 8005d4e:	09db      	lsrs	r3, r3, #7
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	7d7b      	ldrb	r3, [r7, #21]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 0306 	and.w	r3, r3, #6
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	4413      	add	r3, r2
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	3302      	adds	r3, #2
 8005d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005d6c:	7d3b      	ldrb	r3, [r7, #20]
 8005d6e:	099b      	lsrs	r3, r3, #6
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	7cbb      	ldrb	r3, [r7, #18]
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3301      	adds	r3, #1
 8005d92:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8005d94:	8bfa      	ldrh	r2, [r7, #30]
 8005d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d9a:	3b09      	subs	r3, #9
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8005da8:	e056      	b.n	8005e58 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005db8:	e055      	b.n	8005e66 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005dba:	f7ff fc09 	bl	80055d0 <SD_ReadyWait>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2bff      	cmp	r3, #255	; 0xff
 8005dc2:	d14b      	bne.n	8005e5c <SD_disk_ioctl+0x234>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005dca:	e047      	b.n	8005e5c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005dcc:	2100      	movs	r1, #0
 8005dce:	2049      	movs	r0, #73	; 0x49
 8005dd0:	f7ff fce5 	bl	800579e <SD_SendCmd>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d142      	bne.n	8005e60 <SD_disk_ioctl+0x238>
 8005dda:	2110      	movs	r1, #16
 8005ddc:	6a38      	ldr	r0, [r7, #32]
 8005dde:	f7ff fc6b 	bl	80056b8 <SD_RxDataBlock>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03b      	beq.n	8005e60 <SD_disk_ioctl+0x238>
 8005de8:	2300      	movs	r3, #0
 8005dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005dee:	e037      	b.n	8005e60 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005df0:	2100      	movs	r1, #0
 8005df2:	204a      	movs	r0, #74	; 0x4a
 8005df4:	f7ff fcd3 	bl	800579e <SD_SendCmd>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d132      	bne.n	8005e64 <SD_disk_ioctl+0x23c>
 8005dfe:	2110      	movs	r1, #16
 8005e00:	6a38      	ldr	r0, [r7, #32]
 8005e02:	f7ff fc59 	bl	80056b8 <SD_RxDataBlock>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d02b      	beq.n	8005e64 <SD_disk_ioctl+0x23c>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005e12:	e027      	b.n	8005e64 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8005e14:	2100      	movs	r1, #0
 8005e16:	207a      	movs	r0, #122	; 0x7a
 8005e18:	f7ff fcc1 	bl	800579e <SD_SendCmd>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d116      	bne.n	8005e50 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e28:	e00b      	b.n	8005e42 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8005e2a:	6a3c      	ldr	r4, [r7, #32]
 8005e2c:	1c63      	adds	r3, r4, #1
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	f7ff fba4 	bl	800557c <SPI_RxByte>
 8005e34:	4603      	mov	r3, r0
 8005e36:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8005e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d9ef      	bls.n	8005e2a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e56:	e006      	b.n	8005e66 <SD_disk_ioctl+0x23e>
			break;
 8005e58:	bf00      	nop
 8005e5a:	e004      	b.n	8005e66 <SD_disk_ioctl+0x23e>
			break;
 8005e5c:	bf00      	nop
 8005e5e:	e002      	b.n	8005e66 <SD_disk_ioctl+0x23e>
			break;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <SD_disk_ioctl+0x23e>
			break;
 8005e64:	bf00      	nop
		}

		DESELECT();
 8005e66:	f7ff fb45 	bl	80054f4 <DESELECT>
		SPI_RxByte();
 8005e6a:	f7ff fb87 	bl	800557c <SPI_RxByte>
	}

	return res;
 8005e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	372c      	adds	r7, #44	; 0x2c
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd90      	pop	{r4, r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000004 	.word	0x20000004

08005e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005eb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e84:	f7fe fcae 	bl	80047e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e88:	480c      	ldr	r0, [pc, #48]	; (8005ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8005e8a:	490d      	ldr	r1, [pc, #52]	; (8005ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005e8c:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <LoopForever+0xe>)
  movs r3, #0
 8005e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e90:	e002      	b.n	8005e98 <LoopCopyDataInit>

08005e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e96:	3304      	adds	r3, #4

08005e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e9c:	d3f9      	bcc.n	8005e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ea0:	4c0a      	ldr	r4, [pc, #40]	; (8005ecc <LoopForever+0x16>)
  movs r3, #0
 8005ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ea4:	e001      	b.n	8005eaa <LoopFillZerobss>

08005ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ea8:	3204      	adds	r2, #4

08005eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005eac:	d3fb      	bcc.n	8005ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005eae:	f009 fd7f 	bl	800f9b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005eb2:	f7fd fdad 	bl	8003a10 <main>

08005eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8005eb6:	e7fe      	b.n	8005eb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005eb8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ec0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8005ec4:	08014870 	.word	0x08014870
  ldr r2, =_sbss
 8005ec8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8005ecc:	20000974 	.word	0x20000974

08005ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005ed0:	e7fe      	b.n	8005ed0 <ADC1_2_IRQHandler>

08005ed2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005edc:	2003      	movs	r0, #3
 8005ede:	f001 f927 	bl	8007130 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ee2:	200f      	movs	r0, #15
 8005ee4:	f000 f80e 	bl	8005f04 <HAL_InitTick>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	71fb      	strb	r3, [r7, #7]
 8005ef2:	e001      	b.n	8005ef8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ef4:	f7fe f9fc 	bl	80042f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005f10:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <HAL_InitTick+0x6c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d023      	beq.n	8005f60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_InitTick+0x70>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <HAL_InitTick+0x6c>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 f933 	bl	800719a <HAL_SYSTICK_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b0f      	cmp	r3, #15
 8005f3e:	d809      	bhi.n	8005f54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f40:	2200      	movs	r2, #0
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	f001 f8fd 	bl	8007146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_InitTick+0x74>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e007      	b.n	8005f64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	e004      	b.n	8005f64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	73fb      	strb	r3, [r7, #15]
 8005f5e:	e001      	b.n	8005f64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000000c 	.word	0x2000000c
 8005f74:	20000000 	.word	0x20000000
 8005f78:	20000008 	.word	0x20000008

08005f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_IncTick+0x20>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f8e:	6013      	str	r3, [r2, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	2000000c 	.word	0x2000000c
 8005fa0:	20000724 	.word	0x20000724

08005fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_GetTick+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20000724 	.word	0x20000724

08005fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fc4:	f7ff ffee 	bl	8005fa4 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d005      	beq.n	8005fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005fd6:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <HAL_Delay+0x44>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005fe2:	bf00      	nop
 8005fe4:	f7ff ffde 	bl	8005fa4 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d8f7      	bhi.n	8005fe4 <HAL_Delay+0x28>
  {
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	2000000c 	.word	0x2000000c

08006004 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <HAL_SuspendTick+0x1c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a04      	ldr	r2, [pc, #16]	; (8006020 <HAL_SuspendTick+0x1c>)
 800600e:	f023 0302 	bic.w	r3, r3, #2
 8006012:	6013      	str	r3, [r2, #0]
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010

08006024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	609a      	str	r2, [r3, #8]
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	609a      	str	r2, [r3, #8]
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006080:	4618      	mov	r0, r3
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3360      	adds	r3, #96	; 0x60
 800609e:	461a      	mov	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <LL_ADC_SetOffset+0x44>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	03fff000 	.word	0x03fff000

080060d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3360      	adds	r3, #96	; 0x60
 80060e2:	461a      	mov	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3360      	adds	r3, #96	; 0x60
 8006110:	461a      	mov	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	431a      	orrs	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800612a:	bf00      	nop
 800612c:	371c      	adds	r7, #28
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	615a      	str	r2, [r3, #20]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3330      	adds	r3, #48	; 0x30
 800616c:	461a      	mov	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	0a1b      	lsrs	r3, r3, #8
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	f003 030c 	and.w	r3, r3, #12
 8006178:	4413      	add	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	211f      	movs	r1, #31
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	401a      	ands	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0e9b      	lsrs	r3, r3, #26
 8006194:	f003 011f 	and.w	r1, r3, #31
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	431a      	orrs	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3314      	adds	r3, #20
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	0e5b      	lsrs	r3, r3, #25
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	4413      	add	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	0d1b      	lsrs	r3, r3, #20
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2107      	movs	r1, #7
 80061e2:	fa01 f303 	lsl.w	r3, r1, r3
 80061e6:	43db      	mvns	r3, r3
 80061e8:	401a      	ands	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	0d1b      	lsrs	r3, r3, #20
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	fa01 f303 	lsl.w	r3, r1, r3
 80061f8:	431a      	orrs	r2, r3
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006224:	43db      	mvns	r3, r3
 8006226:	401a      	ands	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f003 0318 	and.w	r3, r3, #24
 800622e:	4908      	ldr	r1, [pc, #32]	; (8006250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006230:	40d9      	lsrs	r1, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	400b      	ands	r3, r1
 8006236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623a:	431a      	orrs	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	0007ffff 	.word	0x0007ffff

08006254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006264:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6093      	str	r3, [r2, #8]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006288:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628c:	d101      	bne.n	8006292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	e000      	b.n	8006294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80062b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062dc:	d101      	bne.n	80062e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <LL_ADC_IsEnabled+0x18>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <LL_ADC_IsEnabled+0x1a>
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d101      	bne.n	800632e <LL_ADC_REG_IsConversionOngoing+0x18>
 800632a:	2301      	movs	r3, #1
 800632c:	e000      	b.n	8006330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b08      	cmp	r3, #8
 800634e:	d101      	bne.n	8006354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006364:	b590      	push	{r4, r7, lr}
 8006366:	b089      	sub	sp, #36	; 0x24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006370:	2300      	movs	r3, #0
 8006372:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e131      	b.n	80065e2 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fd ffd3 	bl	8004338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff ff67 	bl	8006278 <LL_ADC_IsDeepPowerDownEnabled>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff4d 	bl	8006254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7ff ff82 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d115      	bne.n	80063f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ff66 	bl	80062a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063d4:	4b85      	ldr	r3, [pc, #532]	; (80065ec <HAL_ADC_Init+0x288>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	099b      	lsrs	r3, r3, #6
 80063da:	4a85      	ldr	r2, [pc, #532]	; (80065f0 <HAL_ADC_Init+0x28c>)
 80063dc:	fba2 2303 	umull	r2, r3, r2, r3
 80063e0:	099b      	lsrs	r3, r3, #6
 80063e2:	3301      	adds	r3, #1
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063e8:	e002      	b.n	80063f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f9      	bne.n	80063ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff ff64 	bl	80062c8 <LL_ADC_IsInternalRegulatorEnabled>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10d      	bne.n	8006422 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640a:	f043 0210 	orr.w	r2, r3, #16
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	f043 0201 	orr.w	r2, r3, #1
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff ff75 	bl	8006316 <LL_ADC_REG_IsConversionOngoing>
 800642c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 80ca 	bne.w	80065d0 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f040 80c6 	bne.w	80065d0 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800644c:	f043 0202 	orr.w	r2, r3, #2
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff ff49 	bl	80062f0 <LL_ADC_IsEnabled>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d110      	bne.n	8006486 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006464:	4863      	ldr	r0, [pc, #396]	; (80065f4 <HAL_ADC_Init+0x290>)
 8006466:	f7ff ff43 	bl	80062f0 <LL_ADC_IsEnabled>
 800646a:	4604      	mov	r4, r0
 800646c:	4862      	ldr	r0, [pc, #392]	; (80065f8 <HAL_ADC_Init+0x294>)
 800646e:	f7ff ff3f 	bl	80062f0 <LL_ADC_IsEnabled>
 8006472:	4603      	mov	r3, r0
 8006474:	4323      	orrs	r3, r4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4619      	mov	r1, r3
 8006480:	485e      	ldr	r0, [pc, #376]	; (80065fc <HAL_ADC_Init+0x298>)
 8006482:	f7ff fdcf 	bl	8006024 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	7e5b      	ldrb	r3, [r3, #25]
 800648a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006490:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006496:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800649c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064a4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064a6:	4313      	orrs	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	3b01      	subs	r3, #1
 80064ba:	045b      	lsls	r3, r3, #17
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4313      	orrs	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	4b46      	ldr	r3, [pc, #280]	; (8006600 <HAL_ADC_Init+0x29c>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	69b9      	ldr	r1, [r7, #24]
 80064ee:	430b      	orrs	r3, r1
 80064f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff ff0d 	bl	8006316 <LL_ADC_REG_IsConversionOngoing>
 80064fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff ff1a 	bl	800633c <LL_ADC_INJ_IsConversionOngoing>
 8006508:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d13d      	bne.n	800658c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d13a      	bne.n	800658c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800651a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006522:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	f023 0302 	bic.w	r3, r3, #2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	69b9      	ldr	r1, [r7, #24]
 800653c:	430b      	orrs	r3, r1
 800653e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006546:	2b01      	cmp	r3, #1
 8006548:	d118      	bne.n	800657c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006560:	4311      	orrs	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800656c:	430a      	orrs	r2, r1
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	611a      	str	r2, [r3, #16]
 800657a:	e007      	b.n	800658c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0201 	bic.w	r2, r2, #1
 800658a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10c      	bne.n	80065ae <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f023 010f 	bic.w	r1, r3, #15
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	430a      	orrs	r2, r1
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
 80065ac:	e007      	b.n	80065be <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 020f 	bic.w	r2, r2, #15
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
 80065ce:	e007      	b.n	80065e0 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d4:	f043 0210 	orr.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80065e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000000 	.word	0x20000000
 80065f0:	053e2d63 	.word	0x053e2d63
 80065f4:	50040000 	.word	0x50040000
 80065f8:	50040100 	.word	0x50040100
 80065fc:	50040300 	.word	0x50040300
 8006600:	fff0c007 	.word	0xfff0c007

08006604 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b0b6      	sub	sp, #216	; 0xd8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_ADC_ConfigChannel+0x22>
 8006622:	2302      	movs	r3, #2
 8006624:	e3d5      	b.n	8006dd2 <HAL_ADC_ConfigChannel+0x7ce>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fe6f 	bl	8006316 <LL_ADC_REG_IsConversionOngoing>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 83ba 	bne.w	8006db4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b05      	cmp	r3, #5
 8006646:	d824      	bhi.n	8006692 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	3b02      	subs	r3, #2
 800664e:	2b03      	cmp	r3, #3
 8006650:	d81b      	bhi.n	800668a <HAL_ADC_ConfigChannel+0x86>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <HAL_ADC_ConfigChannel+0x54>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	08006669 	.word	0x08006669
 800665c:	08006671 	.word	0x08006671
 8006660:	08006679 	.word	0x08006679
 8006664:	08006681 	.word	0x08006681
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	220c      	movs	r2, #12
 800666c:	605a      	str	r2, [r3, #4]
          break;
 800666e:	e011      	b.n	8006694 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2212      	movs	r2, #18
 8006674:	605a      	str	r2, [r3, #4]
          break;
 8006676:	e00d      	b.n	8006694 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2218      	movs	r2, #24
 800667c:	605a      	str	r2, [r3, #4]
          break;
 800667e:	e009      	b.n	8006694 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006686:	605a      	str	r2, [r3, #4]
          break;
 8006688:	e004      	b.n	8006694 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2206      	movs	r2, #6
 800668e:	605a      	str	r2, [r3, #4]
          break;
 8006690:	e000      	b.n	8006694 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006692:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6859      	ldr	r1, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f7ff fd5b 	bl	800615c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fe33 	bl	8006316 <LL_ADC_REG_IsConversionOngoing>
 80066b0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff fe3f 	bl	800633c <LL_ADC_INJ_IsConversionOngoing>
 80066be:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80066c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f040 81c1 	bne.w	8006a4e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80066cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 81bc 	bne.w	8006a4e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066de:	d10f      	bne.n	8006700 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6818      	ldr	r0, [r3, #0]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2200      	movs	r2, #0
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7ff fd62 	bl	80061b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff fd1c 	bl	8006136 <LL_ADC_SetSamplingTimeCommonConfig>
 80066fe:	e00e      	b.n	800671e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	6819      	ldr	r1, [r3, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	461a      	mov	r2, r3
 800670e:	f7ff fd51 	bl	80061b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2100      	movs	r1, #0
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fd0c 	bl	8006136 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	08db      	lsrs	r3, r3, #3
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d00a      	beq.n	8006756 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	6919      	ldr	r1, [r3, #16]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006750:	f7ff fc9c 	bl	800608c <LL_ADC_SetOffset>
 8006754:	e17b      	b.n	8006a4e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2100      	movs	r1, #0
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fcb9 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 8006762:	4603      	mov	r3, r0
 8006764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <HAL_ADC_ConfigChannel+0x17e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2100      	movs	r1, #0
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff fcae 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 8006778:	4603      	mov	r3, r0
 800677a:	0e9b      	lsrs	r3, r3, #26
 800677c:	f003 021f 	and.w	r2, r3, #31
 8006780:	e01e      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x1bc>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2100      	movs	r1, #0
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fca3 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 800678e:	4603      	mov	r3, r0
 8006790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80067a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80067a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80067b0:	2320      	movs	r3, #32
 80067b2:	e004      	b.n	80067be <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80067b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067b8:	fab3 f383 	clz	r3, r3
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_ADC_ConfigChannel+0x1d4>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	0e9b      	lsrs	r3, r3, #26
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	e018      	b.n	800680a <HAL_ADC_ConfigChannel+0x206>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80067e4:	fa93 f3a3 	rbit	r3, r3
 80067e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80067ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80067f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80067f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80067fc:	2320      	movs	r3, #32
 80067fe:	e004      	b.n	800680a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006800:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006804:	fab3 f383 	clz	r3, r3
 8006808:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800680a:	429a      	cmp	r2, r3
 800680c:	d106      	bne.n	800681c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fc72 	bl	8006100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff fc56 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 8006828:	4603      	mov	r3, r0
 800682a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <HAL_ADC_ConfigChannel+0x244>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2101      	movs	r1, #1
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff fc4b 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 800683e:	4603      	mov	r3, r0
 8006840:	0e9b      	lsrs	r3, r3, #26
 8006842:	f003 021f 	and.w	r2, r3, #31
 8006846:	e01e      	b.n	8006886 <HAL_ADC_ConfigChannel+0x282>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2101      	movs	r1, #1
 800684e:	4618      	mov	r0, r3
 8006850:	f7ff fc40 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 8006854:	4603      	mov	r3, r0
 8006856:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800685a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800685e:	fa93 f3a3 	rbit	r3, r3
 8006862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800686a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800686e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8006876:	2320      	movs	r3, #32
 8006878:	e004      	b.n	8006884 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800687a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800687e:	fab3 f383 	clz	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800688e:	2b00      	cmp	r3, #0
 8006890:	d105      	bne.n	800689e <HAL_ADC_ConfigChannel+0x29a>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	0e9b      	lsrs	r3, r3, #26
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	e018      	b.n	80068d0 <HAL_ADC_ConfigChannel+0x2cc>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068aa:	fa93 f3a3 	rbit	r3, r3
 80068ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80068b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80068b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80068ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80068c2:	2320      	movs	r3, #32
 80068c4:	e004      	b.n	80068d0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80068c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ca:	fab3 f383 	clz	r3, r3
 80068ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d106      	bne.n	80068e2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2200      	movs	r2, #0
 80068da:	2101      	movs	r1, #1
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fc0f 	bl	8006100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2102      	movs	r1, #2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fbf3 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <HAL_ADC_ConfigChannel+0x30a>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2102      	movs	r1, #2
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff fbe8 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 8006904:	4603      	mov	r3, r0
 8006906:	0e9b      	lsrs	r3, r3, #26
 8006908:	f003 021f 	and.w	r2, r3, #31
 800690c:	e01e      	b.n	800694c <HAL_ADC_ConfigChannel+0x348>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2102      	movs	r1, #2
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff fbdd 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 800691a:	4603      	mov	r3, r0
 800691c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006924:	fa93 f3a3 	rbit	r3, r3
 8006928:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800692c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800693c:	2320      	movs	r3, #32
 800693e:	e004      	b.n	800694a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006940:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006944:	fab3 f383 	clz	r3, r3
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <HAL_ADC_ConfigChannel+0x360>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	0e9b      	lsrs	r3, r3, #26
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	e016      	b.n	8006992 <HAL_ADC_ConfigChannel+0x38e>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006970:	fa93 f3a3 	rbit	r3, r3
 8006974:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006978:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800697c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8006984:	2320      	movs	r3, #32
 8006986:	e004      	b.n	8006992 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8006988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800698c:	fab3 f383 	clz	r3, r3
 8006990:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006992:	429a      	cmp	r2, r3
 8006994:	d106      	bne.n	80069a4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2200      	movs	r2, #0
 800699c:	2102      	movs	r1, #2
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fbae 	bl	8006100 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2103      	movs	r1, #3
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fb92 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10a      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x3cc>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2103      	movs	r1, #3
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fb87 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 80069c6:	4603      	mov	r3, r0
 80069c8:	0e9b      	lsrs	r3, r3, #26
 80069ca:	f003 021f 	and.w	r2, r3, #31
 80069ce:	e017      	b.n	8006a00 <HAL_ADC_ConfigChannel+0x3fc>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2103      	movs	r1, #3
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fb7c 	bl	80060d4 <LL_ADC_GetOffsetChannel>
 80069dc:	4603      	mov	r3, r0
 80069de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069e2:	fa93 f3a3 	rbit	r3, r3
 80069e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80069e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80069ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80069f2:	2320      	movs	r3, #32
 80069f4:	e003      	b.n	80069fe <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80069f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f8:	fab3 f383 	clz	r3, r3
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d105      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x414>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	0e9b      	lsrs	r3, r3, #26
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	e011      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x438>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a20:	fa93 f3a3 	rbit	r3, r3
 8006a24:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006a30:	2320      	movs	r3, #32
 8006a32:	e003      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	fab3 f383 	clz	r3, r3
 8006a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d106      	bne.n	8006a4e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2200      	movs	r2, #0
 8006a46:	2103      	movs	r1, #3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fb59 	bl	8006100 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fc4c 	bl	80062f0 <LL_ADC_IsEnabled>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f040 8140 	bne.w	8006ce0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	6819      	ldr	r1, [r3, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f7ff fbcd 	bl	800620c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	4a8f      	ldr	r2, [pc, #572]	; (8006cb4 <HAL_ADC_ConfigChannel+0x6b0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	f040 8131 	bne.w	8006ce0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x4a2>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	0e9b      	lsrs	r3, r3, #26
 8006a94:	3301      	adds	r3, #1
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	bf94      	ite	ls
 8006a9e:	2301      	movls	r3, #1
 8006aa0:	2300      	movhi	r3, #0
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	e019      	b.n	8006ada <HAL_ADC_ConfigChannel+0x4d6>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aae:	fa93 f3a3 	rbit	r3, r3
 8006ab2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ab6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8006abe:	2320      	movs	r3, #32
 8006ac0:	e003      	b.n	8006aca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8006ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac4:	fab3 f383 	clz	r3, r3
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	3301      	adds	r3, #1
 8006acc:	f003 031f 	and.w	r3, r3, #31
 8006ad0:	2b09      	cmp	r3, #9
 8006ad2:	bf94      	ite	ls
 8006ad4:	2301      	movls	r3, #1
 8006ad6:	2300      	movhi	r3, #0
 8006ad8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d079      	beq.n	8006bd2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d107      	bne.n	8006afa <HAL_ADC_ConfigChannel+0x4f6>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	0e9b      	lsrs	r3, r3, #26
 8006af0:	3301      	adds	r3, #1
 8006af2:	069b      	lsls	r3, r3, #26
 8006af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006af8:	e015      	b.n	8006b26 <HAL_ADC_ConfigChannel+0x522>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b02:	fa93 f3a3 	rbit	r3, r3
 8006b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8006b12:	2320      	movs	r3, #32
 8006b14:	e003      	b.n	8006b1e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8006b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b18:	fab3 f383 	clz	r3, r3
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	3301      	adds	r3, #1
 8006b20:	069b      	lsls	r3, r3, #26
 8006b22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <HAL_ADC_ConfigChannel+0x542>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	0e9b      	lsrs	r3, r3, #26
 8006b38:	3301      	adds	r3, #1
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	2101      	movs	r1, #1
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	e017      	b.n	8006b76 <HAL_ADC_ConfigChannel+0x572>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b4e:	fa93 f3a3 	rbit	r3, r3
 8006b52:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8006b5e:	2320      	movs	r3, #32
 8006b60:	e003      	b.n	8006b6a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8006b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b64:	fab3 f383 	clz	r3, r3
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	ea42 0103 	orr.w	r1, r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x598>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	0e9b      	lsrs	r3, r3, #26
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	f003 021f 	and.w	r2, r3, #31
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	051b      	lsls	r3, r3, #20
 8006b9a:	e018      	b.n	8006bce <HAL_ADC_ConfigChannel+0x5ca>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	fa93 f3a3 	rbit	r3, r3
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8006bb4:	2320      	movs	r3, #32
 8006bb6:	e003      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8006bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bba:	fab3 f383 	clz	r3, r3
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f003 021f 	and.w	r2, r3, #31
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4413      	add	r3, r2
 8006bcc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	e081      	b.n	8006cd6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d107      	bne.n	8006bee <HAL_ADC_ConfigChannel+0x5ea>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	0e9b      	lsrs	r3, r3, #26
 8006be4:	3301      	adds	r3, #1
 8006be6:	069b      	lsls	r3, r3, #26
 8006be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bec:	e015      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x616>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	fa93 f3a3 	rbit	r3, r3
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8006c06:	2320      	movs	r3, #32
 8006c08:	e003      	b.n	8006c12 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	fab3 f383 	clz	r3, r3
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	3301      	adds	r3, #1
 8006c14:	069b      	lsls	r3, r3, #26
 8006c16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_ADC_ConfigChannel+0x636>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2101      	movs	r1, #1
 8006c34:	fa01 f303 	lsl.w	r3, r1, r3
 8006c38:	e017      	b.n	8006c6a <HAL_ADC_ConfigChannel+0x666>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	fa93 f3a3 	rbit	r3, r3
 8006c46:	61fb      	str	r3, [r7, #28]
  return result;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8006c52:	2320      	movs	r3, #32
 8006c54:	e003      	b.n	8006c5e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	fab3 f383 	clz	r3, r3
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	f003 031f 	and.w	r3, r3, #31
 8006c64:	2101      	movs	r1, #1
 8006c66:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6a:	ea42 0103 	orr.w	r1, r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10d      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0x692>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	0e9b      	lsrs	r3, r3, #26
 8006c80:	3301      	adds	r3, #1
 8006c82:	f003 021f 	and.w	r2, r3, #31
 8006c86:	4613      	mov	r3, r2
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	3b1e      	subs	r3, #30
 8006c8e:	051b      	lsls	r3, r3, #20
 8006c90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c94:	e01e      	b.n	8006cd4 <HAL_ADC_ConfigChannel+0x6d0>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	fa93 f3a3 	rbit	r3, r3
 8006ca2:	613b      	str	r3, [r7, #16]
  return result;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8006cae:	2320      	movs	r3, #32
 8006cb0:	e006      	b.n	8006cc0 <HAL_ADC_ConfigChannel+0x6bc>
 8006cb2:	bf00      	nop
 8006cb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	fab3 f383 	clz	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f003 021f 	and.w	r2, r3, #31
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	3b1e      	subs	r3, #30
 8006cce:	051b      	lsls	r3, r3, #20
 8006cd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	6892      	ldr	r2, [r2, #8]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	f7ff fa6a 	bl	80061b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b3d      	ldr	r3, [pc, #244]	; (8006ddc <HAL_ADC_ConfigChannel+0x7d8>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d06c      	beq.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006cec:	483c      	ldr	r0, [pc, #240]	; (8006de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006cee:	f7ff f9bf 	bl	8006070 <LL_ADC_GetCommonPathInternalCh>
 8006cf2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a3a      	ldr	r2, [pc, #232]	; (8006de4 <HAL_ADC_ConfigChannel+0x7e0>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d127      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d121      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a35      	ldr	r2, [pc, #212]	; (8006de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d157      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d1e:	4619      	mov	r1, r3
 8006d20:	482f      	ldr	r0, [pc, #188]	; (8006de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d22:	f7ff f992 	bl	800604a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d26:	4b31      	ldr	r3, [pc, #196]	; (8006dec <HAL_ADC_ConfigChannel+0x7e8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	099b      	lsrs	r3, r3, #6
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <HAL_ADC_ConfigChannel+0x7ec>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	099b      	lsrs	r3, r3, #6
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d40:	e002      	b.n	8006d48 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f9      	bne.n	8006d42 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006d4e:	e03a      	b.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a27      	ldr	r2, [pc, #156]	; (8006df4 <HAL_ADC_ConfigChannel+0x7f0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d113      	bne.n	8006d82 <HAL_ADC_ConfigChannel+0x77e>
 8006d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10d      	bne.n	8006d82 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d12a      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4819      	ldr	r0, [pc, #100]	; (8006de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006d7c:	f7ff f965 	bl	800604a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006d80:	e021      	b.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <HAL_ADC_ConfigChannel+0x7f4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d11c      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d116      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <HAL_ADC_ConfigChannel+0x7e4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d111      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006daa:	4619      	mov	r1, r3
 8006dac:	480c      	ldr	r0, [pc, #48]	; (8006de0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006dae:	f7ff f94c 	bl	800604a <LL_ADC_SetCommonPathInternalCh>
 8006db2:	e008      	b.n	8006dc6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006dce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	37d8      	adds	r7, #216	; 0xd8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	80080000 	.word	0x80080000
 8006de0:	50040300 	.word	0x50040300
 8006de4:	c7520000 	.word	0xc7520000
 8006de8:	50040000 	.word	0x50040000
 8006dec:	20000000 	.word	0x20000000
 8006df0:	053e2d63 	.word	0x053e2d63
 8006df4:	cb840000 	.word	0xcb840000
 8006df8:	80000001 	.word	0x80000001

08006dfc <LL_ADC_IsEnabled>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <LL_ADC_IsEnabled+0x18>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <LL_ADC_IsEnabled+0x1a>
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <LL_ADC_REG_IsConversionOngoing>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d101      	bne.n	8006e3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b09f      	sub	sp, #124	; 0x7c
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e089      	b.n	8006f7a <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006e6e:	2300      	movs	r3, #0
 8006e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006e72:	2300      	movs	r3, #0
 8006e74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a42      	ldr	r2, [pc, #264]	; (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d102      	bne.n	8006e86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e80:	4b41      	ldr	r3, [pc, #260]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	e001      	b.n	8006e8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e86:	2300      	movs	r3, #0
 8006e88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e94:	f043 0220 	orr.w	r2, r3, #32
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e068      	b.n	8006f7a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff ffb9 	bl	8006e22 <LL_ADC_REG_IsConversionOngoing>
 8006eb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff ffb3 	bl	8006e22 <LL_ADC_REG_IsConversionOngoing>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14a      	bne.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d147      	bne.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ec8:	4b30      	ldr	r3, [pc, #192]	; (8006f8c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006eca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d027      	beq.n	8006f24 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6859      	ldr	r1, [r3, #4]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ee6:	035b      	lsls	r3, r3, #13
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	431a      	orrs	r2, r3
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ef0:	4824      	ldr	r0, [pc, #144]	; (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006ef2:	f7ff ff83 	bl	8006dfc <LL_ADC_IsEnabled>
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4823      	ldr	r0, [pc, #140]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006efa:	f7ff ff7f 	bl	8006dfc <LL_ADC_IsEnabled>
 8006efe:	4603      	mov	r3, r0
 8006f00:	4323      	orrs	r3, r4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d132      	bne.n	8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006f0e:	f023 030f 	bic.w	r3, r3, #15
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	6811      	ldr	r1, [r2, #0]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f22:	e023      	b.n	8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f30:	4814      	ldr	r0, [pc, #80]	; (8006f84 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006f32:	f7ff ff63 	bl	8006dfc <LL_ADC_IsEnabled>
 8006f36:	4604      	mov	r4, r0
 8006f38:	4813      	ldr	r0, [pc, #76]	; (8006f88 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f3a:	f7ff ff5f 	bl	8006dfc <LL_ADC_IsEnabled>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4323      	orrs	r3, r4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d112      	bne.n	8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006f4e:	f023 030f 	bic.w	r3, r3, #15
 8006f52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f56:	e009      	b.n	8006f6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006f6a:	e000      	b.n	8006f6e <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006f76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	377c      	adds	r7, #124	; 0x7c
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd90      	pop	{r4, r7, pc}
 8006f82:	bf00      	nop
 8006f84:	50040000 	.word	0x50040000
 8006f88:	50040100 	.word	0x50040100
 8006f8c:	50040300 	.word	0x50040300

08006f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fac:	4013      	ands	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fc2:	4a04      	ldr	r2, [pc, #16]	; (8006fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	60d3      	str	r3, [r2, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	e000ed00 	.word	0xe000ed00

08006fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fdc:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	0a1b      	lsrs	r3, r3, #8
 8006fe2:	f003 0307 	and.w	r3, r3, #7
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	e000ed00 	.word	0xe000ed00

08006ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	2b00      	cmp	r3, #0
 8007004:	db0b      	blt.n	800701e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	f003 021f 	and.w	r2, r3, #31
 800700c:	4907      	ldr	r1, [pc, #28]	; (800702c <__NVIC_EnableIRQ+0x38>)
 800700e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	2001      	movs	r0, #1
 8007016:	fa00 f202 	lsl.w	r2, r0, r2
 800701a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	e000e100 	.word	0xe000e100

08007030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800703c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db0a      	blt.n	800705a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b2da      	uxtb	r2, r3
 8007048:	490c      	ldr	r1, [pc, #48]	; (800707c <__NVIC_SetPriority+0x4c>)
 800704a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704e:	0112      	lsls	r2, r2, #4
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	440b      	add	r3, r1
 8007054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007058:	e00a      	b.n	8007070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	4908      	ldr	r1, [pc, #32]	; (8007080 <__NVIC_SetPriority+0x50>)
 8007060:	79fb      	ldrb	r3, [r7, #7]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	3b04      	subs	r3, #4
 8007068:	0112      	lsls	r2, r2, #4
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	440b      	add	r3, r1
 800706e:	761a      	strb	r2, [r3, #24]
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	e000e100 	.word	0xe000e100
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007084:	b480      	push	{r7}
 8007086:	b089      	sub	sp, #36	; 0x24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f1c3 0307 	rsb	r3, r3, #7
 800709e:	2b04      	cmp	r3, #4
 80070a0:	bf28      	it	cs
 80070a2:	2304      	movcs	r3, #4
 80070a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	3304      	adds	r3, #4
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d902      	bls.n	80070b4 <NVIC_EncodePriority+0x30>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	3b03      	subs	r3, #3
 80070b2:	e000      	b.n	80070b6 <NVIC_EncodePriority+0x32>
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	fa02 f303 	lsl.w	r3, r2, r3
 80070c2:	43da      	mvns	r2, r3
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	401a      	ands	r2, r3
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070cc:	f04f 31ff 	mov.w	r1, #4294967295
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43d9      	mvns	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070dc:	4313      	orrs	r3, r2
         );
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3724      	adds	r7, #36	; 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
	...

080070ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070fc:	d301      	bcc.n	8007102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070fe:	2301      	movs	r3, #1
 8007100:	e00f      	b.n	8007122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007102:	4a0a      	ldr	r2, [pc, #40]	; (800712c <SysTick_Config+0x40>)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3b01      	subs	r3, #1
 8007108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800710a:	210f      	movs	r1, #15
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	f7ff ff8e 	bl	8007030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <SysTick_Config+0x40>)
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800711a:	4b04      	ldr	r3, [pc, #16]	; (800712c <SysTick_Config+0x40>)
 800711c:	2207      	movs	r2, #7
 800711e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	e000e010 	.word	0xe000e010

08007130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7ff ff29 	bl	8006f90 <__NVIC_SetPriorityGrouping>
}
 800713e:	bf00      	nop
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	4603      	mov	r3, r0
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007158:	f7ff ff3e 	bl	8006fd8 <__NVIC_GetPriorityGrouping>
 800715c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	6978      	ldr	r0, [r7, #20]
 8007164:	f7ff ff8e 	bl	8007084 <NVIC_EncodePriority>
 8007168:	4602      	mov	r2, r0
 800716a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ff5d 	bl	8007030 <__NVIC_SetPriority>
}
 8007176:	bf00      	nop
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	4603      	mov	r3, r0
 8007186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff ff31 	bl	8006ff4 <__NVIC_EnableIRQ>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff ffa2 	bl	80070ec <SysTick_Config>
 80071a8:	4603      	mov	r3, r0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d008      	beq.n	80071dc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2204      	movs	r2, #4
 80071ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e022      	b.n	8007222 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 020e 	bic.w	r2, r2, #14
 80071ea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007200:	f003 021c 	and.w	r2, r3, #28
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f202 	lsl.w	r2, r1, r2
 800720e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d005      	beq.n	8007252 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2204      	movs	r2, #4
 800724a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	73fb      	strb	r3, [r7, #15]
 8007250:	e029      	b.n	80072a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 020e 	bic.w	r2, r2, #14
 8007260:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	f003 021c 	and.w	r2, r3, #28
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2101      	movs	r1, #1
 8007280:	fa01 f202 	lsl.w	r2, r1, r2
 8007284:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
    }
  }
  return status;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072c2:	4b2f      	ldr	r3, [pc, #188]	; (8007380 <HAL_FLASH_Program+0xd0>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_FLASH_Program+0x1e>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e053      	b.n	8007376 <HAL_FLASH_Program+0xc6>
 80072ce:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <HAL_FLASH_Program+0xd0>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072d8:	f000 f894 	bl	8007404 <FLASH_WaitForLastOperation>
 80072dc:	4603      	mov	r3, r0
 80072de:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d143      	bne.n	800736e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <HAL_FLASH_Program+0xd0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <HAL_FLASH_Program+0xd4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <HAL_FLASH_Program+0xd4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <HAL_FLASH_Program+0xd4>)
 80072fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007302:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007304:	4b1e      	ldr	r3, [pc, #120]	; (8007380 <HAL_FLASH_Program+0xd0>)
 8007306:	2202      	movs	r2, #2
 8007308:	771a      	strb	r2, [r3, #28]
 800730a:	e002      	b.n	8007312 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800730c:	4b1c      	ldr	r3, [pc, #112]	; (8007380 <HAL_FLASH_Program+0xd0>)
 800730e:	2200      	movs	r2, #0
 8007310:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d107      	bne.n	8007328 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731c:	68b8      	ldr	r0, [r7, #8]
 800731e:	f000 f8c9 	bl	80074b4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007322:	2301      	movs	r3, #1
 8007324:	613b      	str	r3, [r7, #16]
 8007326:	e010      	b.n	800734a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d002      	beq.n	8007334 <HAL_FLASH_Program+0x84>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d10a      	bne.n	800734a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	4619      	mov	r1, r3
 8007338:	68b8      	ldr	r0, [r7, #8]
 800733a:	f000 f8e1 	bl	8007500 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d102      	bne.n	800734a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007344:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007348:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800734a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800734e:	f000 f859 	bl	8007404 <FLASH_WaitForLastOperation>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_FLASH_Program+0xd4>)
 800735e:	695a      	ldr	r2, [r3, #20]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	43db      	mvns	r3, r3
 8007364:	4907      	ldr	r1, [pc, #28]	; (8007384 <HAL_FLASH_Program+0xd4>)
 8007366:	4013      	ands	r3, r2
 8007368:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800736a:	f000 f9d9 	bl	8007720 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800736e:	4b04      	ldr	r3, [pc, #16]	; (8007380 <HAL_FLASH_Program+0xd0>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]

  return status;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000010 	.word	0x20000010
 8007384:	40022000 	.word	0x40022000

08007388 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <HAL_FLASH_Unlock+0x38>)
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	da0b      	bge.n	80073b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <HAL_FLASH_Unlock+0x38>)
 800739c:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <HAL_FLASH_Unlock+0x3c>)
 800739e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_FLASH_Unlock+0x38>)
 80073a2:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <HAL_FLASH_Unlock+0x40>)
 80073a4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80073a6:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <HAL_FLASH_Unlock+0x38>)
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	da01      	bge.n	80073b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80073b2:	79fb      	ldrb	r3, [r7, #7]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	40022000 	.word	0x40022000
 80073c4:	45670123 	.word	0x45670123
 80073c8:	cdef89ab 	.word	0xcdef89ab

080073cc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_FLASH_Lock+0x1c>)
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <HAL_FLASH_Lock+0x1c>)
 80073d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073da:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40022000 	.word	0x40022000

080073ec <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80073f0:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_FLASH_GetError+0x14>)
 80073f2:	685b      	ldr	r3, [r3, #4]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20000010 	.word	0x20000010

08007404 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800740c:	f7fe fdca 	bl	8005fa4 <HAL_GetTick>
 8007410:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007412:	e00d      	b.n	8007430 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d009      	beq.n	8007430 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800741c:	f7fe fdc2 	bl	8005fa4 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	429a      	cmp	r2, r3
 800742a:	d801      	bhi.n	8007430 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e036      	b.n	800749e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1eb      	bne.n	8007414 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800743c:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	4b1a      	ldr	r3, [pc, #104]	; (80074ac <FLASH_WaitForLastOperation+0xa8>)
 8007442:	4013      	ands	r3, r2
 8007444:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800744c:	4b18      	ldr	r3, [pc, #96]	; (80074b0 <FLASH_WaitForLastOperation+0xac>)
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	4a16      	ldr	r2, [pc, #88]	; (80074b0 <FLASH_WaitForLastOperation+0xac>)
 8007456:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d007      	beq.n	8007472 <FLASH_WaitForLastOperation+0x6e>
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800746c:	490e      	ldr	r1, [pc, #56]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 800746e:	4313      	orrs	r3, r2
 8007470:	618b      	str	r3, [r1, #24]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <FLASH_WaitForLastOperation+0x82>
 800747c:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007484:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e009      	b.n	800749e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800748a:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007496:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <FLASH_WaitForLastOperation+0xa4>)
 8007498:	2201      	movs	r2, #1
 800749a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40022000 	.word	0x40022000
 80074ac:	0002c3fa 	.word	0x0002c3fa
 80074b0:	20000010 	.word	0x20000010

080074b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80074c0:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <FLASH_Program_DoubleWord+0x48>)
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	4a0d      	ldr	r2, [pc, #52]	; (80074fc <FLASH_Program_DoubleWord+0x48>)
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80074d2:	f3bf 8f6f 	isb	sy
}
 80074d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80074d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	000a      	movs	r2, r1
 80074e6:	2300      	movs	r3, #0
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	3104      	adds	r1, #4
 80074ec:	4613      	mov	r3, r2
 80074ee:	600b      	str	r3, [r1, #0]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	40022000 	.word	0x40022000

08007500 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007500:	b480      	push	{r7}
 8007502:	b089      	sub	sp, #36	; 0x24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <FLASH_Program_Fast+0x68>)
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	4a13      	ldr	r2, [pc, #76]	; (8007568 <FLASH_Program_Fast+0x68>)
 800751c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007520:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007522:	f3ef 8310 	mrs	r3, PRIMASK
 8007526:	60fb      	str	r3, [r7, #12]
  return(result);
 8007528:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800752a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800752c:	b672      	cpsid	i
}
 800752e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	3304      	adds	r3, #4
 800753c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	3304      	adds	r3, #4
 8007542:	617b      	str	r3, [r7, #20]
    row_index--;
 8007544:	7ffb      	ldrb	r3, [r7, #31]
 8007546:	3b01      	subs	r3, #1
 8007548:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800754a:	7ffb      	ldrb	r3, [r7, #31]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1ef      	bne.n	8007530 <FLASH_Program_Fast+0x30>
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f383 8810 	msr	PRIMASK, r3
}
 800755a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800755c:	bf00      	nop
 800755e:	3724      	adds	r7, #36	; 0x24
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr
 8007568:	40022000 	.word	0x40022000

0800756c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007576:	4b47      	ldr	r3, [pc, #284]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_FLASHEx_Erase+0x16>
 800757e:	2302      	movs	r3, #2
 8007580:	e083      	b.n	800768a <HAL_FLASHEx_Erase+0x11e>
 8007582:	4b44      	ldr	r3, [pc, #272]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 8007584:	2201      	movs	r2, #1
 8007586:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007588:	f24c 3050 	movw	r0, #50000	; 0xc350
 800758c:	f7ff ff3a 	bl	8007404 <FLASH_WaitForLastOperation>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d173      	bne.n	8007682 <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800759a:	4b3e      	ldr	r3, [pc, #248]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80075a0:	4b3d      	ldr	r3, [pc, #244]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d013      	beq.n	80075d4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80075ac:	4b3a      	ldr	r3, [pc, #232]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d009      	beq.n	80075cc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80075b8:	4b37      	ldr	r3, [pc, #220]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a36      	ldr	r2, [pc, #216]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075c2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80075c4:	4b33      	ldr	r3, [pc, #204]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 80075c6:	2203      	movs	r2, #3
 80075c8:	771a      	strb	r2, [r3, #28]
 80075ca:	e016      	b.n	80075fa <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80075cc:	4b31      	ldr	r3, [pc, #196]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	771a      	strb	r2, [r3, #28]
 80075d2:	e012      	b.n	80075fa <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80075d4:	4b30      	ldr	r3, [pc, #192]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 80075e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075ea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 80075ee:	2202      	movs	r2, #2
 80075f0:	771a      	strb	r2, [r3, #28]
 80075f2:	e002      	b.n	80075fa <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80075f4:	4b27      	ldr	r3, [pc, #156]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d111      	bne.n	8007626 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	4618      	mov	r0, r3
 8007608:	f000 f848 	bl	800769c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800760c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007610:	f7ff fef8 	bl	8007404 <FLASH_WaitForLastOperation>
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007618:	4b1f      	ldr	r3, [pc, #124]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 800761e:	f023 0304 	bic.w	r3, r3, #4
 8007622:	6153      	str	r3, [r2, #20]
 8007624:	e02b      	b.n	800767e <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f04f 32ff 	mov.w	r2, #4294967295
 800762c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	e01b      	b.n	800766e <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	4619      	mov	r1, r3
 800763c:	68b8      	ldr	r0, [r7, #8]
 800763e:	f000 f84b 	bl	80076d8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007642:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007646:	f7ff fedd 	bl	8007404 <FLASH_WaitForLastOperation>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	4a11      	ldr	r2, [pc, #68]	; (8007698 <HAL_FLASHEx_Erase+0x12c>)
 8007654:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007658:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	601a      	str	r2, [r3, #0]
          break;
 8007666:	e00a      	b.n	800767e <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	3301      	adds	r3, #1
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4413      	add	r3, r2
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	d3db      	bcc.n	8007636 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800767e:	f000 f84f 	bl	8007720 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007682:	4b04      	ldr	r3, [pc, #16]	; (8007694 <HAL_FLASHEx_Erase+0x128>)
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]

  return status;
 8007688:	7bfb      	ldrb	r3, [r7, #15]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	20000010 	.word	0x20000010
 8007698:	40022000 	.word	0x40022000

0800769c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80076ae:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <FLASH_MassErase+0x38>)
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	4a08      	ldr	r2, [pc, #32]	; (80076d4 <FLASH_MassErase+0x38>)
 80076b4:	f043 0304 	orr.w	r3, r3, #4
 80076b8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80076ba:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <FLASH_MassErase+0x38>)
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4a05      	ldr	r2, [pc, #20]	; (80076d4 <FLASH_MassErase+0x38>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	6153      	str	r3, [r2, #20]
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40022000 	.word	0x40022000

080076d8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80076e2:	4b0e      	ldr	r3, [pc, #56]	; (800771c <FLASH_PageErase+0x44>)
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	00db      	lsls	r3, r3, #3
 80076ee:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80076f2:	490a      	ldr	r1, [pc, #40]	; (800771c <FLASH_PageErase+0x44>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <FLASH_PageErase+0x44>)
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	4a07      	ldr	r2, [pc, #28]	; (800771c <FLASH_PageErase+0x44>)
 80076fe:	f043 0302 	orr.w	r3, r3, #2
 8007702:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <FLASH_PageErase+0x44>)
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	4a04      	ldr	r2, [pc, #16]	; (800771c <FLASH_PageErase+0x44>)
 800770a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800770e:	6153      	str	r3, [r2, #20]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	40022000 	.word	0x40022000

08007720 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007726:	4b21      	ldr	r3, [pc, #132]	; (80077ac <FLASH_FlushCaches+0x8c>)
 8007728:	7f1b      	ldrb	r3, [r3, #28]
 800772a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d002      	beq.n	8007738 <FLASH_FlushCaches+0x18>
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d117      	bne.n	8007768 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007738:	4b1d      	ldr	r3, [pc, #116]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1c      	ldr	r2, [pc, #112]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800773e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007742:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007744:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800774a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	4b17      	ldr	r3, [pc, #92]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a16      	ldr	r2, [pc, #88]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800775a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800775c:	4b14      	ldr	r3, [pc, #80]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a13      	ldr	r2, [pc, #76]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007766:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d002      	beq.n	8007774 <FLASH_FlushCaches+0x54>
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d111      	bne.n	8007798 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007774:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a0d      	ldr	r2, [pc, #52]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800777a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a0a      	ldr	r2, [pc, #40]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800778c:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <FLASH_FlushCaches+0x90>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <FLASH_FlushCaches+0x90>)
 8007792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007796:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <FLASH_FlushCaches+0x8c>)
 800779a:	2200      	movs	r2, #0
 800779c:	771a      	strb	r2, [r3, #28]
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20000010 	.word	0x20000010
 80077b0:	40022000 	.word	0x40022000

080077b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077c2:	e14e      	b.n	8007a62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	2101      	movs	r1, #1
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	fa01 f303 	lsl.w	r3, r1, r3
 80077d0:	4013      	ands	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8140 	beq.w	8007a5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d005      	beq.n	80077f4 <HAL_GPIO_Init+0x40>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d130      	bne.n	8007856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	2203      	movs	r2, #3
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	43db      	mvns	r3, r3
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4013      	ands	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800782a:	2201      	movs	r2, #1
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4013      	ands	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	091b      	lsrs	r3, r3, #4
 8007840:	f003 0201 	and.w	r2, r3, #1
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d017      	beq.n	8007892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	2203      	movs	r2, #3
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	43db      	mvns	r3, r3
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4013      	ands	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	005b      	lsls	r3, r3, #1
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d123      	bne.n	80078e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	08da      	lsrs	r2, r3, #3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3208      	adds	r2, #8
 80078a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	220f      	movs	r2, #15
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	43db      	mvns	r3, r3
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4013      	ands	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	08da      	lsrs	r2, r3, #3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3208      	adds	r2, #8
 80078e0:	6939      	ldr	r1, [r7, #16]
 80078e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	2203      	movs	r2, #3
 80078f2:	fa02 f303 	lsl.w	r3, r2, r3
 80078f6:	43db      	mvns	r3, r3
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 0203 	and.w	r2, r3, #3
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 809a 	beq.w	8007a5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007928:	4b55      	ldr	r3, [pc, #340]	; (8007a80 <HAL_GPIO_Init+0x2cc>)
 800792a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792c:	4a54      	ldr	r2, [pc, #336]	; (8007a80 <HAL_GPIO_Init+0x2cc>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6613      	str	r3, [r2, #96]	; 0x60
 8007934:	4b52      	ldr	r3, [pc, #328]	; (8007a80 <HAL_GPIO_Init+0x2cc>)
 8007936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	60bb      	str	r3, [r7, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007940:	4a50      	ldr	r2, [pc, #320]	; (8007a84 <HAL_GPIO_Init+0x2d0>)
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	089b      	lsrs	r3, r3, #2
 8007946:	3302      	adds	r3, #2
 8007948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f003 0303 	and.w	r3, r3, #3
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	220f      	movs	r2, #15
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	43db      	mvns	r3, r3
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4013      	ands	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800796a:	d013      	beq.n	8007994 <HAL_GPIO_Init+0x1e0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a46      	ldr	r2, [pc, #280]	; (8007a88 <HAL_GPIO_Init+0x2d4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00d      	beq.n	8007990 <HAL_GPIO_Init+0x1dc>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a45      	ldr	r2, [pc, #276]	; (8007a8c <HAL_GPIO_Init+0x2d8>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d007      	beq.n	800798c <HAL_GPIO_Init+0x1d8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a44      	ldr	r2, [pc, #272]	; (8007a90 <HAL_GPIO_Init+0x2dc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d101      	bne.n	8007988 <HAL_GPIO_Init+0x1d4>
 8007984:	2303      	movs	r3, #3
 8007986:	e006      	b.n	8007996 <HAL_GPIO_Init+0x1e2>
 8007988:	2307      	movs	r3, #7
 800798a:	e004      	b.n	8007996 <HAL_GPIO_Init+0x1e2>
 800798c:	2302      	movs	r3, #2
 800798e:	e002      	b.n	8007996 <HAL_GPIO_Init+0x1e2>
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <HAL_GPIO_Init+0x1e2>
 8007994:	2300      	movs	r3, #0
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	f002 0203 	and.w	r2, r2, #3
 800799c:	0092      	lsls	r2, r2, #2
 800799e:	4093      	lsls	r3, r2
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80079a6:	4937      	ldr	r1, [pc, #220]	; (8007a84 <HAL_GPIO_Init+0x2d0>)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	089b      	lsrs	r3, r3, #2
 80079ac:	3302      	adds	r3, #2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079b4:	4b37      	ldr	r3, [pc, #220]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	43db      	mvns	r3, r3
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4013      	ands	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079d8:	4a2e      	ldr	r2, [pc, #184]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80079de:	4b2d      	ldr	r3, [pc, #180]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	43db      	mvns	r3, r3
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4013      	ands	r3, r2
 80079ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007a02:	4a24      	ldr	r2, [pc, #144]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007a08:	4b22      	ldr	r3, [pc, #136]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	4013      	ands	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007a2c:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007a32:	4b18      	ldr	r3, [pc, #96]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <HAL_GPIO_Init+0x2e0>)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f47f aea9 	bne.w	80077c4 <HAL_GPIO_Init+0x10>
  }
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	371c      	adds	r7, #28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	40021000 	.word	0x40021000
 8007a84:	40010000 	.word	0x40010000
 8007a88:	48000400 	.word	0x48000400
 8007a8c:	48000800 	.word	0x48000800
 8007a90:	48000c00 	.word	0x48000c00
 8007a94:	40010400 	.word	0x40010400

08007a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	887b      	ldrh	r3, [r7, #2]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e001      	b.n	8007aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	807b      	strh	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ad8:	787b      	ldrb	r3, [r7, #1]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ade:	887a      	ldrh	r2, [r7, #2]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ae4:	e002      	b.n	8007aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b06:	6013      	str	r3, [r2, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40007000 	.word	0x40007000

08007b18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <HAL_PWREx_GetVoltageRange+0x18>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40007000 	.word	0x40007000

08007b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b42:	d130      	bne.n	8007ba6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b44:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b50:	d038      	beq.n	8007bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b5a:	4a1e      	ldr	r2, [pc, #120]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b62:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2232      	movs	r2, #50	; 0x32
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	0c9b      	lsrs	r3, r3, #18
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b78:	e002      	b.n	8007b80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b8c:	d102      	bne.n	8007b94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f2      	bne.n	8007b7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba0:	d110      	bne.n	8007bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e00f      	b.n	8007bc6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb2:	d007      	beq.n	8007bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007bbc:	4a05      	ldr	r2, [pc, #20]	; (8007bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bc2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	40007000 	.word	0x40007000
 8007bd8:	20000000 	.word	0x20000000
 8007bdc:	431bde83 	.word	0x431bde83

08007be0 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8007be0:	b480      	push	{r7}
 8007be2:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8007be4:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f023 0307 	bic.w	r3, r3, #7
 8007bec:	4a07      	ldr	r2, [pc, #28]	; (8007c0c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	4a05      	ldr	r2, [pc, #20]	; (8007c10 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8007bfa:	f043 0304 	orr.w	r3, r3, #4
 8007bfe:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007c00:	bf30      	wfi
}
 8007c02:	bf00      	nop
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40007000 	.word	0x40007000
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08a      	sub	sp, #40	; 0x28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f000 bc4f 	b.w	80084c6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c28:	4b97      	ldr	r3, [pc, #604]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 030c 	and.w	r3, r3, #12
 8007c30:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c32:	4b95      	ldr	r3, [pc, #596]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80e6 	beq.w	8007e16 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <HAL_RCC_OscConfig+0x4c>
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	2b0c      	cmp	r3, #12
 8007c54:	f040 808d 	bne.w	8007d72 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	f040 8089 	bne.w	8007d72 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c60:	4b89      	ldr	r3, [pc, #548]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d006      	beq.n	8007c7a <HAL_RCC_OscConfig+0x66>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	f000 bc26 	b.w	80084c6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c7e:	4b82      	ldr	r3, [pc, #520]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <HAL_RCC_OscConfig+0x80>
 8007c8a:	4b7f      	ldr	r3, [pc, #508]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c92:	e005      	b.n	8007ca0 <HAL_RCC_OscConfig+0x8c>
 8007c94:	4b7c      	ldr	r3, [pc, #496]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c9a:	091b      	lsrs	r3, r3, #4
 8007c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d224      	bcs.n	8007cee <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fdd9 	bl	8008860 <RCC_SetFlashLatencyFromMSIRange>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	f000 bc06 	b.w	80084c6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cba:	4b73      	ldr	r3, [pc, #460]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a72      	ldr	r2, [pc, #456]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cc0:	f043 0308 	orr.w	r3, r3, #8
 8007cc4:	6013      	str	r3, [r2, #0]
 8007cc6:	4b70      	ldr	r3, [pc, #448]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	496d      	ldr	r1, [pc, #436]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cd8:	4b6b      	ldr	r3, [pc, #428]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	4968      	ldr	r1, [pc, #416]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	604b      	str	r3, [r1, #4]
 8007cec:	e025      	b.n	8007d3a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cee:	4b66      	ldr	r3, [pc, #408]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a65      	ldr	r2, [pc, #404]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cf4:	f043 0308 	orr.w	r3, r3, #8
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4b63      	ldr	r3, [pc, #396]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	4960      	ldr	r1, [pc, #384]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d0c:	4b5e      	ldr	r3, [pc, #376]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	495b      	ldr	r1, [pc, #364]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d109      	bne.n	8007d3a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd98 	bl	8008860 <RCC_SetFlashLatencyFromMSIRange>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e3c5      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d3a:	f000 fccd 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	4b51      	ldr	r3, [pc, #324]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	091b      	lsrs	r3, r3, #4
 8007d46:	f003 030f 	and.w	r3, r3, #15
 8007d4a:	4950      	ldr	r1, [pc, #320]	; (8007e8c <HAL_RCC_OscConfig+0x278>)
 8007d4c:	5ccb      	ldrb	r3, [r1, r3]
 8007d4e:	f003 031f 	and.w	r3, r3, #31
 8007d52:	fa22 f303 	lsr.w	r3, r2, r3
 8007d56:	4a4e      	ldr	r2, [pc, #312]	; (8007e90 <HAL_RCC_OscConfig+0x27c>)
 8007d58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007d5a:	4b4e      	ldr	r3, [pc, #312]	; (8007e94 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe f8d0 	bl	8005f04 <HAL_InitTick>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007d68:	7dfb      	ldrb	r3, [r7, #23]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d052      	beq.n	8007e14 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	e3a9      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d032      	beq.n	8007de0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007d7a:	4b43      	ldr	r3, [pc, #268]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a42      	ldr	r2, [pc, #264]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d86:	f7fe f90d 	bl	8005fa4 <HAL_GetTick>
 8007d8a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d8e:	f7fe f909 	bl	8005fa4 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e392      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dac:	4b36      	ldr	r3, [pc, #216]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a35      	ldr	r2, [pc, #212]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007db2:	f043 0308 	orr.w	r3, r3, #8
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	4b33      	ldr	r3, [pc, #204]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	4930      	ldr	r1, [pc, #192]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dca:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	492b      	ldr	r1, [pc, #172]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	604b      	str	r3, [r1, #4]
 8007dde:	e01a      	b.n	8007e16 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007de0:	4b29      	ldr	r3, [pc, #164]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a28      	ldr	r2, [pc, #160]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007de6:	f023 0301 	bic.w	r3, r3, #1
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007dec:	f7fe f8da 	bl	8005fa4 <HAL_GetTick>
 8007df0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007df4:	f7fe f8d6 	bl	8005fa4 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e35f      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e06:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f0      	bne.n	8007df4 <HAL_RCC_OscConfig+0x1e0>
 8007e12:	e000      	b.n	8007e16 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d073      	beq.n	8007f0a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d005      	beq.n	8007e34 <HAL_RCC_OscConfig+0x220>
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	2b0c      	cmp	r3, #12
 8007e2c:	d10e      	bne.n	8007e4c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d10b      	bne.n	8007e4c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e34:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d063      	beq.n	8007f08 <HAL_RCC_OscConfig+0x2f4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d15f      	bne.n	8007f08 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e33c      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e54:	d106      	bne.n	8007e64 <HAL_RCC_OscConfig+0x250>
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a0b      	ldr	r2, [pc, #44]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	e025      	b.n	8007eb0 <HAL_RCC_OscConfig+0x29c>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e6c:	d114      	bne.n	8007e98 <HAL_RCC_OscConfig+0x284>
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a05      	ldr	r2, [pc, #20]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a02      	ldr	r2, [pc, #8]	; (8007e88 <HAL_RCC_OscConfig+0x274>)
 8007e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e013      	b.n	8007eb0 <HAL_RCC_OscConfig+0x29c>
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	08013fe0 	.word	0x08013fe0
 8007e90:	20000000 	.word	0x20000000
 8007e94:	20000008 	.word	0x20000008
 8007e98:	4b8f      	ldr	r3, [pc, #572]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a8e      	ldr	r2, [pc, #568]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	4b8c      	ldr	r3, [pc, #560]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a8b      	ldr	r2, [pc, #556]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d013      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fe f874 	bl	8005fa4 <HAL_GetTick>
 8007ebc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ec0:	f7fe f870 	bl	8005fa4 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b64      	cmp	r3, #100	; 0x64
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e2f9      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ed2:	4b81      	ldr	r3, [pc, #516]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x2ac>
 8007ede:	e014      	b.n	8007f0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee0:	f7fe f860 	bl	8005fa4 <HAL_GetTick>
 8007ee4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee8:	f7fe f85c 	bl	8005fa4 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b64      	cmp	r3, #100	; 0x64
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e2e5      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007efa:	4b77      	ldr	r3, [pc, #476]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x2d4>
 8007f06:	e000      	b.n	8007f0a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d060      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d005      	beq.n	8007f28 <HAL_RCC_OscConfig+0x314>
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	2b0c      	cmp	r3, #12
 8007f20:	d119      	bne.n	8007f56 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d116      	bne.n	8007f56 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f28:	4b6b      	ldr	r3, [pc, #428]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_RCC_OscConfig+0x32c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e2c2      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f40:	4b65      	ldr	r3, [pc, #404]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	061b      	lsls	r3, r3, #24
 8007f4e:	4962      	ldr	r1, [pc, #392]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f54:	e040      	b.n	8007fd8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d023      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f5e:	4b5e      	ldr	r3, [pc, #376]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a5d      	ldr	r2, [pc, #372]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6a:	f7fe f81b 	bl	8005fa4 <HAL_GetTick>
 8007f6e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f72:	f7fe f817 	bl	8005fa4 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e2a0      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f84:	4b54      	ldr	r3, [pc, #336]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f0      	beq.n	8007f72 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f90:	4b51      	ldr	r3, [pc, #324]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	061b      	lsls	r3, r3, #24
 8007f9e:	494e      	ldr	r1, [pc, #312]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	e018      	b.n	8007fd8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fa6:	4b4c      	ldr	r3, [pc, #304]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a4b      	ldr	r2, [pc, #300]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb2:	f7fd fff7 	bl	8005fa4 <HAL_GetTick>
 8007fb6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fba:	f7fd fff3 	bl	8005fa4 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e27c      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fcc:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f0      	bne.n	8007fba <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8082 	beq.w	80080ea <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d05f      	beq.n	80080ae <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007fee:	4b3a      	ldr	r3, [pc, #232]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8007ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ff4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699a      	ldr	r2, [r3, #24]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	429a      	cmp	r2, r3
 8008002:	d037      	beq.n	8008074 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e254      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01b      	beq.n	800805e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8008026:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8008028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800802c:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 800802e:	f023 0301 	bic.w	r3, r3, #1
 8008032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008036:	f7fd ffb5 	bl	8005fa4 <HAL_GetTick>
 800803a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800803e:	f7fd ffb1 	bl	8005fa4 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b11      	cmp	r3, #17
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e23a      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008050:	4b21      	ldr	r3, [pc, #132]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8008052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1ef      	bne.n	800803e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800805e:	4b1e      	ldr	r3, [pc, #120]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8008060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008064:	f023 0210 	bic.w	r2, r3, #16
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	491a      	ldr	r1, [pc, #104]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008074:	4b18      	ldr	r3, [pc, #96]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 8008076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800807a:	4a17      	ldr	r2, [pc, #92]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008084:	f7fd ff8e 	bl	8005fa4 <HAL_GetTick>
 8008088:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800808c:	f7fd ff8a 	bl	8005fa4 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b11      	cmp	r3, #17
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e213      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800809e:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 80080a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0ef      	beq.n	800808c <HAL_RCC_OscConfig+0x478>
 80080ac:	e01d      	b.n	80080ea <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 80080b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b4:	4a08      	ldr	r2, [pc, #32]	; (80080d8 <HAL_RCC_OscConfig+0x4c4>)
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080be:	f7fd ff71 	bl	8005fa4 <HAL_GetTick>
 80080c2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080c4:	e00a      	b.n	80080dc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c6:	f7fd ff6d 	bl	8005fa4 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b11      	cmp	r3, #17
 80080d2:	d903      	bls.n	80080dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e1f6      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
 80080d8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080dc:	4ba9      	ldr	r3, [pc, #676]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80080de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1ed      	bne.n	80080c6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80bd 	beq.w	8008272 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80080fe:	4ba1      	ldr	r3, [pc, #644]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10e      	bne.n	8008128 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800810a:	4b9e      	ldr	r3, [pc, #632]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 800810c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800810e:	4a9d      	ldr	r2, [pc, #628]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008114:	6593      	str	r3, [r2, #88]	; 0x58
 8008116:	4b9b      	ldr	r3, [pc, #620]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008128:	4b97      	ldr	r3, [pc, #604]	; (8008388 <HAL_RCC_OscConfig+0x774>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d118      	bne.n	8008166 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008134:	4b94      	ldr	r3, [pc, #592]	; (8008388 <HAL_RCC_OscConfig+0x774>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a93      	ldr	r2, [pc, #588]	; (8008388 <HAL_RCC_OscConfig+0x774>)
 800813a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008140:	f7fd ff30 	bl	8005fa4 <HAL_GetTick>
 8008144:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008148:	f7fd ff2c 	bl	8005fa4 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e1b5      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800815a:	4b8b      	ldr	r3, [pc, #556]	; (8008388 <HAL_RCC_OscConfig+0x774>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d02c      	beq.n	80081cc <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8008172:	4b84      	ldr	r3, [pc, #528]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008184:	497f      	ldr	r1, [pc, #508]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008186:	4313      	orrs	r3, r2
 8008188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d010      	beq.n	80081ba <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008198:	4b7a      	ldr	r3, [pc, #488]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	4a79      	ldr	r2, [pc, #484]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081a0:	f043 0304 	orr.w	r3, r3, #4
 80081a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081a8:	4b76      	ldr	r3, [pc, #472]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ae:	4a75      	ldr	r2, [pc, #468]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081b0:	f043 0301 	orr.w	r3, r3, #1
 80081b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081b8:	e018      	b.n	80081ec <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081ba:	4b72      	ldr	r3, [pc, #456]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c0:	4a70      	ldr	r2, [pc, #448]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081ca:	e00f      	b.n	80081ec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081cc:	4b6d      	ldr	r3, [pc, #436]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d2:	4a6c      	ldr	r2, [pc, #432]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081d4:	f023 0301 	bic.w	r3, r3, #1
 80081d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80081dc:	4b69      	ldr	r3, [pc, #420]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e2:	4a68      	ldr	r2, [pc, #416]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d016      	beq.n	8008222 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f4:	f7fd fed6 	bl	8005fa4 <HAL_GetTick>
 80081f8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081fa:	e00a      	b.n	8008212 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fc:	f7fd fed2 	bl	8005fa4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	f241 3288 	movw	r2, #5000	; 0x1388
 800820a:	4293      	cmp	r3, r2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e159      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008212:	4b5c      	ldr	r3, [pc, #368]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0ed      	beq.n	80081fc <HAL_RCC_OscConfig+0x5e8>
 8008220:	e01d      	b.n	800825e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008222:	f7fd febf 	bl	8005fa4 <HAL_GetTick>
 8008226:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008228:	e00a      	b.n	8008240 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822a:	f7fd febb 	bl	8005fa4 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f241 3288 	movw	r2, #5000	; 0x1388
 8008238:	4293      	cmp	r3, r2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e142      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008240:	4b50      	ldr	r3, [pc, #320]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1ed      	bne.n	800822a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800824e:	4b4d      	ldr	r3, [pc, #308]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008254:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800825a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800825e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008262:	2b01      	cmp	r3, #1
 8008264:	d105      	bne.n	8008272 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008266:	4b47      	ldr	r3, [pc, #284]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	4a46      	ldr	r2, [pc, #280]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 800826c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008270:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d03c      	beq.n	80082f8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d01c      	beq.n	80082c0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008286:	4b3f      	ldr	r3, [pc, #252]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800828c:	4a3d      	ldr	r2, [pc, #244]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008296:	f7fd fe85 	bl	8005fa4 <HAL_GetTick>
 800829a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800829c:	e008      	b.n	80082b0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800829e:	f7fd fe81 	bl	8005fa4 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e10a      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082b0:	4b34      	ldr	r3, [pc, #208]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80082b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0ef      	beq.n	800829e <HAL_RCC_OscConfig+0x68a>
 80082be:	e01b      	b.n	80082f8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082c0:	4b30      	ldr	r3, [pc, #192]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80082c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082c6:	4a2f      	ldr	r2, [pc, #188]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80082c8:	f023 0301 	bic.w	r3, r3, #1
 80082cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d0:	f7fd fe68 	bl	8005fa4 <HAL_GetTick>
 80082d4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082d6:	e008      	b.n	80082ea <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082d8:	f7fd fe64 	bl	8005fa4 <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d901      	bls.n	80082ea <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e0ed      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082ea:	4b26      	ldr	r3, [pc, #152]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 80082ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1ef      	bne.n	80082d8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 80e1 	beq.w	80084c4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	2b02      	cmp	r3, #2
 8008308:	f040 80b5 	bne.w	8008476 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800830c:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	f003 0203 	and.w	r2, r3, #3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831c:	429a      	cmp	r2, r3
 800831e:	d124      	bne.n	800836a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	3b01      	subs	r3, #1
 800832c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800832e:	429a      	cmp	r2, r3
 8008330:	d11b      	bne.n	800836a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d113      	bne.n	800836a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	3b01      	subs	r3, #1
 8008350:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008352:	429a      	cmp	r2, r3
 8008354:	d109      	bne.n	800836a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d05f      	beq.n	800842a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	2b0c      	cmp	r3, #12
 800836e:	d05a      	beq.n	8008426 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a03      	ldr	r2, [pc, #12]	; (8008384 <HAL_RCC_OscConfig+0x770>)
 8008376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800837a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800837c:	f7fd fe12 	bl	8005fa4 <HAL_GetTick>
 8008380:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008382:	e00c      	b.n	800839e <HAL_RCC_OscConfig+0x78a>
 8008384:	40021000 	.word	0x40021000
 8008388:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800838c:	f7fd fe0a 	bl	8005fa4 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e093      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800839e:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f0      	bne.n	800838c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083aa:	4b49      	ldr	r3, [pc, #292]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b49      	ldr	r3, [pc, #292]	; (80084d4 <HAL_RCC_OscConfig+0x8c0>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083ba:	3a01      	subs	r2, #1
 80083bc:	0112      	lsls	r2, r2, #4
 80083be:	4311      	orrs	r1, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083c4:	0212      	lsls	r2, r2, #8
 80083c6:	4311      	orrs	r1, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083cc:	0852      	lsrs	r2, r2, #1
 80083ce:	3a01      	subs	r2, #1
 80083d0:	0552      	lsls	r2, r2, #21
 80083d2:	4311      	orrs	r1, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083d8:	0852      	lsrs	r2, r2, #1
 80083da:	3a01      	subs	r2, #1
 80083dc:	0652      	lsls	r2, r2, #25
 80083de:	430a      	orrs	r2, r1
 80083e0:	493b      	ldr	r1, [pc, #236]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80083e6:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a39      	ldr	r2, [pc, #228]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083f0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083f2:	4b37      	ldr	r3, [pc, #220]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	4a36      	ldr	r2, [pc, #216]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80083f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083fc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083fe:	f7fd fdd1 	bl	8005fa4 <HAL_GetTick>
 8008402:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008404:	e008      	b.n	8008418 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008406:	f7fd fdcd 	bl	8005fa4 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d901      	bls.n	8008418 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8008414:	2303      	movs	r3, #3
 8008416:	e056      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008418:	4b2d      	ldr	r3, [pc, #180]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d0f0      	beq.n	8008406 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008424:	e04e      	b.n	80084c4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e04d      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800842a:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d146      	bne.n	80084c4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008436:	4b26      	ldr	r3, [pc, #152]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a25      	ldr	r2, [pc, #148]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 800843c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008440:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008442:	4b23      	ldr	r3, [pc, #140]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	4a22      	ldr	r2, [pc, #136]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 8008448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800844c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800844e:	f7fd fda9 	bl	8005fa4 <HAL_GetTick>
 8008452:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008456:	f7fd fda5 	bl	8005fa4 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e02e      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008468:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0f0      	beq.n	8008456 <HAL_RCC_OscConfig+0x842>
 8008474:	e026      	b.n	80084c4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	2b0c      	cmp	r3, #12
 800847a:	d021      	beq.n	80084c0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800847c:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 8008482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008488:	f7fd fd8c 	bl	8005fa4 <HAL_GetTick>
 800848c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800848e:	e008      	b.n	80084a2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008490:	f7fd fd88 	bl	8005fa4 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b02      	cmp	r3, #2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e011      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a2:	4b0b      	ldr	r3, [pc, #44]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f0      	bne.n	8008490 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80084ae:	4b08      	ldr	r3, [pc, #32]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	4a07      	ldr	r2, [pc, #28]	; (80084d0 <HAL_RCC_OscConfig+0x8bc>)
 80084b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	60d3      	str	r3, [r2, #12]
 80084be:	e001      	b.n	80084c4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3728      	adds	r7, #40	; 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	40021000 	.word	0x40021000
 80084d4:	f99f808c 	.word	0xf99f808c

080084d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0e7      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084ec:	4b75      	ldr	r3, [pc, #468]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d910      	bls.n	800851c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fa:	4b72      	ldr	r3, [pc, #456]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 0207 	bic.w	r2, r3, #7
 8008502:	4970      	ldr	r1, [pc, #448]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b6e      	ldr	r3, [pc, #440]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0cf      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d010      	beq.n	800854a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	4b66      	ldr	r3, [pc, #408]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008534:	429a      	cmp	r2, r3
 8008536:	d908      	bls.n	800854a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008538:	4b63      	ldr	r3, [pc, #396]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4960      	ldr	r1, [pc, #384]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008546:	4313      	orrs	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d04c      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b03      	cmp	r3, #3
 800855c:	d107      	bne.n	800856e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800855e:	4b5a      	ldr	r3, [pc, #360]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d121      	bne.n	80085ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e0a6      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d107      	bne.n	8008586 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008576:	4b54      	ldr	r3, [pc, #336]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d115      	bne.n	80085ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e09a      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800858e:	4b4e      	ldr	r3, [pc, #312]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e08e      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800859e:	4b4a      	ldr	r3, [pc, #296]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e086      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085ae:	4b46      	ldr	r3, [pc, #280]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f023 0203 	bic.w	r2, r3, #3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4943      	ldr	r1, [pc, #268]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085c0:	f7fd fcf0 	bl	8005fa4 <HAL_GetTick>
 80085c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085c6:	e00a      	b.n	80085de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085c8:	f7fd fcec 	bl	8005fa4 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e06e      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085de:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 020c 	and.w	r2, r3, #12
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d1eb      	bne.n	80085c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d010      	beq.n	800861e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	4b31      	ldr	r3, [pc, #196]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008608:	429a      	cmp	r2, r3
 800860a:	d208      	bcs.n	800861e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800860c:	4b2e      	ldr	r3, [pc, #184]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	492b      	ldr	r1, [pc, #172]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800861a:	4313      	orrs	r3, r2
 800861c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800861e:	4b29      	ldr	r3, [pc, #164]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0307 	and.w	r3, r3, #7
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d210      	bcs.n	800864e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 0207 	bic.w	r2, r3, #7
 8008634:	4923      	ldr	r1, [pc, #140]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	4313      	orrs	r3, r2
 800863a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800863c:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <HAL_RCC_ClockConfig+0x1ec>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d001      	beq.n	800864e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e036      	b.n	80086bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4918      	ldr	r1, [pc, #96]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008668:	4313      	orrs	r3, r2
 800866a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	4910      	ldr	r1, [pc, #64]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008688:	4313      	orrs	r3, r2
 800868a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800868c:	f000 f824 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8008690:	4602      	mov	r2, r0
 8008692:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <HAL_RCC_ClockConfig+0x1f0>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	091b      	lsrs	r3, r3, #4
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	490b      	ldr	r1, [pc, #44]	; (80086cc <HAL_RCC_ClockConfig+0x1f4>)
 800869e:	5ccb      	ldrb	r3, [r1, r3]
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
 80086a8:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <HAL_RCC_ClockConfig+0x1f8>)
 80086aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <HAL_RCC_ClockConfig+0x1fc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fd fc27 	bl	8005f04 <HAL_InitTick>
 80086b6:	4603      	mov	r3, r0
 80086b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80086ba:	7afb      	ldrb	r3, [r7, #11]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40022000 	.word	0x40022000
 80086c8:	40021000 	.word	0x40021000
 80086cc:	08013fe0 	.word	0x08013fe0
 80086d0:	20000000 	.word	0x20000000
 80086d4:	20000008 	.word	0x20000008

080086d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d8:	b480      	push	{r7}
 80086da:	b089      	sub	sp, #36	; 0x24
 80086dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	2300      	movs	r3, #0
 80086e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e6:	4b3e      	ldr	r3, [pc, #248]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086f0:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <HAL_RCC_GetSysClockFreq+0x34>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b0c      	cmp	r3, #12
 8008704:	d121      	bne.n	800874a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d11e      	bne.n	800874a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800870c:	4b34      	ldr	r3, [pc, #208]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d107      	bne.n	8008728 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008718:	4b31      	ldr	r3, [pc, #196]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800871a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800871e:	0a1b      	lsrs	r3, r3, #8
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	e005      	b.n	8008734 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008728:	4b2d      	ldr	r3, [pc, #180]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008734:	4a2b      	ldr	r2, [pc, #172]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10d      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008748:	e00a      	b.n	8008760 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b04      	cmp	r3, #4
 800874e:	d102      	bne.n	8008756 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008750:	4b25      	ldr	r3, [pc, #148]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	e004      	b.n	8008760 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	2b08      	cmp	r3, #8
 800875a:	d101      	bne.n	8008760 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800875c:	4b23      	ldr	r3, [pc, #140]	; (80087ec <HAL_RCC_GetSysClockFreq+0x114>)
 800875e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b0c      	cmp	r3, #12
 8008764:	d134      	bne.n	80087d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008766:	4b1e      	ldr	r3, [pc, #120]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d003      	beq.n	800877e <HAL_RCC_GetSysClockFreq+0xa6>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b03      	cmp	r3, #3
 800877a:	d003      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0xac>
 800877c:	e005      	b.n	800878a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800877e:	4b1a      	ldr	r3, [pc, #104]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8008780:	617b      	str	r3, [r7, #20]
      break;
 8008782:	e005      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008784:	4b19      	ldr	r3, [pc, #100]	; (80087ec <HAL_RCC_GetSysClockFreq+0x114>)
 8008786:	617b      	str	r3, [r7, #20]
      break;
 8008788:	e002      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	617b      	str	r3, [r7, #20]
      break;
 800878e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008790:	4b13      	ldr	r3, [pc, #76]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	091b      	lsrs	r3, r3, #4
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	3301      	adds	r3, #1
 800879c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800879e:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	0a1b      	lsrs	r3, r3, #8
 80087a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	fb03 f202 	mul.w	r2, r3, r2
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087b6:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	0e5b      	lsrs	r3, r3, #25
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	3301      	adds	r3, #1
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80087d0:	69bb      	ldr	r3, [r7, #24]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3724      	adds	r7, #36	; 0x24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40021000 	.word	0x40021000
 80087e4:	08013ff8 	.word	0x08013ff8
 80087e8:	00f42400 	.word	0x00f42400
 80087ec:	007a1200 	.word	0x007a1200

080087f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f4:	4b03      	ldr	r3, [pc, #12]	; (8008804 <HAL_RCC_GetHCLKFreq+0x14>)
 80087f6:	681b      	ldr	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000000 	.word	0x20000000

08008808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800880c:	f7ff fff0 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 8008810:	4602      	mov	r2, r0
 8008812:	4b06      	ldr	r3, [pc, #24]	; (800882c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	0a1b      	lsrs	r3, r3, #8
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	4904      	ldr	r1, [pc, #16]	; (8008830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800881e:	5ccb      	ldrb	r3, [r1, r3]
 8008820:	f003 031f 	and.w	r3, r3, #31
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008828:	4618      	mov	r0, r3
 800882a:	bd80      	pop	{r7, pc}
 800882c:	40021000 	.word	0x40021000
 8008830:	08013ff0 	.word	0x08013ff0

08008834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008838:	f7ff ffda 	bl	80087f0 <HAL_RCC_GetHCLKFreq>
 800883c:	4602      	mov	r2, r0
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	0adb      	lsrs	r3, r3, #11
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	4904      	ldr	r1, [pc, #16]	; (800885c <HAL_RCC_GetPCLK2Freq+0x28>)
 800884a:	5ccb      	ldrb	r3, [r1, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008854:	4618      	mov	r0, r3
 8008856:	bd80      	pop	{r7, pc}
 8008858:	40021000 	.word	0x40021000
 800885c:	08013ff0 	.word	0x08013ff0

08008860 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008868:	2300      	movs	r3, #0
 800886a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800886c:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800886e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008878:	f7ff f94e 	bl	8007b18 <HAL_PWREx_GetVoltageRange>
 800887c:	6178      	str	r0, [r7, #20]
 800887e:	e014      	b.n	80088aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008884:	4a24      	ldr	r2, [pc, #144]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800888a:	6593      	str	r3, [r2, #88]	; 0x58
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008898:	f7ff f93e 	bl	8007b18 <HAL_PWREx_GetVoltageRange>
 800889c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800889e:	4b1e      	ldr	r3, [pc, #120]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	4a1d      	ldr	r2, [pc, #116]	; (8008918 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088b0:	d10b      	bne.n	80088ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b80      	cmp	r3, #128	; 0x80
 80088b6:	d919      	bls.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2ba0      	cmp	r3, #160	; 0xa0
 80088bc:	d902      	bls.n	80088c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088be:	2302      	movs	r3, #2
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	e013      	b.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088c4:	2301      	movs	r3, #1
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	e010      	b.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b80      	cmp	r3, #128	; 0x80
 80088ce:	d902      	bls.n	80088d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80088d0:	2303      	movs	r3, #3
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	e00a      	b.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d102      	bne.n	80088e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088dc:	2302      	movs	r3, #2
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e004      	b.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b70      	cmp	r3, #112	; 0x70
 80088e6:	d101      	bne.n	80088ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088e8:	2301      	movs	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088ec:	4b0b      	ldr	r3, [pc, #44]	; (800891c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f023 0207 	bic.w	r2, r3, #7
 80088f4:	4909      	ldr	r1, [pc, #36]	; (800891c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d001      	beq.n	800890e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	40021000 	.word	0x40021000
 800891c:	40022000 	.word	0x40022000

08008920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008928:	2300      	movs	r3, #0
 800892a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800892c:	2300      	movs	r3, #0
 800892e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 809e 	beq.w	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800893e:	2300      	movs	r3, #0
 8008940:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008942:	4b46      	ldr	r3, [pc, #280]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00d      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008958:	4b40      	ldr	r3, [pc, #256]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	4a3f      	ldr	r2, [pc, #252]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800895e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008962:	6593      	str	r3, [r2, #88]	; 0x58
 8008964:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896c:	60bb      	str	r3, [r7, #8]
 800896e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008970:	2301      	movs	r3, #1
 8008972:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008974:	4b3a      	ldr	r3, [pc, #232]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a39      	ldr	r2, [pc, #228]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800897a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800897e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008980:	f7fd fb10 	bl	8005fa4 <HAL_GetTick>
 8008984:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008986:	e009      	b.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008988:	f7fd fb0c 	bl	8005fa4 <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	2b02      	cmp	r3, #2
 8008994:	d902      	bls.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	74fb      	strb	r3, [r7, #19]
        break;
 800899a:	e005      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800899c:	4b30      	ldr	r3, [pc, #192]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d0ef      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80089a8:	7cfb      	ldrb	r3, [r7, #19]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d15a      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089ae:	4b2b      	ldr	r3, [pc, #172]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01e      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d019      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80089ca:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089d6:	4b21      	ldr	r3, [pc, #132]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089dc:	4a1f      	ldr	r2, [pc, #124]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089e6:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ec:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80089f6:	4a19      	ldr	r2, [pc, #100]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d016      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a08:	f7fd facc 	bl	8005fa4 <HAL_GetTick>
 8008a0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a0e:	e00b      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a10:	f7fd fac8 	bl	8005fa4 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d902      	bls.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	74fb      	strb	r3, [r7, #19]
            break;
 8008a26:	e006      	b.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ec      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8008a36:	7cfb      	ldrb	r3, [r7, #19]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10b      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a3c:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	4904      	ldr	r1, [pc, #16]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008a52:	e009      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a54:	7cfb      	ldrb	r3, [r7, #19]
 8008a56:	74bb      	strb	r3, [r7, #18]
 8008a58:	e006      	b.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008a5a:	bf00      	nop
 8008a5c:	40021000 	.word	0x40021000
 8008a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a64:	7cfb      	ldrb	r3, [r7, #19]
 8008a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a68:	7c7b      	ldrb	r3, [r7, #17]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d105      	bne.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a6e:	4b6e      	ldr	r3, [pc, #440]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a72:	4a6d      	ldr	r2, [pc, #436]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a86:	4b68      	ldr	r3, [pc, #416]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8c:	f023 0203 	bic.w	r2, r3, #3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4964      	ldr	r1, [pc, #400]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008aa8:	4b5f      	ldr	r3, [pc, #380]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aae:	f023 020c 	bic.w	r2, r3, #12
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	495c      	ldr	r1, [pc, #368]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008aca:	4b57      	ldr	r3, [pc, #348]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4953      	ldr	r1, [pc, #332]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008aec:	4b4e      	ldr	r3, [pc, #312]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	494b      	ldr	r1, [pc, #300]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b0e:	4b46      	ldr	r3, [pc, #280]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	4942      	ldr	r1, [pc, #264]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b30:	4b3d      	ldr	r3, [pc, #244]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	493a      	ldr	r1, [pc, #232]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b52:	4b35      	ldr	r3, [pc, #212]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	4931      	ldr	r1, [pc, #196]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b74:	4b2c      	ldr	r3, [pc, #176]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	4929      	ldr	r1, [pc, #164]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b96:	4b24      	ldr	r3, [pc, #144]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	4920      	ldr	r1, [pc, #128]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d015      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bb8:	4b1b      	ldr	r3, [pc, #108]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	4918      	ldr	r1, [pc, #96]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bd6:	d105      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bd8:	4b13      	ldr	r3, [pc, #76]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	4a12      	ldr	r2, [pc, #72]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d015      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	490a      	ldr	r1, [pc, #40]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c0e:	d105      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	4a04      	ldr	r2, [pc, #16]	; (8008c28 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008c1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	40021000 	.word	0x40021000

08008c2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008c30:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a04      	ldr	r2, [pc, #16]	; (8008c48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008c36:	f043 0304 	orr.w	r3, r3, #4
 8008c3a:	6013      	str	r3, [r2, #0]
}
 8008c3c:	bf00      	nop
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40021000 	.word	0x40021000

08008c4c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e049      	b.n	8008cf2 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	795b      	ldrb	r3, [r3, #5]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d105      	bne.n	8008c74 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7fb fc40 	bl	80044f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f042 0204 	orr.w	r2, r2, #4
 8008c88:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	d104      	bne.n	8008ca2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e027      	b.n	8008cf2 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008ca2:	f7fd f97f 	bl	8005fa4 <HAL_GetTick>
 8008ca6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008ca8:	e015      	b.n	8008cd6 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008caa:	f7fd f97b 	bl	8005fa4 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d90e      	bls.n	8008cd6 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f003 0304 	and.w	r3, r3, #4
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d107      	bne.n	8008cd6 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e00d      	b.n	8008cf2 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d0e2      	beq.n	8008caa <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_RNG_GenerateRandomNumber+0x1a>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e03d      	b.n	8008d90 <HAL_RNG_GenerateRandomNumber+0x96>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	795b      	ldrb	r3, [r3, #5]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d12c      	bne.n	8008d7e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d2a:	f7fd f93b 	bl	8005fa4 <HAL_GetTick>
 8008d2e:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d30:	e011      	b.n	8008d56 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d32:	f7fd f937 	bl	8005fa4 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d90a      	bls.n	8008d56 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e01c      	b.n	8008d90 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d1e6      	bne.n	8008d32 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	715a      	strb	r2, [r3, #5]
 8008d7c:	e004      	b.n	8008d88 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2204      	movs	r2, #4
 8008d82:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	711a      	strb	r2, [r3, #4]

  return status;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d073      	beq.n	8008e92 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fb fbcc 	bl	800455c <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8008dca:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	22ca      	movs	r2, #202	; 0xca
 8008dda:	625a      	str	r2, [r3, #36]	; 0x24
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2253      	movs	r2, #83	; 0x53
 8008de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb75 	bl	80094d4 <RTC_EnterInitMode>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d14e      	bne.n	8008e92 <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6812      	ldr	r2, [r2, #0]
 8008dfe:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e06:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6999      	ldr	r1, [r3, #24]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6912      	ldr	r2, [r2, #16]
 8008e2e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6919      	ldr	r1, [r3, #16]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	041a      	lsls	r2, r3, #16
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	430a      	orrs	r2, r1
 8008e42:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fb7b 	bl	8009540 <RTC_ExitInitMode>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d11e      	bne.n	8008e92 <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699a      	ldr	r2, [r3, #24]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8008e62:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6999      	ldr	r1, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	22ff      	movs	r2, #255	; 0xff
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d101      	bne.n	8008eb6 <HAL_RTC_SetTime+0x1a>
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	e08b      	b.n	8008fce <HAL_RTC_SetTime+0x132>
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	22ca      	movs	r2, #202	; 0xca
 8008ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2253      	movs	r2, #83	; 0x53
 8008ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fafc 	bl	80094d4 <RTC_EnterInitMode>
 8008edc:	4603      	mov	r3, r0
 8008ede:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d163      	bne.n	8008fae <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d126      	bne.n	8008f3a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2200      	movs	r2, #0
 8008efe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fb59 	bl	80095bc <RTC_ByteToBcd2>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	785b      	ldrb	r3, [r3, #1]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 fb52 	bl	80095bc <RTC_ByteToBcd2>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f1c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fb4a 	bl	80095bc <RTC_ByteToBcd2>
 8008f28:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f2a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	78db      	ldrb	r3, [r3, #3]
 8008f32:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e018      	b.n	8008f6c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d102      	bne.n	8008f4e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	785b      	ldrb	r3, [r3, #1]
 8008f58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008f60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008f76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008f7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	699a      	ldr	r2, [r3, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f8a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6999      	ldr	r1, [r3, #24]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 facb 	bl	8009540 <RTC_ExitInitMode>
 8008faa:	4603      	mov	r3, r0
 8008fac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	22ff      	movs	r2, #255	; 0xff
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008fb6:	7cfb      	ldrb	r3, [r7, #19]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8008fcc:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd90      	pop	{r4, r7, pc}

08008fd6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009004:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009008:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	0c1b      	lsrs	r3, r3, #16
 800900e:	b2db      	uxtb	r3, r3
 8009010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009014:	b2da      	uxtb	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	b2da      	uxtb	r2, r3
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009032:	b2da      	uxtb	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	0d9b      	lsrs	r3, r3, #22
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	b2da      	uxtb	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d11a      	bne.n	8009084 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fad2 	bl	80095fc <RTC_Bcd2ToByte>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	785b      	ldrb	r3, [r3, #1]
 8009064:	4618      	mov	r0, r3
 8009066:	f000 fac9 	bl	80095fc <RTC_Bcd2ToByte>
 800906a:	4603      	mov	r3, r0
 800906c:	461a      	mov	r2, r3
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	789b      	ldrb	r3, [r3, #2]
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fac0 	bl	80095fc <RTC_Bcd2ToByte>
 800907c:	4603      	mov	r3, r0
 800907e:	461a      	mov	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800908e:	b590      	push	{r4, r7, lr}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_RTC_SetDate+0x1a>
 80090a4:	2302      	movs	r3, #2
 80090a6:	e075      	b.n	8009194 <HAL_RTC_SetDate+0x106>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10e      	bne.n	80090dc <HAL_RTC_SetDate+0x4e>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	785b      	ldrb	r3, [r3, #1]
 80090c2:	f003 0310 	and.w	r3, r3, #16
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	f023 0310 	bic.w	r3, r3, #16
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	330a      	adds	r3, #10
 80090d6:	b2da      	uxtb	r2, r3
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d11c      	bne.n	800911c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fa68 	bl	80095bc <RTC_ByteToBcd2>
 80090ec:	4603      	mov	r3, r0
 80090ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 fa61 	bl	80095bc <RTC_ByteToBcd2>
 80090fa:	4603      	mov	r3, r0
 80090fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80090fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	789b      	ldrb	r3, [r3, #2]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fa59 	bl	80095bc <RTC_ByteToBcd2>
 800910a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800910c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
 800911a:	e00e      	b.n	800913a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	78db      	ldrb	r3, [r3, #3]
 8009120:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	785b      	ldrb	r3, [r3, #1]
 8009126:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009128:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800912e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	22ca      	movs	r2, #202	; 0xca
 8009140:	625a      	str	r2, [r3, #36]	; 0x24
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2253      	movs	r2, #83	; 0x53
 8009148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f9c2 	bl	80094d4 <RTC_EnterInitMode>
 8009150:	4603      	mov	r3, r0
 8009152:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009154:	7cfb      	ldrb	r3, [r7, #19]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10c      	bne.n	8009174 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009164:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009168:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 f9e8 	bl	8009540 <RTC_ExitInitMode>
 8009170:	4603      	mov	r3, r0
 8009172:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	22ff      	movs	r2, #255	; 0xff
 800917a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800917c:	7cfb      	ldrb	r3, [r7, #19]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8009192:	7cfb      	ldrb	r3, [r7, #19]
}
 8009194:	4618      	mov	r0, r3
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	0a1b      	lsrs	r3, r3, #8
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 031f 	and.w	r3, r3, #31
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	0b5b      	lsrs	r3, r3, #13
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	f003 0307 	and.w	r3, r3, #7
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d11a      	bne.n	800922c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 f9fe 	bl	80095fc <RTC_Bcd2ToByte>
 8009200:	4603      	mov	r3, r0
 8009202:	461a      	mov	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f9f5 	bl	80095fc <RTC_Bcd2ToByte>
 8009212:	4603      	mov	r3, r0
 8009214:	461a      	mov	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	789b      	ldrb	r3, [r3, #2]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f9ec 	bl	80095fc <RTC_Bcd2ToByte>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009238:	b590      	push	{r4, r7, lr}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_RTC_SetAlarm_IT+0x1a>
 800924e:	2302      	movs	r3, #2
 8009250:	e0db      	b.n	800940a <HAL_RTC_SetAlarm_IT+0x1d2>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d137      	bne.n	80092d8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2200      	movs	r2, #0
 800927a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	4618      	mov	r0, r3
 8009282:	f000 f99b 	bl	80095bc <RTC_ByteToBcd2>
 8009286:	4603      	mov	r3, r0
 8009288:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	785b      	ldrb	r3, [r3, #1]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 f994 	bl	80095bc <RTC_ByteToBcd2>
 8009294:	4603      	mov	r3, r0
 8009296:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009298:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	789b      	ldrb	r3, [r3, #2]
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 f98c 	bl	80095bc <RTC_ByteToBcd2>
 80092a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80092a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	78db      	ldrb	r3, [r3, #3]
 80092ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80092b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 f97e 	bl	80095bc <RTC_ByteToBcd2>
 80092c0:	4603      	mov	r3, r0
 80092c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80092c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80092cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80092d2:	4313      	orrs	r3, r2
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e023      	b.n	8009320 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d102      	bne.n	80092ec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2200      	movs	r2, #0
 80092ea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	785b      	ldrb	r3, [r3, #1]
 80092f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80092f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80092fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	78db      	ldrb	r3, [r3, #3]
 8009304:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009306:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800930e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009310:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009316:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800931c:	4313      	orrs	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	22ca      	movs	r2, #202	; 0xca
 8009332:	625a      	str	r2, [r3, #36]	; 0x24
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2253      	movs	r2, #83	; 0x53
 800933a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009344:	d124      	bne.n	8009390 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699a      	ldr	r2, [r3, #24]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009354:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2201      	movs	r2, #1
 800935c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800937c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	699a      	ldr	r2, [r3, #24]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800938c:	619a      	str	r2, [r3, #24]
 800938e:	e023      	b.n	80093d8 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800939e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2202      	movs	r2, #2
 80093a6:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	699a      	ldr	r2, [r3, #24]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093d6:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80093d8:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a0d      	ldr	r2, [pc, #52]	; (8009414 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80093de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093e2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <HAL_RTC_SetAlarm_IT+0x1dc>)
 80093ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	bd90      	pop	{r4, r7, pc}
 8009412:	bf00      	nop
 8009414:	40010400 	.word	0x40010400

08009418 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009420:	4b13      	ldr	r3, [pc, #76]	; (8009470 <HAL_RTC_AlarmIRQHandler+0x58>)
 8009422:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009426:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800942e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d006      	beq.n	8009448 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2201      	movs	r2, #1
 8009440:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f816 	bl	8009474 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f003 0302 	and.w	r3, r3, #2
 800944e:	2b00      	cmp	r3, #0
 8009450:	d006      	beq.n	8009460 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2202      	movs	r2, #2
 8009458:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f92f 	bl	80096be <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40010400 	.word	0x40010400

08009474 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800949e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 80094a0:	f7fc fd80 	bl	8005fa4 <HAL_GetTick>
 80094a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80094a6:	e009      	b.n	80094bc <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094a8:	f7fc fd7c 	bl	8005fa4 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094b6:	d901      	bls.n	80094bc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e007      	b.n	80094cc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f003 0320 	and.w	r3, r3, #32
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d0ee      	beq.n	80094a8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d123      	bne.n	8009536 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68da      	ldr	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80094fe:	f7fc fd51 	bl	8005fa4 <HAL_GetTick>
 8009502:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009504:	e00d      	b.n	8009522 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009506:	f7fc fd4d 	bl	8005fa4 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009514:	d905      	bls.n	8009522 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2203      	movs	r2, #3
 800951e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <RTC_EnterInitMode+0x62>
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b03      	cmp	r3, #3
 8009534:	d1e7      	bne.n	8009506 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <RTC_ExitInitMode+0x78>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <RTC_ExitInitMode+0x78>)
 8009552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009556:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <RTC_ExitInitMode+0x78>)
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10c      	bne.n	800957e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff ff8f 	bl	8009488 <HAL_RTC_WaitForSynchro>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01e      	beq.n	80095ae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2203      	movs	r2, #3
 8009574:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	73fb      	strb	r3, [r7, #15]
 800957c:	e017      	b.n	80095ae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800957e:	4b0e      	ldr	r3, [pc, #56]	; (80095b8 <RTC_ExitInitMode+0x78>)
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	4a0d      	ldr	r2, [pc, #52]	; (80095b8 <RTC_ExitInitMode+0x78>)
 8009584:	f023 0320 	bic.w	r3, r3, #32
 8009588:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff ff7c 	bl	8009488 <HAL_RTC_WaitForSynchro>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d005      	beq.n	80095a2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2203      	movs	r2, #3
 800959a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <RTC_ExitInitMode+0x78>)
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	4a04      	ldr	r2, [pc, #16]	; (80095b8 <RTC_ExitInitMode+0x78>)
 80095a8:	f043 0320 	orr.w	r3, r3, #32
 80095ac:	6193      	str	r3, [r2, #24]
  }

  return status;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	40002800 	.word	0x40002800

080095bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80095ce:	e005      	b.n	80095dc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3301      	adds	r3, #1
 80095d4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	3b0a      	subs	r3, #10
 80095da:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80095dc:	7afb      	ldrb	r3, [r7, #11]
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d8f6      	bhi.n	80095d0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	7afb      	ldrb	r3, [r7, #11]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	b2db      	uxtb	r3, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	091b      	lsrs	r3, r3, #4
 800960a:	b2db      	uxtb	r3, r3
 800960c:	461a      	mov	r2, r3
 800960e:	0092      	lsls	r2, r2, #2
 8009610:	4413      	add	r3, r2
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	b2da      	uxtb	r2, r3
 800961e:	7bfb      	ldrb	r3, [r7, #15]
 8009620:	4413      	add	r3, r2
 8009622:	b2db      	uxtb	r3, r3
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009644:	2302      	movs	r3, #2
 8009646:	e034      	b.n	80096b2 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	22ca      	movs	r2, #202	; 0xca
 800965e:	625a      	str	r2, [r3, #36]	; 0x24
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2253      	movs	r2, #83	; 0x53
 8009666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009676:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6999      	ldr	r1, [r3, #24]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699a      	ldr	r2, [r3, #24]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009696:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	22ff      	movs	r2, #255	; 0xff
 800969e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b087      	sub	sp, #28
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4413      	add	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80096f2:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	009a      	lsls	r2, r3, #2
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	461a      	mov	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6013      	str	r3, [r2, #0]
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009712:	b480      	push	{r7}
 8009714:	b085      	sub	sp, #20
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	461a      	mov	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4413      	add	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009730:	60bb      	str	r3, [r7, #8]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e095      	b.n	800988a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d108      	bne.n	8009778 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800976e:	d009      	beq.n	8009784 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	61da      	str	r2, [r3, #28]
 8009776:	e005      	b.n	8009784 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d106      	bne.n	80097a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7fa ff30 	bl	8004604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097c4:	d902      	bls.n	80097cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e002      	b.n	80097d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097da:	d007      	beq.n	80097ec <HAL_SPI_Init+0xa0>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097e4:	d002      	beq.n	80097ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	431a      	orrs	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800982e:	ea42 0103 	orr.w	r1, r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	0c1b      	lsrs	r3, r3, #16
 8009848:	f003 0204 	and.w	r2, r3, #4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985a:	f003 0308 	and.w	r3, r3, #8
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009868:	ea42 0103 	orr.w	r1, r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b088      	sub	sp, #32
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	603b      	str	r3, [r7, #0]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d101      	bne.n	80098b4 <HAL_SPI_Transmit+0x22>
 80098b0:	2302      	movs	r3, #2
 80098b2:	e158      	b.n	8009b66 <HAL_SPI_Transmit+0x2d4>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098bc:	f7fc fb72 	bl	8005fa4 <HAL_GetTick>
 80098c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80098c2:	88fb      	ldrh	r3, [r7, #6]
 80098c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d002      	beq.n	80098d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80098d2:	2302      	movs	r3, #2
 80098d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098d6:	e13d      	b.n	8009b54 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <HAL_SPI_Transmit+0x52>
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d102      	bne.n	80098ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098e8:	e134      	b.n	8009b54 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2203      	movs	r2, #3
 80098ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	88fa      	ldrh	r2, [r7, #6]
 8009902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009934:	d10f      	bne.n	8009956 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009944:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009954:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009960:	2b40      	cmp	r3, #64	; 0x40
 8009962:	d007      	beq.n	8009974 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009972:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800997c:	d94b      	bls.n	8009a16 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <HAL_SPI_Transmit+0xfa>
 8009986:	8afb      	ldrh	r3, [r7, #22]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d13e      	bne.n	8009a0a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	881a      	ldrh	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999c:	1c9a      	adds	r2, r3, #2
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80099b0:	e02b      	b.n	8009a0a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d112      	bne.n	80099e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c4:	881a      	ldrh	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	1c9a      	adds	r2, r3, #2
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099e4:	e011      	b.n	8009a0a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099e6:	f7fc fadd 	bl	8005fa4 <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d803      	bhi.n	80099fe <HAL_SPI_Transmit+0x16c>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fc:	d102      	bne.n	8009a04 <HAL_SPI_Transmit+0x172>
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d102      	bne.n	8009a0a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a08:	e0a4      	b.n	8009b54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1ce      	bne.n	80099b2 <HAL_SPI_Transmit+0x120>
 8009a14:	e07c      	b.n	8009b10 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <HAL_SPI_Transmit+0x192>
 8009a1e:	8afb      	ldrh	r3, [r7, #22]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d170      	bne.n	8009b06 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d912      	bls.n	8009a54 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	881a      	ldrh	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	1c9a      	adds	r2, r3, #2
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3b02      	subs	r3, #2
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a52:	e058      	b.n	8009b06 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	330c      	adds	r3, #12
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009a7a:	e044      	b.n	8009b06 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d12b      	bne.n	8009ae2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d912      	bls.n	8009aba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	881a      	ldrh	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa4:	1c9a      	adds	r2, r3, #2
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	3b02      	subs	r3, #2
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ab8:	e025      	b.n	8009b06 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	330c      	adds	r3, #12
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ae0:	e011      	b.n	8009b06 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ae2:	f7fc fa5f 	bl	8005fa4 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d803      	bhi.n	8009afa <HAL_SPI_Transmit+0x268>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af8:	d102      	bne.n	8009b00 <HAL_SPI_Transmit+0x26e>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b04:	e026      	b.n	8009b54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1b5      	bne.n	8009a7c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fb5b 	bl	800a1d0 <SPI_EndRxTxTransaction>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d10a      	bne.n	8009b44 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b2e:	2300      	movs	r3, #0
 8009b30:	613b      	str	r3, [r7, #16]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	613b      	str	r3, [r7, #16]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e000      	b.n	8009b54 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b64:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b08a      	sub	sp, #40	; 0x28
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d101      	bne.n	8009b94 <HAL_SPI_TransmitReceive+0x26>
 8009b90:	2302      	movs	r3, #2
 8009b92:	e1fb      	b.n	8009f8c <HAL_SPI_TransmitReceive+0x41e>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b9c:	f7fc fa02 	bl	8005fa4 <HAL_GetTick>
 8009ba0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ba8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009bb0:	887b      	ldrh	r3, [r7, #2]
 8009bb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009bb4:	887b      	ldrh	r3, [r7, #2]
 8009bb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009bb8:	7efb      	ldrb	r3, [r7, #27]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d00e      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x6e>
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bc4:	d106      	bne.n	8009bd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <HAL_SPI_TransmitReceive+0x66>
 8009bce:	7efb      	ldrb	r3, [r7, #27]
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d003      	beq.n	8009bdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009bda:	e1cd      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <HAL_SPI_TransmitReceive+0x80>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <HAL_SPI_TransmitReceive+0x80>
 8009be8:	887b      	ldrh	r3, [r7, #2]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d103      	bne.n	8009bf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009bf4:	e1c0      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	d003      	beq.n	8009c0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2205      	movs	r2, #5
 8009c06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	887a      	ldrh	r2, [r7, #2]
 8009c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	887a      	ldrh	r2, [r7, #2]
 8009c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	887a      	ldrh	r2, [r7, #2]
 8009c30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	887a      	ldrh	r2, [r7, #2]
 8009c36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c4c:	d802      	bhi.n	8009c54 <HAL_SPI_TransmitReceive+0xe6>
 8009c4e:	8a3b      	ldrh	r3, [r7, #16]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d908      	bls.n	8009c66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c62:	605a      	str	r2, [r3, #4]
 8009c64:	e007      	b.n	8009c76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c80:	2b40      	cmp	r3, #64	; 0x40
 8009c82:	d007      	beq.n	8009c94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c9c:	d97c      	bls.n	8009d98 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_SPI_TransmitReceive+0x13e>
 8009ca6:	8a7b      	ldrh	r3, [r7, #18]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d169      	bne.n	8009d80 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	881a      	ldrh	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cbc:	1c9a      	adds	r2, r3, #2
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cd0:	e056      	b.n	8009d80 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d11b      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x1aa>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d016      	beq.n	8009d18 <HAL_SPI_TransmitReceive+0x1aa>
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d113      	bne.n	8009d18 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf4:	881a      	ldrh	r2, [r3, #0]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	1c9a      	adds	r2, r3, #2
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d11c      	bne.n	8009d60 <HAL_SPI_TransmitReceive+0x1f2>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d016      	beq.n	8009d60 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3c:	b292      	uxth	r2, r2
 8009d3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d44:	1c9a      	adds	r2, r3, #2
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3b01      	subs	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d60:	f7fc f920 	bl	8005fa4 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d807      	bhi.n	8009d80 <HAL_SPI_TransmitReceive+0x212>
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d76:	d003      	beq.n	8009d80 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009d7e:	e0fb      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1a3      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x164>
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d19d      	bne.n	8009cd2 <HAL_SPI_TransmitReceive+0x164>
 8009d96:	e0df      	b.n	8009f58 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <HAL_SPI_TransmitReceive+0x23a>
 8009da0:	8a7b      	ldrh	r3, [r7, #18]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	f040 80cb 	bne.w	8009f3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d912      	bls.n	8009dd8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	881a      	ldrh	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc2:	1c9a      	adds	r2, r3, #2
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	3b02      	subs	r3, #2
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dd6:	e0b2      	b.n	8009f3e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	330c      	adds	r3, #12
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dfe:	e09e      	b.n	8009f3e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d134      	bne.n	8009e78 <HAL_SPI_TransmitReceive+0x30a>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d02f      	beq.n	8009e78 <HAL_SPI_TransmitReceive+0x30a>
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d12c      	bne.n	8009e78 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d912      	bls.n	8009e4e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2c:	881a      	ldrh	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	1c9a      	adds	r2, r3, #2
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	3b02      	subs	r3, #2
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e4c:	e012      	b.n	8009e74 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	330c      	adds	r3, #12
 8009e58:	7812      	ldrb	r2, [r2, #0]
 8009e5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e74:	2300      	movs	r3, #0
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d148      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x3aa>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d042      	beq.n	8009f18 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d923      	bls.n	8009ee6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68da      	ldr	r2, [r3, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	b292      	uxth	r2, r2
 8009eaa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb0:	1c9a      	adds	r2, r3, #2
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	3b02      	subs	r3, #2
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d81f      	bhi.n	8009f14 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ee2:	605a      	str	r2, [r3, #4]
 8009ee4:	e016      	b.n	8009f14 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f103 020c 	add.w	r2, r3, #12
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	b2d2      	uxtb	r2, r2
 8009ef6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	1c5a      	adds	r2, r3, #1
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f14:	2301      	movs	r3, #1
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f18:	f7fc f844 	bl	8005fa4 <HAL_GetTick>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d803      	bhi.n	8009f30 <HAL_SPI_TransmitReceive+0x3c2>
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d102      	bne.n	8009f36 <HAL_SPI_TransmitReceive+0x3c8>
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d103      	bne.n	8009f3e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009f3c:	e01c      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f47f af5b 	bne.w	8009e00 <HAL_SPI_TransmitReceive+0x292>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f47f af54 	bne.w	8009e00 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f58:	69fa      	ldr	r2, [r7, #28]
 8009f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f937 	bl	800a1d0 <SPI_EndRxTxTransaction>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d006      	beq.n	8009f76 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2220      	movs	r2, #32
 8009f72:	661a      	str	r2, [r3, #96]	; 0x60
 8009f74:	e000      	b.n	8009f78 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3728      	adds	r7, #40	; 0x28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fa4:	f7fb fffe 	bl	8005fa4 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fb4:	f7fb fff6 	bl	8005fa4 <HAL_GetTick>
 8009fb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fba:	4b39      	ldr	r3, [pc, #228]	; (800a0a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	015b      	lsls	r3, r3, #5
 8009fc0:	0d1b      	lsrs	r3, r3, #20
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	fb02 f303 	mul.w	r3, r2, r3
 8009fc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fca:	e054      	b.n	800a076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd2:	d050      	beq.n	800a076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fd4:	f7fb ffe6 	bl	8005fa4 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	69fa      	ldr	r2, [r7, #28]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d902      	bls.n	8009fea <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d13d      	bne.n	800a066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a002:	d111      	bne.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a00c:	d004      	beq.n	800a018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a016:	d107      	bne.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a030:	d10f      	bne.n	800a052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e017      	b.n	800a096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d101      	bne.n	800a070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	3b01      	subs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	689a      	ldr	r2, [r3, #8]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	4013      	ands	r3, r2
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	bf0c      	ite	eq
 800a086:	2301      	moveq	r3, #1
 800a088:	2300      	movne	r3, #0
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	429a      	cmp	r2, r3
 800a092:	d19b      	bne.n	8009fcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000000 	.word	0x20000000

0800a0a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0b6:	f7fb ff75 	bl	8005fa4 <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	683a      	ldr	r2, [r7, #0]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800a0c6:	f7fb ff6d 	bl	8005fa4 <HAL_GetTick>
 800a0ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	330c      	adds	r3, #12
 800a0d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0d4:	4b3d      	ldr	r3, [pc, #244]	; (800a1cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	00da      	lsls	r2, r3, #3
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	0d1b      	lsrs	r3, r3, #20
 800a0e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e6:	fb02 f303 	mul.w	r3, r2, r3
 800a0ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0ec:	e060      	b.n	800a1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a0f4:	d107      	bne.n	800a106 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d104      	bne.n	800a106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10c:	d050      	beq.n	800a1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a10e:	f7fb ff49 	bl	8005fa4 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d902      	bls.n	800a124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d13d      	bne.n	800a1a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a13c:	d111      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a146:	d004      	beq.n	800a152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a150:	d107      	bne.n	800a162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16a:	d10f      	bne.n	800a18c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a18a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e010      	b.n	800a1c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689a      	ldr	r2, [r3, #8]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d196      	bne.n	800a0ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3728      	adds	r7, #40	; 0x28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	20000000 	.word	0x20000000

0800a1d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af02      	add	r7, sp, #8
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff ff5b 	bl	800a0a4 <SPI_WaitFifoStateUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d007      	beq.n	800a204 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f8:	f043 0220 	orr.w	r2, r3, #32
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e027      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2180      	movs	r1, #128	; 0x80
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fec0 	bl	8009f94 <SPI_WaitFlagStateUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a21e:	f043 0220 	orr.w	r2, r3, #32
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e014      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	2200      	movs	r2, #0
 800a232:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7ff ff34 	bl	800a0a4 <SPI_WaitFifoStateUntilTimeout>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a246:	f043 0220 	orr.w	r2, r3, #32
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e000      	b.n	800a254 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e040      	b.n	800a2f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a272:	2b00      	cmp	r3, #0
 800a274:	d106      	bne.n	800a284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7fa f898 	bl	80043b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2224      	movs	r2, #36	; 0x24
 800a288:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0201 	bic.w	r2, r2, #1
 800a298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fe8a 	bl	800afb4 <UART_SetConfig>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e022      	b.n	800a2f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 f8d8 	bl	800b468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	689a      	ldr	r2, [r3, #8]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f042 0201 	orr.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f001 f95f 	bl	800b5ac <UART_CheckIdleState>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	; 0x28
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a30c:	2b20      	cmp	r3, #32
 800a30e:	f040 8082 	bne.w	800a416 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d002      	beq.n	800a31e <HAL_UART_Transmit+0x26>
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e07a      	b.n	800a418 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_UART_Transmit+0x38>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e073      	b.n	800a418 <HAL_UART_Transmit+0x120>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2221      	movs	r2, #33	; 0x21
 800a344:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a346:	f7fb fe2d 	bl	8005fa4 <HAL_GetTick>
 800a34a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	88fa      	ldrh	r2, [r7, #6]
 800a350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	88fa      	ldrh	r2, [r7, #6]
 800a358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a364:	d108      	bne.n	800a378 <HAL_UART_Transmit+0x80>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d104      	bne.n	800a378 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	61bb      	str	r3, [r7, #24]
 800a376:	e003      	b.n	800a380 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a388:	e02d      	b.n	800a3e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2200      	movs	r2, #0
 800a392:	2180      	movs	r1, #128	; 0x80
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f001 f952 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e039      	b.n	800a418 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10b      	bne.n	800a3c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	881a      	ldrh	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b6:	b292      	uxth	r2, r2
 800a3b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	3302      	adds	r3, #2
 800a3be:	61bb      	str	r3, [r7, #24]
 800a3c0:	e008      	b.n	800a3d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	781a      	ldrb	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1cb      	bne.n	800a38a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2140      	movs	r1, #64	; 0x40
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f001 f91e 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e005      	b.n	800a418 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	e000      	b.n	800a418 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a416:	2302      	movs	r3, #2
  }
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3720      	adds	r7, #32
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08a      	sub	sp, #40	; 0x28
 800a424:	af02      	add	r7, sp, #8
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4613      	mov	r3, r2
 800a42e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a434:	2b20      	cmp	r3, #32
 800a436:	f040 80bf 	bne.w	800a5b8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <HAL_UART_Receive+0x26>
 800a440:	88fb      	ldrh	r3, [r7, #6]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e0b7      	b.n	800a5ba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a450:	2b01      	cmp	r3, #1
 800a452:	d101      	bne.n	800a458 <HAL_UART_Receive+0x38>
 800a454:	2302      	movs	r3, #2
 800a456:	e0b0      	b.n	800a5ba <HAL_UART_Receive+0x19a>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2200      	movs	r2, #0
 800a464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2222      	movs	r2, #34	; 0x22
 800a46c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a474:	f7fb fd96 	bl	8005fa4 <HAL_GetTick>
 800a478:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	88fa      	ldrh	r2, [r7, #6]
 800a47e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a492:	d10e      	bne.n	800a4b2 <HAL_UART_Receive+0x92>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	691b      	ldr	r3, [r3, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d105      	bne.n	800a4a8 <HAL_UART_Receive+0x88>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a4a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4a6:	e02d      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	22ff      	movs	r2, #255	; 0xff
 800a4ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4b0:	e028      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10d      	bne.n	800a4d6 <HAL_UART_Receive+0xb6>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d104      	bne.n	800a4cc <HAL_UART_Receive+0xac>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	22ff      	movs	r2, #255	; 0xff
 800a4c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4ca:	e01b      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	227f      	movs	r2, #127	; 0x7f
 800a4d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4d4:	e016      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4de:	d10d      	bne.n	800a4fc <HAL_UART_Receive+0xdc>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <HAL_UART_Receive+0xd2>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	227f      	movs	r2, #127	; 0x7f
 800a4ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4f0:	e008      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	223f      	movs	r2, #63	; 0x3f
 800a4f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a4fa:	e003      	b.n	800a504 <HAL_UART_Receive+0xe4>
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a50a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a514:	d108      	bne.n	800a528 <HAL_UART_Receive+0x108>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d104      	bne.n	800a528 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	e003      	b.n	800a530 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a538:	e033      	b.n	800a5a2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2200      	movs	r2, #0
 800a542:	2120      	movs	r1, #32
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f001 f87a 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d001      	beq.n	800a554 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e032      	b.n	800a5ba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10c      	bne.n	800a574 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a560:	b29a      	uxth	r2, r3
 800a562:	8a7b      	ldrh	r3, [r7, #18]
 800a564:	4013      	ands	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	3302      	adds	r3, #2
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	e00d      	b.n	800a590 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	8a7b      	ldrh	r3, [r7, #18]
 800a580:	b2db      	uxtb	r3, r3
 800a582:	4013      	ands	r3, r2
 800a584:	b2da      	uxtb	r2, r3
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	3301      	adds	r3, #1
 800a58e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a596:	b29b      	uxth	r3, r3
 800a598:	3b01      	subs	r3, #1
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1c5      	bne.n	800a53a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2220      	movs	r2, #32
 800a5b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	e000      	b.n	800a5ba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800a5b8:	2302      	movs	r3, #2
  }
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b08b      	sub	sp, #44	; 0x2c
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5d6:	2b20      	cmp	r3, #32
 800a5d8:	d156      	bne.n	800a688 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_UART_Transmit_IT+0x22>
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e04f      	b.n	800a68a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d101      	bne.n	800a5f8 <HAL_UART_Transmit_IT+0x34>
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	e048      	b.n	800a68a <HAL_UART_Transmit_IT+0xc6>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	88fa      	ldrh	r2, [r7, #6]
 800a60a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	88fa      	ldrh	r2, [r7, #6]
 800a612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2221      	movs	r2, #33	; 0x21
 800a628:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a632:	d107      	bne.n	800a644 <HAL_UART_Transmit_IT+0x80>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a16      	ldr	r2, [pc, #88]	; (800a698 <HAL_UART_Transmit_IT+0xd4>)
 800a640:	669a      	str	r2, [r3, #104]	; 0x68
 800a642:	e002      	b.n	800a64a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4a15      	ldr	r2, [pc, #84]	; (800a69c <HAL_UART_Transmit_IT+0xd8>)
 800a648:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a670:	623b      	str	r3, [r7, #32]
 800a672:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a674:	69f9      	ldr	r1, [r7, #28]
 800a676:	6a3a      	ldr	r2, [r7, #32]
 800a678:	e841 2300 	strex	r3, r2, [r1]
 800a67c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e6      	bne.n	800a652 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	372c      	adds	r7, #44	; 0x2c
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	0800bbef 	.word	0x0800bbef
 800a69c:	0800bb37 	.word	0x0800bb37

0800a6a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	; 0x28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d142      	bne.n	800a73c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <HAL_UART_Receive_IT+0x22>
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e03b      	b.n	800a73e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d101      	bne.n	800a6d4 <HAL_UART_Receive_IT+0x34>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	e034      	b.n	800a73e <HAL_UART_Receive_IT+0x9e>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a18      	ldr	r2, [pc, #96]	; (800a748 <HAL_UART_Receive_IT+0xa8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d01f      	beq.n	800a72c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	e853 3f00 	ldrex	r3, [r3]
 800a706:	613b      	str	r3, [r7, #16]
   return(result);
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71c:	69f9      	ldr	r1, [r7, #28]
 800a71e:	6a3a      	ldr	r2, [r7, #32]
 800a720:	e841 2300 	strex	r3, r2, [r1]
 800a724:	61bb      	str	r3, [r7, #24]
   return(result);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1e6      	bne.n	800a6fa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	461a      	mov	r2, r3
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f001 f848 	bl	800b7c8 <UART_Start_Receive_IT>
 800a738:	4603      	mov	r3, r0
 800a73a:	e000      	b.n	800a73e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3728      	adds	r7, #40	; 0x28
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	40008000 	.word	0x40008000

0800a74c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b0a2      	sub	sp, #136	; 0x88
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800a754:	2301      	movs	r3, #1
 800a756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a762:	e853 3f00 	ldrex	r3, [r3]
 800a766:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a76a:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a76e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a77c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a77e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a782:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a78a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e4      	bne.n	800a75a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7a2:	f023 0301 	bic.w	r3, r3, #1
 800a7a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a7b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a7b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e5      	bne.n	800a790 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d118      	bne.n	800a7fe <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	f023 0310 	bic.w	r3, r3, #16
 800a7e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e6      	bne.n	800a7cc <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d104      	bne.n	800a81e <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	4a5e      	ldr	r2, [pc, #376]	; (800a994 <HAL_UART_Abort_IT+0x248>)
 800a81a:	639a      	str	r2, [r3, #56]	; 0x38
 800a81c:	e003      	b.n	800a826 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a822:	2200      	movs	r2, #0
 800a824:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00f      	beq.n	800a84e <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	d104      	bne.n	800a846 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a840:	4a55      	ldr	r2, [pc, #340]	; (800a998 <HAL_UART_Abort_IT+0x24c>)
 800a842:	639a      	str	r2, [r3, #56]	; 0x38
 800a844:	e003      	b.n	800a84e <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	2200      	movs	r2, #0
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a858:	2b80      	cmp	r3, #128	; 0x80
 800a85a:	d12d      	bne.n	800a8b8 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3308      	adds	r3, #8
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	e853 3f00 	ldrex	r3, [r3]
 800a86a:	623b      	str	r3, [r7, #32]
   return(result);
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a872:	677b      	str	r3, [r7, #116]	; 0x74
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3308      	adds	r3, #8
 800a87a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a87c:	633a      	str	r2, [r7, #48]	; 0x30
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a884:	e841 2300 	strex	r3, r2, [r1]
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e5      	bne.n	800a85c <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00f      	beq.n	800a8b8 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7fc fcc6 	bl	800722e <HAL_DMA_Abort_IT>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
 800a8b0:	e002      	b.n	800a8b8 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d130      	bne.n	800a928 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8dc:	673b      	str	r3, [r7, #112]	; 0x70
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8e6:	61fa      	str	r2, [r7, #28]
 800a8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	69b9      	ldr	r1, [r7, #24]
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e5      	bne.n	800a8c6 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d012      	beq.n	800a928 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a906:	4618      	mov	r0, r3
 800a908:	f7fc fc91 	bl	800722e <HAL_DMA_Abort_IT>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d007      	beq.n	800a922 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a916:	2200      	movs	r2, #0
 800a918:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a920:	e002      	b.n	800a928 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800a928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d12b      	bne.n	800a988 <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	220f      	movs	r2, #15
 800a95a:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	8b1b      	ldrh	r3, [r3, #24]
 800a962:	b29a      	uxth	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0208 	orr.w	r2, r2, #8
 800a96c:	b292      	uxth	r2, r2
 800a96e:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2220      	movs	r2, #32
 800a97a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fb00 	bl	800af88 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3788      	adds	r7, #136	; 0x88
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	0800ba4f 	.word	0x0800ba4f
 800a998:	0800bab9 	.word	0x0800bab9

0800a99c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b0ba      	sub	sp, #232	; 0xe8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a9c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a9d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d115      	bne.n	800aa04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9dc:	f003 0320 	and.w	r3, r3, #32
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e8:	f003 0320 	and.w	r3, r3, #32
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 82a6 	beq.w	800af46 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	4798      	blx	r3
      }
      return;
 800aa02:	e2a0      	b.n	800af46 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800aa04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8117 	beq.w	800ac3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d106      	bne.n	800aa28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa1e:	4b85      	ldr	r3, [pc, #532]	; (800ac34 <HAL_UART_IRQHandler+0x298>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 810a 	beq.w	800ac3c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2c:	f003 0301 	and.w	r3, r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d011      	beq.n	800aa58 <HAL_UART_IRQHandler+0xbc>
 800aa34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2201      	movs	r2, #1
 800aa46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa4e:	f043 0201 	orr.w	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d011      	beq.n	800aa88 <HAL_UART_IRQHandler+0xec>
 800aa64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa68:	f003 0301 	and.w	r3, r3, #1
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2202      	movs	r2, #2
 800aa76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa7e:	f043 0204 	orr.w	r2, r3, #4
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d011      	beq.n	800aab8 <HAL_UART_IRQHandler+0x11c>
 800aa94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2204      	movs	r2, #4
 800aaa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaae:	f043 0202 	orr.w	r2, r3, #2
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d017      	beq.n	800aaf4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aac8:	f003 0320 	and.w	r3, r3, #32
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d105      	bne.n	800aadc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aad4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2208      	movs	r2, #8
 800aae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaea:	f043 0208 	orr.w	r2, r3, #8
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d012      	beq.n	800ab26 <HAL_UART_IRQHandler+0x18a>
 800ab00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00c      	beq.n	800ab26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab1c:	f043 0220 	orr.w	r2, r3, #32
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 820c 	beq.w	800af4a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab36:	f003 0320 	and.w	r3, r3, #32
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d007      	beq.n	800ab5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d005      	beq.n	800ab7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d04f      	beq.n	800ac1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 feec 	bl	800b95c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d141      	bne.n	800ac16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3308      	adds	r3, #8
 800ab98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3308      	adds	r3, #8
 800abba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800abbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abce:	e841 2300 	strex	r3, r2, [r1]
 800abd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800abd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1d9      	bne.n	800ab92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d013      	beq.n	800ac0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	4a13      	ldr	r2, [pc, #76]	; (800ac38 <HAL_UART_IRQHandler+0x29c>)
 800abec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fc fb1b 	bl	800722e <HAL_DMA_Abort_IT>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d017      	beq.n	800ac2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ac08:	4610      	mov	r0, r2
 800ac0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac0c:	e00f      	b.n	800ac2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f9b0 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac14:	e00b      	b.n	800ac2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f9ac 	bl	800af74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac1c:	e007      	b.n	800ac2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f9a8 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800ac2c:	e18d      	b.n	800af4a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2e:	bf00      	nop
    return;
 800ac30:	e18b      	b.n	800af4a <HAL_UART_IRQHandler+0x5ae>
 800ac32:	bf00      	nop
 800ac34:	04000120 	.word	0x04000120
 800ac38:	0800ba23 	.word	0x0800ba23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	f040 8146 	bne.w	800aed2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac4a:	f003 0310 	and.w	r3, r3, #16
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 813f 	beq.w	800aed2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac58:	f003 0310 	and.w	r3, r3, #16
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8138 	beq.w	800aed2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2210      	movs	r2, #16
 800ac68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	f040 80b4 	bne.w	800ade2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 815f 	beq.w	800af4e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	f080 8157 	bcs.w	800af4e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aca6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0320 	and.w	r3, r3, #32
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f040 8085 	bne.w	800adc6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800acd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ace6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800acea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800acf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1da      	bne.n	800acbc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad18:	f023 0301 	bic.w	r3, r3, #1
 800ad1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e1      	bne.n	800ad06 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3308      	adds	r3, #8
 800ad62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad66:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad6e:	e841 2300 	strex	r3, r2, [r1]
 800ad72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e3      	bne.n	800ad42 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad96:	f023 0310 	bic.w	r3, r3, #16
 800ad9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ada8:	65bb      	str	r3, [r7, #88]	; 0x58
 800adaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e4      	bne.n	800ad86 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fc f9f6 	bl	80071b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800add2:	b29b      	uxth	r3, r3
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	b29b      	uxth	r3, r3
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f8de 	bl	800af9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ade0:	e0b5      	b.n	800af4e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 80a7 	beq.w	800af52 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800ae04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 80a2 	beq.w	800af52 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae30:	647b      	str	r3, [r7, #68]	; 0x44
 800ae32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e4      	bne.n	800ae0e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	623b      	str	r3, [r7, #32]
   return(result);
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	f023 0301 	bic.w	r3, r3, #1
 800ae5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3308      	adds	r3, #8
 800ae64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae68:	633a      	str	r2, [r7, #48]	; 0x30
 800ae6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e3      	bne.n	800ae44 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 0310 	bic.w	r3, r3, #16
 800aea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb4:	69b9      	ldr	r1, [r7, #24]
 800aeb6:	69fa      	ldr	r2, [r7, #28]
 800aeb8:	e841 2300 	strex	r3, r2, [r1]
 800aebc:	617b      	str	r3, [r7, #20]
   return(result);
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d1e4      	bne.n	800ae8e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f866 	bl	800af9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aed0:	e03f      	b.n	800af52 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00e      	beq.n	800aefc <HAL_UART_IRQHandler+0x560>
 800aede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d008      	beq.n	800aefc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aef2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 f864 	bl	800bfc2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aefa:	e02d      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00e      	beq.n	800af26 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af10:	2b00      	cmp	r3, #0
 800af12:	d008      	beq.n	800af26 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d01c      	beq.n	800af56 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	4798      	blx	r3
    }
    return;
 800af24:	e017      	b.n	800af56 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d012      	beq.n	800af58 <HAL_UART_IRQHandler+0x5bc>
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00c      	beq.n	800af58 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 feb5 	bl	800bcae <UART_EndTransmit_IT>
    return;
 800af44:	e008      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800af46:	bf00      	nop
 800af48:	e006      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
    return;
 800af4a:	bf00      	nop
 800af4c:	e004      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800af4e:	bf00      	nop
 800af50:	e002      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
      return;
 800af52:	bf00      	nop
 800af54:	e000      	b.n	800af58 <HAL_UART_IRQHandler+0x5bc>
    return;
 800af56:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800af58:	37e8      	adds	r7, #232	; 0xe8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop

0800af60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afb8:	b08a      	sub	sp, #40	; 0x28
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	431a      	orrs	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	431a      	orrs	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	69db      	ldr	r3, [r3, #28]
 800afd8:	4313      	orrs	r3, r2
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	4b9e      	ldr	r3, [pc, #632]	; (800b25c <UART_SetConfig+0x2a8>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afec:	430b      	orrs	r3, r1
 800afee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a93      	ldr	r2, [pc, #588]	; (800b260 <UART_SetConfig+0x2ac>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d004      	beq.n	800b020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	4313      	orrs	r3, r2
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a8a      	ldr	r2, [pc, #552]	; (800b264 <UART_SetConfig+0x2b0>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d126      	bne.n	800b08c <UART_SetConfig+0xd8>
 800b03e:	4b8a      	ldr	r3, [pc, #552]	; (800b268 <UART_SetConfig+0x2b4>)
 800b040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d81b      	bhi.n	800b084 <UART_SetConfig+0xd0>
 800b04c:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <UART_SetConfig+0xa0>)
 800b04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b052:	bf00      	nop
 800b054:	0800b065 	.word	0x0800b065
 800b058:	0800b075 	.word	0x0800b075
 800b05c:	0800b06d 	.word	0x0800b06d
 800b060:	0800b07d 	.word	0x0800b07d
 800b064:	2301      	movs	r3, #1
 800b066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b06a:	e0ab      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b06c:	2302      	movs	r3, #2
 800b06e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b072:	e0a7      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b074:	2304      	movs	r3, #4
 800b076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b07a:	e0a3      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b07c:	2308      	movs	r3, #8
 800b07e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b082:	e09f      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b084:	2310      	movs	r3, #16
 800b086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b08a:	e09b      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a76      	ldr	r2, [pc, #472]	; (800b26c <UART_SetConfig+0x2b8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d138      	bne.n	800b108 <UART_SetConfig+0x154>
 800b096:	4b74      	ldr	r3, [pc, #464]	; (800b268 <UART_SetConfig+0x2b4>)
 800b098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09c:	f003 030c 	and.w	r3, r3, #12
 800b0a0:	2b0c      	cmp	r3, #12
 800b0a2:	d82d      	bhi.n	800b100 <UART_SetConfig+0x14c>
 800b0a4:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <UART_SetConfig+0xf8>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b0e1 	.word	0x0800b0e1
 800b0b0:	0800b101 	.word	0x0800b101
 800b0b4:	0800b101 	.word	0x0800b101
 800b0b8:	0800b101 	.word	0x0800b101
 800b0bc:	0800b0f1 	.word	0x0800b0f1
 800b0c0:	0800b101 	.word	0x0800b101
 800b0c4:	0800b101 	.word	0x0800b101
 800b0c8:	0800b101 	.word	0x0800b101
 800b0cc:	0800b0e9 	.word	0x0800b0e9
 800b0d0:	0800b101 	.word	0x0800b101
 800b0d4:	0800b101 	.word	0x0800b101
 800b0d8:	0800b101 	.word	0x0800b101
 800b0dc:	0800b0f9 	.word	0x0800b0f9
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0e6:	e06d      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0ee:	e069      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0f6:	e065      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0fe:	e061      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b100:	2310      	movs	r3, #16
 800b102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b106:	e05d      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a58      	ldr	r2, [pc, #352]	; (800b270 <UART_SetConfig+0x2bc>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d125      	bne.n	800b15e <UART_SetConfig+0x1aa>
 800b112:	4b55      	ldr	r3, [pc, #340]	; (800b268 <UART_SetConfig+0x2b4>)
 800b114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b118:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b11c:	2b30      	cmp	r3, #48	; 0x30
 800b11e:	d016      	beq.n	800b14e <UART_SetConfig+0x19a>
 800b120:	2b30      	cmp	r3, #48	; 0x30
 800b122:	d818      	bhi.n	800b156 <UART_SetConfig+0x1a2>
 800b124:	2b20      	cmp	r3, #32
 800b126:	d00a      	beq.n	800b13e <UART_SetConfig+0x18a>
 800b128:	2b20      	cmp	r3, #32
 800b12a:	d814      	bhi.n	800b156 <UART_SetConfig+0x1a2>
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <UART_SetConfig+0x182>
 800b130:	2b10      	cmp	r3, #16
 800b132:	d008      	beq.n	800b146 <UART_SetConfig+0x192>
 800b134:	e00f      	b.n	800b156 <UART_SetConfig+0x1a2>
 800b136:	2300      	movs	r3, #0
 800b138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b13c:	e042      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b13e:	2302      	movs	r3, #2
 800b140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b144:	e03e      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b146:	2304      	movs	r3, #4
 800b148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b14c:	e03a      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b14e:	2308      	movs	r3, #8
 800b150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b154:	e036      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b156:	2310      	movs	r3, #16
 800b158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b15c:	e032      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a3f      	ldr	r2, [pc, #252]	; (800b260 <UART_SetConfig+0x2ac>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d12a      	bne.n	800b1be <UART_SetConfig+0x20a>
 800b168:	4b3f      	ldr	r3, [pc, #252]	; (800b268 <UART_SetConfig+0x2b4>)
 800b16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b176:	d01a      	beq.n	800b1ae <UART_SetConfig+0x1fa>
 800b178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b17c:	d81b      	bhi.n	800b1b6 <UART_SetConfig+0x202>
 800b17e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b182:	d00c      	beq.n	800b19e <UART_SetConfig+0x1ea>
 800b184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b188:	d815      	bhi.n	800b1b6 <UART_SetConfig+0x202>
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <UART_SetConfig+0x1e2>
 800b18e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b192:	d008      	beq.n	800b1a6 <UART_SetConfig+0x1f2>
 800b194:	e00f      	b.n	800b1b6 <UART_SetConfig+0x202>
 800b196:	2300      	movs	r3, #0
 800b198:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b19c:	e012      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b19e:	2302      	movs	r3, #2
 800b1a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1a4:	e00e      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1ac:	e00a      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b1ae:	2308      	movs	r3, #8
 800b1b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1b4:	e006      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b1b6:	2310      	movs	r3, #16
 800b1b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b1bc:	e002      	b.n	800b1c4 <UART_SetConfig+0x210>
 800b1be:	2310      	movs	r3, #16
 800b1c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a25      	ldr	r2, [pc, #148]	; (800b260 <UART_SetConfig+0x2ac>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	f040 808a 	bne.w	800b2e4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d824      	bhi.n	800b222 <UART_SetConfig+0x26e>
 800b1d8:	a201      	add	r2, pc, #4	; (adr r2, 800b1e0 <UART_SetConfig+0x22c>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b205 	.word	0x0800b205
 800b1e4:	0800b223 	.word	0x0800b223
 800b1e8:	0800b20d 	.word	0x0800b20d
 800b1ec:	0800b223 	.word	0x0800b223
 800b1f0:	0800b213 	.word	0x0800b213
 800b1f4:	0800b223 	.word	0x0800b223
 800b1f8:	0800b223 	.word	0x0800b223
 800b1fc:	0800b223 	.word	0x0800b223
 800b200:	0800b21b 	.word	0x0800b21b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b204:	f7fd fb00 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800b208:	61f8      	str	r0, [r7, #28]
        break;
 800b20a:	e010      	b.n	800b22e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b20c:	4b19      	ldr	r3, [pc, #100]	; (800b274 <UART_SetConfig+0x2c0>)
 800b20e:	61fb      	str	r3, [r7, #28]
        break;
 800b210:	e00d      	b.n	800b22e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b212:	f7fd fa61 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 800b216:	61f8      	str	r0, [r7, #28]
        break;
 800b218:	e009      	b.n	800b22e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b21e:	61fb      	str	r3, [r7, #28]
        break;
 800b220:	e005      	b.n	800b22e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b22c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 8109 	beq.w	800b448 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	4613      	mov	r3, r2
 800b23c:	005b      	lsls	r3, r3, #1
 800b23e:	4413      	add	r3, r2
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	429a      	cmp	r2, r3
 800b244:	d305      	bcc.n	800b252 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b24c:	69fa      	ldr	r2, [r7, #28]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d912      	bls.n	800b278 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b258:	e0f6      	b.n	800b448 <UART_SetConfig+0x494>
 800b25a:	bf00      	nop
 800b25c:	efff69f3 	.word	0xefff69f3
 800b260:	40008000 	.word	0x40008000
 800b264:	40013800 	.word	0x40013800
 800b268:	40021000 	.word	0x40021000
 800b26c:	40004400 	.word	0x40004400
 800b270:	40004800 	.word	0x40004800
 800b274:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	2200      	movs	r2, #0
 800b27c:	461c      	mov	r4, r3
 800b27e:	4615      	mov	r5, r2
 800b280:	f04f 0200 	mov.w	r2, #0
 800b284:	f04f 0300 	mov.w	r3, #0
 800b288:	022b      	lsls	r3, r5, #8
 800b28a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b28e:	0222      	lsls	r2, r4, #8
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	6849      	ldr	r1, [r1, #4]
 800b294:	0849      	lsrs	r1, r1, #1
 800b296:	2000      	movs	r0, #0
 800b298:	4688      	mov	r8, r1
 800b29a:	4681      	mov	r9, r0
 800b29c:	eb12 0a08 	adds.w	sl, r2, r8
 800b2a0:	eb43 0b09 	adc.w	fp, r3, r9
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	603b      	str	r3, [r7, #0]
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	f7f5 fc77 	bl	8000ba8 <__aeabi_uldivmod>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4613      	mov	r3, r2
 800b2c0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2c8:	d308      	bcc.n	800b2dc <UART_SetConfig+0x328>
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2d0:	d204      	bcs.n	800b2dc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	69ba      	ldr	r2, [r7, #24]
 800b2d8:	60da      	str	r2, [r3, #12]
 800b2da:	e0b5      	b.n	800b448 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b2e2:	e0b1      	b.n	800b448 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	69db      	ldr	r3, [r3, #28]
 800b2e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2ec:	d15d      	bne.n	800b3aa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800b2ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2f2:	2b08      	cmp	r3, #8
 800b2f4:	d827      	bhi.n	800b346 <UART_SetConfig+0x392>
 800b2f6:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <UART_SetConfig+0x348>)
 800b2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b329 	.word	0x0800b329
 800b304:	0800b331 	.word	0x0800b331
 800b308:	0800b347 	.word	0x0800b347
 800b30c:	0800b337 	.word	0x0800b337
 800b310:	0800b347 	.word	0x0800b347
 800b314:	0800b347 	.word	0x0800b347
 800b318:	0800b347 	.word	0x0800b347
 800b31c:	0800b33f 	.word	0x0800b33f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b320:	f7fd fa72 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800b324:	61f8      	str	r0, [r7, #28]
        break;
 800b326:	e014      	b.n	800b352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b328:	f7fd fa84 	bl	8008834 <HAL_RCC_GetPCLK2Freq>
 800b32c:	61f8      	str	r0, [r7, #28]
        break;
 800b32e:	e010      	b.n	800b352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b330:	4b4c      	ldr	r3, [pc, #304]	; (800b464 <UART_SetConfig+0x4b0>)
 800b332:	61fb      	str	r3, [r7, #28]
        break;
 800b334:	e00d      	b.n	800b352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b336:	f7fd f9cf 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 800b33a:	61f8      	str	r0, [r7, #28]
        break;
 800b33c:	e009      	b.n	800b352 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b33e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b342:	61fb      	str	r3, [r7, #28]
        break;
 800b344:	e005      	b.n	800b352 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d077      	beq.n	800b448 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	005a      	lsls	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	441a      	add	r2, r3
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b0f      	cmp	r3, #15
 800b372:	d916      	bls.n	800b3a2 <UART_SetConfig+0x3ee>
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b37a:	d212      	bcs.n	800b3a2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f023 030f 	bic.w	r3, r3, #15
 800b384:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	085b      	lsrs	r3, r3, #1
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	b29a      	uxth	r2, r3
 800b392:	8afb      	ldrh	r3, [r7, #22]
 800b394:	4313      	orrs	r3, r2
 800b396:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	8afa      	ldrh	r2, [r7, #22]
 800b39e:	60da      	str	r2, [r3, #12]
 800b3a0:	e052      	b.n	800b448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b3a8:	e04e      	b.n	800b448 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b3ae:	2b08      	cmp	r3, #8
 800b3b0:	d827      	bhi.n	800b402 <UART_SetConfig+0x44e>
 800b3b2:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <UART_SetConfig+0x404>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b3dd 	.word	0x0800b3dd
 800b3bc:	0800b3e5 	.word	0x0800b3e5
 800b3c0:	0800b3ed 	.word	0x0800b3ed
 800b3c4:	0800b403 	.word	0x0800b403
 800b3c8:	0800b3f3 	.word	0x0800b3f3
 800b3cc:	0800b403 	.word	0x0800b403
 800b3d0:	0800b403 	.word	0x0800b403
 800b3d4:	0800b403 	.word	0x0800b403
 800b3d8:	0800b3fb 	.word	0x0800b3fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3dc:	f7fd fa14 	bl	8008808 <HAL_RCC_GetPCLK1Freq>
 800b3e0:	61f8      	str	r0, [r7, #28]
        break;
 800b3e2:	e014      	b.n	800b40e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3e4:	f7fd fa26 	bl	8008834 <HAL_RCC_GetPCLK2Freq>
 800b3e8:	61f8      	str	r0, [r7, #28]
        break;
 800b3ea:	e010      	b.n	800b40e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3ec:	4b1d      	ldr	r3, [pc, #116]	; (800b464 <UART_SetConfig+0x4b0>)
 800b3ee:	61fb      	str	r3, [r7, #28]
        break;
 800b3f0:	e00d      	b.n	800b40e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3f2:	f7fd f971 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 800b3f6:	61f8      	str	r0, [r7, #28]
        break;
 800b3f8:	e009      	b.n	800b40e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3fe:	61fb      	str	r3, [r7, #28]
        break;
 800b400:	e005      	b.n	800b40e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b40c:	bf00      	nop
    }

    if (pclk != 0U)
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d019      	beq.n	800b448 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	085a      	lsrs	r2, r3, #1
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	441a      	add	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	fbb2 f3f3 	udiv	r3, r2, r3
 800b426:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	2b0f      	cmp	r3, #15
 800b42c:	d909      	bls.n	800b442 <UART_SetConfig+0x48e>
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b434:	d205      	bcs.n	800b442 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	b29a      	uxth	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60da      	str	r2, [r3, #12]
 800b440:	e002      	b.n	800b448 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2200      	movs	r2, #0
 800b44c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3728      	adds	r7, #40	; 0x28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b462:	bf00      	nop
 800b464:	00f42400 	.word	0x00f42400

0800b468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00a      	beq.n	800b4b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00a      	beq.n	800b4d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	430a      	orrs	r2, r1
 800b4d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4da:	f003 0308 	and.w	r3, r3, #8
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00a      	beq.n	800b4f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	f003 0310 	and.w	r3, r3, #16
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00a      	beq.n	800b51a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	430a      	orrs	r2, r1
 800b518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	430a      	orrs	r2, r1
 800b53a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01a      	beq.n	800b57e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	430a      	orrs	r2, r1
 800b55c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b566:	d10a      	bne.n	800b57e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	430a      	orrs	r2, r1
 800b59e:	605a      	str	r2, [r3, #4]
  }
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b086      	sub	sp, #24
 800b5b0:	af02      	add	r7, sp, #8
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5bc:	f7fa fcf2 	bl	8005fa4 <HAL_GetTick>
 800b5c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0308 	and.w	r3, r3, #8
 800b5cc:	2b08      	cmp	r3, #8
 800b5ce:	d10e      	bne.n	800b5ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f82d 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	e023      	b.n	800b636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d10e      	bne.n	800b61a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f817 	bl	800b63e <UART_WaitOnFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e00d      	b.n	800b636 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2220      	movs	r2, #32
 800b61e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2220      	movs	r2, #32
 800b624:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b09c      	sub	sp, #112	; 0x70
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	603b      	str	r3, [r7, #0]
 800b64a:	4613      	mov	r3, r2
 800b64c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b64e:	e0a5      	b.n	800b79c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b656:	f000 80a1 	beq.w	800b79c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b65a:	f7fa fca3 	bl	8005fa4 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b666:	429a      	cmp	r2, r3
 800b668:	d302      	bcc.n	800b670 <UART_WaitOnFlagUntilTimeout+0x32>
 800b66a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d13e      	bne.n	800b6ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b684:	667b      	str	r3, [r7, #100]	; 0x64
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e6      	bne.n	800b670 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ac:	e853 3f00 	ldrex	r3, [r3]
 800b6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b4:	f023 0301 	bic.w	r3, r3, #1
 800b6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	3308      	adds	r3, #8
 800b6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800b6c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ca:	e841 2300 	strex	r3, r2, [r1]
 800b6ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1e5      	bne.n	800b6a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e067      	b.n	800b7be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d04f      	beq.n	800b79c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	69db      	ldr	r3, [r3, #28]
 800b702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70a:	d147      	bne.n	800b79c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b714:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	e853 3f00 	ldrex	r3, [r3]
 800b722:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b72a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	461a      	mov	r2, r3
 800b732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b734:	637b      	str	r3, [r7, #52]	; 0x34
 800b736:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b73c:	e841 2300 	strex	r3, r2, [r1]
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e6      	bne.n	800b716 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3308      	adds	r3, #8
 800b74e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	e853 3f00 	ldrex	r3, [r3]
 800b756:	613b      	str	r3, [r7, #16]
   return(result);
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3308      	adds	r3, #8
 800b766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b768:	623a      	str	r2, [r7, #32]
 800b76a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	69f9      	ldr	r1, [r7, #28]
 800b76e:	6a3a      	ldr	r2, [r7, #32]
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	61bb      	str	r3, [r7, #24]
   return(result);
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e5      	bne.n	800b748 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2220      	movs	r2, #32
 800b780:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2220      	movs	r2, #32
 800b786:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b798:	2303      	movs	r3, #3
 800b79a:	e010      	b.n	800b7be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69da      	ldr	r2, [r3, #28]
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	4013      	ands	r3, r2
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	bf0c      	ite	eq
 800b7ac:	2301      	moveq	r3, #1
 800b7ae:	2300      	movne	r3, #0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	f43f af4a 	beq.w	800b650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3770      	adds	r7, #112	; 0x70
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
	...

0800b7c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b097      	sub	sp, #92	; 0x5c
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	88fa      	ldrh	r2, [r7, #6]
 800b7e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	88fa      	ldrh	r2, [r7, #6]
 800b7e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7fa:	d10e      	bne.n	800b81a <UART_Start_Receive_IT+0x52>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d105      	bne.n	800b810 <UART_Start_Receive_IT+0x48>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b80a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b80e:	e02d      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	22ff      	movs	r2, #255	; 0xff
 800b814:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b818:	e028      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10d      	bne.n	800b83e <UART_Start_Receive_IT+0x76>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d104      	bne.n	800b834 <UART_Start_Receive_IT+0x6c>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	22ff      	movs	r2, #255	; 0xff
 800b82e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b832:	e01b      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	227f      	movs	r2, #127	; 0x7f
 800b838:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b83c:	e016      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b846:	d10d      	bne.n	800b864 <UART_Start_Receive_IT+0x9c>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	691b      	ldr	r3, [r3, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <UART_Start_Receive_IT+0x92>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	227f      	movs	r2, #127	; 0x7f
 800b854:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b858:	e008      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	223f      	movs	r2, #63	; 0x3f
 800b85e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b862:	e003      	b.n	800b86c <UART_Start_Receive_IT+0xa4>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2222      	movs	r2, #34	; 0x22
 800b878:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	f043 0301 	orr.w	r3, r3, #1
 800b890:	657b      	str	r3, [r7, #84]	; 0x54
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b89a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b89c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e5      	bne.n	800b87a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b6:	d107      	bne.n	800b8c8 <UART_Start_Receive_IT+0x100>
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d103      	bne.n	800b8c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4a24      	ldr	r2, [pc, #144]	; (800b954 <UART_Start_Receive_IT+0x18c>)
 800b8c4:	665a      	str	r2, [r3, #100]	; 0x64
 800b8c6:	e002      	b.n	800b8ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	4a23      	ldr	r2, [pc, #140]	; (800b958 <UART_Start_Receive_IT+0x190>)
 800b8cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d019      	beq.n	800b912 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800b8fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e6      	bne.n	800b8de <UART_Start_Receive_IT+0x116>
 800b910:	e018      	b.n	800b944 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	613b      	str	r3, [r7, #16]
   return(result);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f043 0320 	orr.w	r3, r3, #32
 800b926:	653b      	str	r3, [r7, #80]	; 0x50
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	461a      	mov	r2, r3
 800b92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b934:	69f9      	ldr	r1, [r7, #28]
 800b936:	6a3a      	ldr	r2, [r7, #32]
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e6      	bne.n	800b912 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	375c      	adds	r7, #92	; 0x5c
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	0800be63 	.word	0x0800be63
 800b958:	0800bd03 	.word	0x0800bd03

0800b95c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b095      	sub	sp, #84	; 0x54
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b982:	643b      	str	r3, [r7, #64]	; 0x40
 800b984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1e6      	bne.n	800b964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	3308      	adds	r3, #8
 800b99c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	e853 3f00 	ldrex	r3, [r3]
 800b9a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
 800b9ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9be:	e841 2300 	strex	r3, r2, [r1]
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1e5      	bne.n	800b996 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d118      	bne.n	800ba04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	e853 3f00 	ldrex	r3, [r3]
 800b9de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f023 0310 	bic.w	r3, r3, #16
 800b9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f0:	61bb      	str	r3, [r7, #24]
 800b9f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f4:	6979      	ldr	r1, [r7, #20]
 800b9f6:	69ba      	ldr	r2, [r7, #24]
 800b9f8:	e841 2300 	strex	r3, r2, [r1]
 800b9fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e6      	bne.n	800b9d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ba16:	bf00      	nop
 800ba18:	3754      	adds	r7, #84	; 0x54
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f7ff fa97 	bl	800af74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba46:	bf00      	nop
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba60:	2200      	movs	r2, #0
 800ba62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d11c      	bne.n	800bab0 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	220f      	movs	r2, #15
 800ba94:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff fa6d 	bl	800af88 <HAL_UART_AbortCpltCallback>
 800baae:	e000      	b.n	800bab2 <UART_DMATxAbortCallback+0x64>
      return;
 800bab0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac4:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	2200      	movs	r2, #0
 800bacc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d004      	beq.n	800bae0 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	2b00      	cmp	r3, #0
 800bade:	d126      	bne.n	800bb2e <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	220f      	movs	r2, #15
 800bafe:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	8b1b      	ldrh	r3, [r3, #24]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0208 	orr.w	r2, r2, #8
 800bb10:	b292      	uxth	r2, r2
 800bb12:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2220      	movs	r2, #32
 800bb18:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800bb26:	68f8      	ldr	r0, [r7, #12]
 800bb28:	f7ff fa2e 	bl	800af88 <HAL_UART_AbortCpltCallback>
 800bb2c:	e000      	b.n	800bb30 <UART_DMARxAbortCallback+0x78>
      return;
 800bb2e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b08f      	sub	sp, #60	; 0x3c
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb42:	2b21      	cmp	r3, #33	; 0x21
 800bb44:	d14d      	bne.n	800bbe2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d132      	bne.n	800bbb8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	e853 3f00 	ldrex	r3, [r3]
 800bb5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb66:	637b      	str	r3, [r7, #52]	; 0x34
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb72:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb78:	e841 2300 	strex	r3, r2, [r1]
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1e6      	bne.n	800bb52 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	e853 3f00 	ldrex	r3, [r3]
 800bb90:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb98:	633b      	str	r3, [r7, #48]	; 0x30
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	461a      	mov	r2, r3
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	61bb      	str	r3, [r7, #24]
 800bba4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba6:	6979      	ldr	r1, [r7, #20]
 800bba8:	69ba      	ldr	r2, [r7, #24]
 800bbaa:	e841 2300 	strex	r3, r2, [r1]
 800bbae:	613b      	str	r3, [r7, #16]
   return(result);
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1e6      	bne.n	800bb84 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bbb6:	e014      	b.n	800bbe2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbbc:	781a      	ldrb	r2, [r3, #0]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	b292      	uxth	r2, r2
 800bbc4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bbe2:	bf00      	nop
 800bbe4:	373c      	adds	r7, #60	; 0x3c
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b091      	sub	sp, #68	; 0x44
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbfa:	2b21      	cmp	r3, #33	; 0x21
 800bbfc:	d151      	bne.n	800bca2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d132      	bne.n	800bc70 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	623b      	str	r3, [r7, #32]
   return(result);
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc1e:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	461a      	mov	r2, r3
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30
 800bc2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e6      	bne.n	800bc0a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc50:	637b      	str	r3, [r7, #52]	; 0x34
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc5a:	61fb      	str	r3, [r7, #28]
 800bc5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	69b9      	ldr	r1, [r7, #24]
 800bc60:	69fa      	ldr	r2, [r7, #28]
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	617b      	str	r3, [r7, #20]
   return(result);
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e6      	bne.n	800bc3c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bc6e:	e018      	b.n	800bca2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc78:	881a      	ldrh	r2, [r3, #0]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc82:	b292      	uxth	r2, r2
 800bc84:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc8a:	1c9a      	adds	r2, r3, #2
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bca2:	bf00      	nop
 800bca4:	3744      	adds	r7, #68	; 0x44
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b088      	sub	sp, #32
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	e853 3f00 	ldrex	r3, [r3]
 800bcc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	61bb      	str	r3, [r7, #24]
 800bcd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd8:	6979      	ldr	r1, [r7, #20]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	e841 2300 	strex	r3, r2, [r1]
 800bce0:	613b      	str	r3, [r7, #16]
   return(result);
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d1e6      	bne.n	800bcb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2220      	movs	r2, #32
 800bcec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7ff f933 	bl	800af60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcfa:	bf00      	nop
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b096      	sub	sp, #88	; 0x58
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd10:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd18:	2b22      	cmp	r3, #34	; 0x22
 800bd1a:	f040 8094 	bne.w	800be46 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd24:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd28:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bd2c:	b2d9      	uxtb	r1, r3
 800bd2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd38:	400a      	ands	r2, r1
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d179      	bne.n	800be5a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	e853 3f00 	ldrex	r3, [r3]
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd7a:	653b      	str	r3, [r7, #80]	; 0x50
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	461a      	mov	r2, r3
 800bd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd84:	647b      	str	r3, [r7, #68]	; 0x44
 800bd86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd8c:	e841 2300 	strex	r3, r2, [r1]
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1e6      	bne.n	800bd66 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	623b      	str	r3, [r7, #32]
   return(result);
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdb8:	633a      	str	r2, [r7, #48]	; 0x30
 800bdba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc0:	e841 2300 	strex	r3, r2, [r1]
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e5      	bne.n	800bd98 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d12e      	bne.n	800be3e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	e853 3f00 	ldrex	r3, [r3]
 800bdf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f023 0310 	bic.w	r3, r3, #16
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	461a      	mov	r2, r3
 800be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be04:	61fb      	str	r3, [r7, #28]
 800be06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be08:	69b9      	ldr	r1, [r7, #24]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	e841 2300 	strex	r3, r2, [r1]
 800be10:	617b      	str	r3, [r7, #20]
   return(result);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1e6      	bne.n	800bde6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	f003 0310 	and.w	r3, r3, #16
 800be22:	2b10      	cmp	r3, #16
 800be24:	d103      	bne.n	800be2e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2210      	movs	r2, #16
 800be2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be34:	4619      	mov	r1, r3
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f7ff f8b0 	bl	800af9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be3c:	e00d      	b.n	800be5a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7f8 f958 	bl	80040f4 <HAL_UART_RxCpltCallback>
}
 800be44:	e009      	b.n	800be5a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	8b1b      	ldrh	r3, [r3, #24]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0208 	orr.w	r2, r2, #8
 800be56:	b292      	uxth	r2, r2
 800be58:	831a      	strh	r2, [r3, #24]
}
 800be5a:	bf00      	nop
 800be5c:	3758      	adds	r7, #88	; 0x58
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b096      	sub	sp, #88	; 0x58
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be78:	2b22      	cmp	r3, #34	; 0x22
 800be7a:	f040 8094 	bne.w	800bfa6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be8c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800be8e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800be92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800be96:	4013      	ands	r3, r2
 800be98:	b29a      	uxth	r2, r3
 800be9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea2:	1c9a      	adds	r2, r3, #2
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800beae:	b29b      	uxth	r3, r3
 800beb0:	3b01      	subs	r3, #1
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d179      	bne.n	800bfba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bee4:	643b      	str	r3, [r7, #64]	; 0x40
 800bee6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800beea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800beec:	e841 2300 	strex	r3, r2, [r1]
 800bef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e6      	bne.n	800bec6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3308      	adds	r3, #8
 800befe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf00:	6a3b      	ldr	r3, [r7, #32]
 800bf02:	e853 3f00 	ldrex	r3, [r3]
 800bf06:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	f023 0301 	bic.w	r3, r3, #1
 800bf0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3308      	adds	r3, #8
 800bf16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf20:	e841 2300 	strex	r3, r2, [r1]
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d1e5      	bne.n	800bef8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d12e      	bne.n	800bf9e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	f023 0310 	bic.w	r3, r3, #16
 800bf5a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf64:	61bb      	str	r3, [r7, #24]
 800bf66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	6979      	ldr	r1, [r7, #20]
 800bf6a:	69ba      	ldr	r2, [r7, #24]
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	613b      	str	r3, [r7, #16]
   return(result);
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e6      	bne.n	800bf46 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	f003 0310 	and.w	r3, r3, #16
 800bf82:	2b10      	cmp	r3, #16
 800bf84:	d103      	bne.n	800bf8e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2210      	movs	r2, #16
 800bf8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf94:	4619      	mov	r1, r3
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7ff f800 	bl	800af9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf9c:	e00d      	b.n	800bfba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7f8 f8a8 	bl	80040f4 <HAL_UART_RxCpltCallback>
}
 800bfa4:	e009      	b.n	800bfba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	8b1b      	ldrh	r3, [r3, #24]
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0208 	orr.w	r2, r2, #8
 800bfb6:	b292      	uxth	r2, r2
 800bfb8:	831a      	strh	r2, [r3, #24]
}
 800bfba:	bf00      	nop
 800bfbc:	3758      	adds	r7, #88	; 0x58
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bfca:	bf00      	nop
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
	...

0800bfd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bfdc:	4904      	ldr	r1, [pc, #16]	; (800bff0 <MX_FATFS_Init+0x18>)
 800bfde:	4805      	ldr	r0, [pc, #20]	; (800bff4 <MX_FATFS_Init+0x1c>)
 800bfe0:	f003 fc0a 	bl	800f7f8 <FATFS_LinkDriver>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <MX_FATFS_Init+0x20>)
 800bfea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bfec:	bf00      	nop
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	2000072c 	.word	0x2000072c
 800bff4:	20000030 	.word	0x20000030
 800bff8:	20000728 	.word	0x20000728

0800bffc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c002:	4618      	mov	r0, r3
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr

0800c00c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_initialize(pdrv);
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	4618      	mov	r0, r3
 800c01a:	f7f9 fc15 	bl	8005848 <SD_disk_initialize>
 800c01e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c020:	4618      	mov	r0, r3
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	4603      	mov	r3, r0
 800c030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
    return SD_disk_status(pdrv);
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	4618      	mov	r0, r3
 800c036:	f7f9 fcf3 	bl	8005a20 <SD_disk_status>
 800c03a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3708      	adds	r7, #8
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60b9      	str	r1, [r7, #8]
 800c04c:	607a      	str	r2, [r7, #4]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 800c054:	7bf8      	ldrb	r0, [r7, #15]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	f7f9 fcf6 	bl	8005a4c <SD_disk_read>
 800c060:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	607a      	str	r2, [r7, #4]
 800c074:	603b      	str	r3, [r7, #0]
 800c076:	4603      	mov	r3, r0
 800c078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
    return SD_disk_write(pdrv, buff, sector, count);
 800c07a:	7bf8      	ldrb	r0, [r7, #15]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	68b9      	ldr	r1, [r7, #8]
 800c082:	f7f9 fd4d 	bl	8005b20 <SD_disk_write>
 800c086:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	603a      	str	r2, [r7, #0]
 800c09a:	71fb      	strb	r3, [r7, #7]
 800c09c:	460b      	mov	r3, r1
 800c09e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 800c0a0:	79b9      	ldrb	r1, [r7, #6]
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7f9 fdbe 	bl	8005c28 <SD_disk_ioctl>
 800c0ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
	...

0800c0b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c0c2:	79fb      	ldrb	r3, [r7, #7]
 800c0c4:	4a08      	ldr	r2, [pc, #32]	; (800c0e8 <disk_status+0x30>)
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	79fa      	ldrb	r2, [r7, #7]
 800c0d0:	4905      	ldr	r1, [pc, #20]	; (800c0e8 <disk_status+0x30>)
 800c0d2:	440a      	add	r2, r1
 800c0d4:	7a12      	ldrb	r2, [r2, #8]
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	4798      	blx	r3
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	20000958 	.word	0x20000958

0800c0ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c0fa:	79fb      	ldrb	r3, [r7, #7]
 800c0fc:	4a0d      	ldr	r2, [pc, #52]	; (800c134 <disk_initialize+0x48>)
 800c0fe:	5cd3      	ldrb	r3, [r2, r3]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d111      	bne.n	800c128 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	4a0b      	ldr	r2, [pc, #44]	; (800c134 <disk_initialize+0x48>)
 800c108:	2101      	movs	r1, #1
 800c10a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c10c:	79fb      	ldrb	r3, [r7, #7]
 800c10e:	4a09      	ldr	r2, [pc, #36]	; (800c134 <disk_initialize+0x48>)
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	4906      	ldr	r1, [pc, #24]	; (800c134 <disk_initialize+0x48>)
 800c11c:	440a      	add	r2, r1
 800c11e:	7a12      	ldrb	r2, [r2, #8]
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	4603      	mov	r3, r0
 800c126:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c128:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20000958 	.word	0x20000958

0800c138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60b9      	str	r1, [r7, #8]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	4a0a      	ldr	r2, [pc, #40]	; (800c174 <disk_read+0x3c>)
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	689c      	ldr	r4, [r3, #8]
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	4a07      	ldr	r2, [pc, #28]	; (800c174 <disk_read+0x3c>)
 800c158:	4413      	add	r3, r2
 800c15a:	7a18      	ldrb	r0, [r3, #8]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	47a0      	blx	r4
 800c164:	4603      	mov	r3, r0
 800c166:	75fb      	strb	r3, [r7, #23]
  return res;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd90      	pop	{r4, r7, pc}
 800c172:	bf00      	nop
 800c174:	20000958 	.word	0x20000958

0800c178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c178:	b590      	push	{r4, r7, lr}
 800c17a:	b087      	sub	sp, #28
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	4a0a      	ldr	r2, [pc, #40]	; (800c1b4 <disk_write+0x3c>)
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	68dc      	ldr	r4, [r3, #12]
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4a07      	ldr	r2, [pc, #28]	; (800c1b4 <disk_write+0x3c>)
 800c198:	4413      	add	r3, r2
 800c19a:	7a18      	ldrb	r0, [r3, #8]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	47a0      	blx	r4
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	371c      	adds	r7, #28
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd90      	pop	{r4, r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000958 	.word	0x20000958

0800c1b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	4603      	mov	r3, r0
 800c1c0:	603a      	str	r2, [r7, #0]
 800c1c2:	71fb      	strb	r3, [r7, #7]
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	4a09      	ldr	r2, [pc, #36]	; (800c1f0 <disk_ioctl+0x38>)
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	79fa      	ldrb	r2, [r7, #7]
 800c1d6:	4906      	ldr	r1, [pc, #24]	; (800c1f0 <disk_ioctl+0x38>)
 800c1d8:	440a      	add	r2, r1
 800c1da:	7a10      	ldrb	r0, [r2, #8]
 800c1dc:	79b9      	ldrb	r1, [r7, #6]
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]
  return res;
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	20000958 	.word	0x20000958

0800c1f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3301      	adds	r3, #1
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c204:	89fb      	ldrh	r3, [r7, #14]
 800c206:	021b      	lsls	r3, r3, #8
 800c208:	b21a      	sxth	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	b21b      	sxth	r3, r3
 800c210:	4313      	orrs	r3, r2
 800c212:	b21b      	sxth	r3, r3
 800c214:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c216:	89fb      	ldrh	r3, [r7, #14]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3714      	adds	r7, #20
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3303      	adds	r3, #3
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	021b      	lsls	r3, r3, #8
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	3202      	adds	r2, #2
 800c23c:	7812      	ldrb	r2, [r2, #0]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	3201      	adds	r2, #1
 800c24a:	7812      	ldrb	r2, [r2, #0]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	021b      	lsls	r3, r3, #8
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	7812      	ldrb	r2, [r2, #0]
 800c258:	4313      	orrs	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c25c:	68fb      	ldr	r3, [r7, #12]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3714      	adds	r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	1c5a      	adds	r2, r3, #1
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	887a      	ldrh	r2, [r7, #2]
 800c27e:	b2d2      	uxtb	r2, r2
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	887b      	ldrh	r3, [r7, #2]
 800c284:	0a1b      	lsrs	r3, r3, #8
 800c286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	607a      	str	r2, [r7, #4]
 800c28e:	887a      	ldrh	r2, [r7, #2]
 800c290:	b2d2      	uxtb	r2, r2
 800c292:	701a      	strb	r2, [r3, #0]
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	701a      	strb	r2, [r3, #0]
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	0a1b      	lsrs	r3, r3, #8
 800c2ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	1c5a      	adds	r2, r3, #1
 800c2c0:	607a      	str	r2, [r7, #4]
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	b2d2      	uxtb	r2, r2
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	0a1b      	lsrs	r3, r3, #8
 800c2cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	1c5a      	adds	r2, r3, #1
 800c2d2:	607a      	str	r2, [r7, #4]
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	701a      	strb	r2, [r3, #0]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	1c5a      	adds	r2, r3, #1
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	b2d2      	uxtb	r2, r2
 800c2ea:	701a      	strb	r2, [r3, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c2f8:	b480      	push	{r7}
 800c2fa:	b087      	sub	sp, #28
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00d      	beq.n	800c32e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	1c53      	adds	r3, r2, #1
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	1c59      	adds	r1, r3, #1
 800c31c:	6179      	str	r1, [r7, #20]
 800c31e:	7812      	ldrb	r2, [r2, #0]
 800c320:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	607b      	str	r3, [r7, #4]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1f1      	bne.n	800c312 <mem_cpy+0x1a>
	}
}
 800c32e:	bf00      	nop
 800c330:	371c      	adds	r7, #28
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c33a:	b480      	push	{r7}
 800c33c:	b087      	sub	sp, #28
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	1c5a      	adds	r2, r3, #1
 800c34e:	617a      	str	r2, [r7, #20]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	3b01      	subs	r3, #1
 800c35a:	607b      	str	r3, [r7, #4]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f3      	bne.n	800c34a <mem_set+0x10>
}
 800c362:	bf00      	nop
 800c364:	bf00      	nop
 800c366:	371c      	adds	r7, #28
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c370:	b480      	push	{r7}
 800c372:	b089      	sub	sp, #36	; 0x24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	61fb      	str	r3, [r7, #28]
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c388:	69fb      	ldr	r3, [r7, #28]
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	61fa      	str	r2, [r7, #28]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	4619      	mov	r1, r3
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	61ba      	str	r2, [r7, #24]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	1acb      	subs	r3, r1, r3
 800c39c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	607b      	str	r3, [r7, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <mem_cmp+0x40>
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d0eb      	beq.n	800c388 <mem_cmp+0x18>

	return r;
 800c3b0:	697b      	ldr	r3, [r7, #20]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3724      	adds	r7, #36	; 0x24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c3c8:	e002      	b.n	800c3d0 <chk_chr+0x12>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	607b      	str	r3, [r7, #4]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <chk_chr+0x26>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d1f2      	bne.n	800c3ca <chk_chr+0xc>
	return *str;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c3fe:	2300      	movs	r3, #0
 800c400:	60bb      	str	r3, [r7, #8]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	60fb      	str	r3, [r7, #12]
 800c406:	e029      	b.n	800c45c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c408:	4a27      	ldr	r2, [pc, #156]	; (800c4a8 <chk_lock+0xb4>)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	011b      	lsls	r3, r3, #4
 800c40e:	4413      	add	r3, r2
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d01d      	beq.n	800c452 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c416:	4a24      	ldr	r2, [pc, #144]	; (800c4a8 <chk_lock+0xb4>)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	011b      	lsls	r3, r3, #4
 800c41c:	4413      	add	r3, r2
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d116      	bne.n	800c456 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c428:	4a1f      	ldr	r2, [pc, #124]	; (800c4a8 <chk_lock+0xb4>)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	4413      	add	r3, r2
 800c430:	3304      	adds	r3, #4
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c438:	429a      	cmp	r2, r3
 800c43a:	d10c      	bne.n	800c456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c43c:	4a1a      	ldr	r2, [pc, #104]	; (800c4a8 <chk_lock+0xb4>)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	011b      	lsls	r3, r3, #4
 800c442:	4413      	add	r3, r2
 800c444:	3308      	adds	r3, #8
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d102      	bne.n	800c456 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c450:	e007      	b.n	800c462 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c452:	2301      	movs	r3, #1
 800c454:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	3301      	adds	r3, #1
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d9d2      	bls.n	800c408 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d109      	bne.n	800c47c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d102      	bne.n	800c474 <chk_lock+0x80>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d101      	bne.n	800c478 <chk_lock+0x84>
 800c474:	2300      	movs	r3, #0
 800c476:	e010      	b.n	800c49a <chk_lock+0xa6>
 800c478:	2312      	movs	r3, #18
 800c47a:	e00e      	b.n	800c49a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d108      	bne.n	800c494 <chk_lock+0xa0>
 800c482:	4a09      	ldr	r2, [pc, #36]	; (800c4a8 <chk_lock+0xb4>)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	4413      	add	r3, r2
 800c48a:	330c      	adds	r3, #12
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c492:	d101      	bne.n	800c498 <chk_lock+0xa4>
 800c494:	2310      	movs	r3, #16
 800c496:	e000      	b.n	800c49a <chk_lock+0xa6>
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	20000738 	.word	0x20000738

0800c4ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	607b      	str	r3, [r7, #4]
 800c4b6:	e002      	b.n	800c4be <enq_lock+0x12>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	607b      	str	r3, [r7, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d806      	bhi.n	800c4d2 <enq_lock+0x26>
 800c4c4:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <enq_lock+0x40>)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	4413      	add	r3, r2
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1f2      	bne.n	800c4b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	bf14      	ite	ne
 800c4d8:	2301      	movne	r3, #1
 800c4da:	2300      	moveq	r3, #0
 800c4dc:	b2db      	uxtb	r3, r3
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
 800c4ea:	bf00      	nop
 800c4ec:	20000738 	.word	0x20000738

0800c4f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e01f      	b.n	800c540 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c500:	4a41      	ldr	r2, [pc, #260]	; (800c608 <inc_lock+0x118>)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	011b      	lsls	r3, r3, #4
 800c506:	4413      	add	r3, r2
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d113      	bne.n	800c53a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c512:	4a3d      	ldr	r2, [pc, #244]	; (800c608 <inc_lock+0x118>)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	011b      	lsls	r3, r3, #4
 800c518:	4413      	add	r3, r2
 800c51a:	3304      	adds	r3, #4
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c522:	429a      	cmp	r2, r3
 800c524:	d109      	bne.n	800c53a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c526:	4a38      	ldr	r2, [pc, #224]	; (800c608 <inc_lock+0x118>)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	011b      	lsls	r3, r3, #4
 800c52c:	4413      	add	r3, r2
 800c52e:	3308      	adds	r3, #8
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c536:	429a      	cmp	r2, r3
 800c538:	d006      	beq.n	800c548 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d9dc      	bls.n	800c500 <inc_lock+0x10>
 800c546:	e000      	b.n	800c54a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c548:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d132      	bne.n	800c5b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e002      	b.n	800c55c <inc_lock+0x6c>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d806      	bhi.n	800c570 <inc_lock+0x80>
 800c562:	4a29      	ldr	r2, [pc, #164]	; (800c608 <inc_lock+0x118>)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	011b      	lsls	r3, r3, #4
 800c568:	4413      	add	r3, r2
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f2      	bne.n	800c556 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b02      	cmp	r3, #2
 800c574:	d101      	bne.n	800c57a <inc_lock+0x8a>
 800c576:	2300      	movs	r3, #0
 800c578:	e040      	b.n	800c5fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	4922      	ldr	r1, [pc, #136]	; (800c608 <inc_lock+0x118>)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	440b      	add	r3, r1
 800c586:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	491e      	ldr	r1, [pc, #120]	; (800c608 <inc_lock+0x118>)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	011b      	lsls	r3, r3, #4
 800c592:	440b      	add	r3, r1
 800c594:	3304      	adds	r3, #4
 800c596:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695a      	ldr	r2, [r3, #20]
 800c59c:	491a      	ldr	r1, [pc, #104]	; (800c608 <inc_lock+0x118>)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	011b      	lsls	r3, r3, #4
 800c5a2:	440b      	add	r3, r1
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c5a8:	4a17      	ldr	r2, [pc, #92]	; (800c608 <inc_lock+0x118>)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	011b      	lsls	r3, r3, #4
 800c5ae:	4413      	add	r3, r2
 800c5b0:	330c      	adds	r3, #12
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d009      	beq.n	800c5d0 <inc_lock+0xe0>
 800c5bc:	4a12      	ldr	r2, [pc, #72]	; (800c608 <inc_lock+0x118>)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	011b      	lsls	r3, r3, #4
 800c5c2:	4413      	add	r3, r2
 800c5c4:	330c      	adds	r3, #12
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d001      	beq.n	800c5d0 <inc_lock+0xe0>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e015      	b.n	800c5fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d108      	bne.n	800c5e8 <inc_lock+0xf8>
 800c5d6:	4a0c      	ldr	r2, [pc, #48]	; (800c608 <inc_lock+0x118>)
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	4413      	add	r3, r2
 800c5de:	330c      	adds	r3, #12
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	e001      	b.n	800c5ec <inc_lock+0xfc>
 800c5e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5ec:	4906      	ldr	r1, [pc, #24]	; (800c608 <inc_lock+0x118>)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	011b      	lsls	r3, r3, #4
 800c5f2:	440b      	add	r3, r1
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3301      	adds	r3, #1
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20000738 	.word	0x20000738

0800c60c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3b01      	subs	r3, #1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d825      	bhi.n	800c66c <dec_lock+0x60>
		n = Files[i].ctr;
 800c620:	4a17      	ldr	r2, [pc, #92]	; (800c680 <dec_lock+0x74>)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	4413      	add	r3, r2
 800c628:	330c      	adds	r3, #12
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c62e:	89fb      	ldrh	r3, [r7, #14]
 800c630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c634:	d101      	bne.n	800c63a <dec_lock+0x2e>
 800c636:	2300      	movs	r3, #0
 800c638:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c63a:	89fb      	ldrh	r3, [r7, #14]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <dec_lock+0x3a>
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	3b01      	subs	r3, #1
 800c644:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c646:	4a0e      	ldr	r2, [pc, #56]	; (800c680 <dec_lock+0x74>)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	330c      	adds	r3, #12
 800c650:	89fa      	ldrh	r2, [r7, #14]
 800c652:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c654:	89fb      	ldrh	r3, [r7, #14]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d105      	bne.n	800c666 <dec_lock+0x5a>
 800c65a:	4a09      	ldr	r2, [pc, #36]	; (800c680 <dec_lock+0x74>)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	011b      	lsls	r3, r3, #4
 800c660:	4413      	add	r3, r2
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c666:	2300      	movs	r3, #0
 800c668:	737b      	strb	r3, [r7, #13]
 800c66a:	e001      	b.n	800c670 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c66c:	2302      	movs	r3, #2
 800c66e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c670:	7b7b      	ldrb	r3, [r7, #13]
}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	20000738 	.word	0x20000738

0800c684 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c68c:	2300      	movs	r3, #0
 800c68e:	60fb      	str	r3, [r7, #12]
 800c690:	e010      	b.n	800c6b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c692:	4a0d      	ldr	r2, [pc, #52]	; (800c6c8 <clear_lock+0x44>)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	4413      	add	r3, r2
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d105      	bne.n	800c6ae <clear_lock+0x2a>
 800c6a2:	4a09      	ldr	r2, [pc, #36]	; (800c6c8 <clear_lock+0x44>)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	4413      	add	r3, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d9eb      	bls.n	800c692 <clear_lock+0xe>
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20000738 	.word	0x20000738

0800c6cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	78db      	ldrb	r3, [r3, #3]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d034      	beq.n	800c74a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	7858      	ldrb	r0, [r3, #1]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	f7ff fd40 	bl	800c178 <disk_write>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	e022      	b.n	800c74a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	1ad2      	subs	r2, r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6a1b      	ldr	r3, [r3, #32]
 800c716:	429a      	cmp	r2, r3
 800c718:	d217      	bcs.n	800c74a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	789b      	ldrb	r3, [r3, #2]
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	e010      	b.n	800c744 <sync_window+0x78>
					wsect += fs->fsize;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	697a      	ldr	r2, [r7, #20]
 800c728:	4413      	add	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7858      	ldrb	r0, [r3, #1]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c736:	2301      	movs	r3, #1
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	f7ff fd1d 	bl	800c178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3b01      	subs	r3, #1
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d8eb      	bhi.n	800c722 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d01b      	beq.n	800c7a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff ffad 	bl	800c6cc <sync_window>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d113      	bne.n	800c7a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7858      	ldrb	r0, [r3, #1]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c786:	2301      	movs	r3, #1
 800c788:	683a      	ldr	r2, [r7, #0]
 800c78a:	f7ff fcd5 	bl	800c138 <disk_read>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c794:	f04f 33ff 	mov.w	r3, #4294967295
 800c798:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c79a:	2301      	movs	r3, #1
 800c79c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff87 	bl	800c6cc <sync_window>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d159      	bne.n	800c87c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d149      	bne.n	800c864 <sync_fs+0xb4>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	791b      	ldrb	r3, [r3, #4]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d145      	bne.n	800c864 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	899b      	ldrh	r3, [r3, #12]
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	f7ff fda8 	bl	800c33a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	3338      	adds	r3, #56	; 0x38
 800c7ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fd37 	bl	800c26a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3338      	adds	r3, #56	; 0x38
 800c800:	4921      	ldr	r1, [pc, #132]	; (800c888 <sync_fs+0xd8>)
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff fd4c 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	3338      	adds	r3, #56	; 0x38
 800c80c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c810:	491e      	ldr	r1, [pc, #120]	; (800c88c <sync_fs+0xdc>)
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff fd44 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	3338      	adds	r3, #56	; 0x38
 800c81c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f7ff fd3a 	bl	800c2a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3338      	adds	r3, #56	; 0x38
 800c830:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	4619      	mov	r1, r3
 800c83a:	4610      	mov	r0, r2
 800c83c:	f7ff fd30 	bl	800c2a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	7858      	ldrb	r0, [r3, #1]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c858:	2301      	movs	r3, #1
 800c85a:	f7ff fc8d 	bl	800c178 <disk_write>
			fs->fsi_flag = 0;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	785b      	ldrb	r3, [r3, #1]
 800c868:	2200      	movs	r2, #0
 800c86a:	2100      	movs	r1, #0
 800c86c:	4618      	mov	r0, r3
 800c86e:	f7ff fca3 	bl	800c1b8 <disk_ioctl>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <sync_fs+0xcc>
 800c878:	2301      	movs	r3, #1
 800c87a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	41615252 	.word	0x41615252
 800c88c:	61417272 	.word	0x61417272

0800c890 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	3b02      	subs	r3, #2
 800c89e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	3b02      	subs	r3, #2
 800c8a6:	683a      	ldr	r2, [r7, #0]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d301      	bcc.n	800c8b0 <clust2sect+0x20>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e008      	b.n	800c8c2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	895b      	ldrh	r3, [r3, #10]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	fb03 f202 	mul.w	r2, r3, r2
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c0:	4413      	add	r3, r2
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	370c      	adds	r7, #12
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr

0800c8ce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d904      	bls.n	800c8ee <get_fat+0x20>
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d302      	bcc.n	800c8f4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	617b      	str	r3, [r7, #20]
 800c8f2:	e0bb      	b.n	800ca6c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	f000 8083 	beq.w	800ca0a <get_fat+0x13c>
 800c904:	2b03      	cmp	r3, #3
 800c906:	f300 80a7 	bgt.w	800ca58 <get_fat+0x18a>
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d002      	beq.n	800c914 <get_fat+0x46>
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d056      	beq.n	800c9c0 <get_fat+0xf2>
 800c912:	e0a1      	b.n	800ca58 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	085b      	lsrs	r3, r3, #1
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	899b      	ldrh	r3, [r3, #12]
 800c92a:	4619      	mov	r1, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c932:	4413      	add	r3, r2
 800c934:	4619      	mov	r1, r3
 800c936:	6938      	ldr	r0, [r7, #16]
 800c938:	f7ff ff0c 	bl	800c754 <move_window>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f040 808d 	bne.w	800ca5e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	60fa      	str	r2, [r7, #12]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	8992      	ldrh	r2, [r2, #12]
 800c94e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c952:	fb01 f202 	mul.w	r2, r1, r2
 800c956:	1a9b      	subs	r3, r3, r2
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4413      	add	r3, r2
 800c95c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c960:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	899b      	ldrh	r3, [r3, #12]
 800c96a:	4619      	mov	r1, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c972:	4413      	add	r3, r2
 800c974:	4619      	mov	r1, r3
 800c976:	6938      	ldr	r0, [r7, #16]
 800c978:	f7ff feec 	bl	800c754 <move_window>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d16f      	bne.n	800ca62 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	899b      	ldrh	r3, [r3, #12]
 800c986:	461a      	mov	r2, r3
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c98e:	fb01 f202 	mul.w	r2, r1, r2
 800c992:	1a9b      	subs	r3, r3, r2
 800c994:	693a      	ldr	r2, [r7, #16]
 800c996:	4413      	add	r3, r2
 800c998:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	461a      	mov	r2, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	f003 0301 	and.w	r3, r3, #1
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <get_fat+0xe8>
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	091b      	lsrs	r3, r3, #4
 800c9b4:	e002      	b.n	800c9bc <get_fat+0xee>
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9bc:	617b      	str	r3, [r7, #20]
			break;
 800c9be:	e055      	b.n	800ca6c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	899b      	ldrh	r3, [r3, #12]
 800c9c8:	085b      	lsrs	r3, r3, #1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c9d4:	4413      	add	r3, r2
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6938      	ldr	r0, [r7, #16]
 800c9da:	f7ff febb 	bl	800c754 <move_window>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d140      	bne.n	800ca66 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	8992      	ldrh	r2, [r2, #12]
 800c9f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9f6:	fb00 f202 	mul.w	r2, r0, r2
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	440b      	add	r3, r1
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff fbf8 	bl	800c1f4 <ld_word>
 800ca04:	4603      	mov	r3, r0
 800ca06:	617b      	str	r3, [r7, #20]
			break;
 800ca08:	e030      	b.n	800ca6c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	899b      	ldrh	r3, [r3, #12]
 800ca12:	089b      	lsrs	r3, r3, #2
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	4619      	mov	r1, r3
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca1e:	4413      	add	r3, r2
 800ca20:	4619      	mov	r1, r3
 800ca22:	6938      	ldr	r0, [r7, #16]
 800ca24:	f7ff fe96 	bl	800c754 <move_window>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d11d      	bne.n	800ca6a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	8992      	ldrh	r2, [r2, #12]
 800ca3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca40:	fb00 f202 	mul.w	r2, r0, r2
 800ca44:	1a9b      	subs	r3, r3, r2
 800ca46:	440b      	add	r3, r1
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fbeb 	bl	800c224 <ld_dword>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca54:	617b      	str	r3, [r7, #20]
			break;
 800ca56:	e009      	b.n	800ca6c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ca58:	2301      	movs	r3, #1
 800ca5a:	617b      	str	r3, [r7, #20]
 800ca5c:	e006      	b.n	800ca6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca5e:	bf00      	nop
 800ca60:	e004      	b.n	800ca6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca62:	bf00      	nop
 800ca64:	e002      	b.n	800ca6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ca66:	bf00      	nop
 800ca68:	e000      	b.n	800ca6c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ca6a:	bf00      	nop
		}
	}

	return val;
 800ca6c:	697b      	ldr	r3, [r7, #20]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ca76:	b590      	push	{r4, r7, lr}
 800ca78:	b089      	sub	sp, #36	; 0x24
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	60b9      	str	r1, [r7, #8]
 800ca80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ca82:	2302      	movs	r3, #2
 800ca84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	f240 8102 	bls.w	800cc92 <put_fat+0x21c>
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	f080 80fc 	bcs.w	800cc92 <put_fat+0x21c>
		switch (fs->fs_type) {
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	f000 80b6 	beq.w	800cc10 <put_fat+0x19a>
 800caa4:	2b03      	cmp	r3, #3
 800caa6:	f300 80fd 	bgt.w	800cca4 <put_fat+0x22e>
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d003      	beq.n	800cab6 <put_fat+0x40>
 800caae:	2b02      	cmp	r3, #2
 800cab0:	f000 8083 	beq.w	800cbba <put_fat+0x144>
 800cab4:	e0f6      	b.n	800cca4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	085b      	lsrs	r3, r3, #1
 800cabe:	69ba      	ldr	r2, [r7, #24]
 800cac0:	4413      	add	r3, r2
 800cac2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	899b      	ldrh	r3, [r3, #12]
 800cacc:	4619      	mov	r1, r3
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cad4:	4413      	add	r3, r2
 800cad6:	4619      	mov	r1, r3
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	f7ff fe3b 	bl	800c754 <move_window>
 800cade:	4603      	mov	r3, r0
 800cae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cae2:	7ffb      	ldrb	r3, [r7, #31]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f040 80d6 	bne.w	800cc96 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	61ba      	str	r2, [r7, #24]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	8992      	ldrh	r2, [r2, #12]
 800cafa:	fbb3 f0f2 	udiv	r0, r3, r2
 800cafe:	fb00 f202 	mul.w	r2, r0, r2
 800cb02:	1a9b      	subs	r3, r3, r2
 800cb04:	440b      	add	r3, r1
 800cb06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00d      	beq.n	800cb2e <put_fat+0xb8>
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	b25b      	sxtb	r3, r3
 800cb18:	f003 030f 	and.w	r3, r3, #15
 800cb1c:	b25a      	sxtb	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	011b      	lsls	r3, r3, #4
 800cb24:	b25b      	sxtb	r3, r3
 800cb26:	4313      	orrs	r3, r2
 800cb28:	b25b      	sxtb	r3, r3
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	e001      	b.n	800cb32 <put_fat+0xbc>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	899b      	ldrh	r3, [r3, #12]
 800cb44:	4619      	mov	r1, r3
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb4c:	4413      	add	r3, r2
 800cb4e:	4619      	mov	r1, r3
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff fdff 	bl	800c754 <move_window>
 800cb56:	4603      	mov	r3, r0
 800cb58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cb5a:	7ffb      	ldrb	r3, [r7, #31]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f040 809c 	bne.w	800cc9a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	899b      	ldrh	r3, [r3, #12]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb74:	fb00 f202 	mul.w	r2, r0, r2
 800cb78:	1a9b      	subs	r3, r3, r2
 800cb7a:	440b      	add	r3, r1
 800cb7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d003      	beq.n	800cb90 <put_fat+0x11a>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	091b      	lsrs	r3, r3, #4
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	e00e      	b.n	800cbae <put_fat+0x138>
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	b25b      	sxtb	r3, r3
 800cb96:	f023 030f 	bic.w	r3, r3, #15
 800cb9a:	b25a      	sxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	b25b      	sxtb	r3, r3
 800cba2:	f003 030f 	and.w	r3, r3, #15
 800cba6:	b25b      	sxtb	r3, r3
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	b25b      	sxtb	r3, r3
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	697a      	ldr	r2, [r7, #20]
 800cbb0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	70da      	strb	r2, [r3, #3]
			break;
 800cbb8:	e074      	b.n	800cca4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	899b      	ldrh	r3, [r3, #12]
 800cbc2:	085b      	lsrs	r3, r3, #1
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	fbb3 f3f1 	udiv	r3, r3, r1
 800cbce:	4413      	add	r3, r2
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff fdbe 	bl	800c754 <move_window>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cbdc:	7ffb      	ldrb	r3, [r7, #31]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d15d      	bne.n	800cc9e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	8992      	ldrh	r2, [r2, #12]
 800cbf0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbf4:	fb00 f202 	mul.w	r2, r0, r2
 800cbf8:	1a9b      	subs	r3, r3, r2
 800cbfa:	440b      	add	r3, r1
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	b292      	uxth	r2, r2
 800cc00:	4611      	mov	r1, r2
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fb31 	bl	800c26a <st_word>
			fs->wflag = 1;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	70da      	strb	r2, [r3, #3]
			break;
 800cc0e:	e049      	b.n	800cca4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	899b      	ldrh	r3, [r3, #12]
 800cc18:	089b      	lsrs	r3, r3, #2
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc24:	4413      	add	r3, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f7ff fd93 	bl	800c754 <move_window>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc32:	7ffb      	ldrb	r3, [r7, #31]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d134      	bne.n	800cca2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	8992      	ldrh	r2, [r2, #12]
 800cc4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc50:	fb00 f202 	mul.w	r2, r0, r2
 800cc54:	1a9b      	subs	r3, r3, r2
 800cc56:	440b      	add	r3, r1
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7ff fae3 	bl	800c224 <ld_dword>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cc64:	4323      	orrs	r3, r4
 800cc66:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	8992      	ldrh	r2, [r2, #12]
 800cc76:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc7a:	fb00 f202 	mul.w	r2, r0, r2
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	440b      	add	r3, r1
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7ff fb0b 	bl	800c2a0 <st_dword>
			fs->wflag = 1;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	70da      	strb	r2, [r3, #3]
			break;
 800cc90:	e008      	b.n	800cca4 <put_fat+0x22e>
		}
	}
 800cc92:	bf00      	nop
 800cc94:	e006      	b.n	800cca4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc96:	bf00      	nop
 800cc98:	e004      	b.n	800cca4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc9a:	bf00      	nop
 800cc9c:	e002      	b.n	800cca4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cc9e:	bf00      	nop
 800cca0:	e000      	b.n	800cca4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cca2:	bf00      	nop
	return res;
 800cca4:	7ffb      	ldrb	r3, [r7, #31]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3724      	adds	r7, #36	; 0x24
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd90      	pop	{r4, r7, pc}

0800ccae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ccae:	b580      	push	{r7, lr}
 800ccb0:	b088      	sub	sp, #32
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d904      	bls.n	800ccd4 <remove_chain+0x26>
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	69db      	ldr	r3, [r3, #28]
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d301      	bcc.n	800ccd8 <remove_chain+0x2a>
 800ccd4:	2302      	movs	r3, #2
 800ccd6:	e04b      	b.n	800cd70 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ccde:	f04f 32ff 	mov.w	r2, #4294967295
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	69b8      	ldr	r0, [r7, #24]
 800cce6:	f7ff fec6 	bl	800ca76 <put_fat>
 800ccea:	4603      	mov	r3, r0
 800ccec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ccee:	7ffb      	ldrb	r3, [r7, #31]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <remove_chain+0x4a>
 800ccf4:	7ffb      	ldrb	r3, [r7, #31]
 800ccf6:	e03b      	b.n	800cd70 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ccf8:	68b9      	ldr	r1, [r7, #8]
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f7ff fde7 	bl	800c8ce <get_fat>
 800cd00:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d031      	beq.n	800cd6c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d101      	bne.n	800cd12 <remove_chain+0x64>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	e02e      	b.n	800cd70 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd18:	d101      	bne.n	800cd1e <remove_chain+0x70>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e028      	b.n	800cd70 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cd1e:	2200      	movs	r2, #0
 800cd20:	68b9      	ldr	r1, [r7, #8]
 800cd22:	69b8      	ldr	r0, [r7, #24]
 800cd24:	f7ff fea7 	bl	800ca76 <put_fat>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cd2c:	7ffb      	ldrb	r3, [r7, #31]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <remove_chain+0x88>
 800cd32:	7ffb      	ldrb	r3, [r7, #31]
 800cd34:	e01c      	b.n	800cd70 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	699a      	ldr	r2, [r3, #24]
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	69db      	ldr	r3, [r3, #28]
 800cd3e:	3b02      	subs	r3, #2
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d20b      	bcs.n	800cd5c <remove_chain+0xae>
			fs->free_clst++;
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	791b      	ldrb	r3, [r3, #4]
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d3c6      	bcc.n	800ccf8 <remove_chain+0x4a>
 800cd6a:	e000      	b.n	800cd6e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cd6c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3720      	adds	r7, #32
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b088      	sub	sp, #32
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d10d      	bne.n	800cdaa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <create_chain+0x2c>
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	69db      	ldr	r3, [r3, #28]
 800cd9e:	69ba      	ldr	r2, [r7, #24]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d31b      	bcc.n	800cddc <create_chain+0x64>
 800cda4:	2301      	movs	r3, #1
 800cda6:	61bb      	str	r3, [r7, #24]
 800cda8:	e018      	b.n	800cddc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7ff fd8e 	bl	800c8ce <get_fat>
 800cdb2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d801      	bhi.n	800cdbe <create_chain+0x46>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e070      	b.n	800cea0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc4:	d101      	bne.n	800cdca <create_chain+0x52>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	e06a      	b.n	800cea0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d201      	bcs.n	800cdd8 <create_chain+0x60>
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	e063      	b.n	800cea0 <create_chain+0x128>
		scl = clst;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	3301      	adds	r3, #1
 800cde4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	69fa      	ldr	r2, [r7, #28]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d307      	bcc.n	800ce00 <create_chain+0x88>
				ncl = 2;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cdf4:	69fa      	ldr	r2, [r7, #28]
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d901      	bls.n	800ce00 <create_chain+0x88>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	e04f      	b.n	800cea0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ce00:	69f9      	ldr	r1, [r7, #28]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff fd63 	bl	800c8ce <get_fat>
 800ce08:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00e      	beq.n	800ce2e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d003      	beq.n	800ce1e <create_chain+0xa6>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1c:	d101      	bne.n	800ce22 <create_chain+0xaa>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	e03e      	b.n	800cea0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ce22:	69fa      	ldr	r2, [r7, #28]
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d1da      	bne.n	800cde0 <create_chain+0x68>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e038      	b.n	800cea0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ce2e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ce30:	f04f 32ff 	mov.w	r2, #4294967295
 800ce34:	69f9      	ldr	r1, [r7, #28]
 800ce36:	6938      	ldr	r0, [r7, #16]
 800ce38:	f7ff fe1d 	bl	800ca76 <put_fat>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d109      	bne.n	800ce5a <create_chain+0xe2>
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ce4c:	69fa      	ldr	r2, [r7, #28]
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6938      	ldr	r0, [r7, #16]
 800ce52:	f7ff fe10 	bl	800ca76 <put_fat>
 800ce56:	4603      	mov	r3, r0
 800ce58:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d116      	bne.n	800ce8e <create_chain+0x116>
		fs->last_clst = ncl;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	699a      	ldr	r2, [r3, #24]
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	69db      	ldr	r3, [r3, #28]
 800ce6e:	3b02      	subs	r3, #2
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d804      	bhi.n	800ce7e <create_chain+0x106>
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	699b      	ldr	r3, [r3, #24]
 800ce78:	1e5a      	subs	r2, r3, #1
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	791b      	ldrb	r3, [r3, #4]
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	711a      	strb	r2, [r3, #4]
 800ce8c:	e007      	b.n	800ce9e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d102      	bne.n	800ce9a <create_chain+0x122>
 800ce94:	f04f 33ff 	mov.w	r3, #4294967295
 800ce98:	e000      	b.n	800ce9c <create_chain+0x124>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ce9e:	69fb      	ldr	r3, [r7, #28]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3720      	adds	r7, #32
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b087      	sub	sp, #28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	3304      	adds	r3, #4
 800cebe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	899b      	ldrh	r3, [r3, #12]
 800cec4:	461a      	mov	r2, r3
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	8952      	ldrh	r2, [r2, #10]
 800ced0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ced4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	1d1a      	adds	r2, r3, #4
 800ceda:	613a      	str	r2, [r7, #16]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <clmt_clust+0x42>
 800cee6:	2300      	movs	r3, #0
 800cee8:	e010      	b.n	800cf0c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d307      	bcc.n	800cf02 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cef2:	697a      	ldr	r2, [r7, #20]
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	617b      	str	r3, [r7, #20]
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	3304      	adds	r3, #4
 800cefe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf00:	e7e9      	b.n	800ced6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cf02:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	4413      	add	r3, r2
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	371c      	adds	r7, #28
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf2e:	d204      	bcs.n	800cf3a <dir_sdi+0x22>
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	f003 031f 	and.w	r3, r3, #31
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <dir_sdi+0x26>
		return FR_INT_ERR;
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	e071      	b.n	800d022 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d106      	bne.n	800cf5e <dir_sdi+0x46>
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d902      	bls.n	800cf5e <dir_sdi+0x46>
		clst = fs->dirbase;
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf5c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d10c      	bne.n	800cf7e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	095b      	lsrs	r3, r3, #5
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	8912      	ldrh	r2, [r2, #8]
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d301      	bcc.n	800cf74 <dir_sdi+0x5c>
 800cf70:	2302      	movs	r3, #2
 800cf72:	e056      	b.n	800d022 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	61da      	str	r2, [r3, #28]
 800cf7c:	e02d      	b.n	800cfda <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	895b      	ldrh	r3, [r3, #10]
 800cf82:	461a      	mov	r2, r3
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	899b      	ldrh	r3, [r3, #12]
 800cf88:	fb02 f303 	mul.w	r3, r2, r3
 800cf8c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cf8e:	e019      	b.n	800cfc4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6979      	ldr	r1, [r7, #20]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff fc9a 	bl	800c8ce <get_fat>
 800cf9a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa2:	d101      	bne.n	800cfa8 <dir_sdi+0x90>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e03c      	b.n	800d022 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d904      	bls.n	800cfb8 <dir_sdi+0xa0>
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	69db      	ldr	r3, [r3, #28]
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d301      	bcc.n	800cfbc <dir_sdi+0xa4>
 800cfb8:	2302      	movs	r3, #2
 800cfba:	e032      	b.n	800d022 <dir_sdi+0x10a>
			ofs -= csz;
 800cfbc:	683a      	ldr	r2, [r7, #0]
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cfc4:	683a      	ldr	r2, [r7, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d2e1      	bcs.n	800cf90 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cfcc:	6979      	ldr	r1, [r7, #20]
 800cfce:	6938      	ldr	r0, [r7, #16]
 800cfd0:	f7ff fc5e 	bl	800c890 <clust2sect>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	697a      	ldr	r2, [r7, #20]
 800cfde:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	69db      	ldr	r3, [r3, #28]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d101      	bne.n	800cfec <dir_sdi+0xd4>
 800cfe8:	2302      	movs	r3, #2
 800cfea:	e01a      	b.n	800d022 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	69da      	ldr	r2, [r3, #28]
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	899b      	ldrh	r3, [r3, #12]
 800cff4:	4619      	mov	r1, r3
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cffc:	441a      	add	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	899b      	ldrh	r3, [r3, #12]
 800d00c:	461a      	mov	r2, r3
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	fbb3 f0f2 	udiv	r0, r3, r2
 800d014:	fb00 f202 	mul.w	r2, r0, r2
 800d018:	1a9b      	subs	r3, r3, r2
 800d01a:	18ca      	adds	r2, r1, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b086      	sub	sp, #24
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	3320      	adds	r3, #32
 800d040:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	69db      	ldr	r3, [r3, #28]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d003      	beq.n	800d052 <dir_next+0x28>
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d050:	d301      	bcc.n	800d056 <dir_next+0x2c>
 800d052:	2304      	movs	r3, #4
 800d054:	e0bb      	b.n	800d1ce <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	899b      	ldrh	r3, [r3, #12]
 800d05a:	461a      	mov	r2, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d062:	fb01 f202 	mul.w	r2, r1, r2
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f040 809d 	bne.w	800d1a8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10b      	bne.n	800d098 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	095b      	lsrs	r3, r3, #5
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	8912      	ldrh	r2, [r2, #8]
 800d088:	4293      	cmp	r3, r2
 800d08a:	f0c0 808d 	bcc.w	800d1a8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	61da      	str	r2, [r3, #28]
 800d094:	2304      	movs	r3, #4
 800d096:	e09a      	b.n	800d1ce <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	899b      	ldrh	r3, [r3, #12]
 800d09c:	461a      	mov	r2, r3
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	8952      	ldrh	r2, [r2, #10]
 800d0a8:	3a01      	subs	r2, #1
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d17b      	bne.n	800d1a8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	f7ff fc08 	bl	800c8ce <get_fat>
 800d0be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d801      	bhi.n	800d0ca <dir_next+0xa0>
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	e081      	b.n	800d1ce <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d0:	d101      	bne.n	800d0d6 <dir_next+0xac>
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e07b      	b.n	800d1ce <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d359      	bcc.n	800d194 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d104      	bne.n	800d0f0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	61da      	str	r2, [r3, #28]
 800d0ec:	2304      	movs	r3, #4
 800d0ee:	e06e      	b.n	800d1ce <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	4610      	mov	r0, r2
 800d0fa:	f7ff fe3d 	bl	800cd78 <create_chain>
 800d0fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <dir_next+0xe0>
 800d106:	2307      	movs	r3, #7
 800d108:	e061      	b.n	800d1ce <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d101      	bne.n	800d114 <dir_next+0xea>
 800d110:	2302      	movs	r3, #2
 800d112:	e05c      	b.n	800d1ce <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d11a:	d101      	bne.n	800d120 <dir_next+0xf6>
 800d11c:	2301      	movs	r3, #1
 800d11e:	e056      	b.n	800d1ce <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f7ff fad3 	bl	800c6cc <sync_window>
 800d126:	4603      	mov	r3, r0
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d001      	beq.n	800d130 <dir_next+0x106>
 800d12c:	2301      	movs	r3, #1
 800d12e:	e04e      	b.n	800d1ce <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	899b      	ldrh	r3, [r3, #12]
 800d13a:	461a      	mov	r2, r3
 800d13c:	2100      	movs	r1, #0
 800d13e:	f7ff f8fc 	bl	800c33a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d142:	2300      	movs	r3, #0
 800d144:	613b      	str	r3, [r7, #16]
 800d146:	6979      	ldr	r1, [r7, #20]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff fba1 	bl	800c890 <clust2sect>
 800d14e:	4602      	mov	r2, r0
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	635a      	str	r2, [r3, #52]	; 0x34
 800d154:	e012      	b.n	800d17c <dir_next+0x152>
						fs->wflag = 1;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2201      	movs	r2, #1
 800d15a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff fab5 	bl	800c6cc <sync_window>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <dir_next+0x142>
 800d168:	2301      	movs	r3, #1
 800d16a:	e030      	b.n	800d1ce <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	3301      	adds	r3, #1
 800d170:	613b      	str	r3, [r7, #16]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d176:	1c5a      	adds	r2, r3, #1
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	635a      	str	r2, [r3, #52]	; 0x34
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	895b      	ldrh	r3, [r3, #10]
 800d180:	461a      	mov	r2, r3
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	4293      	cmp	r3, r2
 800d186:	d3e6      	bcc.n	800d156 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	697a      	ldr	r2, [r7, #20]
 800d198:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d19a:	6979      	ldr	r1, [r7, #20]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff fb77 	bl	800c890 <clust2sect>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	899b      	ldrh	r3, [r3, #12]
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1c0:	fb00 f202 	mul.w	r2, r0, r2
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	18ca      	adds	r2, r1, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d1e6:	2100      	movs	r1, #0
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff fe95 	bl	800cf18 <dir_sdi>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d12b      	bne.n	800d250 <dir_alloc+0x7a>
		n = 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	4619      	mov	r1, r3
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff faa6 	bl	800c754 <move_window>
 800d208:	4603      	mov	r3, r0
 800d20a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d20c:	7dfb      	ldrb	r3, [r7, #23]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d11d      	bne.n	800d24e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a1b      	ldr	r3, [r3, #32]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2be5      	cmp	r3, #229	; 0xe5
 800d21a:	d004      	beq.n	800d226 <dir_alloc+0x50>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d107      	bne.n	800d236 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	3301      	adds	r3, #1
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	693a      	ldr	r2, [r7, #16]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	429a      	cmp	r2, r3
 800d232:	d102      	bne.n	800d23a <dir_alloc+0x64>
 800d234:	e00c      	b.n	800d250 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d236:	2300      	movs	r3, #0
 800d238:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d23a:	2101      	movs	r1, #1
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7ff fef4 	bl	800d02a <dir_next>
 800d242:	4603      	mov	r3, r0
 800d244:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d0d7      	beq.n	800d1fc <dir_alloc+0x26>
 800d24c:	e000      	b.n	800d250 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d24e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	2b04      	cmp	r3, #4
 800d254:	d101      	bne.n	800d25a <dir_alloc+0x84>
 800d256:	2307      	movs	r3, #7
 800d258:	75fb      	strb	r3, [r7, #23]
	return res;
 800d25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	331a      	adds	r3, #26
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe ffbe 	bl	800c1f4 <ld_word>
 800d278:	4603      	mov	r3, r0
 800d27a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	2b03      	cmp	r3, #3
 800d282:	d109      	bne.n	800d298 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	3314      	adds	r3, #20
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe ffb3 	bl	800c1f4 <ld_word>
 800d28e:	4603      	mov	r3, r0
 800d290:	041b      	lsls	r3, r3, #16
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d298:	68fb      	ldr	r3, [r7, #12]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	60f8      	str	r0, [r7, #12]
 800d2aa:	60b9      	str	r1, [r7, #8]
 800d2ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	331a      	adds	r3, #26
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	b292      	uxth	r2, r2
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7fe ffd6 	bl	800c26a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d109      	bne.n	800d2da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f103 0214 	add.w	r2, r3, #20
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	0c1b      	lsrs	r3, r3, #16
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	f7fe ffc8 	bl	800c26a <st_word>
	}
}
 800d2da:	bf00      	nop
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
	...

0800d2e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d2e4:	b590      	push	{r4, r7, lr}
 800d2e6:	b087      	sub	sp, #28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	331a      	adds	r3, #26
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe ff7e 	bl	800c1f4 <ld_word>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <cmp_lfn+0x1e>
 800d2fe:	2300      	movs	r3, #0
 800d300:	e059      	b.n	800d3b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d30a:	1e5a      	subs	r2, r3, #1
 800d30c:	4613      	mov	r3, r2
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d318:	2301      	movs	r3, #1
 800d31a:	81fb      	strh	r3, [r7, #14]
 800d31c:	2300      	movs	r3, #0
 800d31e:	613b      	str	r3, [r7, #16]
 800d320:	e033      	b.n	800d38a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d322:	4a27      	ldr	r2, [pc, #156]	; (800d3c0 <cmp_lfn+0xdc>)
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	4413      	add	r3, r2
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	4413      	add	r3, r2
 800d330:	4618      	mov	r0, r3
 800d332:	f7fe ff5f 	bl	800c1f4 <ld_word>
 800d336:	4603      	mov	r3, r0
 800d338:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d33a:	89fb      	ldrh	r3, [r7, #14]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01a      	beq.n	800d376 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	2bfe      	cmp	r3, #254	; 0xfe
 800d344:	d812      	bhi.n	800d36c <cmp_lfn+0x88>
 800d346:	89bb      	ldrh	r3, [r7, #12]
 800d348:	4618      	mov	r0, r3
 800d34a:	f002 faa1 	bl	800f890 <ff_wtoupper>
 800d34e:	4603      	mov	r3, r0
 800d350:	461c      	mov	r4, r3
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	617a      	str	r2, [r7, #20]
 800d358:	005b      	lsls	r3, r3, #1
 800d35a:	687a      	ldr	r2, [r7, #4]
 800d35c:	4413      	add	r3, r2
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	4618      	mov	r0, r3
 800d362:	f002 fa95 	bl	800f890 <ff_wtoupper>
 800d366:	4603      	mov	r3, r0
 800d368:	429c      	cmp	r4, r3
 800d36a:	d001      	beq.n	800d370 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d36c:	2300      	movs	r3, #0
 800d36e:	e022      	b.n	800d3b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d370:	89bb      	ldrh	r3, [r7, #12]
 800d372:	81fb      	strh	r3, [r7, #14]
 800d374:	e006      	b.n	800d384 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d376:	89bb      	ldrh	r3, [r7, #12]
 800d378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d001      	beq.n	800d384 <cmp_lfn+0xa0>
 800d380:	2300      	movs	r3, #0
 800d382:	e018      	b.n	800d3b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	3301      	adds	r3, #1
 800d388:	613b      	str	r3, [r7, #16]
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2b0c      	cmp	r3, #12
 800d38e:	d9c8      	bls.n	800d322 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00b      	beq.n	800d3b4 <cmp_lfn+0xd0>
 800d39c:	89fb      	ldrh	r3, [r7, #14]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d008      	beq.n	800d3b4 <cmp_lfn+0xd0>
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	005b      	lsls	r3, r3, #1
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <cmp_lfn+0xd0>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	e000      	b.n	800d3b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d3b4:	2301      	movs	r3, #1
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	371c      	adds	r7, #28
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd90      	pop	{r4, r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	080140a8 	.word	0x080140a8

0800d3c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b088      	sub	sp, #32
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	4611      	mov	r1, r2
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	71fb      	strb	r3, [r7, #7]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	330d      	adds	r3, #13
 800d3de:	79ba      	ldrb	r2, [r7, #6]
 800d3e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	330b      	adds	r3, #11
 800d3e6:	220f      	movs	r2, #15
 800d3e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	330c      	adds	r3, #12
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	331a      	adds	r3, #26
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fe ff36 	bl	800c26a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	1e5a      	subs	r2, r3, #1
 800d402:	4613      	mov	r3, r2
 800d404:	005b      	lsls	r3, r3, #1
 800d406:	4413      	add	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	4413      	add	r3, r2
 800d40c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	82fb      	strh	r3, [r7, #22]
 800d412:	2300      	movs	r3, #0
 800d414:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d416:	8afb      	ldrh	r3, [r7, #22]
 800d418:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d007      	beq.n	800d430 <put_lfn+0x6c>
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	1c5a      	adds	r2, r3, #1
 800d424:	61fa      	str	r2, [r7, #28]
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	4413      	add	r3, r2
 800d42c:	881b      	ldrh	r3, [r3, #0]
 800d42e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d430:	4a17      	ldr	r2, [pc, #92]	; (800d490 <put_lfn+0xcc>)
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	4413      	add	r3, r2
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	461a      	mov	r2, r3
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	4413      	add	r3, r2
 800d43e:	8afa      	ldrh	r2, [r7, #22]
 800d440:	4611      	mov	r1, r2
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe ff11 	bl	800c26a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d448:	8afb      	ldrh	r3, [r7, #22]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <put_lfn+0x90>
 800d44e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d452:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	3301      	adds	r3, #1
 800d458:	61bb      	str	r3, [r7, #24]
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	2b0c      	cmp	r3, #12
 800d45e:	d9da      	bls.n	800d416 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d460:	8afb      	ldrh	r3, [r7, #22]
 800d462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d466:	4293      	cmp	r3, r2
 800d468:	d006      	beq.n	800d478 <put_lfn+0xb4>
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	4413      	add	r3, r2
 800d472:	881b      	ldrh	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d103      	bne.n	800d480 <put_lfn+0xbc>
 800d478:	79fb      	ldrb	r3, [r7, #7]
 800d47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d47e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	79fa      	ldrb	r2, [r7, #7]
 800d484:	701a      	strb	r2, [r3, #0]
}
 800d486:	bf00      	nop
 800d488:	3720      	adds	r7, #32
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	080140a8 	.word	0x080140a8

0800d494 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08c      	sub	sp, #48	; 0x30
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d4a2:	220b      	movs	r2, #11
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7fe ff26 	bl	800c2f8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2b05      	cmp	r3, #5
 800d4b0:	d92b      	bls.n	800d50a <gen_numname+0x76>
		sr = seq;
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d4b6:	e022      	b.n	800d4fe <gen_numname+0x6a>
			wc = *lfn++;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	1c9a      	adds	r2, r3, #2
 800d4bc:	607a      	str	r2, [r7, #4]
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4c6:	e017      	b.n	800d4f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	005a      	lsls	r2, r3, #1
 800d4cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	4413      	add	r3, r2
 800d4d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d4d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4d8:	085b      	lsrs	r3, r3, #1
 800d4da:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d005      	beq.n	800d4f2 <gen_numname+0x5e>
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d4ec:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d4f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	2b0f      	cmp	r3, #15
 800d4fc:	d9e4      	bls.n	800d4c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d1d8      	bne.n	800d4b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d50a:	2307      	movs	r3, #7
 800d50c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	b2db      	uxtb	r3, r3
 800d512:	f003 030f 	and.w	r3, r3, #15
 800d516:	b2db      	uxtb	r3, r3
 800d518:	3330      	adds	r3, #48	; 0x30
 800d51a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d522:	2b39      	cmp	r3, #57	; 0x39
 800d524:	d904      	bls.n	800d530 <gen_numname+0x9c>
 800d526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d52a:	3307      	adds	r3, #7
 800d52c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	1e5a      	subs	r2, r3, #1
 800d534:	62ba      	str	r2, [r7, #40]	; 0x28
 800d536:	3330      	adds	r3, #48	; 0x30
 800d538:	443b      	add	r3, r7
 800d53a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d53e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	091b      	lsrs	r3, r3, #4
 800d546:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1df      	bne.n	800d50e <gen_numname+0x7a>
	ns[i] = '~';
 800d54e:	f107 0214 	add.w	r2, r7, #20
 800d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d554:	4413      	add	r3, r2
 800d556:	227e      	movs	r2, #126	; 0x7e
 800d558:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d55a:	2300      	movs	r3, #0
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24
 800d55e:	e002      	b.n	800d566 <gen_numname+0xd2>
 800d560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d562:	3301      	adds	r3, #1
 800d564:	627b      	str	r3, [r7, #36]	; 0x24
 800d566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d205      	bcs.n	800d57a <gen_numname+0xe6>
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	4413      	add	r3, r2
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b20      	cmp	r3, #32
 800d578:	d1f2      	bne.n	800d560 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	2b07      	cmp	r3, #7
 800d57e:	d807      	bhi.n	800d590 <gen_numname+0xfc>
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	62ba      	str	r2, [r7, #40]	; 0x28
 800d586:	3330      	adds	r3, #48	; 0x30
 800d588:	443b      	add	r3, r7
 800d58a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d58e:	e000      	b.n	800d592 <gen_numname+0xfe>
 800d590:	2120      	movs	r1, #32
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	627a      	str	r2, [r7, #36]	; 0x24
 800d598:	68fa      	ldr	r2, [r7, #12]
 800d59a:	4413      	add	r3, r2
 800d59c:	460a      	mov	r2, r1
 800d59e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	2b07      	cmp	r3, #7
 800d5a4:	d9e9      	bls.n	800d57a <gen_numname+0xe6>
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3730      	adds	r7, #48	; 0x30
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d5bc:	230b      	movs	r3, #11
 800d5be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	0852      	lsrs	r2, r2, #1
 800d5c6:	01db      	lsls	r3, r3, #7
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	b2da      	uxtb	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	1c59      	adds	r1, r3, #1
 800d5d0:	6079      	str	r1, [r7, #4]
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	60bb      	str	r3, [r7, #8]
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d1ed      	bne.n	800d5c0 <sum_sfn+0x10>
	return sum;
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b086      	sub	sp, #24
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d600:	2100      	movs	r1, #0
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff fc88 	bl	800cf18 <dir_sdi>
 800d608:	4603      	mov	r3, r0
 800d60a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d60c:	7dfb      	ldrb	r3, [r7, #23]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <dir_find+0x24>
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	e0a9      	b.n	800d76a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d616:	23ff      	movs	r3, #255	; 0xff
 800d618:	753b      	strb	r3, [r7, #20]
 800d61a:	7d3b      	ldrb	r3, [r7, #20]
 800d61c:	757b      	strb	r3, [r7, #21]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f04f 32ff 	mov.w	r2, #4294967295
 800d624:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	69db      	ldr	r3, [r3, #28]
 800d62a:	4619      	mov	r1, r3
 800d62c:	6938      	ldr	r0, [r7, #16]
 800d62e:	f7ff f891 	bl	800c754 <move_window>
 800d632:	4603      	mov	r3, r0
 800d634:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d636:	7dfb      	ldrb	r3, [r7, #23]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	f040 8090 	bne.w	800d75e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a1b      	ldr	r3, [r3, #32]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d646:	7dbb      	ldrb	r3, [r7, #22]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <dir_find+0x60>
 800d64c:	2304      	movs	r3, #4
 800d64e:	75fb      	strb	r3, [r7, #23]
 800d650:	e08a      	b.n	800d768 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	330b      	adds	r3, #11
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d65e:	73fb      	strb	r3, [r7, #15]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7bfa      	ldrb	r2, [r7, #15]
 800d664:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d666:	7dbb      	ldrb	r3, [r7, #22]
 800d668:	2be5      	cmp	r3, #229	; 0xe5
 800d66a:	d007      	beq.n	800d67c <dir_find+0x8a>
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
 800d66e:	f003 0308 	and.w	r3, r3, #8
 800d672:	2b00      	cmp	r3, #0
 800d674:	d009      	beq.n	800d68a <dir_find+0x98>
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	2b0f      	cmp	r3, #15
 800d67a:	d006      	beq.n	800d68a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d67c:	23ff      	movs	r3, #255	; 0xff
 800d67e:	757b      	strb	r3, [r7, #21]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f04f 32ff 	mov.w	r2, #4294967295
 800d686:	631a      	str	r2, [r3, #48]	; 0x30
 800d688:	e05e      	b.n	800d748 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d68a:	7bfb      	ldrb	r3, [r7, #15]
 800d68c:	2b0f      	cmp	r3, #15
 800d68e:	d136      	bne.n	800d6fe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d154      	bne.n	800d748 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d69e:	7dbb      	ldrb	r3, [r7, #22]
 800d6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d00d      	beq.n	800d6c4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	7b5b      	ldrb	r3, [r3, #13]
 800d6ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d6b0:	7dbb      	ldrb	r3, [r7, #22]
 800d6b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6b6:	75bb      	strb	r3, [r7, #22]
 800d6b8:	7dbb      	ldrb	r3, [r7, #22]
 800d6ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	695a      	ldr	r2, [r3, #20]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d6c4:	7dba      	ldrb	r2, [r7, #22]
 800d6c6:	7d7b      	ldrb	r3, [r7, #21]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d115      	bne.n	800d6f8 <dir_find+0x106>
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	330d      	adds	r3, #13
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	7d3a      	ldrb	r2, [r7, #20]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d10e      	bne.n	800d6f8 <dir_find+0x106>
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	691a      	ldr	r2, [r3, #16]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	f7ff fdfd 	bl	800d2e4 <cmp_lfn>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d003      	beq.n	800d6f8 <dir_find+0x106>
 800d6f0:	7d7b      	ldrb	r3, [r7, #21]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	e000      	b.n	800d6fa <dir_find+0x108>
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	757b      	strb	r3, [r7, #21]
 800d6fc:	e024      	b.n	800d748 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d6fe:	7d7b      	ldrb	r3, [r7, #21]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d109      	bne.n	800d718 <dir_find+0x126>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a1b      	ldr	r3, [r3, #32]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff ff51 	bl	800d5b0 <sum_sfn>
 800d70e:	4603      	mov	r3, r0
 800d710:	461a      	mov	r2, r3
 800d712:	7d3b      	ldrb	r3, [r7, #20]
 800d714:	4293      	cmp	r3, r2
 800d716:	d024      	beq.n	800d762 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10a      	bne.n	800d73c <dir_find+0x14a>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a18      	ldr	r0, [r3, #32]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	3324      	adds	r3, #36	; 0x24
 800d72e:	220b      	movs	r2, #11
 800d730:	4619      	mov	r1, r3
 800d732:	f7fe fe1d 	bl	800c370 <mem_cmp>
 800d736:	4603      	mov	r3, r0
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d014      	beq.n	800d766 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d73c:	23ff      	movs	r3, #255	; 0xff
 800d73e:	757b      	strb	r3, [r7, #21]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f04f 32ff 	mov.w	r2, #4294967295
 800d746:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d748:	2100      	movs	r1, #0
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff fc6d 	bl	800d02a <dir_next>
 800d750:	4603      	mov	r3, r0
 800d752:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d754:	7dfb      	ldrb	r3, [r7, #23]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f43f af65 	beq.w	800d626 <dir_find+0x34>
 800d75c:	e004      	b.n	800d768 <dir_find+0x176>
		if (res != FR_OK) break;
 800d75e:	bf00      	nop
 800d760:	e002      	b.n	800d768 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d762:	bf00      	nop
 800d764:	e000      	b.n	800d768 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d766:	bf00      	nop

	return res;
 800d768:	7dfb      	ldrb	r3, [r7, #23]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3718      	adds	r7, #24
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b08c      	sub	sp, #48	; 0x30
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d788:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d001      	beq.n	800d794 <dir_register+0x20>
 800d790:	2306      	movs	r3, #6
 800d792:	e0e0      	b.n	800d956 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d794:	2300      	movs	r3, #0
 800d796:	627b      	str	r3, [r7, #36]	; 0x24
 800d798:	e002      	b.n	800d7a0 <dir_register+0x2c>
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	3301      	adds	r3, #1
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
 800d7a0:	69fb      	ldr	r3, [r7, #28]
 800d7a2:	691a      	ldr	r2, [r3, #16]
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	4413      	add	r3, r2
 800d7aa:	881b      	ldrh	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f4      	bne.n	800d79a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d7b6:	f107 030c 	add.w	r3, r7, #12
 800d7ba:	220c      	movs	r2, #12
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fe fd9b 	bl	800c2f8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d032      	beq.n	800d832 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2240      	movs	r2, #64	; 0x40
 800d7d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7d8:	e016      	b.n	800d808 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	691a      	ldr	r2, [r3, #16]
 800d7e4:	f107 010c 	add.w	r1, r7, #12
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	f7ff fe53 	bl	800d494 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff feff 	bl	800d5f2 <dir_find>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d804:	3301      	adds	r3, #1
 800d806:	62bb      	str	r3, [r7, #40]	; 0x28
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	2b63      	cmp	r3, #99	; 0x63
 800d80c:	d9e5      	bls.n	800d7da <dir_register+0x66>
 800d80e:	e000      	b.n	800d812 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d810:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	2b64      	cmp	r3, #100	; 0x64
 800d816:	d101      	bne.n	800d81c <dir_register+0xa8>
 800d818:	2307      	movs	r3, #7
 800d81a:	e09c      	b.n	800d956 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d81c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d820:	2b04      	cmp	r3, #4
 800d822:	d002      	beq.n	800d82a <dir_register+0xb6>
 800d824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d828:	e095      	b.n	800d956 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d82a:	7dfa      	ldrb	r2, [r7, #23]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d832:	7dfb      	ldrb	r3, [r7, #23]
 800d834:	f003 0302 	and.w	r3, r3, #2
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <dir_register+0xd8>
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	330c      	adds	r3, #12
 800d840:	4a47      	ldr	r2, [pc, #284]	; (800d960 <dir_register+0x1ec>)
 800d842:	fba2 2303 	umull	r2, r3, r2, r3
 800d846:	089b      	lsrs	r3, r3, #2
 800d848:	3301      	adds	r3, #1
 800d84a:	e000      	b.n	800d84e <dir_register+0xda>
 800d84c:	2301      	movs	r3, #1
 800d84e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d850:	6a39      	ldr	r1, [r7, #32]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff fcbf 	bl	800d1d6 <dir_alloc>
 800d858:	4603      	mov	r3, r0
 800d85a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d85e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d862:	2b00      	cmp	r3, #0
 800d864:	d148      	bne.n	800d8f8 <dir_register+0x184>
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	3b01      	subs	r3, #1
 800d86a:	623b      	str	r3, [r7, #32]
 800d86c:	6a3b      	ldr	r3, [r7, #32]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d042      	beq.n	800d8f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	695a      	ldr	r2, [r3, #20]
 800d876:	6a3b      	ldr	r3, [r7, #32]
 800d878:	015b      	lsls	r3, r3, #5
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7ff fb4a 	bl	800cf18 <dir_sdi>
 800d884:	4603      	mov	r3, r0
 800d886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d88a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d132      	bne.n	800d8f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3324      	adds	r3, #36	; 0x24
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff fe8a 	bl	800d5b0 <sum_sfn>
 800d89c:	4603      	mov	r3, r0
 800d89e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	69db      	ldr	r3, [r3, #28]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	69f8      	ldr	r0, [r7, #28]
 800d8a8:	f7fe ff54 	bl	800c754 <move_window>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d8b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d11d      	bne.n	800d8f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	6918      	ldr	r0, [r3, #16]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6a19      	ldr	r1, [r3, #32]
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	7efb      	ldrb	r3, [r7, #27]
 800d8c8:	f7ff fd7c 	bl	800d3c4 <put_lfn>
				fs->wflag = 1;
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7ff fba8 	bl	800d02a <dir_next>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d8e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d107      	bne.n	800d8f8 <dir_register+0x184>
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	623b      	str	r3, [r7, #32]
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1d5      	bne.n	800d8a0 <dir_register+0x12c>
 800d8f4:	e000      	b.n	800d8f8 <dir_register+0x184>
				if (res != FR_OK) break;
 800d8f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d8f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d128      	bne.n	800d952 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	4619      	mov	r1, r3
 800d906:	69f8      	ldr	r0, [r7, #28]
 800d908:	f7fe ff24 	bl	800c754 <move_window>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d916:	2b00      	cmp	r3, #0
 800d918:	d11b      	bne.n	800d952 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a1b      	ldr	r3, [r3, #32]
 800d91e:	2220      	movs	r2, #32
 800d920:	2100      	movs	r1, #0
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fd09 	bl	800c33a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a18      	ldr	r0, [r3, #32]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	3324      	adds	r3, #36	; 0x24
 800d930:	220b      	movs	r2, #11
 800d932:	4619      	mov	r1, r3
 800d934:	f7fe fce0 	bl	800c2f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	330c      	adds	r3, #12
 800d944:	f002 0218 	and.w	r2, r2, #24
 800d948:	b2d2      	uxtb	r2, r2
 800d94a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2201      	movs	r2, #1
 800d950:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d956:	4618      	mov	r0, r3
 800d958:	3730      	adds	r7, #48	; 0x30
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	4ec4ec4f 	.word	0x4ec4ec4f

0800d964 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	613b      	str	r3, [r7, #16]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	691b      	ldr	r3, [r3, #16]
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	2300      	movs	r3, #0
 800d97e:	617b      	str	r3, [r7, #20]
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	1c5a      	adds	r2, r3, #1
 800d988:	61ba      	str	r2, [r7, #24]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	4413      	add	r3, r2
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d994:	2b1f      	cmp	r3, #31
 800d996:	d940      	bls.n	800da1a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d99a:	2b2f      	cmp	r3, #47	; 0x2f
 800d99c:	d006      	beq.n	800d9ac <create_name+0x48>
 800d99e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9a0:	2b5c      	cmp	r3, #92	; 0x5c
 800d9a2:	d110      	bne.n	800d9c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d9a4:	e002      	b.n	800d9ac <create_name+0x48>
 800d9a6:	69bb      	ldr	r3, [r7, #24]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	61bb      	str	r3, [r7, #24]
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	2b2f      	cmp	r3, #47	; 0x2f
 800d9b6:	d0f6      	beq.n	800d9a6 <create_name+0x42>
 800d9b8:	693a      	ldr	r2, [r7, #16]
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	4413      	add	r3, r2
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	2b5c      	cmp	r3, #92	; 0x5c
 800d9c2:	d0f0      	beq.n	800d9a6 <create_name+0x42>
			break;
 800d9c4:	e02a      	b.n	800da1c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d9ca:	d901      	bls.n	800d9d0 <create_name+0x6c>
 800d9cc:	2306      	movs	r3, #6
 800d9ce:	e17d      	b.n	800dccc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d8:	2101      	movs	r1, #1
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 ff1c 	bl	800f818 <ff_convert>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d9e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d101      	bne.n	800d9ee <create_name+0x8a>
 800d9ea:	2306      	movs	r3, #6
 800d9ec:	e16e      	b.n	800dccc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d9ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d9f2:	d809      	bhi.n	800da08 <create_name+0xa4>
 800d9f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	488d      	ldr	r0, [pc, #564]	; (800dc30 <create_name+0x2cc>)
 800d9fa:	f7fe fce0 	bl	800c3be <chk_chr>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d001      	beq.n	800da08 <create_name+0xa4>
 800da04:	2306      	movs	r3, #6
 800da06:	e161      	b.n	800dccc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	617a      	str	r2, [r7, #20]
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	4413      	add	r3, r2
 800da14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da16:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800da18:	e7b4      	b.n	800d984 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800da1a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	441a      	add	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da28:	2b1f      	cmp	r3, #31
 800da2a:	d801      	bhi.n	800da30 <create_name+0xcc>
 800da2c:	2304      	movs	r3, #4
 800da2e:	e000      	b.n	800da32 <create_name+0xce>
 800da30:	2300      	movs	r3, #0
 800da32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da36:	e011      	b.n	800da5c <create_name+0xf8>
		w = lfn[di - 1];
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da3e:	3b01      	subs	r3, #1
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	68fa      	ldr	r2, [r7, #12]
 800da44:	4413      	add	r3, r2
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800da4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da4c:	2b20      	cmp	r3, #32
 800da4e:	d002      	beq.n	800da56 <create_name+0xf2>
 800da50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da52:	2b2e      	cmp	r3, #46	; 0x2e
 800da54:	d106      	bne.n	800da64 <create_name+0x100>
		di--;
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	3b01      	subs	r3, #1
 800da5a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1ea      	bne.n	800da38 <create_name+0xd4>
 800da62:	e000      	b.n	800da66 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800da64:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	005b      	lsls	r3, r3, #1
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	4413      	add	r3, r2
 800da6e:	2200      	movs	r2, #0
 800da70:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <create_name+0x118>
 800da78:	2306      	movs	r3, #6
 800da7a:	e127      	b.n	800dccc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3324      	adds	r3, #36	; 0x24
 800da80:	220b      	movs	r2, #11
 800da82:	2120      	movs	r1, #32
 800da84:	4618      	mov	r0, r3
 800da86:	f7fe fc58 	bl	800c33a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800da8a:	2300      	movs	r3, #0
 800da8c:	61bb      	str	r3, [r7, #24]
 800da8e:	e002      	b.n	800da96 <create_name+0x132>
 800da90:	69bb      	ldr	r3, [r7, #24]
 800da92:	3301      	adds	r3, #1
 800da94:	61bb      	str	r3, [r7, #24]
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	68fa      	ldr	r2, [r7, #12]
 800da9c:	4413      	add	r3, r2
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	2b20      	cmp	r3, #32
 800daa2:	d0f5      	beq.n	800da90 <create_name+0x12c>
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	4413      	add	r3, r2
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	2b2e      	cmp	r3, #46	; 0x2e
 800dab0:	d0ee      	beq.n	800da90 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d009      	beq.n	800dacc <create_name+0x168>
 800dab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dabc:	f043 0303 	orr.w	r3, r3, #3
 800dac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dac4:	e002      	b.n	800dacc <create_name+0x168>
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	3b01      	subs	r3, #1
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d009      	beq.n	800dae6 <create_name+0x182>
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dad8:	3b01      	subs	r3, #1
 800dada:	005b      	lsls	r3, r3, #1
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	2b2e      	cmp	r3, #46	; 0x2e
 800dae4:	d1ef      	bne.n	800dac6 <create_name+0x162>

	i = b = 0; ni = 8;
 800dae6:	2300      	movs	r3, #0
 800dae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800daec:	2300      	movs	r3, #0
 800daee:	623b      	str	r3, [r7, #32]
 800daf0:	2308      	movs	r3, #8
 800daf2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	1c5a      	adds	r2, r3, #1
 800daf8:	61ba      	str	r2, [r7, #24]
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	68fa      	ldr	r2, [r7, #12]
 800dafe:	4413      	add	r3, r2
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800db04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db06:	2b00      	cmp	r3, #0
 800db08:	f000 8090 	beq.w	800dc2c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800db0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db0e:	2b20      	cmp	r3, #32
 800db10:	d006      	beq.n	800db20 <create_name+0x1bc>
 800db12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db14:	2b2e      	cmp	r3, #46	; 0x2e
 800db16:	d10a      	bne.n	800db2e <create_name+0x1ca>
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d006      	beq.n	800db2e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800db20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db24:	f043 0303 	orr.w	r3, r3, #3
 800db28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db2c:	e07d      	b.n	800dc2a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800db2e:	6a3a      	ldr	r2, [r7, #32]
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	429a      	cmp	r2, r3
 800db34:	d203      	bcs.n	800db3e <create_name+0x1da>
 800db36:	69ba      	ldr	r2, [r7, #24]
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d123      	bne.n	800db86 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800db3e:	69fb      	ldr	r3, [r7, #28]
 800db40:	2b0b      	cmp	r3, #11
 800db42:	d106      	bne.n	800db52 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800db44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db48:	f043 0303 	orr.w	r3, r3, #3
 800db4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800db50:	e075      	b.n	800dc3e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800db52:	69ba      	ldr	r2, [r7, #24]
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	429a      	cmp	r2, r3
 800db58:	d005      	beq.n	800db66 <create_name+0x202>
 800db5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db5e:	f043 0303 	orr.w	r3, r3, #3
 800db62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800db66:	69ba      	ldr	r2, [r7, #24]
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d866      	bhi.n	800dc3c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	61bb      	str	r3, [r7, #24]
 800db72:	2308      	movs	r3, #8
 800db74:	623b      	str	r3, [r7, #32]
 800db76:	230b      	movs	r3, #11
 800db78:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800db7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800db84:	e051      	b.n	800dc2a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800db86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db88:	2b7f      	cmp	r3, #127	; 0x7f
 800db8a:	d914      	bls.n	800dbb6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800db8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db8e:	2100      	movs	r1, #0
 800db90:	4618      	mov	r0, r3
 800db92:	f001 fe41 	bl	800f818 <ff_convert>
 800db96:	4603      	mov	r3, r0
 800db98:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800db9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d004      	beq.n	800dbaa <create_name+0x246>
 800dba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba2:	3b80      	subs	r3, #128	; 0x80
 800dba4:	4a23      	ldr	r2, [pc, #140]	; (800dc34 <create_name+0x2d0>)
 800dba6:	5cd3      	ldrb	r3, [r2, r3]
 800dba8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbae:	f043 0302 	orr.w	r3, r3, #2
 800dbb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dbb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d007      	beq.n	800dbcc <create_name+0x268>
 800dbbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	481d      	ldr	r0, [pc, #116]	; (800dc38 <create_name+0x2d4>)
 800dbc2:	f7fe fbfc 	bl	800c3be <chk_chr>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d008      	beq.n	800dbde <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dbcc:	235f      	movs	r3, #95	; 0x5f
 800dbce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbd4:	f043 0303 	orr.w	r3, r3, #3
 800dbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dbdc:	e01b      	b.n	800dc16 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dbde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe0:	2b40      	cmp	r3, #64	; 0x40
 800dbe2:	d909      	bls.n	800dbf8 <create_name+0x294>
 800dbe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbe6:	2b5a      	cmp	r3, #90	; 0x5a
 800dbe8:	d806      	bhi.n	800dbf8 <create_name+0x294>
					b |= 2;
 800dbea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dbee:	f043 0302 	orr.w	r3, r3, #2
 800dbf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dbf6:	e00e      	b.n	800dc16 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dbf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dbfa:	2b60      	cmp	r3, #96	; 0x60
 800dbfc:	d90b      	bls.n	800dc16 <create_name+0x2b2>
 800dbfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc00:	2b7a      	cmp	r3, #122	; 0x7a
 800dc02:	d808      	bhi.n	800dc16 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dc04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc08:	f043 0301 	orr.w	r3, r3, #1
 800dc0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc12:	3b20      	subs	r3, #32
 800dc14:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	623a      	str	r2, [r7, #32]
 800dc1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dc1e:	b2d1      	uxtb	r1, r2
 800dc20:	687a      	ldr	r2, [r7, #4]
 800dc22:	4413      	add	r3, r2
 800dc24:	460a      	mov	r2, r1
 800dc26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dc2a:	e763      	b.n	800daf4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dc2c:	bf00      	nop
 800dc2e:	e006      	b.n	800dc3e <create_name+0x2da>
 800dc30:	08013f8c 	.word	0x08013f8c
 800dc34:	08014028 	.word	0x08014028
 800dc38:	08013f98 	.word	0x08013f98
			if (si > di) break;			/* No extension */
 800dc3c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc44:	2be5      	cmp	r3, #229	; 0xe5
 800dc46:	d103      	bne.n	800dc50 <create_name+0x2ec>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2205      	movs	r2, #5
 800dc4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	2b08      	cmp	r3, #8
 800dc54:	d104      	bne.n	800dc60 <create_name+0x2fc>
 800dc56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dc60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc64:	f003 030c 	and.w	r3, r3, #12
 800dc68:	2b0c      	cmp	r3, #12
 800dc6a:	d005      	beq.n	800dc78 <create_name+0x314>
 800dc6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d105      	bne.n	800dc84 <create_name+0x320>
 800dc78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc7c:	f043 0302 	orr.w	r3, r3, #2
 800dc80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc88:	f003 0302 	and.w	r3, r3, #2
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d117      	bne.n	800dcc0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dc90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dc94:	f003 0303 	and.w	r3, r3, #3
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d105      	bne.n	800dca8 <create_name+0x344>
 800dc9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dca0:	f043 0310 	orr.w	r3, r3, #16
 800dca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcac:	f003 030c 	and.w	r3, r3, #12
 800dcb0:	2b04      	cmp	r3, #4
 800dcb2:	d105      	bne.n	800dcc0 <create_name+0x35c>
 800dcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb8:	f043 0308 	orr.w	r3, r3, #8
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dcc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dcca:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3728      	adds	r7, #40	; 0x28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dce8:	e002      	b.n	800dcf0 <follow_path+0x1c>
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	3301      	adds	r3, #1
 800dcee:	603b      	str	r3, [r7, #0]
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b2f      	cmp	r3, #47	; 0x2f
 800dcf6:	d0f8      	beq.n	800dcea <follow_path+0x16>
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2b5c      	cmp	r3, #92	; 0x5c
 800dcfe:	d0f4      	beq.n	800dcea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	2200      	movs	r2, #0
 800dd04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b1f      	cmp	r3, #31
 800dd0c:	d80a      	bhi.n	800dd24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2280      	movs	r2, #128	; 0x80
 800dd12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd16:	2100      	movs	r1, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff f8fd 	bl	800cf18 <dir_sdi>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	75fb      	strb	r3, [r7, #23]
 800dd22:	e048      	b.n	800ddb6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd24:	463b      	mov	r3, r7
 800dd26:	4619      	mov	r1, r3
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff fe1b 	bl	800d964 <create_name>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d139      	bne.n	800ddac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f7ff fc5a 	bl	800d5f2 <dir_find>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dd4a:	7dfb      	ldrb	r3, [r7, #23]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00a      	beq.n	800dd66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	2b04      	cmp	r3, #4
 800dd54:	d12c      	bne.n	800ddb0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dd56:	7afb      	ldrb	r3, [r7, #11]
 800dd58:	f003 0304 	and.w	r3, r3, #4
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d127      	bne.n	800ddb0 <follow_path+0xdc>
 800dd60:	2305      	movs	r3, #5
 800dd62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dd64:	e024      	b.n	800ddb0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dd66:	7afb      	ldrb	r3, [r7, #11]
 800dd68:	f003 0304 	and.w	r3, r3, #4
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d121      	bne.n	800ddb4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	799b      	ldrb	r3, [r3, #6]
 800dd74:	f003 0310 	and.w	r3, r3, #16
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d102      	bne.n	800dd82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dd7c:	2305      	movs	r3, #5
 800dd7e:	75fb      	strb	r3, [r7, #23]
 800dd80:	e019      	b.n	800ddb6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	8992      	ldrh	r2, [r2, #12]
 800dd90:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd94:	fb00 f202 	mul.w	r2, r0, r2
 800dd98:	1a9b      	subs	r3, r3, r2
 800dd9a:	440b      	add	r3, r1
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7ff fa60 	bl	800d264 <ld_clust>
 800dda4:	4602      	mov	r2, r0
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddaa:	e7bb      	b.n	800dd24 <follow_path+0x50>
			if (res != FR_OK) break;
 800ddac:	bf00      	nop
 800ddae:	e002      	b.n	800ddb6 <follow_path+0xe2>
				break;
 800ddb0:	bf00      	nop
 800ddb2:	e000      	b.n	800ddb6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddb4:	bf00      	nop
			}
		}
	}

	return res;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3718      	adds	r7, #24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ddc8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddcc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d031      	beq.n	800de3a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	e002      	b.n	800dde4 <get_ldnumber+0x24>
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	3301      	adds	r3, #1
 800dde2:	617b      	str	r3, [r7, #20]
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b1f      	cmp	r3, #31
 800ddea:	d903      	bls.n	800ddf4 <get_ldnumber+0x34>
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	2b3a      	cmp	r3, #58	; 0x3a
 800ddf2:	d1f4      	bne.n	800ddde <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2b3a      	cmp	r3, #58	; 0x3a
 800ddfa:	d11c      	bne.n	800de36 <get_ldnumber+0x76>
			tp = *path;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	1c5a      	adds	r2, r3, #1
 800de06:	60fa      	str	r2, [r7, #12]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	3b30      	subs	r3, #48	; 0x30
 800de0c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2b09      	cmp	r3, #9
 800de12:	d80e      	bhi.n	800de32 <get_ldnumber+0x72>
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d10a      	bne.n	800de32 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d107      	bne.n	800de32 <get_ldnumber+0x72>
					vol = (int)i;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	3301      	adds	r3, #1
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	e002      	b.n	800de3c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de36:	2300      	movs	r3, #0
 800de38:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de3a:	693b      	ldr	r3, [r7, #16]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	371c      	adds	r7, #28
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	70da      	strb	r2, [r3, #3]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f04f 32ff 	mov.w	r2, #4294967295
 800de5e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800de60:	6839      	ldr	r1, [r7, #0]
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7fe fc76 	bl	800c754 <move_window>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <check_fs+0x2a>
 800de6e:	2304      	movs	r3, #4
 800de70:	e038      	b.n	800dee4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	3338      	adds	r3, #56	; 0x38
 800de76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7fe f9ba 	bl	800c1f4 <ld_word>
 800de80:	4603      	mov	r3, r0
 800de82:	461a      	mov	r2, r3
 800de84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800de88:	429a      	cmp	r2, r3
 800de8a:	d001      	beq.n	800de90 <check_fs+0x48>
 800de8c:	2303      	movs	r3, #3
 800de8e:	e029      	b.n	800dee4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800de96:	2be9      	cmp	r3, #233	; 0xe9
 800de98:	d009      	beq.n	800deae <check_fs+0x66>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dea0:	2beb      	cmp	r3, #235	; 0xeb
 800dea2:	d11e      	bne.n	800dee2 <check_fs+0x9a>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800deaa:	2b90      	cmp	r3, #144	; 0x90
 800deac:	d119      	bne.n	800dee2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3338      	adds	r3, #56	; 0x38
 800deb2:	3336      	adds	r3, #54	; 0x36
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fe f9b5 	bl	800c224 <ld_dword>
 800deba:	4603      	mov	r3, r0
 800debc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dec0:	4a0a      	ldr	r2, [pc, #40]	; (800deec <check_fs+0xa4>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d101      	bne.n	800deca <check_fs+0x82>
 800dec6:	2300      	movs	r3, #0
 800dec8:	e00c      	b.n	800dee4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3338      	adds	r3, #56	; 0x38
 800dece:	3352      	adds	r3, #82	; 0x52
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fe f9a7 	bl	800c224 <ld_dword>
 800ded6:	4603      	mov	r3, r0
 800ded8:	4a05      	ldr	r2, [pc, #20]	; (800def0 <check_fs+0xa8>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d101      	bne.n	800dee2 <check_fs+0x9a>
 800dede:	2300      	movs	r3, #0
 800dee0:	e000      	b.n	800dee4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dee2:	2302      	movs	r3, #2
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3708      	adds	r7, #8
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	00544146 	.word	0x00544146
 800def0:	33544146 	.word	0x33544146

0800def4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b096      	sub	sp, #88	; 0x58
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	4613      	mov	r3, r2
 800df00:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2200      	movs	r2, #0
 800df06:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df08:	68f8      	ldr	r0, [r7, #12]
 800df0a:	f7ff ff59 	bl	800ddc0 <get_ldnumber>
 800df0e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df12:	2b00      	cmp	r3, #0
 800df14:	da01      	bge.n	800df1a <find_volume+0x26>
 800df16:	230b      	movs	r3, #11
 800df18:	e265      	b.n	800e3e6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df1a:	4a9f      	ldr	r2, [pc, #636]	; (800e198 <find_volume+0x2a4>)
 800df1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df22:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <find_volume+0x3a>
 800df2a:	230c      	movs	r3, #12
 800df2c:	e25b      	b.n	800e3e6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df34:	79fb      	ldrb	r3, [r7, #7]
 800df36:	f023 0301 	bic.w	r3, r3, #1
 800df3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d01a      	beq.n	800df7a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800df44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df46:	785b      	ldrb	r3, [r3, #1]
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe f8b5 	bl	800c0b8 <disk_status>
 800df4e:	4603      	mov	r3, r0
 800df50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800df54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10c      	bne.n	800df7a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d007      	beq.n	800df76 <find_volume+0x82>
 800df66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df6a:	f003 0304 	and.w	r3, r3, #4
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800df72:	230a      	movs	r3, #10
 800df74:	e237      	b.n	800e3e6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800df76:	2300      	movs	r3, #0
 800df78:	e235      	b.n	800e3e6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	2200      	movs	r2, #0
 800df7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800df80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df82:	b2da      	uxtb	r2, r3
 800df84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	785b      	ldrb	r3, [r3, #1]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe f8ad 	bl	800c0ec <disk_initialize>
 800df92:	4603      	mov	r3, r0
 800df94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800df98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e21e      	b.n	800e3e6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d007      	beq.n	800dfbe <find_volume+0xca>
 800dfae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfb2:	f003 0304 	and.w	r3, r3, #4
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dfba:	230a      	movs	r3, #10
 800dfbc:	e213      	b.n	800e3e6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	7858      	ldrb	r0, [r3, #1]
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	330c      	adds	r3, #12
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	2102      	movs	r1, #2
 800dfca:	f7fe f8f5 	bl	800c1b8 <disk_ioctl>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d001      	beq.n	800dfd8 <find_volume+0xe4>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e206      	b.n	800e3e6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfda:	899b      	ldrh	r3, [r3, #12]
 800dfdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfe0:	d80d      	bhi.n	800dffe <find_volume+0x10a>
 800dfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe4:	899b      	ldrh	r3, [r3, #12]
 800dfe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfea:	d308      	bcc.n	800dffe <find_volume+0x10a>
 800dfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfee:	899b      	ldrh	r3, [r3, #12]
 800dff0:	461a      	mov	r2, r3
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	899b      	ldrh	r3, [r3, #12]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	4013      	ands	r3, r2
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <find_volume+0x10e>
 800dffe:	2301      	movs	r3, #1
 800e000:	e1f1      	b.n	800e3e6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e00a:	f7ff ff1d 	bl	800de48 <check_fs>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d149      	bne.n	800e0b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e01c:	2300      	movs	r3, #0
 800e01e:	643b      	str	r3, [r7, #64]	; 0x40
 800e020:	e01e      	b.n	800e060 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e02a:	011b      	lsls	r3, r3, #4
 800e02c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e030:	4413      	add	r3, r2
 800e032:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e036:	3304      	adds	r3, #4
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d006      	beq.n	800e04c <find_volume+0x158>
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	3308      	adds	r3, #8
 800e042:	4618      	mov	r0, r3
 800e044:	f7fe f8ee 	bl	800c224 <ld_dword>
 800e048:	4602      	mov	r2, r0
 800e04a:	e000      	b.n	800e04e <find_volume+0x15a>
 800e04c:	2200      	movs	r2, #0
 800e04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	3358      	adds	r3, #88	; 0x58
 800e054:	443b      	add	r3, r7
 800e056:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e05c:	3301      	adds	r3, #1
 800e05e:	643b      	str	r3, [r7, #64]	; 0x40
 800e060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e062:	2b03      	cmp	r3, #3
 800e064:	d9dd      	bls.n	800e022 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e066:	2300      	movs	r3, #0
 800e068:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <find_volume+0x182>
 800e070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e072:	3b01      	subs	r3, #1
 800e074:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	3358      	adds	r3, #88	; 0x58
 800e07c:	443b      	add	r3, r7
 800e07e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e082:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e086:	2b00      	cmp	r3, #0
 800e088:	d005      	beq.n	800e096 <find_volume+0x1a2>
 800e08a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e08c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e08e:	f7ff fedb 	bl	800de48 <check_fs>
 800e092:	4603      	mov	r3, r0
 800e094:	e000      	b.n	800e098 <find_volume+0x1a4>
 800e096:	2303      	movs	r3, #3
 800e098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e09c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d905      	bls.n	800e0b0 <find_volume+0x1bc>
 800e0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d9e2      	bls.n	800e076 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0b4:	2b04      	cmp	r3, #4
 800e0b6:	d101      	bne.n	800e0bc <find_volume+0x1c8>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e194      	b.n	800e3e6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d901      	bls.n	800e0c8 <find_volume+0x1d4>
 800e0c4:	230d      	movs	r3, #13
 800e0c6:	e18e      	b.n	800e3e6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	3338      	adds	r3, #56	; 0x38
 800e0cc:	330b      	adds	r3, #11
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fe f890 	bl	800c1f4 <ld_word>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	899b      	ldrh	r3, [r3, #12]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d001      	beq.n	800e0e4 <find_volume+0x1f0>
 800e0e0:	230d      	movs	r3, #13
 800e0e2:	e180      	b.n	800e3e6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e6:	3338      	adds	r3, #56	; 0x38
 800e0e8:	3316      	adds	r3, #22
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fe f882 	bl	800c1f4 <ld_word>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d106      	bne.n	800e108 <find_volume+0x214>
 800e0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fc:	3338      	adds	r3, #56	; 0x38
 800e0fe:	3324      	adds	r3, #36	; 0x24
 800e100:	4618      	mov	r0, r3
 800e102:	f7fe f88f 	bl	800c224 <ld_dword>
 800e106:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e10c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e110:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e116:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	789b      	ldrb	r3, [r3, #2]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d005      	beq.n	800e12c <find_volume+0x238>
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	789b      	ldrb	r3, [r3, #2]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d001      	beq.n	800e12c <find_volume+0x238>
 800e128:	230d      	movs	r3, #13
 800e12a:	e15c      	b.n	800e3e6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	789b      	ldrb	r3, [r3, #2]
 800e130:	461a      	mov	r2, r3
 800e132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e134:	fb02 f303 	mul.w	r3, r2, r3
 800e138:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e140:	b29a      	uxth	r2, r3
 800e142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e144:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	895b      	ldrh	r3, [r3, #10]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d008      	beq.n	800e160 <find_volume+0x26c>
 800e14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e150:	895b      	ldrh	r3, [r3, #10]
 800e152:	461a      	mov	r2, r3
 800e154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e156:	895b      	ldrh	r3, [r3, #10]
 800e158:	3b01      	subs	r3, #1
 800e15a:	4013      	ands	r3, r2
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <find_volume+0x270>
 800e160:	230d      	movs	r3, #13
 800e162:	e140      	b.n	800e3e6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	3338      	adds	r3, #56	; 0x38
 800e168:	3311      	adds	r3, #17
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7fe f842 	bl	800c1f4 <ld_word>
 800e170:	4603      	mov	r3, r0
 800e172:	461a      	mov	r2, r3
 800e174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e176:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	891b      	ldrh	r3, [r3, #8]
 800e17c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e17e:	8992      	ldrh	r2, [r2, #12]
 800e180:	0952      	lsrs	r2, r2, #5
 800e182:	b292      	uxth	r2, r2
 800e184:	fbb3 f1f2 	udiv	r1, r3, r2
 800e188:	fb01 f202 	mul.w	r2, r1, r2
 800e18c:	1a9b      	subs	r3, r3, r2
 800e18e:	b29b      	uxth	r3, r3
 800e190:	2b00      	cmp	r3, #0
 800e192:	d003      	beq.n	800e19c <find_volume+0x2a8>
 800e194:	230d      	movs	r3, #13
 800e196:	e126      	b.n	800e3e6 <find_volume+0x4f2>
 800e198:	20000730 	.word	0x20000730

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	3338      	adds	r3, #56	; 0x38
 800e1a0:	3313      	adds	r3, #19
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe f826 	bl	800c1f4 <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <find_volume+0x2cc>
 800e1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b4:	3338      	adds	r3, #56	; 0x38
 800e1b6:	3320      	adds	r3, #32
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fe f833 	bl	800c224 <ld_dword>
 800e1be:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c2:	3338      	adds	r3, #56	; 0x38
 800e1c4:	330e      	adds	r3, #14
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fe f814 	bl	800c1f4 <ld_word>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <find_volume+0x2e6>
 800e1d6:	230d      	movs	r3, #13
 800e1d8:	e105      	b.n	800e3e6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1de:	4413      	add	r3, r2
 800e1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e2:	8911      	ldrh	r1, [r2, #8]
 800e1e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e6:	8992      	ldrh	r2, [r2, #12]
 800e1e8:	0952      	lsrs	r2, r2, #5
 800e1ea:	b292      	uxth	r2, r2
 800e1ec:	fbb1 f2f2 	udiv	r2, r1, r2
 800e1f0:	b292      	uxth	r2, r2
 800e1f2:	4413      	add	r3, r2
 800e1f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e1f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d201      	bcs.n	800e202 <find_volume+0x30e>
 800e1fe:	230d      	movs	r3, #13
 800e200:	e0f1      	b.n	800e3e6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e20a:	8952      	ldrh	r2, [r2, #10]
 800e20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e210:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <find_volume+0x328>
 800e218:	230d      	movs	r3, #13
 800e21a:	e0e4      	b.n	800e3e6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800e21c:	2303      	movs	r3, #3
 800e21e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e228:	4293      	cmp	r3, r2
 800e22a:	d802      	bhi.n	800e232 <find_volume+0x33e>
 800e22c:	2302      	movs	r3, #2
 800e22e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e238:	4293      	cmp	r3, r2
 800e23a:	d802      	bhi.n	800e242 <find_volume+0x34e>
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	1c9a      	adds	r2, r3, #2
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e24e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e254:	441a      	add	r2, r3
 800e256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e258:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e25a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	441a      	add	r2, r3
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e268:	2b03      	cmp	r3, #3
 800e26a:	d11e      	bne.n	800e2aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	3338      	adds	r3, #56	; 0x38
 800e270:	332a      	adds	r3, #42	; 0x2a
 800e272:	4618      	mov	r0, r3
 800e274:	f7fd ffbe 	bl	800c1f4 <ld_word>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <find_volume+0x38e>
 800e27e:	230d      	movs	r3, #13
 800e280:	e0b1      	b.n	800e3e6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	891b      	ldrh	r3, [r3, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <find_volume+0x39a>
 800e28a:	230d      	movs	r3, #13
 800e28c:	e0ab      	b.n	800e3e6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e290:	3338      	adds	r3, #56	; 0x38
 800e292:	332c      	adds	r3, #44	; 0x2c
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd ffc5 	bl	800c224 <ld_dword>
 800e29a:	4602      	mov	r2, r0
 800e29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a2:	69db      	ldr	r3, [r3, #28]
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2a8:	e01f      	b.n	800e2ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	891b      	ldrh	r3, [r3, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <find_volume+0x3c2>
 800e2b2:	230d      	movs	r3, #13
 800e2b4:	e097      	b.n	800e3e6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e2ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2bc:	441a      	add	r2, r3
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d103      	bne.n	800e2d2 <find_volume+0x3de>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	69db      	ldr	r3, [r3, #28]
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	e00a      	b.n	800e2e8 <find_volume+0x3f4>
 800e2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d4:	69da      	ldr	r2, [r3, #28]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	005b      	lsls	r3, r3, #1
 800e2da:	4413      	add	r3, r2
 800e2dc:	085a      	lsrs	r2, r3, #1
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	69db      	ldr	r3, [r3, #28]
 800e2e2:	f003 0301 	and.w	r3, r3, #1
 800e2e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2e8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	6a1a      	ldr	r2, [r3, #32]
 800e2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f0:	899b      	ldrh	r3, [r3, #12]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2f6:	440b      	add	r3, r1
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e2fc:	8989      	ldrh	r1, [r1, #12]
 800e2fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800e302:	429a      	cmp	r2, r3
 800e304:	d201      	bcs.n	800e30a <find_volume+0x416>
 800e306:	230d      	movs	r3, #13
 800e308:	e06d      	b.n	800e3e6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295
 800e310:	619a      	str	r2, [r3, #24]
 800e312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e314:	699a      	ldr	r2, [r3, #24]
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	2280      	movs	r2, #128	; 0x80
 800e31e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e324:	2b03      	cmp	r3, #3
 800e326:	d149      	bne.n	800e3bc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	3338      	adds	r3, #56	; 0x38
 800e32c:	3330      	adds	r3, #48	; 0x30
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fd ff60 	bl	800c1f4 <ld_word>
 800e334:	4603      	mov	r3, r0
 800e336:	2b01      	cmp	r3, #1
 800e338:	d140      	bne.n	800e3bc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33c:	3301      	adds	r3, #1
 800e33e:	4619      	mov	r1, r3
 800e340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e342:	f7fe fa07 	bl	800c754 <move_window>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d137      	bne.n	800e3bc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	2200      	movs	r2, #0
 800e350:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e354:	3338      	adds	r3, #56	; 0x38
 800e356:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fd ff4a 	bl	800c1f4 <ld_word>
 800e360:	4603      	mov	r3, r0
 800e362:	461a      	mov	r2, r3
 800e364:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e368:	429a      	cmp	r2, r3
 800e36a:	d127      	bne.n	800e3bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36e:	3338      	adds	r3, #56	; 0x38
 800e370:	4618      	mov	r0, r3
 800e372:	f7fd ff57 	bl	800c224 <ld_dword>
 800e376:	4603      	mov	r3, r0
 800e378:	4a1d      	ldr	r2, [pc, #116]	; (800e3f0 <find_volume+0x4fc>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d11e      	bne.n	800e3bc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e380:	3338      	adds	r3, #56	; 0x38
 800e382:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e386:	4618      	mov	r0, r3
 800e388:	f7fd ff4c 	bl	800c224 <ld_dword>
 800e38c:	4603      	mov	r3, r0
 800e38e:	4a19      	ldr	r2, [pc, #100]	; (800e3f4 <find_volume+0x500>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d113      	bne.n	800e3bc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e396:	3338      	adds	r3, #56	; 0x38
 800e398:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fd ff41 	bl	800c224 <ld_dword>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	3338      	adds	r3, #56	; 0x38
 800e3ac:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fd ff37 	bl	800c224 <ld_dword>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3c2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3c4:	4b0c      	ldr	r3, [pc, #48]	; (800e3f8 <find_volume+0x504>)
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	4b0a      	ldr	r3, [pc, #40]	; (800e3f8 <find_volume+0x504>)
 800e3ce:	801a      	strh	r2, [r3, #0]
 800e3d0:	4b09      	ldr	r3, [pc, #36]	; (800e3f8 <find_volume+0x504>)
 800e3d2:	881a      	ldrh	r2, [r3, #0]
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	4a08      	ldr	r2, [pc, #32]	; (800e3fc <find_volume+0x508>)
 800e3dc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3e0:	f7fe f950 	bl	800c684 <clear_lock>
#endif
	return FR_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3758      	adds	r7, #88	; 0x58
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	41615252 	.word	0x41615252
 800e3f4:	61417272 	.word	0x61417272
 800e3f8:	20000734 	.word	0x20000734
 800e3fc:	20000758 	.word	0x20000758

0800e400 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e40a:	2309      	movs	r3, #9
 800e40c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d01c      	beq.n	800e44e <validate+0x4e>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d018      	beq.n	800e44e <validate+0x4e>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <validate+0x4e>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	889a      	ldrh	r2, [r3, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	88db      	ldrh	r3, [r3, #6]
 800e430:	429a      	cmp	r2, r3
 800e432:	d10c      	bne.n	800e44e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	785b      	ldrb	r3, [r3, #1]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7fd fe3c 	bl	800c0b8 <disk_status>
 800e440:	4603      	mov	r3, r0
 800e442:	f003 0301 	and.w	r3, r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	d101      	bne.n	800e44e <validate+0x4e>
			res = FR_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d102      	bne.n	800e45a <validate+0x5a>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	e000      	b.n	800e45c <validate+0x5c>
 800e45a:	2300      	movs	r3, #0
 800e45c:	683a      	ldr	r2, [r7, #0]
 800e45e:	6013      	str	r3, [r2, #0]
	return res;
 800e460:	7bfb      	ldrb	r3, [r7, #15]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	4613      	mov	r3, r2
 800e478:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e47e:	f107 0310 	add.w	r3, r7, #16
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff fc9c 	bl	800ddc0 <get_ldnumber>
 800e488:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	da01      	bge.n	800e494 <f_mount+0x28>
 800e490:	230b      	movs	r3, #11
 800e492:	e02b      	b.n	800e4ec <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e494:	4a17      	ldr	r2, [pc, #92]	; (800e4f4 <f_mount+0x88>)
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e49c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d005      	beq.n	800e4b0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4a4:	69b8      	ldr	r0, [r7, #24]
 800e4a6:	f7fe f8ed 	bl	800c684 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4bc:	68fa      	ldr	r2, [r7, #12]
 800e4be:	490d      	ldr	r1, [pc, #52]	; (800e4f4 <f_mount+0x88>)
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <f_mount+0x66>
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d001      	beq.n	800e4d6 <f_mount+0x6a>
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	e00a      	b.n	800e4ec <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4d6:	f107 010c 	add.w	r1, r7, #12
 800e4da:	f107 0308 	add.w	r3, r7, #8
 800e4de:	2200      	movs	r2, #0
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fd07 	bl	800def4 <find_volume>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3720      	adds	r7, #32
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	20000730 	.word	0x20000730

0800e4f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b09a      	sub	sp, #104	; 0x68
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	60f8      	str	r0, [r7, #12]
 800e500:	60b9      	str	r1, [r7, #8]
 800e502:	4613      	mov	r3, r2
 800e504:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <f_open+0x18>
 800e50c:	2309      	movs	r3, #9
 800e50e:	e1bb      	b.n	800e888 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e516:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e518:	79fa      	ldrb	r2, [r7, #7]
 800e51a:	f107 0114 	add.w	r1, r7, #20
 800e51e:	f107 0308 	add.w	r3, r7, #8
 800e522:	4618      	mov	r0, r3
 800e524:	f7ff fce6 	bl	800def4 <find_volume>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e52e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e532:	2b00      	cmp	r3, #0
 800e534:	f040 819f 	bne.w	800e876 <f_open+0x37e>
		dj.obj.fs = fs;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	f107 0318 	add.w	r3, r7, #24
 800e542:	4611      	mov	r1, r2
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff fbc5 	bl	800dcd4 <follow_path>
 800e54a:	4603      	mov	r3, r0
 800e54c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e554:	2b00      	cmp	r3, #0
 800e556:	d11a      	bne.n	800e58e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e55c:	b25b      	sxtb	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	da03      	bge.n	800e56a <f_open+0x72>
				res = FR_INVALID_NAME;
 800e562:	2306      	movs	r3, #6
 800e564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e568:	e011      	b.n	800e58e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e56a:	79fb      	ldrb	r3, [r7, #7]
 800e56c:	f023 0301 	bic.w	r3, r3, #1
 800e570:	2b00      	cmp	r3, #0
 800e572:	bf14      	ite	ne
 800e574:	2301      	movne	r3, #1
 800e576:	2300      	moveq	r3, #0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	461a      	mov	r2, r3
 800e57c:	f107 0318 	add.w	r3, r7, #24
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f7fd ff36 	bl	800c3f4 <chk_lock>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e58e:	79fb      	ldrb	r3, [r7, #7]
 800e590:	f003 031c 	and.w	r3, r3, #28
 800e594:	2b00      	cmp	r3, #0
 800e596:	d07f      	beq.n	800e698 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e598:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d017      	beq.n	800e5d0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5a4:	2b04      	cmp	r3, #4
 800e5a6:	d10e      	bne.n	800e5c6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5a8:	f7fd ff80 	bl	800c4ac <enq_lock>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d006      	beq.n	800e5c0 <f_open+0xc8>
 800e5b2:	f107 0318 	add.w	r3, r7, #24
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff f8dc 	bl	800d774 <dir_register>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	e000      	b.n	800e5c2 <f_open+0xca>
 800e5c0:	2312      	movs	r3, #18
 800e5c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	f043 0308 	orr.w	r3, r3, #8
 800e5cc:	71fb      	strb	r3, [r7, #7]
 800e5ce:	e010      	b.n	800e5f2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5d0:	7fbb      	ldrb	r3, [r7, #30]
 800e5d2:	f003 0311 	and.w	r3, r3, #17
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d003      	beq.n	800e5e2 <f_open+0xea>
					res = FR_DENIED;
 800e5da:	2307      	movs	r3, #7
 800e5dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e5e0:	e007      	b.n	800e5f2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	f003 0304 	and.w	r3, r3, #4
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <f_open+0xfa>
 800e5ec:	2308      	movs	r3, #8
 800e5ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e5f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d168      	bne.n	800e6cc <f_open+0x1d4>
 800e5fa:	79fb      	ldrb	r3, [r7, #7]
 800e5fc:	f003 0308 	and.w	r3, r3, #8
 800e600:	2b00      	cmp	r3, #0
 800e602:	d063      	beq.n	800e6cc <f_open+0x1d4>
				dw = GET_FATTIME();
 800e604:	f7fd fcfa 	bl	800bffc <get_fattime>
 800e608:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e60c:	330e      	adds	r3, #14
 800e60e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e610:	4618      	mov	r0, r3
 800e612:	f7fd fe45 	bl	800c2a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e618:	3316      	adds	r3, #22
 800e61a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd fe3f 	bl	800c2a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e624:	330b      	adds	r3, #11
 800e626:	2220      	movs	r2, #32
 800e628:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e62e:	4611      	mov	r1, r2
 800e630:	4618      	mov	r0, r3
 800e632:	f7fe fe17 	bl	800d264 <ld_clust>
 800e636:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e63c:	2200      	movs	r2, #0
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fe2f 	bl	800d2a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	331c      	adds	r3, #28
 800e648:	2100      	movs	r1, #0
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fd fe28 	bl	800c2a0 <st_dword>
					fs->wflag = 1;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2201      	movs	r2, #1
 800e654:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d037      	beq.n	800e6cc <f_open+0x1d4>
						dw = fs->winsect;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e660:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e662:	f107 0318 	add.w	r3, r7, #24
 800e666:	2200      	movs	r2, #0
 800e668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe fb1f 	bl	800ccae <remove_chain>
 800e670:	4603      	mov	r3, r0
 800e672:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e676:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d126      	bne.n	800e6cc <f_open+0x1d4>
							res = move_window(fs, dw);
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e682:	4618      	mov	r0, r3
 800e684:	f7fe f866 	bl	800c754 <move_window>
 800e688:	4603      	mov	r3, r0
 800e68a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e692:	3a01      	subs	r2, #1
 800e694:	615a      	str	r2, [r3, #20]
 800e696:	e019      	b.n	800e6cc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d115      	bne.n	800e6cc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6a0:	7fbb      	ldrb	r3, [r7, #30]
 800e6a2:	f003 0310 	and.w	r3, r3, #16
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d003      	beq.n	800e6b2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e6aa:	2304      	movs	r3, #4
 800e6ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e6b0:	e00c      	b.n	800e6cc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	f003 0302 	and.w	r3, r3, #2
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d007      	beq.n	800e6cc <f_open+0x1d4>
 800e6bc:	7fbb      	ldrb	r3, [r7, #30]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <f_open+0x1d4>
						res = FR_DENIED;
 800e6c6:	2307      	movs	r3, #7
 800e6c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d128      	bne.n	800e726 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	f003 0308 	and.w	r3, r3, #8
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6e4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6f4:	79fb      	ldrb	r3, [r7, #7]
 800e6f6:	f023 0301 	bic.w	r3, r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bf14      	ite	ne
 800e6fe:	2301      	movne	r3, #1
 800e700:	2300      	moveq	r3, #0
 800e702:	b2db      	uxtb	r3, r3
 800e704:	461a      	mov	r2, r3
 800e706:	f107 0318 	add.w	r3, r7, #24
 800e70a:	4611      	mov	r1, r2
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fd feef 	bl	800c4f0 <inc_lock>
 800e712:	4602      	mov	r2, r0
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <f_open+0x22e>
 800e720:	2302      	movs	r3, #2
 800e722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f040 80a3 	bne.w	800e876 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e734:	4611      	mov	r1, r2
 800e736:	4618      	mov	r0, r3
 800e738:	f7fe fd94 	bl	800d264 <ld_clust>
 800e73c:	4602      	mov	r2, r0
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e744:	331c      	adds	r3, #28
 800e746:	4618      	mov	r0, r3
 800e748:	f7fd fd6c 	bl	800c224 <ld_dword>
 800e74c:	4602      	mov	r2, r0
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2200      	movs	r2, #0
 800e756:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e758:	697a      	ldr	r2, [r7, #20]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e75e:	697b      	ldr	r3, [r7, #20]
 800e760:	88da      	ldrh	r2, [r3, #6]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	79fa      	ldrb	r2, [r7, #7]
 800e76a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2200      	movs	r2, #0
 800e776:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3330      	adds	r3, #48	; 0x30
 800e782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e786:	2100      	movs	r1, #0
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fd fdd6 	bl	800c33a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e78e:	79fb      	ldrb	r3, [r7, #7]
 800e790:	f003 0320 	and.w	r3, r3, #32
 800e794:	2b00      	cmp	r3, #0
 800e796:	d06e      	beq.n	800e876 <f_open+0x37e>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d06a      	beq.n	800e876 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68da      	ldr	r2, [r3, #12]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	895b      	ldrh	r3, [r3, #10]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	899b      	ldrh	r3, [r3, #12]
 800e7b2:	fb02 f303 	mul.w	r3, r2, r3
 800e7b6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7c4:	e016      	b.n	800e7f4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe f87f 	bl	800c8ce <get_fat>
 800e7d0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e7d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d802      	bhi.n	800e7de <f_open+0x2e6>
 800e7d8:	2302      	movs	r3, #2
 800e7da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e4:	d102      	bne.n	800e7ec <f_open+0x2f4>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d103      	bne.n	800e804 <f_open+0x30c>
 800e7fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e800:	429a      	cmp	r2, r3
 800e802:	d8e0      	bhi.n	800e7c6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e80a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d131      	bne.n	800e876 <f_open+0x37e>
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	899b      	ldrh	r3, [r3, #12]
 800e816:	461a      	mov	r2, r3
 800e818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e81e:	fb01 f202 	mul.w	r2, r1, r2
 800e822:	1a9b      	subs	r3, r3, r2
 800e824:	2b00      	cmp	r3, #0
 800e826:	d026      	beq.n	800e876 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7fe f82f 	bl	800c890 <clust2sect>
 800e832:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e836:	2b00      	cmp	r3, #0
 800e838:	d103      	bne.n	800e842 <f_open+0x34a>
						res = FR_INT_ERR;
 800e83a:	2302      	movs	r3, #2
 800e83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e840:	e019      	b.n	800e876 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	899b      	ldrh	r3, [r3, #12]
 800e846:	461a      	mov	r2, r3
 800e848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e84a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e84e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e850:	441a      	add	r2, r3
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	7858      	ldrb	r0, [r3, #1]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6a1a      	ldr	r2, [r3, #32]
 800e864:	2301      	movs	r3, #1
 800e866:	f7fd fc67 	bl	800c138 <disk_read>
 800e86a:	4603      	mov	r3, r0
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <f_open+0x37e>
 800e870:	2301      	movs	r3, #1
 800e872:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e876:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d002      	beq.n	800e884 <f_open+0x38c>
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2200      	movs	r2, #0
 800e882:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e884:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3768      	adds	r7, #104	; 0x68
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08e      	sub	sp, #56	; 0x38
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
 800e89c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f107 0214 	add.w	r2, r7, #20
 800e8ae:	4611      	mov	r1, r2
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7ff fda5 	bl	800e400 <validate>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d107      	bne.n	800e8d4 <f_read+0x44>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	7d5b      	ldrb	r3, [r3, #21]
 800e8c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e8cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <f_read+0x4a>
 800e8d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e8d8:	e135      	b.n	800eb46 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	7d1b      	ldrb	r3, [r3, #20]
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d101      	bne.n	800e8ea <f_read+0x5a>
 800e8e6:	2307      	movs	r3, #7
 800e8e8:	e12d      	b.n	800eb46 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	68da      	ldr	r2, [r3, #12]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	6a3b      	ldr	r3, [r7, #32]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	f240 811e 	bls.w	800eb3c <f_read+0x2ac>
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e904:	e11a      	b.n	800eb3c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	699b      	ldr	r3, [r3, #24]
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	8992      	ldrh	r2, [r2, #12]
 800e90e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e912:	fb01 f202 	mul.w	r2, r1, r2
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f040 80d5 	bne.w	800eac8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	697a      	ldr	r2, [r7, #20]
 800e924:	8992      	ldrh	r2, [r2, #12]
 800e926:	fbb3 f3f2 	udiv	r3, r3, r2
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	8952      	ldrh	r2, [r2, #10]
 800e92e:	3a01      	subs	r2, #1
 800e930:	4013      	ands	r3, r2
 800e932:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d12f      	bne.n	800e99a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	699b      	ldr	r3, [r3, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d103      	bne.n	800e94a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	633b      	str	r3, [r7, #48]	; 0x30
 800e948:	e013      	b.n	800e972 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d007      	beq.n	800e962 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	4619      	mov	r1, r3
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f7fe faa5 	bl	800cea8 <clmt_clust>
 800e95e:	6338      	str	r0, [r7, #48]	; 0x30
 800e960:	e007      	b.n	800e972 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e962:	68fa      	ldr	r2, [r7, #12]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	69db      	ldr	r3, [r3, #28]
 800e968:	4619      	mov	r1, r3
 800e96a:	4610      	mov	r0, r2
 800e96c:	f7fd ffaf 	bl	800c8ce <get_fat>
 800e970:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	2b01      	cmp	r3, #1
 800e976:	d804      	bhi.n	800e982 <f_read+0xf2>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2202      	movs	r2, #2
 800e97c:	755a      	strb	r2, [r3, #21]
 800e97e:	2302      	movs	r3, #2
 800e980:	e0e1      	b.n	800eb46 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e988:	d104      	bne.n	800e994 <f_read+0x104>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2201      	movs	r2, #1
 800e98e:	755a      	strb	r2, [r3, #21]
 800e990:	2301      	movs	r3, #1
 800e992:	e0d8      	b.n	800eb46 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e998:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	69db      	ldr	r3, [r3, #28]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	4610      	mov	r0, r2
 800e9a4:	f7fd ff74 	bl	800c890 <clust2sect>
 800e9a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d104      	bne.n	800e9ba <f_read+0x12a>
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2202      	movs	r2, #2
 800e9b4:	755a      	strb	r2, [r3, #21]
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	e0c5      	b.n	800eb46 <f_read+0x2b6>
			sect += csect;
 800e9ba:	69ba      	ldr	r2, [r7, #24]
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	4413      	add	r3, r2
 800e9c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	899b      	ldrh	r3, [r3, #12]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9ce:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d041      	beq.n	800ea5a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e9d6:	69fa      	ldr	r2, [r7, #28]
 800e9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9da:	4413      	add	r3, r2
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	8952      	ldrh	r2, [r2, #10]
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d905      	bls.n	800e9f0 <f_read+0x160>
					cc = fs->csize - csect;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	895b      	ldrh	r3, [r3, #10]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	7858      	ldrb	r0, [r3, #1]
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	69ba      	ldr	r2, [r7, #24]
 800e9f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9fa:	f7fd fb9d 	bl	800c138 <disk_read>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <f_read+0x17e>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2201      	movs	r2, #1
 800ea08:	755a      	strb	r2, [r3, #21]
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e09b      	b.n	800eb46 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	7d1b      	ldrb	r3, [r3, #20]
 800ea12:	b25b      	sxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	da18      	bge.n	800ea4a <f_read+0x1ba>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6a1a      	ldr	r2, [r3, #32]
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d911      	bls.n	800ea4a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6a1a      	ldr	r2, [r3, #32]
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	8992      	ldrh	r2, [r2, #12]
 800ea32:	fb02 f303 	mul.w	r3, r2, r3
 800ea36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea38:	18d0      	adds	r0, r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	899b      	ldrh	r3, [r3, #12]
 800ea44:	461a      	mov	r2, r3
 800ea46:	f7fd fc57 	bl	800c2f8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	461a      	mov	r2, r3
 800ea50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea52:	fb02 f303 	mul.w	r3, r2, r3
 800ea56:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ea58:	e05c      	b.n	800eb14 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	69ba      	ldr	r2, [r7, #24]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d02e      	beq.n	800eac2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	7d1b      	ldrb	r3, [r3, #20]
 800ea68:	b25b      	sxtb	r3, r3
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	da18      	bge.n	800eaa0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea6e:	697b      	ldr	r3, [r7, #20]
 800ea70:	7858      	ldrb	r0, [r3, #1]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6a1a      	ldr	r2, [r3, #32]
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f7fd fb7b 	bl	800c178 <disk_write>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <f_read+0x202>
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2201      	movs	r2, #1
 800ea8c:	755a      	strb	r2, [r3, #21]
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e059      	b.n	800eb46 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	7d1b      	ldrb	r3, [r3, #20]
 800ea96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	7858      	ldrb	r0, [r3, #1]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaaa:	2301      	movs	r3, #1
 800eaac:	69ba      	ldr	r2, [r7, #24]
 800eaae:	f7fd fb43 	bl	800c138 <disk_read>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d004      	beq.n	800eac2 <f_read+0x232>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2201      	movs	r2, #1
 800eabc:	755a      	strb	r2, [r3, #21]
 800eabe:	2301      	movs	r3, #1
 800eac0:	e041      	b.n	800eb46 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	899b      	ldrh	r3, [r3, #12]
 800eacc:	4618      	mov	r0, r3
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	8992      	ldrh	r2, [r2, #12]
 800ead6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eada:	fb01 f202 	mul.w	r2, r1, r2
 800eade:	1a9b      	subs	r3, r3, r2
 800eae0:	1ac3      	subs	r3, r0, r3
 800eae2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d901      	bls.n	800eaf0 <f_read+0x260>
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	699b      	ldr	r3, [r3, #24]
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	8992      	ldrh	r2, [r2, #12]
 800eafe:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb02:	fb00 f202 	mul.w	r2, r0, r2
 800eb06:	1a9b      	subs	r3, r3, r2
 800eb08:	440b      	add	r3, r1
 800eb0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb10:	f7fd fbf2 	bl	800c2f8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800eb14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb18:	4413      	add	r3, r2
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	699a      	ldr	r2, [r3, #24]
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	441a      	add	r2, r3
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	619a      	str	r2, [r3, #24]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	441a      	add	r2, r3
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	601a      	str	r2, [r3, #0]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb38:	1ad3      	subs	r3, r2, r3
 800eb3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f47f aee1 	bne.w	800e906 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3738      	adds	r7, #56	; 0x38
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b08c      	sub	sp, #48	; 0x30
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	60f8      	str	r0, [r7, #12]
 800eb56:	60b9      	str	r1, [r7, #8]
 800eb58:	607a      	str	r2, [r7, #4]
 800eb5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	f107 0210 	add.w	r2, r7, #16
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff fc46 	bl	800e400 <validate>
 800eb74:	4603      	mov	r3, r0
 800eb76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d107      	bne.n	800eb92 <f_write+0x44>
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	7d5b      	ldrb	r3, [r3, #21]
 800eb86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800eb8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <f_write+0x4a>
 800eb92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eb96:	e16a      	b.n	800ee6e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	7d1b      	ldrb	r3, [r3, #20]
 800eb9c:	f003 0302 	and.w	r3, r3, #2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d101      	bne.n	800eba8 <f_write+0x5a>
 800eba4:	2307      	movs	r3, #7
 800eba6:	e162      	b.n	800ee6e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	699a      	ldr	r2, [r3, #24]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	441a      	add	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	f080 814c 	bcs.w	800ee52 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	43db      	mvns	r3, r3
 800ebc0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ebc2:	e146      	b.n	800ee52 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	8992      	ldrh	r2, [r2, #12]
 800ebcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebd0:	fb01 f202 	mul.w	r2, r1, r2
 800ebd4:	1a9b      	subs	r3, r3, r2
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f040 80f1 	bne.w	800edbe <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	699b      	ldr	r3, [r3, #24]
 800ebe0:	693a      	ldr	r2, [r7, #16]
 800ebe2:	8992      	ldrh	r2, [r2, #12]
 800ebe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	8952      	ldrh	r2, [r2, #10]
 800ebec:	3a01      	subs	r2, #1
 800ebee:	4013      	ands	r3, r2
 800ebf0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ebf2:	69bb      	ldr	r3, [r7, #24]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d143      	bne.n	800ec80 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	699b      	ldr	r3, [r3, #24]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10c      	bne.n	800ec1a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d11a      	bne.n	800ec42 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe f8b1 	bl	800cd78 <create_chain>
 800ec16:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec18:	e013      	b.n	800ec42 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d007      	beq.n	800ec32 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	4619      	mov	r1, r3
 800ec28:	68f8      	ldr	r0, [r7, #12]
 800ec2a:	f7fe f93d 	bl	800cea8 <clmt_clust>
 800ec2e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ec30:	e007      	b.n	800ec42 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	69db      	ldr	r3, [r3, #28]
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f7fe f89c 	bl	800cd78 <create_chain>
 800ec40:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f000 8109 	beq.w	800ee5c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d104      	bne.n	800ec5a <f_write+0x10c>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2202      	movs	r2, #2
 800ec54:	755a      	strb	r2, [r3, #21]
 800ec56:	2302      	movs	r3, #2
 800ec58:	e109      	b.n	800ee6e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec60:	d104      	bne.n	800ec6c <f_write+0x11e>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	755a      	strb	r2, [r3, #21]
 800ec68:	2301      	movs	r3, #1
 800ec6a:	e100      	b.n	800ee6e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec70:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d102      	bne.n	800ec80 <f_write+0x132>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	7d1b      	ldrb	r3, [r3, #20]
 800ec84:	b25b      	sxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da18      	bge.n	800ecbc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	7858      	ldrb	r0, [r3, #1]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6a1a      	ldr	r2, [r3, #32]
 800ec98:	2301      	movs	r3, #1
 800ec9a:	f7fd fa6d 	bl	800c178 <disk_write>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d004      	beq.n	800ecae <f_write+0x160>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2201      	movs	r2, #1
 800eca8:	755a      	strb	r2, [r3, #21]
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e0df      	b.n	800ee6e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	7d1b      	ldrb	r3, [r3, #20]
 800ecb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	f7fd fde3 	bl	800c890 <clust2sect>
 800ecca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d104      	bne.n	800ecdc <f_write+0x18e>
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2202      	movs	r2, #2
 800ecd6:	755a      	strb	r2, [r3, #21]
 800ecd8:	2302      	movs	r3, #2
 800ecda:	e0c8      	b.n	800ee6e <f_write+0x320>
			sect += csect;
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	4413      	add	r3, r2
 800ece2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	899b      	ldrh	r3, [r3, #12]
 800ece8:	461a      	mov	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecf0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ecf2:	6a3b      	ldr	r3, [r7, #32]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d043      	beq.n	800ed80 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ecf8:	69ba      	ldr	r2, [r7, #24]
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	693a      	ldr	r2, [r7, #16]
 800ed00:	8952      	ldrh	r2, [r2, #10]
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d905      	bls.n	800ed12 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	895b      	ldrh	r3, [r3, #10]
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	7858      	ldrb	r0, [r3, #1]
 800ed16:	6a3b      	ldr	r3, [r7, #32]
 800ed18:	697a      	ldr	r2, [r7, #20]
 800ed1a:	69f9      	ldr	r1, [r7, #28]
 800ed1c:	f7fd fa2c 	bl	800c178 <disk_write>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d004      	beq.n	800ed30 <f_write+0x1e2>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	755a      	strb	r2, [r3, #21]
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e09e      	b.n	800ee6e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a1a      	ldr	r2, [r3, #32]
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	6a3a      	ldr	r2, [r7, #32]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d918      	bls.n	800ed70 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6a1a      	ldr	r2, [r3, #32]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	693a      	ldr	r2, [r7, #16]
 800ed4e:	8992      	ldrh	r2, [r2, #12]
 800ed50:	fb02 f303 	mul.w	r3, r2, r3
 800ed54:	69fa      	ldr	r2, [r7, #28]
 800ed56:	18d1      	adds	r1, r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	899b      	ldrh	r3, [r3, #12]
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	f7fd facb 	bl	800c2f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	7d1b      	ldrb	r3, [r3, #20]
 800ed66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed6a:	b2da      	uxtb	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	899b      	ldrh	r3, [r3, #12]
 800ed74:	461a      	mov	r2, r3
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	fb02 f303 	mul.w	r3, r2, r3
 800ed7c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ed7e:	e04b      	b.n	800ee18 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6a1b      	ldr	r3, [r3, #32]
 800ed84:	697a      	ldr	r2, [r7, #20]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d016      	beq.n	800edb8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	699a      	ldr	r2, [r3, #24]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d210      	bcs.n	800edb8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	7858      	ldrb	r0, [r3, #1]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eda0:	2301      	movs	r3, #1
 800eda2:	697a      	ldr	r2, [r7, #20]
 800eda4:	f7fd f9c8 	bl	800c138 <disk_read>
 800eda8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d004      	beq.n	800edb8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2201      	movs	r2, #1
 800edb2:	755a      	strb	r2, [r3, #21]
 800edb4:	2301      	movs	r3, #1
 800edb6:	e05a      	b.n	800ee6e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	899b      	ldrh	r3, [r3, #12]
 800edc2:	4618      	mov	r0, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	699b      	ldr	r3, [r3, #24]
 800edc8:	693a      	ldr	r2, [r7, #16]
 800edca:	8992      	ldrh	r2, [r2, #12]
 800edcc:	fbb3 f1f2 	udiv	r1, r3, r2
 800edd0:	fb01 f202 	mul.w	r2, r1, r2
 800edd4:	1a9b      	subs	r3, r3, r2
 800edd6:	1ac3      	subs	r3, r0, r3
 800edd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800edda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d901      	bls.n	800ede6 <f_write+0x298>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	699b      	ldr	r3, [r3, #24]
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	8992      	ldrh	r2, [r2, #12]
 800edf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf8:	fb00 f202 	mul.w	r2, r0, r2
 800edfc:	1a9b      	subs	r3, r3, r2
 800edfe:	440b      	add	r3, r1
 800ee00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee02:	69f9      	ldr	r1, [r7, #28]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fd fa77 	bl	800c2f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ee18:	69fa      	ldr	r2, [r7, #28]
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1c:	4413      	add	r3, r2
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	699a      	ldr	r2, [r3, #24]
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	441a      	add	r2, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	619a      	str	r2, [r3, #24]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	68da      	ldr	r2, [r3, #12]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	699b      	ldr	r3, [r3, #24]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	bf38      	it	cc
 800ee38:	461a      	movcc	r2, r3
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	60da      	str	r2, [r3, #12]
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	441a      	add	r2, r3
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f47f aeb5 	bne.w	800ebc4 <f_write+0x76>
 800ee5a:	e000      	b.n	800ee5e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee5c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	7d1b      	ldrb	r3, [r3, #20]
 800ee62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee66:	b2da      	uxtb	r2, r3
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ee6c:	2300      	movs	r3, #0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3730      	adds	r7, #48	; 0x30
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}

0800ee76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ee76:	b580      	push	{r7, lr}
 800ee78:	b086      	sub	sp, #24
 800ee7a:	af00      	add	r7, sp, #0
 800ee7c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f107 0208 	add.w	r2, r7, #8
 800ee84:	4611      	mov	r1, r2
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff faba 	bl	800e400 <validate>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d168      	bne.n	800ef68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	7d1b      	ldrb	r3, [r3, #20]
 800ee9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d062      	beq.n	800ef68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	b25b      	sxtb	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	da15      	bge.n	800eed8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	7858      	ldrb	r0, [r3, #1]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a1a      	ldr	r2, [r3, #32]
 800eeba:	2301      	movs	r3, #1
 800eebc:	f7fd f95c 	bl	800c178 <disk_write>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <f_sync+0x54>
 800eec6:	2301      	movs	r3, #1
 800eec8:	e04f      	b.n	800ef6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	7d1b      	ldrb	r3, [r3, #20]
 800eece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eed8:	f7fd f890 	bl	800bffc <get_fattime>
 800eedc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eede:	68ba      	ldr	r2, [r7, #8]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7fd fc34 	bl	800c754 <move_window>
 800eeec:	4603      	mov	r3, r0
 800eeee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eef0:	7dfb      	ldrb	r3, [r7, #23]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d138      	bne.n	800ef68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	330b      	adds	r3, #11
 800ef00:	781a      	ldrb	r2, [r3, #0]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	330b      	adds	r3, #11
 800ef06:	f042 0220 	orr.w	r2, r2, #32
 800ef0a:	b2d2      	uxtb	r2, r2
 800ef0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	461a      	mov	r2, r3
 800ef18:	68f9      	ldr	r1, [r7, #12]
 800ef1a:	f7fe f9c2 	bl	800d2a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f103 021c 	add.w	r2, r3, #28
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	f7fd f9b8 	bl	800c2a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3316      	adds	r3, #22
 800ef34:	6939      	ldr	r1, [r7, #16]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fd f9b2 	bl	800c2a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	3312      	adds	r3, #18
 800ef40:	2100      	movs	r1, #0
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd f991 	bl	800c26a <st_word>
					fs->wflag = 1;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd fc2d 	bl	800c7b0 <sync_fs>
 800ef56:	4603      	mov	r3, r0
 800ef58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7d1b      	ldrb	r3, [r3, #20]
 800ef5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ef68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3718      	adds	r7, #24
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b084      	sub	sp, #16
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff ff7b 	bl	800ee76 <f_sync>
 800ef80:	4603      	mov	r3, r0
 800ef82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ef84:	7bfb      	ldrb	r3, [r7, #15]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d118      	bne.n	800efbc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f107 0208 	add.w	r2, r7, #8
 800ef90:	4611      	mov	r1, r2
 800ef92:	4618      	mov	r0, r3
 800ef94:	f7ff fa34 	bl	800e400 <validate>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ef9c:	7bfb      	ldrb	r3, [r7, #15]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d10c      	bne.n	800efbc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fd fb30 	bl	800c60c <dec_lock>
 800efac:	4603      	mov	r3, r0
 800efae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800efb0:	7bfb      	ldrb	r3, [r7, #15]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d102      	bne.n	800efbc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2200      	movs	r2, #0
 800efba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800efbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3710      	adds	r7, #16
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b090      	sub	sp, #64	; 0x40
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f107 0208 	add.w	r2, r7, #8
 800efd6:	4611      	mov	r1, r2
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff fa11 	bl	800e400 <validate>
 800efde:	4603      	mov	r3, r0
 800efe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800efe4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d103      	bne.n	800eff4 <f_lseek+0x2e>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7d5b      	ldrb	r3, [r3, #21]
 800eff0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800eff4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <f_lseek+0x3c>
 800effc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f000:	e201      	b.n	800f406 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f006:	2b00      	cmp	r3, #0
 800f008:	f000 80d9 	beq.w	800f1be <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f012:	d15a      	bne.n	800f0ca <f_lseek+0x104>
			tbl = fp->cltbl;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f018:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01c:	1d1a      	adds	r2, r3, #4
 800f01e:	627a      	str	r2, [r7, #36]	; 0x24
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	617b      	str	r3, [r7, #20]
 800f024:	2302      	movs	r3, #2
 800f026:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	2b00      	cmp	r3, #0
 800f032:	d03a      	beq.n	800f0aa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f036:	613b      	str	r3, [r7, #16]
 800f038:	2300      	movs	r3, #0
 800f03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f03e:	3302      	adds	r3, #2
 800f040:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	60fb      	str	r3, [r7, #12]
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	3301      	adds	r3, #1
 800f04a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f050:	4618      	mov	r0, r3
 800f052:	f7fd fc3c 	bl	800c8ce <get_fat>
 800f056:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d804      	bhi.n	800f068 <f_lseek+0xa2>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2202      	movs	r2, #2
 800f062:	755a      	strb	r2, [r3, #21]
 800f064:	2302      	movs	r3, #2
 800f066:	e1ce      	b.n	800f406 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06e:	d104      	bne.n	800f07a <f_lseek+0xb4>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	755a      	strb	r2, [r3, #21]
 800f076:	2301      	movs	r3, #1
 800f078:	e1c5      	b.n	800f406 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	3301      	adds	r3, #1
 800f07e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f080:	429a      	cmp	r2, r3
 800f082:	d0de      	beq.n	800f042 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f084:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d809      	bhi.n	800f0a0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08e:	1d1a      	adds	r2, r3, #4
 800f090:	627a      	str	r2, [r7, #36]	; 0x24
 800f092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f098:	1d1a      	adds	r2, r3, #4
 800f09a:	627a      	str	r2, [r7, #36]	; 0x24
 800f09c:	693a      	ldr	r2, [r7, #16]
 800f09e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	69db      	ldr	r3, [r3, #28]
 800f0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d3c4      	bcc.n	800f034 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d803      	bhi.n	800f0c2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	2200      	movs	r2, #0
 800f0be:	601a      	str	r2, [r3, #0]
 800f0c0:	e19f      	b.n	800f402 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f0c2:	2311      	movs	r3, #17
 800f0c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f0c8:	e19b      	b.n	800f402 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	683a      	ldr	r2, [r7, #0]
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d902      	bls.n	800f0da <f_lseek+0x114>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f000 818d 	beq.w	800f402 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7fd feda 	bl	800cea8 <clmt_clust>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f0fa:	68ba      	ldr	r2, [r7, #8]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	4619      	mov	r1, r3
 800f102:	4610      	mov	r0, r2
 800f104:	f7fd fbc4 	bl	800c890 <clust2sect>
 800f108:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d104      	bne.n	800f11a <f_lseek+0x154>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2202      	movs	r2, #2
 800f114:	755a      	strb	r2, [r3, #21]
 800f116:	2302      	movs	r3, #2
 800f118:	e175      	b.n	800f406 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	3b01      	subs	r3, #1
 800f11e:	68ba      	ldr	r2, [r7, #8]
 800f120:	8992      	ldrh	r2, [r2, #12]
 800f122:	fbb3 f3f2 	udiv	r3, r3, r2
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	8952      	ldrh	r2, [r2, #10]
 800f12a:	3a01      	subs	r2, #1
 800f12c:	4013      	ands	r3, r2
 800f12e:	69ba      	ldr	r2, [r7, #24]
 800f130:	4413      	add	r3, r2
 800f132:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	699b      	ldr	r3, [r3, #24]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	8992      	ldrh	r2, [r2, #12]
 800f13c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f140:	fb01 f202 	mul.w	r2, r1, r2
 800f144:	1a9b      	subs	r3, r3, r2
 800f146:	2b00      	cmp	r3, #0
 800f148:	f000 815b 	beq.w	800f402 <f_lseek+0x43c>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	69ba      	ldr	r2, [r7, #24]
 800f152:	429a      	cmp	r2, r3
 800f154:	f000 8155 	beq.w	800f402 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	7d1b      	ldrb	r3, [r3, #20]
 800f15c:	b25b      	sxtb	r3, r3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	da18      	bge.n	800f194 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	7858      	ldrb	r0, [r3, #1]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	6a1a      	ldr	r2, [r3, #32]
 800f170:	2301      	movs	r3, #1
 800f172:	f7fd f801 	bl	800c178 <disk_write>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <f_lseek+0x1c0>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	755a      	strb	r2, [r3, #21]
 800f182:	2301      	movs	r3, #1
 800f184:	e13f      	b.n	800f406 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7d1b      	ldrb	r3, [r3, #20]
 800f18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f18e:	b2da      	uxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	7858      	ldrb	r0, [r3, #1]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f19e:	2301      	movs	r3, #1
 800f1a0:	69ba      	ldr	r2, [r7, #24]
 800f1a2:	f7fc ffc9 	bl	800c138 <disk_read>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <f_lseek+0x1f0>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	755a      	strb	r2, [r3, #21]
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e127      	b.n	800f406 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	69ba      	ldr	r2, [r7, #24]
 800f1ba:	621a      	str	r2, [r3, #32]
 800f1bc:	e121      	b.n	800f402 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d908      	bls.n	800f1da <f_lseek+0x214>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
 800f1cc:	f003 0302 	and.w	r3, r3, #2
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d102      	bne.n	800f1da <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1e8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f000 80b5 	beq.w	800f35c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	895b      	ldrh	r3, [r3, #10]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	899b      	ldrh	r3, [r3, #12]
 800f1fc:	fb02 f303 	mul.w	r3, r2, r3
 800f200:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d01b      	beq.n	800f240 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	1e5a      	subs	r2, r3, #1
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	fbb2 f2f3 	udiv	r2, r2, r3
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	1e59      	subs	r1, r3, #1
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d30f      	bcc.n	800f240 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	1e5a      	subs	r2, r3, #1
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	425b      	negs	r3, r3
 800f228:	401a      	ands	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	699b      	ldr	r3, [r3, #24]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	1ad3      	subs	r3, r2, r3
 800f236:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	69db      	ldr	r3, [r3, #28]
 800f23c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f23e:	e022      	b.n	800f286 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d119      	bne.n	800f280 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2100      	movs	r1, #0
 800f250:	4618      	mov	r0, r3
 800f252:	f7fd fd91 	bl	800cd78 <create_chain>
 800f256:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d104      	bne.n	800f268 <f_lseek+0x2a2>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2202      	movs	r2, #2
 800f262:	755a      	strb	r2, [r3, #21]
 800f264:	2302      	movs	r3, #2
 800f266:	e0ce      	b.n	800f406 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26e:	d104      	bne.n	800f27a <f_lseek+0x2b4>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	755a      	strb	r2, [r3, #21]
 800f276:	2301      	movs	r3, #1
 800f278:	e0c5      	b.n	800f406 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f27e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f284:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d067      	beq.n	800f35c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f28c:	e03a      	b.n	800f304 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	603b      	str	r3, [r7, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	699a      	ldr	r2, [r3, #24]
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	441a      	add	r2, r3
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	f003 0302 	and.w	r3, r3, #2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00b      	beq.n	800f2c6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fd fd60 	bl	800cd78 <create_chain>
 800f2b8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d108      	bne.n	800f2d2 <f_lseek+0x30c>
							ofs = 0; break;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	603b      	str	r3, [r7, #0]
 800f2c4:	e022      	b.n	800f30c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fd faff 	bl	800c8ce <get_fat>
 800f2d0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2d8:	d104      	bne.n	800f2e4 <f_lseek+0x31e>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2201      	movs	r2, #1
 800f2de:	755a      	strb	r2, [r3, #21]
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e090      	b.n	800f406 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d904      	bls.n	800f2f4 <f_lseek+0x32e>
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d304      	bcc.n	800f2fe <f_lseek+0x338>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2202      	movs	r2, #2
 800f2f8:	755a      	strb	r2, [r3, #21]
 800f2fa:	2302      	movs	r3, #2
 800f2fc:	e083      	b.n	800f406 <f_lseek+0x440>
					fp->clust = clst;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f302:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f304:	683a      	ldr	r2, [r7, #0]
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	429a      	cmp	r2, r3
 800f30a:	d8c0      	bhi.n	800f28e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	699a      	ldr	r2, [r3, #24]
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	441a      	add	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	899b      	ldrh	r3, [r3, #12]
 800f31c:	461a      	mov	r2, r3
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	fbb3 f1f2 	udiv	r1, r3, r2
 800f324:	fb01 f202 	mul.w	r2, r1, r2
 800f328:	1a9b      	subs	r3, r3, r2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d016      	beq.n	800f35c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f332:	4618      	mov	r0, r3
 800f334:	f7fd faac 	bl	800c890 <clust2sect>
 800f338:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d104      	bne.n	800f34a <f_lseek+0x384>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2202      	movs	r2, #2
 800f344:	755a      	strb	r2, [r3, #21]
 800f346:	2302      	movs	r3, #2
 800f348:	e05d      	b.n	800f406 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	899b      	ldrh	r3, [r3, #12]
 800f34e:	461a      	mov	r2, r3
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	fbb3 f3f2 	udiv	r3, r3, r2
 800f356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f358:	4413      	add	r3, r2
 800f35a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	699a      	ldr	r2, [r3, #24]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	429a      	cmp	r2, r3
 800f366:	d90a      	bls.n	800f37e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	699a      	ldr	r2, [r3, #24]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	7d1b      	ldrb	r3, [r3, #20]
 800f374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	699b      	ldr	r3, [r3, #24]
 800f382:	68ba      	ldr	r2, [r7, #8]
 800f384:	8992      	ldrh	r2, [r2, #12]
 800f386:	fbb3 f1f2 	udiv	r1, r3, r2
 800f38a:	fb01 f202 	mul.w	r2, r1, r2
 800f38e:	1a9b      	subs	r3, r3, r2
 800f390:	2b00      	cmp	r3, #0
 800f392:	d036      	beq.n	800f402 <f_lseek+0x43c>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6a1b      	ldr	r3, [r3, #32]
 800f398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d031      	beq.n	800f402 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	7d1b      	ldrb	r3, [r3, #20]
 800f3a2:	b25b      	sxtb	r3, r3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	da18      	bge.n	800f3da <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	7858      	ldrb	r0, [r3, #1]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1a      	ldr	r2, [r3, #32]
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	f7fc fede 	bl	800c178 <disk_write>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d004      	beq.n	800f3cc <f_lseek+0x406>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	755a      	strb	r2, [r3, #21]
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e01c      	b.n	800f406 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	7d1b      	ldrb	r3, [r3, #20]
 800f3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	7858      	ldrb	r0, [r3, #1]
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3e8:	f7fc fea6 	bl	800c138 <disk_read>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d004      	beq.n	800f3fc <f_lseek+0x436>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2201      	movs	r2, #1
 800f3f6:	755a      	strb	r2, [r3, #21]
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	e004      	b.n	800f406 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f400:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f402:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f406:	4618      	mov	r0, r3
 800f408:	3740      	adds	r7, #64	; 0x40
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b098      	sub	sp, #96	; 0x60
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f416:	f107 010c 	add.w	r1, r7, #12
 800f41a:	1d3b      	adds	r3, r7, #4
 800f41c:	2202      	movs	r2, #2
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fe fd68 	bl	800def4 <find_volume>
 800f424:	4603      	mov	r3, r0
 800f426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800f42e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f432:	2b00      	cmp	r3, #0
 800f434:	f040 80f2 	bne.w	800f61c <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	f107 0310 	add.w	r3, r7, #16
 800f43e:	4611      	mov	r1, r2
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fc47 	bl	800dcd4 <follow_path>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800f44c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <f_mkdir+0x4c>
 800f454:	2308      	movs	r3, #8
 800f456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800f45a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f45e:	2b04      	cmp	r3, #4
 800f460:	f040 80dc 	bne.w	800f61c <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800f464:	f107 0310 	add.w	r3, r7, #16
 800f468:	2100      	movs	r1, #0
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fc84 	bl	800cd78 <create_chain>
 800f470:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	895b      	ldrh	r3, [r3, #10]
 800f476:	461a      	mov	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	899b      	ldrh	r3, [r3, #12]
 800f47c:	fb02 f303 	mul.w	r3, r2, r3
 800f480:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800f488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d102      	bne.n	800f494 <f_mkdir+0x86>
 800f48e:	2307      	movs	r3, #7
 800f490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800f494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f496:	2b01      	cmp	r3, #1
 800f498:	d102      	bne.n	800f4a0 <f_mkdir+0x92>
 800f49a:	2302      	movs	r3, #2
 800f49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4a6:	d102      	bne.n	800f4ae <f_mkdir+0xa0>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800f4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d106      	bne.n	800f4c4 <f_mkdir+0xb6>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fd f907 	bl	800c6cc <sync_window>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800f4c4:	f7fc fd9a 	bl	800bffc <get_fattime>
 800f4c8:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800f4ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d16c      	bne.n	800f5ac <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd f9da 	bl	800c890 <clust2sect>
 800f4dc:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3338      	adds	r3, #56	; 0x38
 800f4e2:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	899b      	ldrh	r3, [r3, #12]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4ee:	f7fc ff24 	bl	800c33a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800f4f2:	220b      	movs	r2, #11
 800f4f4:	2120      	movs	r1, #32
 800f4f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f4f8:	f7fc ff1f 	bl	800c33a <mem_set>
					dir[DIR_Name] = '.';
 800f4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4fe:	222e      	movs	r2, #46	; 0x2e
 800f500:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800f502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f504:	330b      	adds	r3, #11
 800f506:	2210      	movs	r2, #16
 800f508:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800f50a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f50c:	3316      	adds	r3, #22
 800f50e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f510:	4618      	mov	r0, r3
 800f512:	f7fc fec5 	bl	800c2a0 <st_dword>
					st_clust(fs, dir, dcl);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f51a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd fec0 	bl	800d2a2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800f522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f524:	3320      	adds	r3, #32
 800f526:	2220      	movs	r2, #32
 800f528:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fc fee4 	bl	800c2f8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800f530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f532:	3321      	adds	r3, #33	; 0x21
 800f534:	222e      	movs	r2, #46	; 0x2e
 800f536:	701a      	strb	r2, [r3, #0]
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b03      	cmp	r3, #3
 800f542:	d106      	bne.n	800f552 <f_mkdir+0x144>
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d101      	bne.n	800f552 <f_mkdir+0x144>
 800f54e:	2300      	movs	r3, #0
 800f550:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f556:	3320      	adds	r3, #32
 800f558:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f55a:	4619      	mov	r1, r3
 800f55c:	f7fd fea1 	bl	800d2a2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	895b      	ldrh	r3, [r3, #10]
 800f564:	65bb      	str	r3, [r7, #88]	; 0x58
 800f566:	e01c      	b.n	800f5a2 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800f568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	657a      	str	r2, [r7, #84]	; 0x54
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	2201      	movs	r2, #1
 800f576:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fd f8a6 	bl	800c6cc <sync_window>
 800f580:	4603      	mov	r3, r0
 800f582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800f586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10d      	bne.n	800f5aa <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	899b      	ldrh	r3, [r3, #12]
 800f592:	461a      	mov	r2, r3
 800f594:	2100      	movs	r1, #0
 800f596:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f598:	f7fc fecf 	bl	800c33a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800f59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1df      	bne.n	800f568 <f_mkdir+0x15a>
 800f5a8:	e000      	b.n	800f5ac <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800f5aa:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800f5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d107      	bne.n	800f5c4 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800f5b4:	f107 0310 	add.w	r3, r7, #16
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fe f8db 	bl	800d774 <dir_register>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800f5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d120      	bne.n	800f60e <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d2:	3316      	adds	r3, #22
 800f5d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fc fe62 	bl	800c2a0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fd fe5d 	bl	800d2a2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5ea:	330b      	adds	r3, #11
 800f5ec:	2210      	movs	r2, #16
 800f5ee:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d10e      	bne.n	800f61c <f_mkdir+0x20e>
					res = sync_fs(fs);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	4618      	mov	r0, r3
 800f602:	f7fd f8d5 	bl	800c7b0 <sync_fs>
 800f606:	4603      	mov	r3, r0
 800f608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f60c:	e006      	b.n	800f61c <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f60e:	f107 0310 	add.w	r3, r7, #16
 800f612:	2200      	movs	r2, #0
 800f614:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f616:	4618      	mov	r0, r3
 800f618:	f7fd fb49 	bl	800ccae <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f61c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f620:	4618      	mov	r0, r3
 800f622:	3760      	adds	r7, #96	; 0x60
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	460b      	mov	r3, r1
 800f632:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800f634:	78fb      	ldrb	r3, [r7, #3]
 800f636:	2b0a      	cmp	r3, #10
 800f638:	d103      	bne.n	800f642 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800f63a:	210d      	movs	r1, #13
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fff3 	bl	800f628 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	db25      	blt.n	800f69a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	1c5a      	adds	r2, r3, #1
 800f652:	60fa      	str	r2, [r7, #12]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	4413      	add	r3, r2
 800f658:	78fa      	ldrb	r2, [r7, #3]
 800f65a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b3c      	cmp	r3, #60	; 0x3c
 800f660:	dd12      	ble.n	800f688 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6818      	ldr	r0, [r3, #0]
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f103 010c 	add.w	r1, r3, #12
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	f107 0308 	add.w	r3, r7, #8
 800f672:	f7ff fa6c 	bl	800eb4e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d101      	bne.n	800f682 <putc_bfd+0x5a>
 800f67e:	2300      	movs	r3, #0
 800f680:	e001      	b.n	800f686 <putc_bfd+0x5e>
 800f682:	f04f 33ff 	mov.w	r3, #4294967295
 800f686:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	689b      	ldr	r3, [r3, #8]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	609a      	str	r2, [r3, #8]
 800f698:	e000      	b.n	800f69c <putc_bfd+0x74>
	if (i < 0) return;
 800f69a:	bf00      	nop
}
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	db16      	blt.n	800f6e0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6818      	ldr	r0, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f103 010c 	add.w	r1, r3, #12
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	f107 030c 	add.w	r3, r7, #12
 800f6c6:	f7ff fa42 	bl	800eb4e <f_write>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d107      	bne.n	800f6e0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d102      	bne.n	800f6e0 <putc_flush+0x3e>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	e001      	b.n	800f6e4 <putc_flush+0x42>
	return EOF;
 800f6e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2200      	movs	r2, #0
 800f700:	605a      	str	r2, [r3, #4]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	685a      	ldr	r2, [r3, #4]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	609a      	str	r2, [r3, #8]
}
 800f70a:	bf00      	nop
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr

0800f716 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800f716:	b580      	push	{r7, lr}
 800f718:	b096      	sub	sp, #88	; 0x58
 800f71a:	af00      	add	r7, sp, #0
 800f71c:	6078      	str	r0, [r7, #4]
 800f71e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800f720:	f107 030c 	add.w	r3, r7, #12
 800f724:	6839      	ldr	r1, [r7, #0]
 800f726:	4618      	mov	r0, r3
 800f728:	f7ff ffe0 	bl	800f6ec <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800f72c:	e009      	b.n	800f742 <f_puts+0x2c>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	1c5a      	adds	r2, r3, #1
 800f732:	607a      	str	r2, [r7, #4]
 800f734:	781a      	ldrb	r2, [r3, #0]
 800f736:	f107 030c 	add.w	r3, r7, #12
 800f73a:	4611      	mov	r1, r2
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff ff73 	bl	800f628 <putc_bfd>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1f1      	bne.n	800f72e <f_puts+0x18>
	return putc_flush(&pb);
 800f74a:	f107 030c 	add.w	r3, r7, #12
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff ffa7 	bl	800f6a2 <putc_flush>
 800f754:	4603      	mov	r3, r0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3758      	adds	r7, #88	; 0x58
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f760:	b480      	push	{r7}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	4613      	mov	r3, r2
 800f76c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f76e:	2301      	movs	r3, #1
 800f770:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f772:	2300      	movs	r3, #0
 800f774:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f776:	4b1f      	ldr	r3, [pc, #124]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f778:	7a5b      	ldrb	r3, [r3, #9]
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d131      	bne.n	800f7e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f780:	4b1c      	ldr	r3, [pc, #112]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f782:	7a5b      	ldrb	r3, [r3, #9]
 800f784:	b2db      	uxtb	r3, r3
 800f786:	461a      	mov	r2, r3
 800f788:	4b1a      	ldr	r3, [pc, #104]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f78a:	2100      	movs	r1, #0
 800f78c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f78e:	4b19      	ldr	r3, [pc, #100]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f790:	7a5b      	ldrb	r3, [r3, #9]
 800f792:	b2db      	uxtb	r3, r3
 800f794:	4a17      	ldr	r2, [pc, #92]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	4413      	add	r3, r2
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f79e:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f7a0:	7a5b      	ldrb	r3, [r3, #9]
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4b13      	ldr	r3, [pc, #76]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f7a8:	4413      	add	r3, r2
 800f7aa:	79fa      	ldrb	r2, [r7, #7]
 800f7ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f7ae:	4b11      	ldr	r3, [pc, #68]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f7b0:	7a5b      	ldrb	r3, [r3, #9]
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	b2d1      	uxtb	r1, r2
 800f7b8:	4a0e      	ldr	r2, [pc, #56]	; (800f7f4 <FATFS_LinkDriverEx+0x94>)
 800f7ba:	7251      	strb	r1, [r2, #9]
 800f7bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7be:	7dbb      	ldrb	r3, [r7, #22]
 800f7c0:	3330      	adds	r3, #48	; 0x30
 800f7c2:	b2da      	uxtb	r2, r3
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	223a      	movs	r2, #58	; 0x3a
 800f7ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	3302      	adds	r3, #2
 800f7d4:	222f      	movs	r2, #47	; 0x2f
 800f7d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3303      	adds	r3, #3
 800f7dc:	2200      	movs	r2, #0
 800f7de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	371c      	adds	r7, #28
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
 800f7f2:	bf00      	nop
 800f7f4:	20000958 	.word	0x20000958

0800f7f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f802:	2200      	movs	r2, #0
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7ff ffaa 	bl	800f760 <FATFS_LinkDriverEx>
 800f80c:	4603      	mov	r3, r0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
	...

0800f818 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	6039      	str	r1, [r7, #0]
 800f822:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f824:	88fb      	ldrh	r3, [r7, #6]
 800f826:	2b7f      	cmp	r3, #127	; 0x7f
 800f828:	d802      	bhi.n	800f830 <ff_convert+0x18>
		c = chr;
 800f82a:	88fb      	ldrh	r3, [r7, #6]
 800f82c:	81fb      	strh	r3, [r7, #14]
 800f82e:	e025      	b.n	800f87c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d00b      	beq.n	800f84e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f836:	88fb      	ldrh	r3, [r7, #6]
 800f838:	2bff      	cmp	r3, #255	; 0xff
 800f83a:	d805      	bhi.n	800f848 <ff_convert+0x30>
 800f83c:	88fb      	ldrh	r3, [r7, #6]
 800f83e:	3b80      	subs	r3, #128	; 0x80
 800f840:	4a12      	ldr	r2, [pc, #72]	; (800f88c <ff_convert+0x74>)
 800f842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f846:	e000      	b.n	800f84a <ff_convert+0x32>
 800f848:	2300      	movs	r3, #0
 800f84a:	81fb      	strh	r3, [r7, #14]
 800f84c:	e016      	b.n	800f87c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f84e:	2300      	movs	r3, #0
 800f850:	81fb      	strh	r3, [r7, #14]
 800f852:	e009      	b.n	800f868 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f854:	89fb      	ldrh	r3, [r7, #14]
 800f856:	4a0d      	ldr	r2, [pc, #52]	; (800f88c <ff_convert+0x74>)
 800f858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f85c:	88fa      	ldrh	r2, [r7, #6]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d006      	beq.n	800f870 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f862:	89fb      	ldrh	r3, [r7, #14]
 800f864:	3301      	adds	r3, #1
 800f866:	81fb      	strh	r3, [r7, #14]
 800f868:	89fb      	ldrh	r3, [r7, #14]
 800f86a:	2b7f      	cmp	r3, #127	; 0x7f
 800f86c:	d9f2      	bls.n	800f854 <ff_convert+0x3c>
 800f86e:	e000      	b.n	800f872 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f870:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f872:	89fb      	ldrh	r3, [r7, #14]
 800f874:	3380      	adds	r3, #128	; 0x80
 800f876:	b29b      	uxth	r3, r3
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f87c:	89fb      	ldrh	r3, [r7, #14]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3714      	adds	r7, #20
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	080140b8 	.word	0x080140b8

0800f890 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f890:	b480      	push	{r7}
 800f892:	b087      	sub	sp, #28
 800f894:	af00      	add	r7, sp, #0
 800f896:	4603      	mov	r3, r0
 800f898:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f89a:	88fb      	ldrh	r3, [r7, #6]
 800f89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8a0:	d201      	bcs.n	800f8a6 <ff_wtoupper+0x16>
 800f8a2:	4b3e      	ldr	r3, [pc, #248]	; (800f99c <ff_wtoupper+0x10c>)
 800f8a4:	e000      	b.n	800f8a8 <ff_wtoupper+0x18>
 800f8a6:	4b3e      	ldr	r3, [pc, #248]	; (800f9a0 <ff_wtoupper+0x110>)
 800f8a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	1c9a      	adds	r2, r3, #2
 800f8ae:	617a      	str	r2, [r7, #20]
 800f8b0:	881b      	ldrh	r3, [r3, #0]
 800f8b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f8b4:	8a7b      	ldrh	r3, [r7, #18]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d068      	beq.n	800f98c <ff_wtoupper+0xfc>
 800f8ba:	88fa      	ldrh	r2, [r7, #6]
 800f8bc:	8a7b      	ldrh	r3, [r7, #18]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d364      	bcc.n	800f98c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	1c9a      	adds	r2, r3, #2
 800f8c6:	617a      	str	r2, [r7, #20]
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	823b      	strh	r3, [r7, #16]
 800f8cc:	8a3b      	ldrh	r3, [r7, #16]
 800f8ce:	0a1b      	lsrs	r3, r3, #8
 800f8d0:	81fb      	strh	r3, [r7, #14]
 800f8d2:	8a3b      	ldrh	r3, [r7, #16]
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f8d8:	88fa      	ldrh	r2, [r7, #6]
 800f8da:	8a79      	ldrh	r1, [r7, #18]
 800f8dc:	8a3b      	ldrh	r3, [r7, #16]
 800f8de:	440b      	add	r3, r1
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	da49      	bge.n	800f978 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f8e4:	89fb      	ldrh	r3, [r7, #14]
 800f8e6:	2b08      	cmp	r3, #8
 800f8e8:	d84f      	bhi.n	800f98a <ff_wtoupper+0xfa>
 800f8ea:	a201      	add	r2, pc, #4	; (adr r2, 800f8f0 <ff_wtoupper+0x60>)
 800f8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f0:	0800f915 	.word	0x0800f915
 800f8f4:	0800f927 	.word	0x0800f927
 800f8f8:	0800f93d 	.word	0x0800f93d
 800f8fc:	0800f945 	.word	0x0800f945
 800f900:	0800f94d 	.word	0x0800f94d
 800f904:	0800f955 	.word	0x0800f955
 800f908:	0800f95d 	.word	0x0800f95d
 800f90c:	0800f965 	.word	0x0800f965
 800f910:	0800f96d 	.word	0x0800f96d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f914:	88fa      	ldrh	r2, [r7, #6]
 800f916:	8a7b      	ldrh	r3, [r7, #18]
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	005b      	lsls	r3, r3, #1
 800f91c:	697a      	ldr	r2, [r7, #20]
 800f91e:	4413      	add	r3, r2
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	80fb      	strh	r3, [r7, #6]
 800f924:	e027      	b.n	800f976 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f926:	88fa      	ldrh	r2, [r7, #6]
 800f928:	8a7b      	ldrh	r3, [r7, #18]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	f003 0301 	and.w	r3, r3, #1
 800f932:	b29b      	uxth	r3, r3
 800f934:	88fa      	ldrh	r2, [r7, #6]
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	80fb      	strh	r3, [r7, #6]
 800f93a:	e01c      	b.n	800f976 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f93c:	88fb      	ldrh	r3, [r7, #6]
 800f93e:	3b10      	subs	r3, #16
 800f940:	80fb      	strh	r3, [r7, #6]
 800f942:	e018      	b.n	800f976 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f944:	88fb      	ldrh	r3, [r7, #6]
 800f946:	3b20      	subs	r3, #32
 800f948:	80fb      	strh	r3, [r7, #6]
 800f94a:	e014      	b.n	800f976 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f94c:	88fb      	ldrh	r3, [r7, #6]
 800f94e:	3b30      	subs	r3, #48	; 0x30
 800f950:	80fb      	strh	r3, [r7, #6]
 800f952:	e010      	b.n	800f976 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f954:	88fb      	ldrh	r3, [r7, #6]
 800f956:	3b1a      	subs	r3, #26
 800f958:	80fb      	strh	r3, [r7, #6]
 800f95a:	e00c      	b.n	800f976 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f95c:	88fb      	ldrh	r3, [r7, #6]
 800f95e:	3308      	adds	r3, #8
 800f960:	80fb      	strh	r3, [r7, #6]
 800f962:	e008      	b.n	800f976 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f964:	88fb      	ldrh	r3, [r7, #6]
 800f966:	3b50      	subs	r3, #80	; 0x50
 800f968:	80fb      	strh	r3, [r7, #6]
 800f96a:	e004      	b.n	800f976 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f96c:	88fb      	ldrh	r3, [r7, #6]
 800f96e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f972:	80fb      	strh	r3, [r7, #6]
 800f974:	bf00      	nop
			}
			break;
 800f976:	e008      	b.n	800f98a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f978:	89fb      	ldrh	r3, [r7, #14]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d195      	bne.n	800f8aa <ff_wtoupper+0x1a>
 800f97e:	8a3b      	ldrh	r3, [r7, #16]
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	4413      	add	r3, r2
 800f986:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f988:	e78f      	b.n	800f8aa <ff_wtoupper+0x1a>
			break;
 800f98a:	bf00      	nop
	}

	return chr;
 800f98c:	88fb      	ldrh	r3, [r7, #6]
}
 800f98e:	4618      	mov	r0, r3
 800f990:	371c      	adds	r7, #28
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	080141b8 	.word	0x080141b8
 800f9a0:	080143ac 	.word	0x080143ac

0800f9a4 <__errno>:
 800f9a4:	4b01      	ldr	r3, [pc, #4]	; (800f9ac <__errno+0x8>)
 800f9a6:	6818      	ldr	r0, [r3, #0]
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	20000044 	.word	0x20000044

0800f9b0 <__libc_init_array>:
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	4d0d      	ldr	r5, [pc, #52]	; (800f9e8 <__libc_init_array+0x38>)
 800f9b4:	4c0d      	ldr	r4, [pc, #52]	; (800f9ec <__libc_init_array+0x3c>)
 800f9b6:	1b64      	subs	r4, r4, r5
 800f9b8:	10a4      	asrs	r4, r4, #2
 800f9ba:	2600      	movs	r6, #0
 800f9bc:	42a6      	cmp	r6, r4
 800f9be:	d109      	bne.n	800f9d4 <__libc_init_array+0x24>
 800f9c0:	4d0b      	ldr	r5, [pc, #44]	; (800f9f0 <__libc_init_array+0x40>)
 800f9c2:	4c0c      	ldr	r4, [pc, #48]	; (800f9f4 <__libc_init_array+0x44>)
 800f9c4:	f003 fdf0 	bl	80135a8 <_init>
 800f9c8:	1b64      	subs	r4, r4, r5
 800f9ca:	10a4      	asrs	r4, r4, #2
 800f9cc:	2600      	movs	r6, #0
 800f9ce:	42a6      	cmp	r6, r4
 800f9d0:	d105      	bne.n	800f9de <__libc_init_array+0x2e>
 800f9d2:	bd70      	pop	{r4, r5, r6, pc}
 800f9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9d8:	4798      	blx	r3
 800f9da:	3601      	adds	r6, #1
 800f9dc:	e7ee      	b.n	800f9bc <__libc_init_array+0xc>
 800f9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9e2:	4798      	blx	r3
 800f9e4:	3601      	adds	r6, #1
 800f9e6:	e7f2      	b.n	800f9ce <__libc_init_array+0x1e>
 800f9e8:	08014868 	.word	0x08014868
 800f9ec:	08014868 	.word	0x08014868
 800f9f0:	08014868 	.word	0x08014868
 800f9f4:	0801486c 	.word	0x0801486c

0800f9f8 <malloc>:
 800f9f8:	4b02      	ldr	r3, [pc, #8]	; (800fa04 <malloc+0xc>)
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	6818      	ldr	r0, [r3, #0]
 800f9fe:	f000 b885 	b.w	800fb0c <_malloc_r>
 800fa02:	bf00      	nop
 800fa04:	20000044 	.word	0x20000044

0800fa08 <memcpy>:
 800fa08:	440a      	add	r2, r1
 800fa0a:	4291      	cmp	r1, r2
 800fa0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa10:	d100      	bne.n	800fa14 <memcpy+0xc>
 800fa12:	4770      	bx	lr
 800fa14:	b510      	push	{r4, lr}
 800fa16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa1e:	4291      	cmp	r1, r2
 800fa20:	d1f9      	bne.n	800fa16 <memcpy+0xe>
 800fa22:	bd10      	pop	{r4, pc}

0800fa24 <memset>:
 800fa24:	4402      	add	r2, r0
 800fa26:	4603      	mov	r3, r0
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d100      	bne.n	800fa2e <memset+0xa>
 800fa2c:	4770      	bx	lr
 800fa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa32:	e7f9      	b.n	800fa28 <memset+0x4>

0800fa34 <_free_r>:
 800fa34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa36:	2900      	cmp	r1, #0
 800fa38:	d044      	beq.n	800fac4 <_free_r+0x90>
 800fa3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa3e:	9001      	str	r0, [sp, #4]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f1a1 0404 	sub.w	r4, r1, #4
 800fa46:	bfb8      	it	lt
 800fa48:	18e4      	addlt	r4, r4, r3
 800fa4a:	f001 fff1 	bl	8011a30 <__malloc_lock>
 800fa4e:	4a1e      	ldr	r2, [pc, #120]	; (800fac8 <_free_r+0x94>)
 800fa50:	9801      	ldr	r0, [sp, #4]
 800fa52:	6813      	ldr	r3, [r2, #0]
 800fa54:	b933      	cbnz	r3, 800fa64 <_free_r+0x30>
 800fa56:	6063      	str	r3, [r4, #4]
 800fa58:	6014      	str	r4, [r2, #0]
 800fa5a:	b003      	add	sp, #12
 800fa5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa60:	f001 bfec 	b.w	8011a3c <__malloc_unlock>
 800fa64:	42a3      	cmp	r3, r4
 800fa66:	d908      	bls.n	800fa7a <_free_r+0x46>
 800fa68:	6825      	ldr	r5, [r4, #0]
 800fa6a:	1961      	adds	r1, r4, r5
 800fa6c:	428b      	cmp	r3, r1
 800fa6e:	bf01      	itttt	eq
 800fa70:	6819      	ldreq	r1, [r3, #0]
 800fa72:	685b      	ldreq	r3, [r3, #4]
 800fa74:	1949      	addeq	r1, r1, r5
 800fa76:	6021      	streq	r1, [r4, #0]
 800fa78:	e7ed      	b.n	800fa56 <_free_r+0x22>
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	b10b      	cbz	r3, 800fa84 <_free_r+0x50>
 800fa80:	42a3      	cmp	r3, r4
 800fa82:	d9fa      	bls.n	800fa7a <_free_r+0x46>
 800fa84:	6811      	ldr	r1, [r2, #0]
 800fa86:	1855      	adds	r5, r2, r1
 800fa88:	42a5      	cmp	r5, r4
 800fa8a:	d10b      	bne.n	800faa4 <_free_r+0x70>
 800fa8c:	6824      	ldr	r4, [r4, #0]
 800fa8e:	4421      	add	r1, r4
 800fa90:	1854      	adds	r4, r2, r1
 800fa92:	42a3      	cmp	r3, r4
 800fa94:	6011      	str	r1, [r2, #0]
 800fa96:	d1e0      	bne.n	800fa5a <_free_r+0x26>
 800fa98:	681c      	ldr	r4, [r3, #0]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	6053      	str	r3, [r2, #4]
 800fa9e:	4421      	add	r1, r4
 800faa0:	6011      	str	r1, [r2, #0]
 800faa2:	e7da      	b.n	800fa5a <_free_r+0x26>
 800faa4:	d902      	bls.n	800faac <_free_r+0x78>
 800faa6:	230c      	movs	r3, #12
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	e7d6      	b.n	800fa5a <_free_r+0x26>
 800faac:	6825      	ldr	r5, [r4, #0]
 800faae:	1961      	adds	r1, r4, r5
 800fab0:	428b      	cmp	r3, r1
 800fab2:	bf04      	itt	eq
 800fab4:	6819      	ldreq	r1, [r3, #0]
 800fab6:	685b      	ldreq	r3, [r3, #4]
 800fab8:	6063      	str	r3, [r4, #4]
 800faba:	bf04      	itt	eq
 800fabc:	1949      	addeq	r1, r1, r5
 800fabe:	6021      	streq	r1, [r4, #0]
 800fac0:	6054      	str	r4, [r2, #4]
 800fac2:	e7ca      	b.n	800fa5a <_free_r+0x26>
 800fac4:	b003      	add	sp, #12
 800fac6:	bd30      	pop	{r4, r5, pc}
 800fac8:	20000964 	.word	0x20000964

0800facc <sbrk_aligned>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	4e0e      	ldr	r6, [pc, #56]	; (800fb08 <sbrk_aligned+0x3c>)
 800fad0:	460c      	mov	r4, r1
 800fad2:	6831      	ldr	r1, [r6, #0]
 800fad4:	4605      	mov	r5, r0
 800fad6:	b911      	cbnz	r1, 800fade <sbrk_aligned+0x12>
 800fad8:	f000 fd0e 	bl	80104f8 <_sbrk_r>
 800fadc:	6030      	str	r0, [r6, #0]
 800fade:	4621      	mov	r1, r4
 800fae0:	4628      	mov	r0, r5
 800fae2:	f000 fd09 	bl	80104f8 <_sbrk_r>
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	d00a      	beq.n	800fb00 <sbrk_aligned+0x34>
 800faea:	1cc4      	adds	r4, r0, #3
 800faec:	f024 0403 	bic.w	r4, r4, #3
 800faf0:	42a0      	cmp	r0, r4
 800faf2:	d007      	beq.n	800fb04 <sbrk_aligned+0x38>
 800faf4:	1a21      	subs	r1, r4, r0
 800faf6:	4628      	mov	r0, r5
 800faf8:	f000 fcfe 	bl	80104f8 <_sbrk_r>
 800fafc:	3001      	adds	r0, #1
 800fafe:	d101      	bne.n	800fb04 <sbrk_aligned+0x38>
 800fb00:	f04f 34ff 	mov.w	r4, #4294967295
 800fb04:	4620      	mov	r0, r4
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	20000968 	.word	0x20000968

0800fb0c <_malloc_r>:
 800fb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb10:	1ccd      	adds	r5, r1, #3
 800fb12:	f025 0503 	bic.w	r5, r5, #3
 800fb16:	3508      	adds	r5, #8
 800fb18:	2d0c      	cmp	r5, #12
 800fb1a:	bf38      	it	cc
 800fb1c:	250c      	movcc	r5, #12
 800fb1e:	2d00      	cmp	r5, #0
 800fb20:	4607      	mov	r7, r0
 800fb22:	db01      	blt.n	800fb28 <_malloc_r+0x1c>
 800fb24:	42a9      	cmp	r1, r5
 800fb26:	d905      	bls.n	800fb34 <_malloc_r+0x28>
 800fb28:	230c      	movs	r3, #12
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	2600      	movs	r6, #0
 800fb2e:	4630      	mov	r0, r6
 800fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb34:	4e2e      	ldr	r6, [pc, #184]	; (800fbf0 <_malloc_r+0xe4>)
 800fb36:	f001 ff7b 	bl	8011a30 <__malloc_lock>
 800fb3a:	6833      	ldr	r3, [r6, #0]
 800fb3c:	461c      	mov	r4, r3
 800fb3e:	bb34      	cbnz	r4, 800fb8e <_malloc_r+0x82>
 800fb40:	4629      	mov	r1, r5
 800fb42:	4638      	mov	r0, r7
 800fb44:	f7ff ffc2 	bl	800facc <sbrk_aligned>
 800fb48:	1c43      	adds	r3, r0, #1
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	d14d      	bne.n	800fbea <_malloc_r+0xde>
 800fb4e:	6834      	ldr	r4, [r6, #0]
 800fb50:	4626      	mov	r6, r4
 800fb52:	2e00      	cmp	r6, #0
 800fb54:	d140      	bne.n	800fbd8 <_malloc_r+0xcc>
 800fb56:	6823      	ldr	r3, [r4, #0]
 800fb58:	4631      	mov	r1, r6
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	eb04 0803 	add.w	r8, r4, r3
 800fb60:	f000 fcca 	bl	80104f8 <_sbrk_r>
 800fb64:	4580      	cmp	r8, r0
 800fb66:	d13a      	bne.n	800fbde <_malloc_r+0xd2>
 800fb68:	6821      	ldr	r1, [r4, #0]
 800fb6a:	3503      	adds	r5, #3
 800fb6c:	1a6d      	subs	r5, r5, r1
 800fb6e:	f025 0503 	bic.w	r5, r5, #3
 800fb72:	3508      	adds	r5, #8
 800fb74:	2d0c      	cmp	r5, #12
 800fb76:	bf38      	it	cc
 800fb78:	250c      	movcc	r5, #12
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	f7ff ffa5 	bl	800facc <sbrk_aligned>
 800fb82:	3001      	adds	r0, #1
 800fb84:	d02b      	beq.n	800fbde <_malloc_r+0xd2>
 800fb86:	6823      	ldr	r3, [r4, #0]
 800fb88:	442b      	add	r3, r5
 800fb8a:	6023      	str	r3, [r4, #0]
 800fb8c:	e00e      	b.n	800fbac <_malloc_r+0xa0>
 800fb8e:	6822      	ldr	r2, [r4, #0]
 800fb90:	1b52      	subs	r2, r2, r5
 800fb92:	d41e      	bmi.n	800fbd2 <_malloc_r+0xc6>
 800fb94:	2a0b      	cmp	r2, #11
 800fb96:	d916      	bls.n	800fbc6 <_malloc_r+0xba>
 800fb98:	1961      	adds	r1, r4, r5
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	6025      	str	r5, [r4, #0]
 800fb9e:	bf18      	it	ne
 800fba0:	6059      	strne	r1, [r3, #4]
 800fba2:	6863      	ldr	r3, [r4, #4]
 800fba4:	bf08      	it	eq
 800fba6:	6031      	streq	r1, [r6, #0]
 800fba8:	5162      	str	r2, [r4, r5]
 800fbaa:	604b      	str	r3, [r1, #4]
 800fbac:	4638      	mov	r0, r7
 800fbae:	f104 060b 	add.w	r6, r4, #11
 800fbb2:	f001 ff43 	bl	8011a3c <__malloc_unlock>
 800fbb6:	f026 0607 	bic.w	r6, r6, #7
 800fbba:	1d23      	adds	r3, r4, #4
 800fbbc:	1af2      	subs	r2, r6, r3
 800fbbe:	d0b6      	beq.n	800fb2e <_malloc_r+0x22>
 800fbc0:	1b9b      	subs	r3, r3, r6
 800fbc2:	50a3      	str	r3, [r4, r2]
 800fbc4:	e7b3      	b.n	800fb2e <_malloc_r+0x22>
 800fbc6:	6862      	ldr	r2, [r4, #4]
 800fbc8:	42a3      	cmp	r3, r4
 800fbca:	bf0c      	ite	eq
 800fbcc:	6032      	streq	r2, [r6, #0]
 800fbce:	605a      	strne	r2, [r3, #4]
 800fbd0:	e7ec      	b.n	800fbac <_malloc_r+0xa0>
 800fbd2:	4623      	mov	r3, r4
 800fbd4:	6864      	ldr	r4, [r4, #4]
 800fbd6:	e7b2      	b.n	800fb3e <_malloc_r+0x32>
 800fbd8:	4634      	mov	r4, r6
 800fbda:	6876      	ldr	r6, [r6, #4]
 800fbdc:	e7b9      	b.n	800fb52 <_malloc_r+0x46>
 800fbde:	230c      	movs	r3, #12
 800fbe0:	603b      	str	r3, [r7, #0]
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	f001 ff2a 	bl	8011a3c <__malloc_unlock>
 800fbe8:	e7a1      	b.n	800fb2e <_malloc_r+0x22>
 800fbea:	6025      	str	r5, [r4, #0]
 800fbec:	e7de      	b.n	800fbac <_malloc_r+0xa0>
 800fbee:	bf00      	nop
 800fbf0:	20000964 	.word	0x20000964

0800fbf4 <__cvt>:
 800fbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf8:	ec55 4b10 	vmov	r4, r5, d0
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	460e      	mov	r6, r1
 800fc00:	4619      	mov	r1, r3
 800fc02:	462b      	mov	r3, r5
 800fc04:	bfbb      	ittet	lt
 800fc06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc0a:	461d      	movlt	r5, r3
 800fc0c:	2300      	movge	r3, #0
 800fc0e:	232d      	movlt	r3, #45	; 0x2d
 800fc10:	700b      	strb	r3, [r1, #0]
 800fc12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc18:	4691      	mov	r9, r2
 800fc1a:	f023 0820 	bic.w	r8, r3, #32
 800fc1e:	bfbc      	itt	lt
 800fc20:	4622      	movlt	r2, r4
 800fc22:	4614      	movlt	r4, r2
 800fc24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc28:	d005      	beq.n	800fc36 <__cvt+0x42>
 800fc2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc2e:	d100      	bne.n	800fc32 <__cvt+0x3e>
 800fc30:	3601      	adds	r6, #1
 800fc32:	2102      	movs	r1, #2
 800fc34:	e000      	b.n	800fc38 <__cvt+0x44>
 800fc36:	2103      	movs	r1, #3
 800fc38:	ab03      	add	r3, sp, #12
 800fc3a:	9301      	str	r3, [sp, #4]
 800fc3c:	ab02      	add	r3, sp, #8
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	ec45 4b10 	vmov	d0, r4, r5
 800fc44:	4653      	mov	r3, sl
 800fc46:	4632      	mov	r2, r6
 800fc48:	f000 feb2 	bl	80109b0 <_dtoa_r>
 800fc4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc50:	4607      	mov	r7, r0
 800fc52:	d102      	bne.n	800fc5a <__cvt+0x66>
 800fc54:	f019 0f01 	tst.w	r9, #1
 800fc58:	d022      	beq.n	800fca0 <__cvt+0xac>
 800fc5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc5e:	eb07 0906 	add.w	r9, r7, r6
 800fc62:	d110      	bne.n	800fc86 <__cvt+0x92>
 800fc64:	783b      	ldrb	r3, [r7, #0]
 800fc66:	2b30      	cmp	r3, #48	; 0x30
 800fc68:	d10a      	bne.n	800fc80 <__cvt+0x8c>
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4620      	mov	r0, r4
 800fc70:	4629      	mov	r1, r5
 800fc72:	f7f0 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc76:	b918      	cbnz	r0, 800fc80 <__cvt+0x8c>
 800fc78:	f1c6 0601 	rsb	r6, r6, #1
 800fc7c:	f8ca 6000 	str.w	r6, [sl]
 800fc80:	f8da 3000 	ldr.w	r3, [sl]
 800fc84:	4499      	add	r9, r3
 800fc86:	2200      	movs	r2, #0
 800fc88:	2300      	movs	r3, #0
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	4629      	mov	r1, r5
 800fc8e:	f7f0 ff1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc92:	b108      	cbz	r0, 800fc98 <__cvt+0xa4>
 800fc94:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc98:	2230      	movs	r2, #48	; 0x30
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	454b      	cmp	r3, r9
 800fc9e:	d307      	bcc.n	800fcb0 <__cvt+0xbc>
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fca4:	1bdb      	subs	r3, r3, r7
 800fca6:	4638      	mov	r0, r7
 800fca8:	6013      	str	r3, [r2, #0]
 800fcaa:	b004      	add	sp, #16
 800fcac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcb0:	1c59      	adds	r1, r3, #1
 800fcb2:	9103      	str	r1, [sp, #12]
 800fcb4:	701a      	strb	r2, [r3, #0]
 800fcb6:	e7f0      	b.n	800fc9a <__cvt+0xa6>

0800fcb8 <__exponent>:
 800fcb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcba:	4603      	mov	r3, r0
 800fcbc:	2900      	cmp	r1, #0
 800fcbe:	bfb8      	it	lt
 800fcc0:	4249      	neglt	r1, r1
 800fcc2:	f803 2b02 	strb.w	r2, [r3], #2
 800fcc6:	bfb4      	ite	lt
 800fcc8:	222d      	movlt	r2, #45	; 0x2d
 800fcca:	222b      	movge	r2, #43	; 0x2b
 800fccc:	2909      	cmp	r1, #9
 800fcce:	7042      	strb	r2, [r0, #1]
 800fcd0:	dd2a      	ble.n	800fd28 <__exponent+0x70>
 800fcd2:	f10d 0407 	add.w	r4, sp, #7
 800fcd6:	46a4      	mov	ip, r4
 800fcd8:	270a      	movs	r7, #10
 800fcda:	46a6      	mov	lr, r4
 800fcdc:	460a      	mov	r2, r1
 800fcde:	fb91 f6f7 	sdiv	r6, r1, r7
 800fce2:	fb07 1516 	mls	r5, r7, r6, r1
 800fce6:	3530      	adds	r5, #48	; 0x30
 800fce8:	2a63      	cmp	r2, #99	; 0x63
 800fcea:	f104 34ff 	add.w	r4, r4, #4294967295
 800fcee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fcf2:	4631      	mov	r1, r6
 800fcf4:	dcf1      	bgt.n	800fcda <__exponent+0x22>
 800fcf6:	3130      	adds	r1, #48	; 0x30
 800fcf8:	f1ae 0502 	sub.w	r5, lr, #2
 800fcfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd00:	1c44      	adds	r4, r0, #1
 800fd02:	4629      	mov	r1, r5
 800fd04:	4561      	cmp	r1, ip
 800fd06:	d30a      	bcc.n	800fd1e <__exponent+0x66>
 800fd08:	f10d 0209 	add.w	r2, sp, #9
 800fd0c:	eba2 020e 	sub.w	r2, r2, lr
 800fd10:	4565      	cmp	r5, ip
 800fd12:	bf88      	it	hi
 800fd14:	2200      	movhi	r2, #0
 800fd16:	4413      	add	r3, r2
 800fd18:	1a18      	subs	r0, r3, r0
 800fd1a:	b003      	add	sp, #12
 800fd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd26:	e7ed      	b.n	800fd04 <__exponent+0x4c>
 800fd28:	2330      	movs	r3, #48	; 0x30
 800fd2a:	3130      	adds	r1, #48	; 0x30
 800fd2c:	7083      	strb	r3, [r0, #2]
 800fd2e:	70c1      	strb	r1, [r0, #3]
 800fd30:	1d03      	adds	r3, r0, #4
 800fd32:	e7f1      	b.n	800fd18 <__exponent+0x60>

0800fd34 <_printf_float>:
 800fd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	ed2d 8b02 	vpush	{d8}
 800fd3c:	b08d      	sub	sp, #52	; 0x34
 800fd3e:	460c      	mov	r4, r1
 800fd40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd44:	4616      	mov	r6, r2
 800fd46:	461f      	mov	r7, r3
 800fd48:	4605      	mov	r5, r0
 800fd4a:	f001 fe05 	bl	8011958 <_localeconv_r>
 800fd4e:	f8d0 a000 	ldr.w	sl, [r0]
 800fd52:	4650      	mov	r0, sl
 800fd54:	f7f0 fa3c 	bl	80001d0 <strlen>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	9305      	str	r3, [sp, #20]
 800fd60:	f8d8 3000 	ldr.w	r3, [r8]
 800fd64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd68:	3307      	adds	r3, #7
 800fd6a:	f023 0307 	bic.w	r3, r3, #7
 800fd6e:	f103 0208 	add.w	r2, r3, #8
 800fd72:	f8c8 2000 	str.w	r2, [r8]
 800fd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd86:	9307      	str	r3, [sp, #28]
 800fd88:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd8c:	ee08 0a10 	vmov	s16, r0
 800fd90:	4b9f      	ldr	r3, [pc, #636]	; (8010010 <_printf_float+0x2dc>)
 800fd92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd96:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9a:	f7f0 fec7 	bl	8000b2c <__aeabi_dcmpun>
 800fd9e:	bb88      	cbnz	r0, 800fe04 <_printf_float+0xd0>
 800fda0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fda4:	4b9a      	ldr	r3, [pc, #616]	; (8010010 <_printf_float+0x2dc>)
 800fda6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdaa:	f7f0 fea1 	bl	8000af0 <__aeabi_dcmple>
 800fdae:	bb48      	cbnz	r0, 800fe04 <_printf_float+0xd0>
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	4640      	mov	r0, r8
 800fdb6:	4649      	mov	r1, r9
 800fdb8:	f7f0 fe90 	bl	8000adc <__aeabi_dcmplt>
 800fdbc:	b110      	cbz	r0, 800fdc4 <_printf_float+0x90>
 800fdbe:	232d      	movs	r3, #45	; 0x2d
 800fdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdc4:	4b93      	ldr	r3, [pc, #588]	; (8010014 <_printf_float+0x2e0>)
 800fdc6:	4894      	ldr	r0, [pc, #592]	; (8010018 <_printf_float+0x2e4>)
 800fdc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fdcc:	bf94      	ite	ls
 800fdce:	4698      	movls	r8, r3
 800fdd0:	4680      	movhi	r8, r0
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	6123      	str	r3, [r4, #16]
 800fdd6:	9b05      	ldr	r3, [sp, #20]
 800fdd8:	f023 0204 	bic.w	r2, r3, #4
 800fddc:	6022      	str	r2, [r4, #0]
 800fdde:	f04f 0900 	mov.w	r9, #0
 800fde2:	9700      	str	r7, [sp, #0]
 800fde4:	4633      	mov	r3, r6
 800fde6:	aa0b      	add	r2, sp, #44	; 0x2c
 800fde8:	4621      	mov	r1, r4
 800fdea:	4628      	mov	r0, r5
 800fdec:	f000 f9d8 	bl	80101a0 <_printf_common>
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	f040 8090 	bne.w	800ff16 <_printf_float+0x1e2>
 800fdf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fdfa:	b00d      	add	sp, #52	; 0x34
 800fdfc:	ecbd 8b02 	vpop	{d8}
 800fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe04:	4642      	mov	r2, r8
 800fe06:	464b      	mov	r3, r9
 800fe08:	4640      	mov	r0, r8
 800fe0a:	4649      	mov	r1, r9
 800fe0c:	f7f0 fe8e 	bl	8000b2c <__aeabi_dcmpun>
 800fe10:	b140      	cbz	r0, 800fe24 <_printf_float+0xf0>
 800fe12:	464b      	mov	r3, r9
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bfbc      	itt	lt
 800fe18:	232d      	movlt	r3, #45	; 0x2d
 800fe1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe1e:	487f      	ldr	r0, [pc, #508]	; (801001c <_printf_float+0x2e8>)
 800fe20:	4b7f      	ldr	r3, [pc, #508]	; (8010020 <_printf_float+0x2ec>)
 800fe22:	e7d1      	b.n	800fdc8 <_printf_float+0x94>
 800fe24:	6863      	ldr	r3, [r4, #4]
 800fe26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe2a:	9206      	str	r2, [sp, #24]
 800fe2c:	1c5a      	adds	r2, r3, #1
 800fe2e:	d13f      	bne.n	800feb0 <_printf_float+0x17c>
 800fe30:	2306      	movs	r3, #6
 800fe32:	6063      	str	r3, [r4, #4]
 800fe34:	9b05      	ldr	r3, [sp, #20]
 800fe36:	6861      	ldr	r1, [r4, #4]
 800fe38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9303      	str	r3, [sp, #12]
 800fe40:	ab0a      	add	r3, sp, #40	; 0x28
 800fe42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe46:	ab09      	add	r3, sp, #36	; 0x24
 800fe48:	ec49 8b10 	vmov	d0, r8, r9
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	6022      	str	r2, [r4, #0]
 800fe50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe54:	4628      	mov	r0, r5
 800fe56:	f7ff fecd 	bl	800fbf4 <__cvt>
 800fe5a:	9b06      	ldr	r3, [sp, #24]
 800fe5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe5e:	2b47      	cmp	r3, #71	; 0x47
 800fe60:	4680      	mov	r8, r0
 800fe62:	d108      	bne.n	800fe76 <_printf_float+0x142>
 800fe64:	1cc8      	adds	r0, r1, #3
 800fe66:	db02      	blt.n	800fe6e <_printf_float+0x13a>
 800fe68:	6863      	ldr	r3, [r4, #4]
 800fe6a:	4299      	cmp	r1, r3
 800fe6c:	dd41      	ble.n	800fef2 <_printf_float+0x1be>
 800fe6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe72:	fa5f fb8b 	uxtb.w	fp, fp
 800fe76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe7a:	d820      	bhi.n	800febe <_printf_float+0x18a>
 800fe7c:	3901      	subs	r1, #1
 800fe7e:	465a      	mov	r2, fp
 800fe80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe84:	9109      	str	r1, [sp, #36]	; 0x24
 800fe86:	f7ff ff17 	bl	800fcb8 <__exponent>
 800fe8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe8c:	1813      	adds	r3, r2, r0
 800fe8e:	2a01      	cmp	r2, #1
 800fe90:	4681      	mov	r9, r0
 800fe92:	6123      	str	r3, [r4, #16]
 800fe94:	dc02      	bgt.n	800fe9c <_printf_float+0x168>
 800fe96:	6822      	ldr	r2, [r4, #0]
 800fe98:	07d2      	lsls	r2, r2, #31
 800fe9a:	d501      	bpl.n	800fea0 <_printf_float+0x16c>
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	6123      	str	r3, [r4, #16]
 800fea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d09c      	beq.n	800fde2 <_printf_float+0xae>
 800fea8:	232d      	movs	r3, #45	; 0x2d
 800feaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800feae:	e798      	b.n	800fde2 <_printf_float+0xae>
 800feb0:	9a06      	ldr	r2, [sp, #24]
 800feb2:	2a47      	cmp	r2, #71	; 0x47
 800feb4:	d1be      	bne.n	800fe34 <_printf_float+0x100>
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1bc      	bne.n	800fe34 <_printf_float+0x100>
 800feba:	2301      	movs	r3, #1
 800febc:	e7b9      	b.n	800fe32 <_printf_float+0xfe>
 800febe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fec2:	d118      	bne.n	800fef6 <_printf_float+0x1c2>
 800fec4:	2900      	cmp	r1, #0
 800fec6:	6863      	ldr	r3, [r4, #4]
 800fec8:	dd0b      	ble.n	800fee2 <_printf_float+0x1ae>
 800feca:	6121      	str	r1, [r4, #16]
 800fecc:	b913      	cbnz	r3, 800fed4 <_printf_float+0x1a0>
 800fece:	6822      	ldr	r2, [r4, #0]
 800fed0:	07d0      	lsls	r0, r2, #31
 800fed2:	d502      	bpl.n	800feda <_printf_float+0x1a6>
 800fed4:	3301      	adds	r3, #1
 800fed6:	440b      	add	r3, r1
 800fed8:	6123      	str	r3, [r4, #16]
 800feda:	65a1      	str	r1, [r4, #88]	; 0x58
 800fedc:	f04f 0900 	mov.w	r9, #0
 800fee0:	e7de      	b.n	800fea0 <_printf_float+0x16c>
 800fee2:	b913      	cbnz	r3, 800feea <_printf_float+0x1b6>
 800fee4:	6822      	ldr	r2, [r4, #0]
 800fee6:	07d2      	lsls	r2, r2, #31
 800fee8:	d501      	bpl.n	800feee <_printf_float+0x1ba>
 800feea:	3302      	adds	r3, #2
 800feec:	e7f4      	b.n	800fed8 <_printf_float+0x1a4>
 800feee:	2301      	movs	r3, #1
 800fef0:	e7f2      	b.n	800fed8 <_printf_float+0x1a4>
 800fef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fef8:	4299      	cmp	r1, r3
 800fefa:	db05      	blt.n	800ff08 <_printf_float+0x1d4>
 800fefc:	6823      	ldr	r3, [r4, #0]
 800fefe:	6121      	str	r1, [r4, #16]
 800ff00:	07d8      	lsls	r0, r3, #31
 800ff02:	d5ea      	bpl.n	800feda <_printf_float+0x1a6>
 800ff04:	1c4b      	adds	r3, r1, #1
 800ff06:	e7e7      	b.n	800fed8 <_printf_float+0x1a4>
 800ff08:	2900      	cmp	r1, #0
 800ff0a:	bfd4      	ite	le
 800ff0c:	f1c1 0202 	rsble	r2, r1, #2
 800ff10:	2201      	movgt	r2, #1
 800ff12:	4413      	add	r3, r2
 800ff14:	e7e0      	b.n	800fed8 <_printf_float+0x1a4>
 800ff16:	6823      	ldr	r3, [r4, #0]
 800ff18:	055a      	lsls	r2, r3, #21
 800ff1a:	d407      	bmi.n	800ff2c <_printf_float+0x1f8>
 800ff1c:	6923      	ldr	r3, [r4, #16]
 800ff1e:	4642      	mov	r2, r8
 800ff20:	4631      	mov	r1, r6
 800ff22:	4628      	mov	r0, r5
 800ff24:	47b8      	blx	r7
 800ff26:	3001      	adds	r0, #1
 800ff28:	d12c      	bne.n	800ff84 <_printf_float+0x250>
 800ff2a:	e764      	b.n	800fdf6 <_printf_float+0xc2>
 800ff2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff30:	f240 80e0 	bls.w	80100f4 <_printf_float+0x3c0>
 800ff34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	f7f0 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d034      	beq.n	800ffae <_printf_float+0x27a>
 800ff44:	4a37      	ldr	r2, [pc, #220]	; (8010024 <_printf_float+0x2f0>)
 800ff46:	2301      	movs	r3, #1
 800ff48:	4631      	mov	r1, r6
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	47b8      	blx	r7
 800ff4e:	3001      	adds	r0, #1
 800ff50:	f43f af51 	beq.w	800fdf6 <_printf_float+0xc2>
 800ff54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	db02      	blt.n	800ff62 <_printf_float+0x22e>
 800ff5c:	6823      	ldr	r3, [r4, #0]
 800ff5e:	07d8      	lsls	r0, r3, #31
 800ff60:	d510      	bpl.n	800ff84 <_printf_float+0x250>
 800ff62:	ee18 3a10 	vmov	r3, s16
 800ff66:	4652      	mov	r2, sl
 800ff68:	4631      	mov	r1, r6
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	47b8      	blx	r7
 800ff6e:	3001      	adds	r0, #1
 800ff70:	f43f af41 	beq.w	800fdf6 <_printf_float+0xc2>
 800ff74:	f04f 0800 	mov.w	r8, #0
 800ff78:	f104 091a 	add.w	r9, r4, #26
 800ff7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	4543      	cmp	r3, r8
 800ff82:	dc09      	bgt.n	800ff98 <_printf_float+0x264>
 800ff84:	6823      	ldr	r3, [r4, #0]
 800ff86:	079b      	lsls	r3, r3, #30
 800ff88:	f100 8105 	bmi.w	8010196 <_printf_float+0x462>
 800ff8c:	68e0      	ldr	r0, [r4, #12]
 800ff8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff90:	4298      	cmp	r0, r3
 800ff92:	bfb8      	it	lt
 800ff94:	4618      	movlt	r0, r3
 800ff96:	e730      	b.n	800fdfa <_printf_float+0xc6>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	464a      	mov	r2, r9
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b8      	blx	r7
 800ffa2:	3001      	adds	r0, #1
 800ffa4:	f43f af27 	beq.w	800fdf6 <_printf_float+0xc2>
 800ffa8:	f108 0801 	add.w	r8, r8, #1
 800ffac:	e7e6      	b.n	800ff7c <_printf_float+0x248>
 800ffae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	dc39      	bgt.n	8010028 <_printf_float+0x2f4>
 800ffb4:	4a1b      	ldr	r2, [pc, #108]	; (8010024 <_printf_float+0x2f0>)
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	4631      	mov	r1, r6
 800ffba:	4628      	mov	r0, r5
 800ffbc:	47b8      	blx	r7
 800ffbe:	3001      	adds	r0, #1
 800ffc0:	f43f af19 	beq.w	800fdf6 <_printf_float+0xc2>
 800ffc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffc8:	4313      	orrs	r3, r2
 800ffca:	d102      	bne.n	800ffd2 <_printf_float+0x29e>
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	07d9      	lsls	r1, r3, #31
 800ffd0:	d5d8      	bpl.n	800ff84 <_printf_float+0x250>
 800ffd2:	ee18 3a10 	vmov	r3, s16
 800ffd6:	4652      	mov	r2, sl
 800ffd8:	4631      	mov	r1, r6
 800ffda:	4628      	mov	r0, r5
 800ffdc:	47b8      	blx	r7
 800ffde:	3001      	adds	r0, #1
 800ffe0:	f43f af09 	beq.w	800fdf6 <_printf_float+0xc2>
 800ffe4:	f04f 0900 	mov.w	r9, #0
 800ffe8:	f104 0a1a 	add.w	sl, r4, #26
 800ffec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffee:	425b      	negs	r3, r3
 800fff0:	454b      	cmp	r3, r9
 800fff2:	dc01      	bgt.n	800fff8 <_printf_float+0x2c4>
 800fff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fff6:	e792      	b.n	800ff1e <_printf_float+0x1ea>
 800fff8:	2301      	movs	r3, #1
 800fffa:	4652      	mov	r2, sl
 800fffc:	4631      	mov	r1, r6
 800fffe:	4628      	mov	r0, r5
 8010000:	47b8      	blx	r7
 8010002:	3001      	adds	r0, #1
 8010004:	f43f aef7 	beq.w	800fdf6 <_printf_float+0xc2>
 8010008:	f109 0901 	add.w	r9, r9, #1
 801000c:	e7ee      	b.n	800ffec <_printf_float+0x2b8>
 801000e:	bf00      	nop
 8010010:	7fefffff 	.word	0x7fefffff
 8010014:	08014570 	.word	0x08014570
 8010018:	08014574 	.word	0x08014574
 801001c:	0801457c 	.word	0x0801457c
 8010020:	08014578 	.word	0x08014578
 8010024:	08014801 	.word	0x08014801
 8010028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801002a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801002c:	429a      	cmp	r2, r3
 801002e:	bfa8      	it	ge
 8010030:	461a      	movge	r2, r3
 8010032:	2a00      	cmp	r2, #0
 8010034:	4691      	mov	r9, r2
 8010036:	dc37      	bgt.n	80100a8 <_printf_float+0x374>
 8010038:	f04f 0b00 	mov.w	fp, #0
 801003c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010040:	f104 021a 	add.w	r2, r4, #26
 8010044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010046:	9305      	str	r3, [sp, #20]
 8010048:	eba3 0309 	sub.w	r3, r3, r9
 801004c:	455b      	cmp	r3, fp
 801004e:	dc33      	bgt.n	80100b8 <_printf_float+0x384>
 8010050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010054:	429a      	cmp	r2, r3
 8010056:	db3b      	blt.n	80100d0 <_printf_float+0x39c>
 8010058:	6823      	ldr	r3, [r4, #0]
 801005a:	07da      	lsls	r2, r3, #31
 801005c:	d438      	bmi.n	80100d0 <_printf_float+0x39c>
 801005e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010060:	9a05      	ldr	r2, [sp, #20]
 8010062:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010064:	1a9a      	subs	r2, r3, r2
 8010066:	eba3 0901 	sub.w	r9, r3, r1
 801006a:	4591      	cmp	r9, r2
 801006c:	bfa8      	it	ge
 801006e:	4691      	movge	r9, r2
 8010070:	f1b9 0f00 	cmp.w	r9, #0
 8010074:	dc35      	bgt.n	80100e2 <_printf_float+0x3ae>
 8010076:	f04f 0800 	mov.w	r8, #0
 801007a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801007e:	f104 0a1a 	add.w	sl, r4, #26
 8010082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010086:	1a9b      	subs	r3, r3, r2
 8010088:	eba3 0309 	sub.w	r3, r3, r9
 801008c:	4543      	cmp	r3, r8
 801008e:	f77f af79 	ble.w	800ff84 <_printf_float+0x250>
 8010092:	2301      	movs	r3, #1
 8010094:	4652      	mov	r2, sl
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	f43f aeaa 	beq.w	800fdf6 <_printf_float+0xc2>
 80100a2:	f108 0801 	add.w	r8, r8, #1
 80100a6:	e7ec      	b.n	8010082 <_printf_float+0x34e>
 80100a8:	4613      	mov	r3, r2
 80100aa:	4631      	mov	r1, r6
 80100ac:	4642      	mov	r2, r8
 80100ae:	4628      	mov	r0, r5
 80100b0:	47b8      	blx	r7
 80100b2:	3001      	adds	r0, #1
 80100b4:	d1c0      	bne.n	8010038 <_printf_float+0x304>
 80100b6:	e69e      	b.n	800fdf6 <_printf_float+0xc2>
 80100b8:	2301      	movs	r3, #1
 80100ba:	4631      	mov	r1, r6
 80100bc:	4628      	mov	r0, r5
 80100be:	9205      	str	r2, [sp, #20]
 80100c0:	47b8      	blx	r7
 80100c2:	3001      	adds	r0, #1
 80100c4:	f43f ae97 	beq.w	800fdf6 <_printf_float+0xc2>
 80100c8:	9a05      	ldr	r2, [sp, #20]
 80100ca:	f10b 0b01 	add.w	fp, fp, #1
 80100ce:	e7b9      	b.n	8010044 <_printf_float+0x310>
 80100d0:	ee18 3a10 	vmov	r3, s16
 80100d4:	4652      	mov	r2, sl
 80100d6:	4631      	mov	r1, r6
 80100d8:	4628      	mov	r0, r5
 80100da:	47b8      	blx	r7
 80100dc:	3001      	adds	r0, #1
 80100de:	d1be      	bne.n	801005e <_printf_float+0x32a>
 80100e0:	e689      	b.n	800fdf6 <_printf_float+0xc2>
 80100e2:	9a05      	ldr	r2, [sp, #20]
 80100e4:	464b      	mov	r3, r9
 80100e6:	4442      	add	r2, r8
 80100e8:	4631      	mov	r1, r6
 80100ea:	4628      	mov	r0, r5
 80100ec:	47b8      	blx	r7
 80100ee:	3001      	adds	r0, #1
 80100f0:	d1c1      	bne.n	8010076 <_printf_float+0x342>
 80100f2:	e680      	b.n	800fdf6 <_printf_float+0xc2>
 80100f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100f6:	2a01      	cmp	r2, #1
 80100f8:	dc01      	bgt.n	80100fe <_printf_float+0x3ca>
 80100fa:	07db      	lsls	r3, r3, #31
 80100fc:	d538      	bpl.n	8010170 <_printf_float+0x43c>
 80100fe:	2301      	movs	r3, #1
 8010100:	4642      	mov	r2, r8
 8010102:	4631      	mov	r1, r6
 8010104:	4628      	mov	r0, r5
 8010106:	47b8      	blx	r7
 8010108:	3001      	adds	r0, #1
 801010a:	f43f ae74 	beq.w	800fdf6 <_printf_float+0xc2>
 801010e:	ee18 3a10 	vmov	r3, s16
 8010112:	4652      	mov	r2, sl
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	f43f ae6b 	beq.w	800fdf6 <_printf_float+0xc2>
 8010120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010124:	2200      	movs	r2, #0
 8010126:	2300      	movs	r3, #0
 8010128:	f7f0 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 801012c:	b9d8      	cbnz	r0, 8010166 <_printf_float+0x432>
 801012e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010130:	f108 0201 	add.w	r2, r8, #1
 8010134:	3b01      	subs	r3, #1
 8010136:	4631      	mov	r1, r6
 8010138:	4628      	mov	r0, r5
 801013a:	47b8      	blx	r7
 801013c:	3001      	adds	r0, #1
 801013e:	d10e      	bne.n	801015e <_printf_float+0x42a>
 8010140:	e659      	b.n	800fdf6 <_printf_float+0xc2>
 8010142:	2301      	movs	r3, #1
 8010144:	4652      	mov	r2, sl
 8010146:	4631      	mov	r1, r6
 8010148:	4628      	mov	r0, r5
 801014a:	47b8      	blx	r7
 801014c:	3001      	adds	r0, #1
 801014e:	f43f ae52 	beq.w	800fdf6 <_printf_float+0xc2>
 8010152:	f108 0801 	add.w	r8, r8, #1
 8010156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010158:	3b01      	subs	r3, #1
 801015a:	4543      	cmp	r3, r8
 801015c:	dcf1      	bgt.n	8010142 <_printf_float+0x40e>
 801015e:	464b      	mov	r3, r9
 8010160:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010164:	e6dc      	b.n	800ff20 <_printf_float+0x1ec>
 8010166:	f04f 0800 	mov.w	r8, #0
 801016a:	f104 0a1a 	add.w	sl, r4, #26
 801016e:	e7f2      	b.n	8010156 <_printf_float+0x422>
 8010170:	2301      	movs	r3, #1
 8010172:	4642      	mov	r2, r8
 8010174:	e7df      	b.n	8010136 <_printf_float+0x402>
 8010176:	2301      	movs	r3, #1
 8010178:	464a      	mov	r2, r9
 801017a:	4631      	mov	r1, r6
 801017c:	4628      	mov	r0, r5
 801017e:	47b8      	blx	r7
 8010180:	3001      	adds	r0, #1
 8010182:	f43f ae38 	beq.w	800fdf6 <_printf_float+0xc2>
 8010186:	f108 0801 	add.w	r8, r8, #1
 801018a:	68e3      	ldr	r3, [r4, #12]
 801018c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801018e:	1a5b      	subs	r3, r3, r1
 8010190:	4543      	cmp	r3, r8
 8010192:	dcf0      	bgt.n	8010176 <_printf_float+0x442>
 8010194:	e6fa      	b.n	800ff8c <_printf_float+0x258>
 8010196:	f04f 0800 	mov.w	r8, #0
 801019a:	f104 0919 	add.w	r9, r4, #25
 801019e:	e7f4      	b.n	801018a <_printf_float+0x456>

080101a0 <_printf_common>:
 80101a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a4:	4616      	mov	r6, r2
 80101a6:	4699      	mov	r9, r3
 80101a8:	688a      	ldr	r2, [r1, #8]
 80101aa:	690b      	ldr	r3, [r1, #16]
 80101ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101b0:	4293      	cmp	r3, r2
 80101b2:	bfb8      	it	lt
 80101b4:	4613      	movlt	r3, r2
 80101b6:	6033      	str	r3, [r6, #0]
 80101b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101bc:	4607      	mov	r7, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	b10a      	cbz	r2, 80101c6 <_printf_common+0x26>
 80101c2:	3301      	adds	r3, #1
 80101c4:	6033      	str	r3, [r6, #0]
 80101c6:	6823      	ldr	r3, [r4, #0]
 80101c8:	0699      	lsls	r1, r3, #26
 80101ca:	bf42      	ittt	mi
 80101cc:	6833      	ldrmi	r3, [r6, #0]
 80101ce:	3302      	addmi	r3, #2
 80101d0:	6033      	strmi	r3, [r6, #0]
 80101d2:	6825      	ldr	r5, [r4, #0]
 80101d4:	f015 0506 	ands.w	r5, r5, #6
 80101d8:	d106      	bne.n	80101e8 <_printf_common+0x48>
 80101da:	f104 0a19 	add.w	sl, r4, #25
 80101de:	68e3      	ldr	r3, [r4, #12]
 80101e0:	6832      	ldr	r2, [r6, #0]
 80101e2:	1a9b      	subs	r3, r3, r2
 80101e4:	42ab      	cmp	r3, r5
 80101e6:	dc26      	bgt.n	8010236 <_printf_common+0x96>
 80101e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80101ec:	1e13      	subs	r3, r2, #0
 80101ee:	6822      	ldr	r2, [r4, #0]
 80101f0:	bf18      	it	ne
 80101f2:	2301      	movne	r3, #1
 80101f4:	0692      	lsls	r2, r2, #26
 80101f6:	d42b      	bmi.n	8010250 <_printf_common+0xb0>
 80101f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80101fc:	4649      	mov	r1, r9
 80101fe:	4638      	mov	r0, r7
 8010200:	47c0      	blx	r8
 8010202:	3001      	adds	r0, #1
 8010204:	d01e      	beq.n	8010244 <_printf_common+0xa4>
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	68e5      	ldr	r5, [r4, #12]
 801020a:	6832      	ldr	r2, [r6, #0]
 801020c:	f003 0306 	and.w	r3, r3, #6
 8010210:	2b04      	cmp	r3, #4
 8010212:	bf08      	it	eq
 8010214:	1aad      	subeq	r5, r5, r2
 8010216:	68a3      	ldr	r3, [r4, #8]
 8010218:	6922      	ldr	r2, [r4, #16]
 801021a:	bf0c      	ite	eq
 801021c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010220:	2500      	movne	r5, #0
 8010222:	4293      	cmp	r3, r2
 8010224:	bfc4      	itt	gt
 8010226:	1a9b      	subgt	r3, r3, r2
 8010228:	18ed      	addgt	r5, r5, r3
 801022a:	2600      	movs	r6, #0
 801022c:	341a      	adds	r4, #26
 801022e:	42b5      	cmp	r5, r6
 8010230:	d11a      	bne.n	8010268 <_printf_common+0xc8>
 8010232:	2000      	movs	r0, #0
 8010234:	e008      	b.n	8010248 <_printf_common+0xa8>
 8010236:	2301      	movs	r3, #1
 8010238:	4652      	mov	r2, sl
 801023a:	4649      	mov	r1, r9
 801023c:	4638      	mov	r0, r7
 801023e:	47c0      	blx	r8
 8010240:	3001      	adds	r0, #1
 8010242:	d103      	bne.n	801024c <_printf_common+0xac>
 8010244:	f04f 30ff 	mov.w	r0, #4294967295
 8010248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801024c:	3501      	adds	r5, #1
 801024e:	e7c6      	b.n	80101de <_printf_common+0x3e>
 8010250:	18e1      	adds	r1, r4, r3
 8010252:	1c5a      	adds	r2, r3, #1
 8010254:	2030      	movs	r0, #48	; 0x30
 8010256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801025a:	4422      	add	r2, r4
 801025c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010264:	3302      	adds	r3, #2
 8010266:	e7c7      	b.n	80101f8 <_printf_common+0x58>
 8010268:	2301      	movs	r3, #1
 801026a:	4622      	mov	r2, r4
 801026c:	4649      	mov	r1, r9
 801026e:	4638      	mov	r0, r7
 8010270:	47c0      	blx	r8
 8010272:	3001      	adds	r0, #1
 8010274:	d0e6      	beq.n	8010244 <_printf_common+0xa4>
 8010276:	3601      	adds	r6, #1
 8010278:	e7d9      	b.n	801022e <_printf_common+0x8e>
	...

0801027c <_printf_i>:
 801027c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010280:	7e0f      	ldrb	r7, [r1, #24]
 8010282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010284:	2f78      	cmp	r7, #120	; 0x78
 8010286:	4691      	mov	r9, r2
 8010288:	4680      	mov	r8, r0
 801028a:	460c      	mov	r4, r1
 801028c:	469a      	mov	sl, r3
 801028e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010292:	d807      	bhi.n	80102a4 <_printf_i+0x28>
 8010294:	2f62      	cmp	r7, #98	; 0x62
 8010296:	d80a      	bhi.n	80102ae <_printf_i+0x32>
 8010298:	2f00      	cmp	r7, #0
 801029a:	f000 80d8 	beq.w	801044e <_printf_i+0x1d2>
 801029e:	2f58      	cmp	r7, #88	; 0x58
 80102a0:	f000 80a3 	beq.w	80103ea <_printf_i+0x16e>
 80102a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102ac:	e03a      	b.n	8010324 <_printf_i+0xa8>
 80102ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102b2:	2b15      	cmp	r3, #21
 80102b4:	d8f6      	bhi.n	80102a4 <_printf_i+0x28>
 80102b6:	a101      	add	r1, pc, #4	; (adr r1, 80102bc <_printf_i+0x40>)
 80102b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102bc:	08010315 	.word	0x08010315
 80102c0:	08010329 	.word	0x08010329
 80102c4:	080102a5 	.word	0x080102a5
 80102c8:	080102a5 	.word	0x080102a5
 80102cc:	080102a5 	.word	0x080102a5
 80102d0:	080102a5 	.word	0x080102a5
 80102d4:	08010329 	.word	0x08010329
 80102d8:	080102a5 	.word	0x080102a5
 80102dc:	080102a5 	.word	0x080102a5
 80102e0:	080102a5 	.word	0x080102a5
 80102e4:	080102a5 	.word	0x080102a5
 80102e8:	08010435 	.word	0x08010435
 80102ec:	08010359 	.word	0x08010359
 80102f0:	08010417 	.word	0x08010417
 80102f4:	080102a5 	.word	0x080102a5
 80102f8:	080102a5 	.word	0x080102a5
 80102fc:	08010457 	.word	0x08010457
 8010300:	080102a5 	.word	0x080102a5
 8010304:	08010359 	.word	0x08010359
 8010308:	080102a5 	.word	0x080102a5
 801030c:	080102a5 	.word	0x080102a5
 8010310:	0801041f 	.word	0x0801041f
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	1d1a      	adds	r2, r3, #4
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	602a      	str	r2, [r5, #0]
 801031c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010324:	2301      	movs	r3, #1
 8010326:	e0a3      	b.n	8010470 <_printf_i+0x1f4>
 8010328:	6820      	ldr	r0, [r4, #0]
 801032a:	6829      	ldr	r1, [r5, #0]
 801032c:	0606      	lsls	r6, r0, #24
 801032e:	f101 0304 	add.w	r3, r1, #4
 8010332:	d50a      	bpl.n	801034a <_printf_i+0xce>
 8010334:	680e      	ldr	r6, [r1, #0]
 8010336:	602b      	str	r3, [r5, #0]
 8010338:	2e00      	cmp	r6, #0
 801033a:	da03      	bge.n	8010344 <_printf_i+0xc8>
 801033c:	232d      	movs	r3, #45	; 0x2d
 801033e:	4276      	negs	r6, r6
 8010340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010344:	485e      	ldr	r0, [pc, #376]	; (80104c0 <_printf_i+0x244>)
 8010346:	230a      	movs	r3, #10
 8010348:	e019      	b.n	801037e <_printf_i+0x102>
 801034a:	680e      	ldr	r6, [r1, #0]
 801034c:	602b      	str	r3, [r5, #0]
 801034e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010352:	bf18      	it	ne
 8010354:	b236      	sxthne	r6, r6
 8010356:	e7ef      	b.n	8010338 <_printf_i+0xbc>
 8010358:	682b      	ldr	r3, [r5, #0]
 801035a:	6820      	ldr	r0, [r4, #0]
 801035c:	1d19      	adds	r1, r3, #4
 801035e:	6029      	str	r1, [r5, #0]
 8010360:	0601      	lsls	r1, r0, #24
 8010362:	d501      	bpl.n	8010368 <_printf_i+0xec>
 8010364:	681e      	ldr	r6, [r3, #0]
 8010366:	e002      	b.n	801036e <_printf_i+0xf2>
 8010368:	0646      	lsls	r6, r0, #25
 801036a:	d5fb      	bpl.n	8010364 <_printf_i+0xe8>
 801036c:	881e      	ldrh	r6, [r3, #0]
 801036e:	4854      	ldr	r0, [pc, #336]	; (80104c0 <_printf_i+0x244>)
 8010370:	2f6f      	cmp	r7, #111	; 0x6f
 8010372:	bf0c      	ite	eq
 8010374:	2308      	moveq	r3, #8
 8010376:	230a      	movne	r3, #10
 8010378:	2100      	movs	r1, #0
 801037a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801037e:	6865      	ldr	r5, [r4, #4]
 8010380:	60a5      	str	r5, [r4, #8]
 8010382:	2d00      	cmp	r5, #0
 8010384:	bfa2      	ittt	ge
 8010386:	6821      	ldrge	r1, [r4, #0]
 8010388:	f021 0104 	bicge.w	r1, r1, #4
 801038c:	6021      	strge	r1, [r4, #0]
 801038e:	b90e      	cbnz	r6, 8010394 <_printf_i+0x118>
 8010390:	2d00      	cmp	r5, #0
 8010392:	d04d      	beq.n	8010430 <_printf_i+0x1b4>
 8010394:	4615      	mov	r5, r2
 8010396:	fbb6 f1f3 	udiv	r1, r6, r3
 801039a:	fb03 6711 	mls	r7, r3, r1, r6
 801039e:	5dc7      	ldrb	r7, [r0, r7]
 80103a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80103a4:	4637      	mov	r7, r6
 80103a6:	42bb      	cmp	r3, r7
 80103a8:	460e      	mov	r6, r1
 80103aa:	d9f4      	bls.n	8010396 <_printf_i+0x11a>
 80103ac:	2b08      	cmp	r3, #8
 80103ae:	d10b      	bne.n	80103c8 <_printf_i+0x14c>
 80103b0:	6823      	ldr	r3, [r4, #0]
 80103b2:	07de      	lsls	r6, r3, #31
 80103b4:	d508      	bpl.n	80103c8 <_printf_i+0x14c>
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	6861      	ldr	r1, [r4, #4]
 80103ba:	4299      	cmp	r1, r3
 80103bc:	bfde      	ittt	le
 80103be:	2330      	movle	r3, #48	; 0x30
 80103c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103c8:	1b52      	subs	r2, r2, r5
 80103ca:	6122      	str	r2, [r4, #16]
 80103cc:	f8cd a000 	str.w	sl, [sp]
 80103d0:	464b      	mov	r3, r9
 80103d2:	aa03      	add	r2, sp, #12
 80103d4:	4621      	mov	r1, r4
 80103d6:	4640      	mov	r0, r8
 80103d8:	f7ff fee2 	bl	80101a0 <_printf_common>
 80103dc:	3001      	adds	r0, #1
 80103de:	d14c      	bne.n	801047a <_printf_i+0x1fe>
 80103e0:	f04f 30ff 	mov.w	r0, #4294967295
 80103e4:	b004      	add	sp, #16
 80103e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ea:	4835      	ldr	r0, [pc, #212]	; (80104c0 <_printf_i+0x244>)
 80103ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80103f0:	6829      	ldr	r1, [r5, #0]
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80103f8:	6029      	str	r1, [r5, #0]
 80103fa:	061d      	lsls	r5, r3, #24
 80103fc:	d514      	bpl.n	8010428 <_printf_i+0x1ac>
 80103fe:	07df      	lsls	r7, r3, #31
 8010400:	bf44      	itt	mi
 8010402:	f043 0320 	orrmi.w	r3, r3, #32
 8010406:	6023      	strmi	r3, [r4, #0]
 8010408:	b91e      	cbnz	r6, 8010412 <_printf_i+0x196>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	f023 0320 	bic.w	r3, r3, #32
 8010410:	6023      	str	r3, [r4, #0]
 8010412:	2310      	movs	r3, #16
 8010414:	e7b0      	b.n	8010378 <_printf_i+0xfc>
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	f043 0320 	orr.w	r3, r3, #32
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	2378      	movs	r3, #120	; 0x78
 8010420:	4828      	ldr	r0, [pc, #160]	; (80104c4 <_printf_i+0x248>)
 8010422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010426:	e7e3      	b.n	80103f0 <_printf_i+0x174>
 8010428:	0659      	lsls	r1, r3, #25
 801042a:	bf48      	it	mi
 801042c:	b2b6      	uxthmi	r6, r6
 801042e:	e7e6      	b.n	80103fe <_printf_i+0x182>
 8010430:	4615      	mov	r5, r2
 8010432:	e7bb      	b.n	80103ac <_printf_i+0x130>
 8010434:	682b      	ldr	r3, [r5, #0]
 8010436:	6826      	ldr	r6, [r4, #0]
 8010438:	6961      	ldr	r1, [r4, #20]
 801043a:	1d18      	adds	r0, r3, #4
 801043c:	6028      	str	r0, [r5, #0]
 801043e:	0635      	lsls	r5, r6, #24
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	d501      	bpl.n	8010448 <_printf_i+0x1cc>
 8010444:	6019      	str	r1, [r3, #0]
 8010446:	e002      	b.n	801044e <_printf_i+0x1d2>
 8010448:	0670      	lsls	r0, r6, #25
 801044a:	d5fb      	bpl.n	8010444 <_printf_i+0x1c8>
 801044c:	8019      	strh	r1, [r3, #0]
 801044e:	2300      	movs	r3, #0
 8010450:	6123      	str	r3, [r4, #16]
 8010452:	4615      	mov	r5, r2
 8010454:	e7ba      	b.n	80103cc <_printf_i+0x150>
 8010456:	682b      	ldr	r3, [r5, #0]
 8010458:	1d1a      	adds	r2, r3, #4
 801045a:	602a      	str	r2, [r5, #0]
 801045c:	681d      	ldr	r5, [r3, #0]
 801045e:	6862      	ldr	r2, [r4, #4]
 8010460:	2100      	movs	r1, #0
 8010462:	4628      	mov	r0, r5
 8010464:	f7ef febc 	bl	80001e0 <memchr>
 8010468:	b108      	cbz	r0, 801046e <_printf_i+0x1f2>
 801046a:	1b40      	subs	r0, r0, r5
 801046c:	6060      	str	r0, [r4, #4]
 801046e:	6863      	ldr	r3, [r4, #4]
 8010470:	6123      	str	r3, [r4, #16]
 8010472:	2300      	movs	r3, #0
 8010474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010478:	e7a8      	b.n	80103cc <_printf_i+0x150>
 801047a:	6923      	ldr	r3, [r4, #16]
 801047c:	462a      	mov	r2, r5
 801047e:	4649      	mov	r1, r9
 8010480:	4640      	mov	r0, r8
 8010482:	47d0      	blx	sl
 8010484:	3001      	adds	r0, #1
 8010486:	d0ab      	beq.n	80103e0 <_printf_i+0x164>
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	079b      	lsls	r3, r3, #30
 801048c:	d413      	bmi.n	80104b6 <_printf_i+0x23a>
 801048e:	68e0      	ldr	r0, [r4, #12]
 8010490:	9b03      	ldr	r3, [sp, #12]
 8010492:	4298      	cmp	r0, r3
 8010494:	bfb8      	it	lt
 8010496:	4618      	movlt	r0, r3
 8010498:	e7a4      	b.n	80103e4 <_printf_i+0x168>
 801049a:	2301      	movs	r3, #1
 801049c:	4632      	mov	r2, r6
 801049e:	4649      	mov	r1, r9
 80104a0:	4640      	mov	r0, r8
 80104a2:	47d0      	blx	sl
 80104a4:	3001      	adds	r0, #1
 80104a6:	d09b      	beq.n	80103e0 <_printf_i+0x164>
 80104a8:	3501      	adds	r5, #1
 80104aa:	68e3      	ldr	r3, [r4, #12]
 80104ac:	9903      	ldr	r1, [sp, #12]
 80104ae:	1a5b      	subs	r3, r3, r1
 80104b0:	42ab      	cmp	r3, r5
 80104b2:	dcf2      	bgt.n	801049a <_printf_i+0x21e>
 80104b4:	e7eb      	b.n	801048e <_printf_i+0x212>
 80104b6:	2500      	movs	r5, #0
 80104b8:	f104 0619 	add.w	r6, r4, #25
 80104bc:	e7f5      	b.n	80104aa <_printf_i+0x22e>
 80104be:	bf00      	nop
 80104c0:	08014580 	.word	0x08014580
 80104c4:	08014591 	.word	0x08014591

080104c8 <iprintf>:
 80104c8:	b40f      	push	{r0, r1, r2, r3}
 80104ca:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <iprintf+0x2c>)
 80104cc:	b513      	push	{r0, r1, r4, lr}
 80104ce:	681c      	ldr	r4, [r3, #0]
 80104d0:	b124      	cbz	r4, 80104dc <iprintf+0x14>
 80104d2:	69a3      	ldr	r3, [r4, #24]
 80104d4:	b913      	cbnz	r3, 80104dc <iprintf+0x14>
 80104d6:	4620      	mov	r0, r4
 80104d8:	f001 f984 	bl	80117e4 <__sinit>
 80104dc:	ab05      	add	r3, sp, #20
 80104de:	9a04      	ldr	r2, [sp, #16]
 80104e0:	68a1      	ldr	r1, [r4, #8]
 80104e2:	9301      	str	r3, [sp, #4]
 80104e4:	4620      	mov	r0, r4
 80104e6:	f001 ffcf 	bl	8012488 <_vfiprintf_r>
 80104ea:	b002      	add	sp, #8
 80104ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f0:	b004      	add	sp, #16
 80104f2:	4770      	bx	lr
 80104f4:	20000044 	.word	0x20000044

080104f8 <_sbrk_r>:
 80104f8:	b538      	push	{r3, r4, r5, lr}
 80104fa:	4d06      	ldr	r5, [pc, #24]	; (8010514 <_sbrk_r+0x1c>)
 80104fc:	2300      	movs	r3, #0
 80104fe:	4604      	mov	r4, r0
 8010500:	4608      	mov	r0, r1
 8010502:	602b      	str	r3, [r5, #0]
 8010504:	f7f4 f938 	bl	8004778 <_sbrk>
 8010508:	1c43      	adds	r3, r0, #1
 801050a:	d102      	bne.n	8010512 <_sbrk_r+0x1a>
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	b103      	cbz	r3, 8010512 <_sbrk_r+0x1a>
 8010510:	6023      	str	r3, [r4, #0]
 8010512:	bd38      	pop	{r3, r4, r5, pc}
 8010514:	20000970 	.word	0x20000970

08010518 <iscanf>:
 8010518:	b40f      	push	{r0, r1, r2, r3}
 801051a:	4b0a      	ldr	r3, [pc, #40]	; (8010544 <iscanf+0x2c>)
 801051c:	b513      	push	{r0, r1, r4, lr}
 801051e:	681c      	ldr	r4, [r3, #0]
 8010520:	b124      	cbz	r4, 801052c <iscanf+0x14>
 8010522:	69a3      	ldr	r3, [r4, #24]
 8010524:	b913      	cbnz	r3, 801052c <iscanf+0x14>
 8010526:	4620      	mov	r0, r4
 8010528:	f001 f95c 	bl	80117e4 <__sinit>
 801052c:	ab05      	add	r3, sp, #20
 801052e:	9a04      	ldr	r2, [sp, #16]
 8010530:	6861      	ldr	r1, [r4, #4]
 8010532:	9301      	str	r3, [sp, #4]
 8010534:	4620      	mov	r0, r4
 8010536:	f002 fa7d 	bl	8012a34 <_vfiscanf_r>
 801053a:	b002      	add	sp, #8
 801053c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010540:	b004      	add	sp, #16
 8010542:	4770      	bx	lr
 8010544:	20000044 	.word	0x20000044

08010548 <setvbuf>:
 8010548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801054c:	461d      	mov	r5, r3
 801054e:	4b5d      	ldr	r3, [pc, #372]	; (80106c4 <setvbuf+0x17c>)
 8010550:	681f      	ldr	r7, [r3, #0]
 8010552:	4604      	mov	r4, r0
 8010554:	460e      	mov	r6, r1
 8010556:	4690      	mov	r8, r2
 8010558:	b127      	cbz	r7, 8010564 <setvbuf+0x1c>
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	b913      	cbnz	r3, 8010564 <setvbuf+0x1c>
 801055e:	4638      	mov	r0, r7
 8010560:	f001 f940 	bl	80117e4 <__sinit>
 8010564:	4b58      	ldr	r3, [pc, #352]	; (80106c8 <setvbuf+0x180>)
 8010566:	429c      	cmp	r4, r3
 8010568:	d167      	bne.n	801063a <setvbuf+0xf2>
 801056a:	687c      	ldr	r4, [r7, #4]
 801056c:	f1b8 0f02 	cmp.w	r8, #2
 8010570:	d006      	beq.n	8010580 <setvbuf+0x38>
 8010572:	f1b8 0f01 	cmp.w	r8, #1
 8010576:	f200 809f 	bhi.w	80106b8 <setvbuf+0x170>
 801057a:	2d00      	cmp	r5, #0
 801057c:	f2c0 809c 	blt.w	80106b8 <setvbuf+0x170>
 8010580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010582:	07db      	lsls	r3, r3, #31
 8010584:	d405      	bmi.n	8010592 <setvbuf+0x4a>
 8010586:	89a3      	ldrh	r3, [r4, #12]
 8010588:	0598      	lsls	r0, r3, #22
 801058a:	d402      	bmi.n	8010592 <setvbuf+0x4a>
 801058c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801058e:	f001 f9e8 	bl	8011962 <__retarget_lock_acquire_recursive>
 8010592:	4621      	mov	r1, r4
 8010594:	4638      	mov	r0, r7
 8010596:	f001 f87f 	bl	8011698 <_fflush_r>
 801059a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801059c:	b141      	cbz	r1, 80105b0 <setvbuf+0x68>
 801059e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80105a2:	4299      	cmp	r1, r3
 80105a4:	d002      	beq.n	80105ac <setvbuf+0x64>
 80105a6:	4638      	mov	r0, r7
 80105a8:	f7ff fa44 	bl	800fa34 <_free_r>
 80105ac:	2300      	movs	r3, #0
 80105ae:	6363      	str	r3, [r4, #52]	; 0x34
 80105b0:	2300      	movs	r3, #0
 80105b2:	61a3      	str	r3, [r4, #24]
 80105b4:	6063      	str	r3, [r4, #4]
 80105b6:	89a3      	ldrh	r3, [r4, #12]
 80105b8:	0619      	lsls	r1, r3, #24
 80105ba:	d503      	bpl.n	80105c4 <setvbuf+0x7c>
 80105bc:	6921      	ldr	r1, [r4, #16]
 80105be:	4638      	mov	r0, r7
 80105c0:	f7ff fa38 	bl	800fa34 <_free_r>
 80105c4:	89a3      	ldrh	r3, [r4, #12]
 80105c6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80105ca:	f023 0303 	bic.w	r3, r3, #3
 80105ce:	f1b8 0f02 	cmp.w	r8, #2
 80105d2:	81a3      	strh	r3, [r4, #12]
 80105d4:	d06c      	beq.n	80106b0 <setvbuf+0x168>
 80105d6:	ab01      	add	r3, sp, #4
 80105d8:	466a      	mov	r2, sp
 80105da:	4621      	mov	r1, r4
 80105dc:	4638      	mov	r0, r7
 80105de:	f001 f9c2 	bl	8011966 <__swhatbuf_r>
 80105e2:	89a3      	ldrh	r3, [r4, #12]
 80105e4:	4318      	orrs	r0, r3
 80105e6:	81a0      	strh	r0, [r4, #12]
 80105e8:	2d00      	cmp	r5, #0
 80105ea:	d130      	bne.n	801064e <setvbuf+0x106>
 80105ec:	9d00      	ldr	r5, [sp, #0]
 80105ee:	4628      	mov	r0, r5
 80105f0:	f7ff fa02 	bl	800f9f8 <malloc>
 80105f4:	4606      	mov	r6, r0
 80105f6:	2800      	cmp	r0, #0
 80105f8:	d155      	bne.n	80106a6 <setvbuf+0x15e>
 80105fa:	f8dd 9000 	ldr.w	r9, [sp]
 80105fe:	45a9      	cmp	r9, r5
 8010600:	d14a      	bne.n	8010698 <setvbuf+0x150>
 8010602:	f04f 35ff 	mov.w	r5, #4294967295
 8010606:	2200      	movs	r2, #0
 8010608:	60a2      	str	r2, [r4, #8]
 801060a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801060e:	6022      	str	r2, [r4, #0]
 8010610:	6122      	str	r2, [r4, #16]
 8010612:	2201      	movs	r2, #1
 8010614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010618:	6162      	str	r2, [r4, #20]
 801061a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801061c:	f043 0302 	orr.w	r3, r3, #2
 8010620:	07d2      	lsls	r2, r2, #31
 8010622:	81a3      	strh	r3, [r4, #12]
 8010624:	d405      	bmi.n	8010632 <setvbuf+0xea>
 8010626:	f413 7f00 	tst.w	r3, #512	; 0x200
 801062a:	d102      	bne.n	8010632 <setvbuf+0xea>
 801062c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801062e:	f001 f999 	bl	8011964 <__retarget_lock_release_recursive>
 8010632:	4628      	mov	r0, r5
 8010634:	b003      	add	sp, #12
 8010636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801063a:	4b24      	ldr	r3, [pc, #144]	; (80106cc <setvbuf+0x184>)
 801063c:	429c      	cmp	r4, r3
 801063e:	d101      	bne.n	8010644 <setvbuf+0xfc>
 8010640:	68bc      	ldr	r4, [r7, #8]
 8010642:	e793      	b.n	801056c <setvbuf+0x24>
 8010644:	4b22      	ldr	r3, [pc, #136]	; (80106d0 <setvbuf+0x188>)
 8010646:	429c      	cmp	r4, r3
 8010648:	bf08      	it	eq
 801064a:	68fc      	ldreq	r4, [r7, #12]
 801064c:	e78e      	b.n	801056c <setvbuf+0x24>
 801064e:	2e00      	cmp	r6, #0
 8010650:	d0cd      	beq.n	80105ee <setvbuf+0xa6>
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	b913      	cbnz	r3, 801065c <setvbuf+0x114>
 8010656:	4638      	mov	r0, r7
 8010658:	f001 f8c4 	bl	80117e4 <__sinit>
 801065c:	f1b8 0f01 	cmp.w	r8, #1
 8010660:	bf08      	it	eq
 8010662:	89a3      	ldrheq	r3, [r4, #12]
 8010664:	6026      	str	r6, [r4, #0]
 8010666:	bf04      	itt	eq
 8010668:	f043 0301 	orreq.w	r3, r3, #1
 801066c:	81a3      	strheq	r3, [r4, #12]
 801066e:	89a2      	ldrh	r2, [r4, #12]
 8010670:	f012 0308 	ands.w	r3, r2, #8
 8010674:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010678:	d01c      	beq.n	80106b4 <setvbuf+0x16c>
 801067a:	07d3      	lsls	r3, r2, #31
 801067c:	bf41      	itttt	mi
 801067e:	2300      	movmi	r3, #0
 8010680:	426d      	negmi	r5, r5
 8010682:	60a3      	strmi	r3, [r4, #8]
 8010684:	61a5      	strmi	r5, [r4, #24]
 8010686:	bf58      	it	pl
 8010688:	60a5      	strpl	r5, [r4, #8]
 801068a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801068c:	f015 0501 	ands.w	r5, r5, #1
 8010690:	d115      	bne.n	80106be <setvbuf+0x176>
 8010692:	f412 7f00 	tst.w	r2, #512	; 0x200
 8010696:	e7c8      	b.n	801062a <setvbuf+0xe2>
 8010698:	4648      	mov	r0, r9
 801069a:	f7ff f9ad 	bl	800f9f8 <malloc>
 801069e:	4606      	mov	r6, r0
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d0ae      	beq.n	8010602 <setvbuf+0xba>
 80106a4:	464d      	mov	r5, r9
 80106a6:	89a3      	ldrh	r3, [r4, #12]
 80106a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106ac:	81a3      	strh	r3, [r4, #12]
 80106ae:	e7d0      	b.n	8010652 <setvbuf+0x10a>
 80106b0:	2500      	movs	r5, #0
 80106b2:	e7a8      	b.n	8010606 <setvbuf+0xbe>
 80106b4:	60a3      	str	r3, [r4, #8]
 80106b6:	e7e8      	b.n	801068a <setvbuf+0x142>
 80106b8:	f04f 35ff 	mov.w	r5, #4294967295
 80106bc:	e7b9      	b.n	8010632 <setvbuf+0xea>
 80106be:	2500      	movs	r5, #0
 80106c0:	e7b7      	b.n	8010632 <setvbuf+0xea>
 80106c2:	bf00      	nop
 80106c4:	20000044 	.word	0x20000044
 80106c8:	08014654 	.word	0x08014654
 80106cc:	08014674 	.word	0x08014674
 80106d0:	08014634 	.word	0x08014634

080106d4 <siprintf>:
 80106d4:	b40e      	push	{r1, r2, r3}
 80106d6:	b500      	push	{lr}
 80106d8:	b09c      	sub	sp, #112	; 0x70
 80106da:	ab1d      	add	r3, sp, #116	; 0x74
 80106dc:	9002      	str	r0, [sp, #8]
 80106de:	9006      	str	r0, [sp, #24]
 80106e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80106e4:	4809      	ldr	r0, [pc, #36]	; (801070c <siprintf+0x38>)
 80106e6:	9107      	str	r1, [sp, #28]
 80106e8:	9104      	str	r1, [sp, #16]
 80106ea:	4909      	ldr	r1, [pc, #36]	; (8010710 <siprintf+0x3c>)
 80106ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80106f0:	9105      	str	r1, [sp, #20]
 80106f2:	6800      	ldr	r0, [r0, #0]
 80106f4:	9301      	str	r3, [sp, #4]
 80106f6:	a902      	add	r1, sp, #8
 80106f8:	f001 fd9c 	bl	8012234 <_svfiprintf_r>
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	2200      	movs	r2, #0
 8010700:	701a      	strb	r2, [r3, #0]
 8010702:	b01c      	add	sp, #112	; 0x70
 8010704:	f85d eb04 	ldr.w	lr, [sp], #4
 8010708:	b003      	add	sp, #12
 801070a:	4770      	bx	lr
 801070c:	20000044 	.word	0x20000044
 8010710:	ffff0208 	.word	0xffff0208

08010714 <__swbuf_r>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	460e      	mov	r6, r1
 8010718:	4614      	mov	r4, r2
 801071a:	4605      	mov	r5, r0
 801071c:	b118      	cbz	r0, 8010726 <__swbuf_r+0x12>
 801071e:	6983      	ldr	r3, [r0, #24]
 8010720:	b90b      	cbnz	r3, 8010726 <__swbuf_r+0x12>
 8010722:	f001 f85f 	bl	80117e4 <__sinit>
 8010726:	4b21      	ldr	r3, [pc, #132]	; (80107ac <__swbuf_r+0x98>)
 8010728:	429c      	cmp	r4, r3
 801072a:	d12b      	bne.n	8010784 <__swbuf_r+0x70>
 801072c:	686c      	ldr	r4, [r5, #4]
 801072e:	69a3      	ldr	r3, [r4, #24]
 8010730:	60a3      	str	r3, [r4, #8]
 8010732:	89a3      	ldrh	r3, [r4, #12]
 8010734:	071a      	lsls	r2, r3, #28
 8010736:	d52f      	bpl.n	8010798 <__swbuf_r+0x84>
 8010738:	6923      	ldr	r3, [r4, #16]
 801073a:	b36b      	cbz	r3, 8010798 <__swbuf_r+0x84>
 801073c:	6923      	ldr	r3, [r4, #16]
 801073e:	6820      	ldr	r0, [r4, #0]
 8010740:	1ac0      	subs	r0, r0, r3
 8010742:	6963      	ldr	r3, [r4, #20]
 8010744:	b2f6      	uxtb	r6, r6
 8010746:	4283      	cmp	r3, r0
 8010748:	4637      	mov	r7, r6
 801074a:	dc04      	bgt.n	8010756 <__swbuf_r+0x42>
 801074c:	4621      	mov	r1, r4
 801074e:	4628      	mov	r0, r5
 8010750:	f000 ffa2 	bl	8011698 <_fflush_r>
 8010754:	bb30      	cbnz	r0, 80107a4 <__swbuf_r+0x90>
 8010756:	68a3      	ldr	r3, [r4, #8]
 8010758:	3b01      	subs	r3, #1
 801075a:	60a3      	str	r3, [r4, #8]
 801075c:	6823      	ldr	r3, [r4, #0]
 801075e:	1c5a      	adds	r2, r3, #1
 8010760:	6022      	str	r2, [r4, #0]
 8010762:	701e      	strb	r6, [r3, #0]
 8010764:	6963      	ldr	r3, [r4, #20]
 8010766:	3001      	adds	r0, #1
 8010768:	4283      	cmp	r3, r0
 801076a:	d004      	beq.n	8010776 <__swbuf_r+0x62>
 801076c:	89a3      	ldrh	r3, [r4, #12]
 801076e:	07db      	lsls	r3, r3, #31
 8010770:	d506      	bpl.n	8010780 <__swbuf_r+0x6c>
 8010772:	2e0a      	cmp	r6, #10
 8010774:	d104      	bne.n	8010780 <__swbuf_r+0x6c>
 8010776:	4621      	mov	r1, r4
 8010778:	4628      	mov	r0, r5
 801077a:	f000 ff8d 	bl	8011698 <_fflush_r>
 801077e:	b988      	cbnz	r0, 80107a4 <__swbuf_r+0x90>
 8010780:	4638      	mov	r0, r7
 8010782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010784:	4b0a      	ldr	r3, [pc, #40]	; (80107b0 <__swbuf_r+0x9c>)
 8010786:	429c      	cmp	r4, r3
 8010788:	d101      	bne.n	801078e <__swbuf_r+0x7a>
 801078a:	68ac      	ldr	r4, [r5, #8]
 801078c:	e7cf      	b.n	801072e <__swbuf_r+0x1a>
 801078e:	4b09      	ldr	r3, [pc, #36]	; (80107b4 <__swbuf_r+0xa0>)
 8010790:	429c      	cmp	r4, r3
 8010792:	bf08      	it	eq
 8010794:	68ec      	ldreq	r4, [r5, #12]
 8010796:	e7ca      	b.n	801072e <__swbuf_r+0x1a>
 8010798:	4621      	mov	r1, r4
 801079a:	4628      	mov	r0, r5
 801079c:	f000 f80c 	bl	80107b8 <__swsetup_r>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d0cb      	beq.n	801073c <__swbuf_r+0x28>
 80107a4:	f04f 37ff 	mov.w	r7, #4294967295
 80107a8:	e7ea      	b.n	8010780 <__swbuf_r+0x6c>
 80107aa:	bf00      	nop
 80107ac:	08014654 	.word	0x08014654
 80107b0:	08014674 	.word	0x08014674
 80107b4:	08014634 	.word	0x08014634

080107b8 <__swsetup_r>:
 80107b8:	4b32      	ldr	r3, [pc, #200]	; (8010884 <__swsetup_r+0xcc>)
 80107ba:	b570      	push	{r4, r5, r6, lr}
 80107bc:	681d      	ldr	r5, [r3, #0]
 80107be:	4606      	mov	r6, r0
 80107c0:	460c      	mov	r4, r1
 80107c2:	b125      	cbz	r5, 80107ce <__swsetup_r+0x16>
 80107c4:	69ab      	ldr	r3, [r5, #24]
 80107c6:	b913      	cbnz	r3, 80107ce <__swsetup_r+0x16>
 80107c8:	4628      	mov	r0, r5
 80107ca:	f001 f80b 	bl	80117e4 <__sinit>
 80107ce:	4b2e      	ldr	r3, [pc, #184]	; (8010888 <__swsetup_r+0xd0>)
 80107d0:	429c      	cmp	r4, r3
 80107d2:	d10f      	bne.n	80107f4 <__swsetup_r+0x3c>
 80107d4:	686c      	ldr	r4, [r5, #4]
 80107d6:	89a3      	ldrh	r3, [r4, #12]
 80107d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107dc:	0719      	lsls	r1, r3, #28
 80107de:	d42c      	bmi.n	801083a <__swsetup_r+0x82>
 80107e0:	06dd      	lsls	r5, r3, #27
 80107e2:	d411      	bmi.n	8010808 <__swsetup_r+0x50>
 80107e4:	2309      	movs	r3, #9
 80107e6:	6033      	str	r3, [r6, #0]
 80107e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107ec:	81a3      	strh	r3, [r4, #12]
 80107ee:	f04f 30ff 	mov.w	r0, #4294967295
 80107f2:	e03e      	b.n	8010872 <__swsetup_r+0xba>
 80107f4:	4b25      	ldr	r3, [pc, #148]	; (801088c <__swsetup_r+0xd4>)
 80107f6:	429c      	cmp	r4, r3
 80107f8:	d101      	bne.n	80107fe <__swsetup_r+0x46>
 80107fa:	68ac      	ldr	r4, [r5, #8]
 80107fc:	e7eb      	b.n	80107d6 <__swsetup_r+0x1e>
 80107fe:	4b24      	ldr	r3, [pc, #144]	; (8010890 <__swsetup_r+0xd8>)
 8010800:	429c      	cmp	r4, r3
 8010802:	bf08      	it	eq
 8010804:	68ec      	ldreq	r4, [r5, #12]
 8010806:	e7e6      	b.n	80107d6 <__swsetup_r+0x1e>
 8010808:	0758      	lsls	r0, r3, #29
 801080a:	d512      	bpl.n	8010832 <__swsetup_r+0x7a>
 801080c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801080e:	b141      	cbz	r1, 8010822 <__swsetup_r+0x6a>
 8010810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010814:	4299      	cmp	r1, r3
 8010816:	d002      	beq.n	801081e <__swsetup_r+0x66>
 8010818:	4630      	mov	r0, r6
 801081a:	f7ff f90b 	bl	800fa34 <_free_r>
 801081e:	2300      	movs	r3, #0
 8010820:	6363      	str	r3, [r4, #52]	; 0x34
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010828:	81a3      	strh	r3, [r4, #12]
 801082a:	2300      	movs	r3, #0
 801082c:	6063      	str	r3, [r4, #4]
 801082e:	6923      	ldr	r3, [r4, #16]
 8010830:	6023      	str	r3, [r4, #0]
 8010832:	89a3      	ldrh	r3, [r4, #12]
 8010834:	f043 0308 	orr.w	r3, r3, #8
 8010838:	81a3      	strh	r3, [r4, #12]
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	b94b      	cbnz	r3, 8010852 <__swsetup_r+0x9a>
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010848:	d003      	beq.n	8010852 <__swsetup_r+0x9a>
 801084a:	4621      	mov	r1, r4
 801084c:	4630      	mov	r0, r6
 801084e:	f001 f8af 	bl	80119b0 <__smakebuf_r>
 8010852:	89a0      	ldrh	r0, [r4, #12]
 8010854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010858:	f010 0301 	ands.w	r3, r0, #1
 801085c:	d00a      	beq.n	8010874 <__swsetup_r+0xbc>
 801085e:	2300      	movs	r3, #0
 8010860:	60a3      	str	r3, [r4, #8]
 8010862:	6963      	ldr	r3, [r4, #20]
 8010864:	425b      	negs	r3, r3
 8010866:	61a3      	str	r3, [r4, #24]
 8010868:	6923      	ldr	r3, [r4, #16]
 801086a:	b943      	cbnz	r3, 801087e <__swsetup_r+0xc6>
 801086c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010870:	d1ba      	bne.n	80107e8 <__swsetup_r+0x30>
 8010872:	bd70      	pop	{r4, r5, r6, pc}
 8010874:	0781      	lsls	r1, r0, #30
 8010876:	bf58      	it	pl
 8010878:	6963      	ldrpl	r3, [r4, #20]
 801087a:	60a3      	str	r3, [r4, #8]
 801087c:	e7f4      	b.n	8010868 <__swsetup_r+0xb0>
 801087e:	2000      	movs	r0, #0
 8010880:	e7f7      	b.n	8010872 <__swsetup_r+0xba>
 8010882:	bf00      	nop
 8010884:	20000044 	.word	0x20000044
 8010888:	08014654 	.word	0x08014654
 801088c:	08014674 	.word	0x08014674
 8010890:	08014634 	.word	0x08014634

08010894 <quorem>:
 8010894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010898:	6903      	ldr	r3, [r0, #16]
 801089a:	690c      	ldr	r4, [r1, #16]
 801089c:	42a3      	cmp	r3, r4
 801089e:	4607      	mov	r7, r0
 80108a0:	f2c0 8081 	blt.w	80109a6 <quorem+0x112>
 80108a4:	3c01      	subs	r4, #1
 80108a6:	f101 0814 	add.w	r8, r1, #20
 80108aa:	f100 0514 	add.w	r5, r0, #20
 80108ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80108b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80108bc:	3301      	adds	r3, #1
 80108be:	429a      	cmp	r2, r3
 80108c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80108c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80108c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80108cc:	d331      	bcc.n	8010932 <quorem+0x9e>
 80108ce:	f04f 0e00 	mov.w	lr, #0
 80108d2:	4640      	mov	r0, r8
 80108d4:	46ac      	mov	ip, r5
 80108d6:	46f2      	mov	sl, lr
 80108d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80108dc:	b293      	uxth	r3, r2
 80108de:	fb06 e303 	mla	r3, r6, r3, lr
 80108e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	ebaa 0303 	sub.w	r3, sl, r3
 80108ec:	f8dc a000 	ldr.w	sl, [ip]
 80108f0:	0c12      	lsrs	r2, r2, #16
 80108f2:	fa13 f38a 	uxtah	r3, r3, sl
 80108f6:	fb06 e202 	mla	r2, r6, r2, lr
 80108fa:	9300      	str	r3, [sp, #0]
 80108fc:	9b00      	ldr	r3, [sp, #0]
 80108fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010902:	b292      	uxth	r2, r2
 8010904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801090c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010910:	4581      	cmp	r9, r0
 8010912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010916:	f84c 3b04 	str.w	r3, [ip], #4
 801091a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801091e:	d2db      	bcs.n	80108d8 <quorem+0x44>
 8010920:	f855 300b 	ldr.w	r3, [r5, fp]
 8010924:	b92b      	cbnz	r3, 8010932 <quorem+0x9e>
 8010926:	9b01      	ldr	r3, [sp, #4]
 8010928:	3b04      	subs	r3, #4
 801092a:	429d      	cmp	r5, r3
 801092c:	461a      	mov	r2, r3
 801092e:	d32e      	bcc.n	801098e <quorem+0xfa>
 8010930:	613c      	str	r4, [r7, #16]
 8010932:	4638      	mov	r0, r7
 8010934:	f001 fb0a 	bl	8011f4c <__mcmp>
 8010938:	2800      	cmp	r0, #0
 801093a:	db24      	blt.n	8010986 <quorem+0xf2>
 801093c:	3601      	adds	r6, #1
 801093e:	4628      	mov	r0, r5
 8010940:	f04f 0c00 	mov.w	ip, #0
 8010944:	f858 2b04 	ldr.w	r2, [r8], #4
 8010948:	f8d0 e000 	ldr.w	lr, [r0]
 801094c:	b293      	uxth	r3, r2
 801094e:	ebac 0303 	sub.w	r3, ip, r3
 8010952:	0c12      	lsrs	r2, r2, #16
 8010954:	fa13 f38e 	uxtah	r3, r3, lr
 8010958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801095c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010960:	b29b      	uxth	r3, r3
 8010962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010966:	45c1      	cmp	r9, r8
 8010968:	f840 3b04 	str.w	r3, [r0], #4
 801096c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010970:	d2e8      	bcs.n	8010944 <quorem+0xb0>
 8010972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801097a:	b922      	cbnz	r2, 8010986 <quorem+0xf2>
 801097c:	3b04      	subs	r3, #4
 801097e:	429d      	cmp	r5, r3
 8010980:	461a      	mov	r2, r3
 8010982:	d30a      	bcc.n	801099a <quorem+0x106>
 8010984:	613c      	str	r4, [r7, #16]
 8010986:	4630      	mov	r0, r6
 8010988:	b003      	add	sp, #12
 801098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098e:	6812      	ldr	r2, [r2, #0]
 8010990:	3b04      	subs	r3, #4
 8010992:	2a00      	cmp	r2, #0
 8010994:	d1cc      	bne.n	8010930 <quorem+0x9c>
 8010996:	3c01      	subs	r4, #1
 8010998:	e7c7      	b.n	801092a <quorem+0x96>
 801099a:	6812      	ldr	r2, [r2, #0]
 801099c:	3b04      	subs	r3, #4
 801099e:	2a00      	cmp	r2, #0
 80109a0:	d1f0      	bne.n	8010984 <quorem+0xf0>
 80109a2:	3c01      	subs	r4, #1
 80109a4:	e7eb      	b.n	801097e <quorem+0xea>
 80109a6:	2000      	movs	r0, #0
 80109a8:	e7ee      	b.n	8010988 <quorem+0xf4>
 80109aa:	0000      	movs	r0, r0
 80109ac:	0000      	movs	r0, r0
	...

080109b0 <_dtoa_r>:
 80109b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b4:	ed2d 8b04 	vpush	{d8-d9}
 80109b8:	ec57 6b10 	vmov	r6, r7, d0
 80109bc:	b093      	sub	sp, #76	; 0x4c
 80109be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80109c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80109c4:	9106      	str	r1, [sp, #24]
 80109c6:	ee10 aa10 	vmov	sl, s0
 80109ca:	4604      	mov	r4, r0
 80109cc:	9209      	str	r2, [sp, #36]	; 0x24
 80109ce:	930c      	str	r3, [sp, #48]	; 0x30
 80109d0:	46bb      	mov	fp, r7
 80109d2:	b975      	cbnz	r5, 80109f2 <_dtoa_r+0x42>
 80109d4:	2010      	movs	r0, #16
 80109d6:	f7ff f80f 	bl	800f9f8 <malloc>
 80109da:	4602      	mov	r2, r0
 80109dc:	6260      	str	r0, [r4, #36]	; 0x24
 80109de:	b920      	cbnz	r0, 80109ea <_dtoa_r+0x3a>
 80109e0:	4ba7      	ldr	r3, [pc, #668]	; (8010c80 <_dtoa_r+0x2d0>)
 80109e2:	21ea      	movs	r1, #234	; 0xea
 80109e4:	48a7      	ldr	r0, [pc, #668]	; (8010c84 <_dtoa_r+0x2d4>)
 80109e6:	f002 fc8b 	bl	8013300 <__assert_func>
 80109ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109ee:	6005      	str	r5, [r0, #0]
 80109f0:	60c5      	str	r5, [r0, #12]
 80109f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109f4:	6819      	ldr	r1, [r3, #0]
 80109f6:	b151      	cbz	r1, 8010a0e <_dtoa_r+0x5e>
 80109f8:	685a      	ldr	r2, [r3, #4]
 80109fa:	604a      	str	r2, [r1, #4]
 80109fc:	2301      	movs	r3, #1
 80109fe:	4093      	lsls	r3, r2
 8010a00:	608b      	str	r3, [r1, #8]
 8010a02:	4620      	mov	r0, r4
 8010a04:	f001 f860 	bl	8011ac8 <_Bfree>
 8010a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	601a      	str	r2, [r3, #0]
 8010a0e:	1e3b      	subs	r3, r7, #0
 8010a10:	bfaa      	itet	ge
 8010a12:	2300      	movge	r3, #0
 8010a14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010a18:	f8c8 3000 	strge.w	r3, [r8]
 8010a1c:	4b9a      	ldr	r3, [pc, #616]	; (8010c88 <_dtoa_r+0x2d8>)
 8010a1e:	bfbc      	itt	lt
 8010a20:	2201      	movlt	r2, #1
 8010a22:	f8c8 2000 	strlt.w	r2, [r8]
 8010a26:	ea33 030b 	bics.w	r3, r3, fp
 8010a2a:	d11b      	bne.n	8010a64 <_dtoa_r+0xb4>
 8010a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a32:	6013      	str	r3, [r2, #0]
 8010a34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a38:	4333      	orrs	r3, r6
 8010a3a:	f000 8592 	beq.w	8011562 <_dtoa_r+0xbb2>
 8010a3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a40:	b963      	cbnz	r3, 8010a5c <_dtoa_r+0xac>
 8010a42:	4b92      	ldr	r3, [pc, #584]	; (8010c8c <_dtoa_r+0x2dc>)
 8010a44:	e022      	b.n	8010a8c <_dtoa_r+0xdc>
 8010a46:	4b92      	ldr	r3, [pc, #584]	; (8010c90 <_dtoa_r+0x2e0>)
 8010a48:	9301      	str	r3, [sp, #4]
 8010a4a:	3308      	adds	r3, #8
 8010a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a4e:	6013      	str	r3, [r2, #0]
 8010a50:	9801      	ldr	r0, [sp, #4]
 8010a52:	b013      	add	sp, #76	; 0x4c
 8010a54:	ecbd 8b04 	vpop	{d8-d9}
 8010a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5c:	4b8b      	ldr	r3, [pc, #556]	; (8010c8c <_dtoa_r+0x2dc>)
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	3303      	adds	r3, #3
 8010a62:	e7f3      	b.n	8010a4c <_dtoa_r+0x9c>
 8010a64:	2200      	movs	r2, #0
 8010a66:	2300      	movs	r3, #0
 8010a68:	4650      	mov	r0, sl
 8010a6a:	4659      	mov	r1, fp
 8010a6c:	f7f0 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a70:	ec4b ab19 	vmov	d9, sl, fp
 8010a74:	4680      	mov	r8, r0
 8010a76:	b158      	cbz	r0, 8010a90 <_dtoa_r+0xe0>
 8010a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	6013      	str	r3, [r2, #0]
 8010a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 856b 	beq.w	801155c <_dtoa_r+0xbac>
 8010a86:	4883      	ldr	r0, [pc, #524]	; (8010c94 <_dtoa_r+0x2e4>)
 8010a88:	6018      	str	r0, [r3, #0]
 8010a8a:	1e43      	subs	r3, r0, #1
 8010a8c:	9301      	str	r3, [sp, #4]
 8010a8e:	e7df      	b.n	8010a50 <_dtoa_r+0xa0>
 8010a90:	ec4b ab10 	vmov	d0, sl, fp
 8010a94:	aa10      	add	r2, sp, #64	; 0x40
 8010a96:	a911      	add	r1, sp, #68	; 0x44
 8010a98:	4620      	mov	r0, r4
 8010a9a:	f001 fafd 	bl	8012098 <__d2b>
 8010a9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010aa2:	ee08 0a10 	vmov	s16, r0
 8010aa6:	2d00      	cmp	r5, #0
 8010aa8:	f000 8084 	beq.w	8010bb4 <_dtoa_r+0x204>
 8010aac:	ee19 3a90 	vmov	r3, s19
 8010ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010ab8:	4656      	mov	r6, sl
 8010aba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010ac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010ac6:	4b74      	ldr	r3, [pc, #464]	; (8010c98 <_dtoa_r+0x2e8>)
 8010ac8:	2200      	movs	r2, #0
 8010aca:	4630      	mov	r0, r6
 8010acc:	4639      	mov	r1, r7
 8010ace:	f7ef fbdb 	bl	8000288 <__aeabi_dsub>
 8010ad2:	a365      	add	r3, pc, #404	; (adr r3, 8010c68 <_dtoa_r+0x2b8>)
 8010ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad8:	f7ef fd8e 	bl	80005f8 <__aeabi_dmul>
 8010adc:	a364      	add	r3, pc, #400	; (adr r3, 8010c70 <_dtoa_r+0x2c0>)
 8010ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae2:	f7ef fbd3 	bl	800028c <__adddf3>
 8010ae6:	4606      	mov	r6, r0
 8010ae8:	4628      	mov	r0, r5
 8010aea:	460f      	mov	r7, r1
 8010aec:	f7ef fd1a 	bl	8000524 <__aeabi_i2d>
 8010af0:	a361      	add	r3, pc, #388	; (adr r3, 8010c78 <_dtoa_r+0x2c8>)
 8010af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af6:	f7ef fd7f 	bl	80005f8 <__aeabi_dmul>
 8010afa:	4602      	mov	r2, r0
 8010afc:	460b      	mov	r3, r1
 8010afe:	4630      	mov	r0, r6
 8010b00:	4639      	mov	r1, r7
 8010b02:	f7ef fbc3 	bl	800028c <__adddf3>
 8010b06:	4606      	mov	r6, r0
 8010b08:	460f      	mov	r7, r1
 8010b0a:	f7f0 f825 	bl	8000b58 <__aeabi_d2iz>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	9000      	str	r0, [sp, #0]
 8010b12:	2300      	movs	r3, #0
 8010b14:	4630      	mov	r0, r6
 8010b16:	4639      	mov	r1, r7
 8010b18:	f7ef ffe0 	bl	8000adc <__aeabi_dcmplt>
 8010b1c:	b150      	cbz	r0, 8010b34 <_dtoa_r+0x184>
 8010b1e:	9800      	ldr	r0, [sp, #0]
 8010b20:	f7ef fd00 	bl	8000524 <__aeabi_i2d>
 8010b24:	4632      	mov	r2, r6
 8010b26:	463b      	mov	r3, r7
 8010b28:	f7ef ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b2c:	b910      	cbnz	r0, 8010b34 <_dtoa_r+0x184>
 8010b2e:	9b00      	ldr	r3, [sp, #0]
 8010b30:	3b01      	subs	r3, #1
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	9b00      	ldr	r3, [sp, #0]
 8010b36:	2b16      	cmp	r3, #22
 8010b38:	d85a      	bhi.n	8010bf0 <_dtoa_r+0x240>
 8010b3a:	9a00      	ldr	r2, [sp, #0]
 8010b3c:	4b57      	ldr	r3, [pc, #348]	; (8010c9c <_dtoa_r+0x2ec>)
 8010b3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b46:	ec51 0b19 	vmov	r0, r1, d9
 8010b4a:	f7ef ffc7 	bl	8000adc <__aeabi_dcmplt>
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d050      	beq.n	8010bf4 <_dtoa_r+0x244>
 8010b52:	9b00      	ldr	r3, [sp, #0]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	2300      	movs	r3, #0
 8010b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010b5e:	1b5d      	subs	r5, r3, r5
 8010b60:	1e6b      	subs	r3, r5, #1
 8010b62:	9305      	str	r3, [sp, #20]
 8010b64:	bf45      	ittet	mi
 8010b66:	f1c5 0301 	rsbmi	r3, r5, #1
 8010b6a:	9304      	strmi	r3, [sp, #16]
 8010b6c:	2300      	movpl	r3, #0
 8010b6e:	2300      	movmi	r3, #0
 8010b70:	bf4c      	ite	mi
 8010b72:	9305      	strmi	r3, [sp, #20]
 8010b74:	9304      	strpl	r3, [sp, #16]
 8010b76:	9b00      	ldr	r3, [sp, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	db3d      	blt.n	8010bf8 <_dtoa_r+0x248>
 8010b7c:	9b05      	ldr	r3, [sp, #20]
 8010b7e:	9a00      	ldr	r2, [sp, #0]
 8010b80:	920a      	str	r2, [sp, #40]	; 0x28
 8010b82:	4413      	add	r3, r2
 8010b84:	9305      	str	r3, [sp, #20]
 8010b86:	2300      	movs	r3, #0
 8010b88:	9307      	str	r3, [sp, #28]
 8010b8a:	9b06      	ldr	r3, [sp, #24]
 8010b8c:	2b09      	cmp	r3, #9
 8010b8e:	f200 8089 	bhi.w	8010ca4 <_dtoa_r+0x2f4>
 8010b92:	2b05      	cmp	r3, #5
 8010b94:	bfc4      	itt	gt
 8010b96:	3b04      	subgt	r3, #4
 8010b98:	9306      	strgt	r3, [sp, #24]
 8010b9a:	9b06      	ldr	r3, [sp, #24]
 8010b9c:	f1a3 0302 	sub.w	r3, r3, #2
 8010ba0:	bfcc      	ite	gt
 8010ba2:	2500      	movgt	r5, #0
 8010ba4:	2501      	movle	r5, #1
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	f200 8087 	bhi.w	8010cba <_dtoa_r+0x30a>
 8010bac:	e8df f003 	tbb	[pc, r3]
 8010bb0:	59383a2d 	.word	0x59383a2d
 8010bb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010bb8:	441d      	add	r5, r3
 8010bba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010bbe:	2b20      	cmp	r3, #32
 8010bc0:	bfc1      	itttt	gt
 8010bc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010bc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010bca:	fa0b f303 	lslgt.w	r3, fp, r3
 8010bce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010bd2:	bfda      	itte	le
 8010bd4:	f1c3 0320 	rsble	r3, r3, #32
 8010bd8:	fa06 f003 	lslle.w	r0, r6, r3
 8010bdc:	4318      	orrgt	r0, r3
 8010bde:	f7ef fc91 	bl	8000504 <__aeabi_ui2d>
 8010be2:	2301      	movs	r3, #1
 8010be4:	4606      	mov	r6, r0
 8010be6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010bea:	3d01      	subs	r5, #1
 8010bec:	930e      	str	r3, [sp, #56]	; 0x38
 8010bee:	e76a      	b.n	8010ac6 <_dtoa_r+0x116>
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	e7b2      	b.n	8010b5a <_dtoa_r+0x1aa>
 8010bf4:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bf6:	e7b1      	b.n	8010b5c <_dtoa_r+0x1ac>
 8010bf8:	9b04      	ldr	r3, [sp, #16]
 8010bfa:	9a00      	ldr	r2, [sp, #0]
 8010bfc:	1a9b      	subs	r3, r3, r2
 8010bfe:	9304      	str	r3, [sp, #16]
 8010c00:	4253      	negs	r3, r2
 8010c02:	9307      	str	r3, [sp, #28]
 8010c04:	2300      	movs	r3, #0
 8010c06:	930a      	str	r3, [sp, #40]	; 0x28
 8010c08:	e7bf      	b.n	8010b8a <_dtoa_r+0x1da>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	9308      	str	r3, [sp, #32]
 8010c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	dc55      	bgt.n	8010cc0 <_dtoa_r+0x310>
 8010c14:	2301      	movs	r3, #1
 8010c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8010c1e:	e00c      	b.n	8010c3a <_dtoa_r+0x28a>
 8010c20:	2301      	movs	r3, #1
 8010c22:	e7f3      	b.n	8010c0c <_dtoa_r+0x25c>
 8010c24:	2300      	movs	r3, #0
 8010c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c28:	9308      	str	r3, [sp, #32]
 8010c2a:	9b00      	ldr	r3, [sp, #0]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	9302      	str	r3, [sp, #8]
 8010c30:	3301      	adds	r3, #1
 8010c32:	2b01      	cmp	r3, #1
 8010c34:	9303      	str	r3, [sp, #12]
 8010c36:	bfb8      	it	lt
 8010c38:	2301      	movlt	r3, #1
 8010c3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	6042      	str	r2, [r0, #4]
 8010c40:	2204      	movs	r2, #4
 8010c42:	f102 0614 	add.w	r6, r2, #20
 8010c46:	429e      	cmp	r6, r3
 8010c48:	6841      	ldr	r1, [r0, #4]
 8010c4a:	d93d      	bls.n	8010cc8 <_dtoa_r+0x318>
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f000 fefb 	bl	8011a48 <_Balloc>
 8010c52:	9001      	str	r0, [sp, #4]
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d13b      	bne.n	8010cd0 <_dtoa_r+0x320>
 8010c58:	4b11      	ldr	r3, [pc, #68]	; (8010ca0 <_dtoa_r+0x2f0>)
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c60:	e6c0      	b.n	80109e4 <_dtoa_r+0x34>
 8010c62:	2301      	movs	r3, #1
 8010c64:	e7df      	b.n	8010c26 <_dtoa_r+0x276>
 8010c66:	bf00      	nop
 8010c68:	636f4361 	.word	0x636f4361
 8010c6c:	3fd287a7 	.word	0x3fd287a7
 8010c70:	8b60c8b3 	.word	0x8b60c8b3
 8010c74:	3fc68a28 	.word	0x3fc68a28
 8010c78:	509f79fb 	.word	0x509f79fb
 8010c7c:	3fd34413 	.word	0x3fd34413
 8010c80:	080145af 	.word	0x080145af
 8010c84:	080145c6 	.word	0x080145c6
 8010c88:	7ff00000 	.word	0x7ff00000
 8010c8c:	080145ab 	.word	0x080145ab
 8010c90:	080145a2 	.word	0x080145a2
 8010c94:	08014802 	.word	0x08014802
 8010c98:	3ff80000 	.word	0x3ff80000
 8010c9c:	08014718 	.word	0x08014718
 8010ca0:	08014621 	.word	0x08014621
 8010ca4:	2501      	movs	r5, #1
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	9306      	str	r3, [sp, #24]
 8010caa:	9508      	str	r5, [sp, #32]
 8010cac:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	2312      	movs	r3, #18
 8010cb8:	e7b0      	b.n	8010c1c <_dtoa_r+0x26c>
 8010cba:	2301      	movs	r3, #1
 8010cbc:	9308      	str	r3, [sp, #32]
 8010cbe:	e7f5      	b.n	8010cac <_dtoa_r+0x2fc>
 8010cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010cc6:	e7b8      	b.n	8010c3a <_dtoa_r+0x28a>
 8010cc8:	3101      	adds	r1, #1
 8010cca:	6041      	str	r1, [r0, #4]
 8010ccc:	0052      	lsls	r2, r2, #1
 8010cce:	e7b8      	b.n	8010c42 <_dtoa_r+0x292>
 8010cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010cd2:	9a01      	ldr	r2, [sp, #4]
 8010cd4:	601a      	str	r2, [r3, #0]
 8010cd6:	9b03      	ldr	r3, [sp, #12]
 8010cd8:	2b0e      	cmp	r3, #14
 8010cda:	f200 809d 	bhi.w	8010e18 <_dtoa_r+0x468>
 8010cde:	2d00      	cmp	r5, #0
 8010ce0:	f000 809a 	beq.w	8010e18 <_dtoa_r+0x468>
 8010ce4:	9b00      	ldr	r3, [sp, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	dd32      	ble.n	8010d50 <_dtoa_r+0x3a0>
 8010cea:	4ab7      	ldr	r2, [pc, #732]	; (8010fc8 <_dtoa_r+0x618>)
 8010cec:	f003 030f 	and.w	r3, r3, #15
 8010cf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cf8:	9b00      	ldr	r3, [sp, #0]
 8010cfa:	05d8      	lsls	r0, r3, #23
 8010cfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010d00:	d516      	bpl.n	8010d30 <_dtoa_r+0x380>
 8010d02:	4bb2      	ldr	r3, [pc, #712]	; (8010fcc <_dtoa_r+0x61c>)
 8010d04:	ec51 0b19 	vmov	r0, r1, d9
 8010d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010d0c:	f7ef fd9e 	bl	800084c <__aeabi_ddiv>
 8010d10:	f007 070f 	and.w	r7, r7, #15
 8010d14:	4682      	mov	sl, r0
 8010d16:	468b      	mov	fp, r1
 8010d18:	2503      	movs	r5, #3
 8010d1a:	4eac      	ldr	r6, [pc, #688]	; (8010fcc <_dtoa_r+0x61c>)
 8010d1c:	b957      	cbnz	r7, 8010d34 <_dtoa_r+0x384>
 8010d1e:	4642      	mov	r2, r8
 8010d20:	464b      	mov	r3, r9
 8010d22:	4650      	mov	r0, sl
 8010d24:	4659      	mov	r1, fp
 8010d26:	f7ef fd91 	bl	800084c <__aeabi_ddiv>
 8010d2a:	4682      	mov	sl, r0
 8010d2c:	468b      	mov	fp, r1
 8010d2e:	e028      	b.n	8010d82 <_dtoa_r+0x3d2>
 8010d30:	2502      	movs	r5, #2
 8010d32:	e7f2      	b.n	8010d1a <_dtoa_r+0x36a>
 8010d34:	07f9      	lsls	r1, r7, #31
 8010d36:	d508      	bpl.n	8010d4a <_dtoa_r+0x39a>
 8010d38:	4640      	mov	r0, r8
 8010d3a:	4649      	mov	r1, r9
 8010d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d40:	f7ef fc5a 	bl	80005f8 <__aeabi_dmul>
 8010d44:	3501      	adds	r5, #1
 8010d46:	4680      	mov	r8, r0
 8010d48:	4689      	mov	r9, r1
 8010d4a:	107f      	asrs	r7, r7, #1
 8010d4c:	3608      	adds	r6, #8
 8010d4e:	e7e5      	b.n	8010d1c <_dtoa_r+0x36c>
 8010d50:	f000 809b 	beq.w	8010e8a <_dtoa_r+0x4da>
 8010d54:	9b00      	ldr	r3, [sp, #0]
 8010d56:	4f9d      	ldr	r7, [pc, #628]	; (8010fcc <_dtoa_r+0x61c>)
 8010d58:	425e      	negs	r6, r3
 8010d5a:	4b9b      	ldr	r3, [pc, #620]	; (8010fc8 <_dtoa_r+0x618>)
 8010d5c:	f006 020f 	and.w	r2, r6, #15
 8010d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	ec51 0b19 	vmov	r0, r1, d9
 8010d6c:	f7ef fc44 	bl	80005f8 <__aeabi_dmul>
 8010d70:	1136      	asrs	r6, r6, #4
 8010d72:	4682      	mov	sl, r0
 8010d74:	468b      	mov	fp, r1
 8010d76:	2300      	movs	r3, #0
 8010d78:	2502      	movs	r5, #2
 8010d7a:	2e00      	cmp	r6, #0
 8010d7c:	d17a      	bne.n	8010e74 <_dtoa_r+0x4c4>
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d1d3      	bne.n	8010d2a <_dtoa_r+0x37a>
 8010d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	f000 8082 	beq.w	8010e8e <_dtoa_r+0x4de>
 8010d8a:	4b91      	ldr	r3, [pc, #580]	; (8010fd0 <_dtoa_r+0x620>)
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	4650      	mov	r0, sl
 8010d90:	4659      	mov	r1, fp
 8010d92:	f7ef fea3 	bl	8000adc <__aeabi_dcmplt>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d079      	beq.n	8010e8e <_dtoa_r+0x4de>
 8010d9a:	9b03      	ldr	r3, [sp, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d076      	beq.n	8010e8e <_dtoa_r+0x4de>
 8010da0:	9b02      	ldr	r3, [sp, #8]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	dd36      	ble.n	8010e14 <_dtoa_r+0x464>
 8010da6:	9b00      	ldr	r3, [sp, #0]
 8010da8:	4650      	mov	r0, sl
 8010daa:	4659      	mov	r1, fp
 8010dac:	1e5f      	subs	r7, r3, #1
 8010dae:	2200      	movs	r2, #0
 8010db0:	4b88      	ldr	r3, [pc, #544]	; (8010fd4 <_dtoa_r+0x624>)
 8010db2:	f7ef fc21 	bl	80005f8 <__aeabi_dmul>
 8010db6:	9e02      	ldr	r6, [sp, #8]
 8010db8:	4682      	mov	sl, r0
 8010dba:	468b      	mov	fp, r1
 8010dbc:	3501      	adds	r5, #1
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7ef fbb0 	bl	8000524 <__aeabi_i2d>
 8010dc4:	4652      	mov	r2, sl
 8010dc6:	465b      	mov	r3, fp
 8010dc8:	f7ef fc16 	bl	80005f8 <__aeabi_dmul>
 8010dcc:	4b82      	ldr	r3, [pc, #520]	; (8010fd8 <_dtoa_r+0x628>)
 8010dce:	2200      	movs	r2, #0
 8010dd0:	f7ef fa5c 	bl	800028c <__adddf3>
 8010dd4:	46d0      	mov	r8, sl
 8010dd6:	46d9      	mov	r9, fp
 8010dd8:	4682      	mov	sl, r0
 8010dda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010dde:	2e00      	cmp	r6, #0
 8010de0:	d158      	bne.n	8010e94 <_dtoa_r+0x4e4>
 8010de2:	4b7e      	ldr	r3, [pc, #504]	; (8010fdc <_dtoa_r+0x62c>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	4640      	mov	r0, r8
 8010de8:	4649      	mov	r1, r9
 8010dea:	f7ef fa4d 	bl	8000288 <__aeabi_dsub>
 8010dee:	4652      	mov	r2, sl
 8010df0:	465b      	mov	r3, fp
 8010df2:	4680      	mov	r8, r0
 8010df4:	4689      	mov	r9, r1
 8010df6:	f7ef fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 8010dfa:	2800      	cmp	r0, #0
 8010dfc:	f040 8295 	bne.w	801132a <_dtoa_r+0x97a>
 8010e00:	4652      	mov	r2, sl
 8010e02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010e06:	4640      	mov	r0, r8
 8010e08:	4649      	mov	r1, r9
 8010e0a:	f7ef fe67 	bl	8000adc <__aeabi_dcmplt>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	f040 8289 	bne.w	8011326 <_dtoa_r+0x976>
 8010e14:	ec5b ab19 	vmov	sl, fp, d9
 8010e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	f2c0 8148 	blt.w	80110b0 <_dtoa_r+0x700>
 8010e20:	9a00      	ldr	r2, [sp, #0]
 8010e22:	2a0e      	cmp	r2, #14
 8010e24:	f300 8144 	bgt.w	80110b0 <_dtoa_r+0x700>
 8010e28:	4b67      	ldr	r3, [pc, #412]	; (8010fc8 <_dtoa_r+0x618>)
 8010e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f280 80d5 	bge.w	8010fe4 <_dtoa_r+0x634>
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	f300 80d1 	bgt.w	8010fe4 <_dtoa_r+0x634>
 8010e42:	f040 826f 	bne.w	8011324 <_dtoa_r+0x974>
 8010e46:	4b65      	ldr	r3, [pc, #404]	; (8010fdc <_dtoa_r+0x62c>)
 8010e48:	2200      	movs	r2, #0
 8010e4a:	4640      	mov	r0, r8
 8010e4c:	4649      	mov	r1, r9
 8010e4e:	f7ef fbd3 	bl	80005f8 <__aeabi_dmul>
 8010e52:	4652      	mov	r2, sl
 8010e54:	465b      	mov	r3, fp
 8010e56:	f7ef fe55 	bl	8000b04 <__aeabi_dcmpge>
 8010e5a:	9e03      	ldr	r6, [sp, #12]
 8010e5c:	4637      	mov	r7, r6
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	f040 8245 	bne.w	80112ee <_dtoa_r+0x93e>
 8010e64:	9d01      	ldr	r5, [sp, #4]
 8010e66:	2331      	movs	r3, #49	; 0x31
 8010e68:	f805 3b01 	strb.w	r3, [r5], #1
 8010e6c:	9b00      	ldr	r3, [sp, #0]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	9300      	str	r3, [sp, #0]
 8010e72:	e240      	b.n	80112f6 <_dtoa_r+0x946>
 8010e74:	07f2      	lsls	r2, r6, #31
 8010e76:	d505      	bpl.n	8010e84 <_dtoa_r+0x4d4>
 8010e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e7c:	f7ef fbbc 	bl	80005f8 <__aeabi_dmul>
 8010e80:	3501      	adds	r5, #1
 8010e82:	2301      	movs	r3, #1
 8010e84:	1076      	asrs	r6, r6, #1
 8010e86:	3708      	adds	r7, #8
 8010e88:	e777      	b.n	8010d7a <_dtoa_r+0x3ca>
 8010e8a:	2502      	movs	r5, #2
 8010e8c:	e779      	b.n	8010d82 <_dtoa_r+0x3d2>
 8010e8e:	9f00      	ldr	r7, [sp, #0]
 8010e90:	9e03      	ldr	r6, [sp, #12]
 8010e92:	e794      	b.n	8010dbe <_dtoa_r+0x40e>
 8010e94:	9901      	ldr	r1, [sp, #4]
 8010e96:	4b4c      	ldr	r3, [pc, #304]	; (8010fc8 <_dtoa_r+0x618>)
 8010e98:	4431      	add	r1, r6
 8010e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8010e9c:	9908      	ldr	r1, [sp, #32]
 8010e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ea6:	2900      	cmp	r1, #0
 8010ea8:	d043      	beq.n	8010f32 <_dtoa_r+0x582>
 8010eaa:	494d      	ldr	r1, [pc, #308]	; (8010fe0 <_dtoa_r+0x630>)
 8010eac:	2000      	movs	r0, #0
 8010eae:	f7ef fccd 	bl	800084c <__aeabi_ddiv>
 8010eb2:	4652      	mov	r2, sl
 8010eb4:	465b      	mov	r3, fp
 8010eb6:	f7ef f9e7 	bl	8000288 <__aeabi_dsub>
 8010eba:	9d01      	ldr	r5, [sp, #4]
 8010ebc:	4682      	mov	sl, r0
 8010ebe:	468b      	mov	fp, r1
 8010ec0:	4649      	mov	r1, r9
 8010ec2:	4640      	mov	r0, r8
 8010ec4:	f7ef fe48 	bl	8000b58 <__aeabi_d2iz>
 8010ec8:	4606      	mov	r6, r0
 8010eca:	f7ef fb2b 	bl	8000524 <__aeabi_i2d>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	4640      	mov	r0, r8
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	f7ef f9d7 	bl	8000288 <__aeabi_dsub>
 8010eda:	3630      	adds	r6, #48	; 0x30
 8010edc:	f805 6b01 	strb.w	r6, [r5], #1
 8010ee0:	4652      	mov	r2, sl
 8010ee2:	465b      	mov	r3, fp
 8010ee4:	4680      	mov	r8, r0
 8010ee6:	4689      	mov	r9, r1
 8010ee8:	f7ef fdf8 	bl	8000adc <__aeabi_dcmplt>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d163      	bne.n	8010fb8 <_dtoa_r+0x608>
 8010ef0:	4642      	mov	r2, r8
 8010ef2:	464b      	mov	r3, r9
 8010ef4:	4936      	ldr	r1, [pc, #216]	; (8010fd0 <_dtoa_r+0x620>)
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	f7ef f9c6 	bl	8000288 <__aeabi_dsub>
 8010efc:	4652      	mov	r2, sl
 8010efe:	465b      	mov	r3, fp
 8010f00:	f7ef fdec 	bl	8000adc <__aeabi_dcmplt>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f040 80b5 	bne.w	8011074 <_dtoa_r+0x6c4>
 8010f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f0c:	429d      	cmp	r5, r3
 8010f0e:	d081      	beq.n	8010e14 <_dtoa_r+0x464>
 8010f10:	4b30      	ldr	r3, [pc, #192]	; (8010fd4 <_dtoa_r+0x624>)
 8010f12:	2200      	movs	r2, #0
 8010f14:	4650      	mov	r0, sl
 8010f16:	4659      	mov	r1, fp
 8010f18:	f7ef fb6e 	bl	80005f8 <__aeabi_dmul>
 8010f1c:	4b2d      	ldr	r3, [pc, #180]	; (8010fd4 <_dtoa_r+0x624>)
 8010f1e:	4682      	mov	sl, r0
 8010f20:	468b      	mov	fp, r1
 8010f22:	4640      	mov	r0, r8
 8010f24:	4649      	mov	r1, r9
 8010f26:	2200      	movs	r2, #0
 8010f28:	f7ef fb66 	bl	80005f8 <__aeabi_dmul>
 8010f2c:	4680      	mov	r8, r0
 8010f2e:	4689      	mov	r9, r1
 8010f30:	e7c6      	b.n	8010ec0 <_dtoa_r+0x510>
 8010f32:	4650      	mov	r0, sl
 8010f34:	4659      	mov	r1, fp
 8010f36:	f7ef fb5f 	bl	80005f8 <__aeabi_dmul>
 8010f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f3c:	9d01      	ldr	r5, [sp, #4]
 8010f3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f40:	4682      	mov	sl, r0
 8010f42:	468b      	mov	fp, r1
 8010f44:	4649      	mov	r1, r9
 8010f46:	4640      	mov	r0, r8
 8010f48:	f7ef fe06 	bl	8000b58 <__aeabi_d2iz>
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	f7ef fae9 	bl	8000524 <__aeabi_i2d>
 8010f52:	3630      	adds	r6, #48	; 0x30
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	4640      	mov	r0, r8
 8010f5a:	4649      	mov	r1, r9
 8010f5c:	f7ef f994 	bl	8000288 <__aeabi_dsub>
 8010f60:	f805 6b01 	strb.w	r6, [r5], #1
 8010f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f66:	429d      	cmp	r5, r3
 8010f68:	4680      	mov	r8, r0
 8010f6a:	4689      	mov	r9, r1
 8010f6c:	f04f 0200 	mov.w	r2, #0
 8010f70:	d124      	bne.n	8010fbc <_dtoa_r+0x60c>
 8010f72:	4b1b      	ldr	r3, [pc, #108]	; (8010fe0 <_dtoa_r+0x630>)
 8010f74:	4650      	mov	r0, sl
 8010f76:	4659      	mov	r1, fp
 8010f78:	f7ef f988 	bl	800028c <__adddf3>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	4640      	mov	r0, r8
 8010f82:	4649      	mov	r1, r9
 8010f84:	f7ef fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d173      	bne.n	8011074 <_dtoa_r+0x6c4>
 8010f8c:	4652      	mov	r2, sl
 8010f8e:	465b      	mov	r3, fp
 8010f90:	4913      	ldr	r1, [pc, #76]	; (8010fe0 <_dtoa_r+0x630>)
 8010f92:	2000      	movs	r0, #0
 8010f94:	f7ef f978 	bl	8000288 <__aeabi_dsub>
 8010f98:	4602      	mov	r2, r0
 8010f9a:	460b      	mov	r3, r1
 8010f9c:	4640      	mov	r0, r8
 8010f9e:	4649      	mov	r1, r9
 8010fa0:	f7ef fd9c 	bl	8000adc <__aeabi_dcmplt>
 8010fa4:	2800      	cmp	r0, #0
 8010fa6:	f43f af35 	beq.w	8010e14 <_dtoa_r+0x464>
 8010faa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010fac:	1e6b      	subs	r3, r5, #1
 8010fae:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010fb4:	2b30      	cmp	r3, #48	; 0x30
 8010fb6:	d0f8      	beq.n	8010faa <_dtoa_r+0x5fa>
 8010fb8:	9700      	str	r7, [sp, #0]
 8010fba:	e049      	b.n	8011050 <_dtoa_r+0x6a0>
 8010fbc:	4b05      	ldr	r3, [pc, #20]	; (8010fd4 <_dtoa_r+0x624>)
 8010fbe:	f7ef fb1b 	bl	80005f8 <__aeabi_dmul>
 8010fc2:	4680      	mov	r8, r0
 8010fc4:	4689      	mov	r9, r1
 8010fc6:	e7bd      	b.n	8010f44 <_dtoa_r+0x594>
 8010fc8:	08014718 	.word	0x08014718
 8010fcc:	080146f0 	.word	0x080146f0
 8010fd0:	3ff00000 	.word	0x3ff00000
 8010fd4:	40240000 	.word	0x40240000
 8010fd8:	401c0000 	.word	0x401c0000
 8010fdc:	40140000 	.word	0x40140000
 8010fe0:	3fe00000 	.word	0x3fe00000
 8010fe4:	9d01      	ldr	r5, [sp, #4]
 8010fe6:	4656      	mov	r6, sl
 8010fe8:	465f      	mov	r7, fp
 8010fea:	4642      	mov	r2, r8
 8010fec:	464b      	mov	r3, r9
 8010fee:	4630      	mov	r0, r6
 8010ff0:	4639      	mov	r1, r7
 8010ff2:	f7ef fc2b 	bl	800084c <__aeabi_ddiv>
 8010ff6:	f7ef fdaf 	bl	8000b58 <__aeabi_d2iz>
 8010ffa:	4682      	mov	sl, r0
 8010ffc:	f7ef fa92 	bl	8000524 <__aeabi_i2d>
 8011000:	4642      	mov	r2, r8
 8011002:	464b      	mov	r3, r9
 8011004:	f7ef faf8 	bl	80005f8 <__aeabi_dmul>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	4630      	mov	r0, r6
 801100e:	4639      	mov	r1, r7
 8011010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011014:	f7ef f938 	bl	8000288 <__aeabi_dsub>
 8011018:	f805 6b01 	strb.w	r6, [r5], #1
 801101c:	9e01      	ldr	r6, [sp, #4]
 801101e:	9f03      	ldr	r7, [sp, #12]
 8011020:	1bae      	subs	r6, r5, r6
 8011022:	42b7      	cmp	r7, r6
 8011024:	4602      	mov	r2, r0
 8011026:	460b      	mov	r3, r1
 8011028:	d135      	bne.n	8011096 <_dtoa_r+0x6e6>
 801102a:	f7ef f92f 	bl	800028c <__adddf3>
 801102e:	4642      	mov	r2, r8
 8011030:	464b      	mov	r3, r9
 8011032:	4606      	mov	r6, r0
 8011034:	460f      	mov	r7, r1
 8011036:	f7ef fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 801103a:	b9d0      	cbnz	r0, 8011072 <_dtoa_r+0x6c2>
 801103c:	4642      	mov	r2, r8
 801103e:	464b      	mov	r3, r9
 8011040:	4630      	mov	r0, r6
 8011042:	4639      	mov	r1, r7
 8011044:	f7ef fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8011048:	b110      	cbz	r0, 8011050 <_dtoa_r+0x6a0>
 801104a:	f01a 0f01 	tst.w	sl, #1
 801104e:	d110      	bne.n	8011072 <_dtoa_r+0x6c2>
 8011050:	4620      	mov	r0, r4
 8011052:	ee18 1a10 	vmov	r1, s16
 8011056:	f000 fd37 	bl	8011ac8 <_Bfree>
 801105a:	2300      	movs	r3, #0
 801105c:	9800      	ldr	r0, [sp, #0]
 801105e:	702b      	strb	r3, [r5, #0]
 8011060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011062:	3001      	adds	r0, #1
 8011064:	6018      	str	r0, [r3, #0]
 8011066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011068:	2b00      	cmp	r3, #0
 801106a:	f43f acf1 	beq.w	8010a50 <_dtoa_r+0xa0>
 801106e:	601d      	str	r5, [r3, #0]
 8011070:	e4ee      	b.n	8010a50 <_dtoa_r+0xa0>
 8011072:	9f00      	ldr	r7, [sp, #0]
 8011074:	462b      	mov	r3, r5
 8011076:	461d      	mov	r5, r3
 8011078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801107c:	2a39      	cmp	r2, #57	; 0x39
 801107e:	d106      	bne.n	801108e <_dtoa_r+0x6de>
 8011080:	9a01      	ldr	r2, [sp, #4]
 8011082:	429a      	cmp	r2, r3
 8011084:	d1f7      	bne.n	8011076 <_dtoa_r+0x6c6>
 8011086:	9901      	ldr	r1, [sp, #4]
 8011088:	2230      	movs	r2, #48	; 0x30
 801108a:	3701      	adds	r7, #1
 801108c:	700a      	strb	r2, [r1, #0]
 801108e:	781a      	ldrb	r2, [r3, #0]
 8011090:	3201      	adds	r2, #1
 8011092:	701a      	strb	r2, [r3, #0]
 8011094:	e790      	b.n	8010fb8 <_dtoa_r+0x608>
 8011096:	4ba6      	ldr	r3, [pc, #664]	; (8011330 <_dtoa_r+0x980>)
 8011098:	2200      	movs	r2, #0
 801109a:	f7ef faad 	bl	80005f8 <__aeabi_dmul>
 801109e:	2200      	movs	r2, #0
 80110a0:	2300      	movs	r3, #0
 80110a2:	4606      	mov	r6, r0
 80110a4:	460f      	mov	r7, r1
 80110a6:	f7ef fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80110aa:	2800      	cmp	r0, #0
 80110ac:	d09d      	beq.n	8010fea <_dtoa_r+0x63a>
 80110ae:	e7cf      	b.n	8011050 <_dtoa_r+0x6a0>
 80110b0:	9a08      	ldr	r2, [sp, #32]
 80110b2:	2a00      	cmp	r2, #0
 80110b4:	f000 80d7 	beq.w	8011266 <_dtoa_r+0x8b6>
 80110b8:	9a06      	ldr	r2, [sp, #24]
 80110ba:	2a01      	cmp	r2, #1
 80110bc:	f300 80ba 	bgt.w	8011234 <_dtoa_r+0x884>
 80110c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110c2:	2a00      	cmp	r2, #0
 80110c4:	f000 80b2 	beq.w	801122c <_dtoa_r+0x87c>
 80110c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110cc:	9e07      	ldr	r6, [sp, #28]
 80110ce:	9d04      	ldr	r5, [sp, #16]
 80110d0:	9a04      	ldr	r2, [sp, #16]
 80110d2:	441a      	add	r2, r3
 80110d4:	9204      	str	r2, [sp, #16]
 80110d6:	9a05      	ldr	r2, [sp, #20]
 80110d8:	2101      	movs	r1, #1
 80110da:	441a      	add	r2, r3
 80110dc:	4620      	mov	r0, r4
 80110de:	9205      	str	r2, [sp, #20]
 80110e0:	f000 fdaa 	bl	8011c38 <__i2b>
 80110e4:	4607      	mov	r7, r0
 80110e6:	2d00      	cmp	r5, #0
 80110e8:	dd0c      	ble.n	8011104 <_dtoa_r+0x754>
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd09      	ble.n	8011104 <_dtoa_r+0x754>
 80110f0:	42ab      	cmp	r3, r5
 80110f2:	9a04      	ldr	r2, [sp, #16]
 80110f4:	bfa8      	it	ge
 80110f6:	462b      	movge	r3, r5
 80110f8:	1ad2      	subs	r2, r2, r3
 80110fa:	9204      	str	r2, [sp, #16]
 80110fc:	9a05      	ldr	r2, [sp, #20]
 80110fe:	1aed      	subs	r5, r5, r3
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	9305      	str	r3, [sp, #20]
 8011104:	9b07      	ldr	r3, [sp, #28]
 8011106:	b31b      	cbz	r3, 8011150 <_dtoa_r+0x7a0>
 8011108:	9b08      	ldr	r3, [sp, #32]
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 80af 	beq.w	801126e <_dtoa_r+0x8be>
 8011110:	2e00      	cmp	r6, #0
 8011112:	dd13      	ble.n	801113c <_dtoa_r+0x78c>
 8011114:	4639      	mov	r1, r7
 8011116:	4632      	mov	r2, r6
 8011118:	4620      	mov	r0, r4
 801111a:	f000 fe4d 	bl	8011db8 <__pow5mult>
 801111e:	ee18 2a10 	vmov	r2, s16
 8011122:	4601      	mov	r1, r0
 8011124:	4607      	mov	r7, r0
 8011126:	4620      	mov	r0, r4
 8011128:	f000 fd9c 	bl	8011c64 <__multiply>
 801112c:	ee18 1a10 	vmov	r1, s16
 8011130:	4680      	mov	r8, r0
 8011132:	4620      	mov	r0, r4
 8011134:	f000 fcc8 	bl	8011ac8 <_Bfree>
 8011138:	ee08 8a10 	vmov	s16, r8
 801113c:	9b07      	ldr	r3, [sp, #28]
 801113e:	1b9a      	subs	r2, r3, r6
 8011140:	d006      	beq.n	8011150 <_dtoa_r+0x7a0>
 8011142:	ee18 1a10 	vmov	r1, s16
 8011146:	4620      	mov	r0, r4
 8011148:	f000 fe36 	bl	8011db8 <__pow5mult>
 801114c:	ee08 0a10 	vmov	s16, r0
 8011150:	2101      	movs	r1, #1
 8011152:	4620      	mov	r0, r4
 8011154:	f000 fd70 	bl	8011c38 <__i2b>
 8011158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801115a:	2b00      	cmp	r3, #0
 801115c:	4606      	mov	r6, r0
 801115e:	f340 8088 	ble.w	8011272 <_dtoa_r+0x8c2>
 8011162:	461a      	mov	r2, r3
 8011164:	4601      	mov	r1, r0
 8011166:	4620      	mov	r0, r4
 8011168:	f000 fe26 	bl	8011db8 <__pow5mult>
 801116c:	9b06      	ldr	r3, [sp, #24]
 801116e:	2b01      	cmp	r3, #1
 8011170:	4606      	mov	r6, r0
 8011172:	f340 8081 	ble.w	8011278 <_dtoa_r+0x8c8>
 8011176:	f04f 0800 	mov.w	r8, #0
 801117a:	6933      	ldr	r3, [r6, #16]
 801117c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011180:	6918      	ldr	r0, [r3, #16]
 8011182:	f000 fd09 	bl	8011b98 <__hi0bits>
 8011186:	f1c0 0020 	rsb	r0, r0, #32
 801118a:	9b05      	ldr	r3, [sp, #20]
 801118c:	4418      	add	r0, r3
 801118e:	f010 001f 	ands.w	r0, r0, #31
 8011192:	f000 8092 	beq.w	80112ba <_dtoa_r+0x90a>
 8011196:	f1c0 0320 	rsb	r3, r0, #32
 801119a:	2b04      	cmp	r3, #4
 801119c:	f340 808a 	ble.w	80112b4 <_dtoa_r+0x904>
 80111a0:	f1c0 001c 	rsb	r0, r0, #28
 80111a4:	9b04      	ldr	r3, [sp, #16]
 80111a6:	4403      	add	r3, r0
 80111a8:	9304      	str	r3, [sp, #16]
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	4403      	add	r3, r0
 80111ae:	4405      	add	r5, r0
 80111b0:	9305      	str	r3, [sp, #20]
 80111b2:	9b04      	ldr	r3, [sp, #16]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	dd07      	ble.n	80111c8 <_dtoa_r+0x818>
 80111b8:	ee18 1a10 	vmov	r1, s16
 80111bc:	461a      	mov	r2, r3
 80111be:	4620      	mov	r0, r4
 80111c0:	f000 fe54 	bl	8011e6c <__lshift>
 80111c4:	ee08 0a10 	vmov	s16, r0
 80111c8:	9b05      	ldr	r3, [sp, #20]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	dd05      	ble.n	80111da <_dtoa_r+0x82a>
 80111ce:	4631      	mov	r1, r6
 80111d0:	461a      	mov	r2, r3
 80111d2:	4620      	mov	r0, r4
 80111d4:	f000 fe4a 	bl	8011e6c <__lshift>
 80111d8:	4606      	mov	r6, r0
 80111da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d06e      	beq.n	80112be <_dtoa_r+0x90e>
 80111e0:	ee18 0a10 	vmov	r0, s16
 80111e4:	4631      	mov	r1, r6
 80111e6:	f000 feb1 	bl	8011f4c <__mcmp>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	da67      	bge.n	80112be <_dtoa_r+0x90e>
 80111ee:	9b00      	ldr	r3, [sp, #0]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	ee18 1a10 	vmov	r1, s16
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	220a      	movs	r2, #10
 80111fa:	2300      	movs	r3, #0
 80111fc:	4620      	mov	r0, r4
 80111fe:	f000 fc85 	bl	8011b0c <__multadd>
 8011202:	9b08      	ldr	r3, [sp, #32]
 8011204:	ee08 0a10 	vmov	s16, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	f000 81b1 	beq.w	8011570 <_dtoa_r+0xbc0>
 801120e:	2300      	movs	r3, #0
 8011210:	4639      	mov	r1, r7
 8011212:	220a      	movs	r2, #10
 8011214:	4620      	mov	r0, r4
 8011216:	f000 fc79 	bl	8011b0c <__multadd>
 801121a:	9b02      	ldr	r3, [sp, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	4607      	mov	r7, r0
 8011220:	f300 808e 	bgt.w	8011340 <_dtoa_r+0x990>
 8011224:	9b06      	ldr	r3, [sp, #24]
 8011226:	2b02      	cmp	r3, #2
 8011228:	dc51      	bgt.n	80112ce <_dtoa_r+0x91e>
 801122a:	e089      	b.n	8011340 <_dtoa_r+0x990>
 801122c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801122e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011232:	e74b      	b.n	80110cc <_dtoa_r+0x71c>
 8011234:	9b03      	ldr	r3, [sp, #12]
 8011236:	1e5e      	subs	r6, r3, #1
 8011238:	9b07      	ldr	r3, [sp, #28]
 801123a:	42b3      	cmp	r3, r6
 801123c:	bfbf      	itttt	lt
 801123e:	9b07      	ldrlt	r3, [sp, #28]
 8011240:	9607      	strlt	r6, [sp, #28]
 8011242:	1af2      	sublt	r2, r6, r3
 8011244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011246:	bfb6      	itet	lt
 8011248:	189b      	addlt	r3, r3, r2
 801124a:	1b9e      	subge	r6, r3, r6
 801124c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801124e:	9b03      	ldr	r3, [sp, #12]
 8011250:	bfb8      	it	lt
 8011252:	2600      	movlt	r6, #0
 8011254:	2b00      	cmp	r3, #0
 8011256:	bfb7      	itett	lt
 8011258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801125c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011260:	1a9d      	sublt	r5, r3, r2
 8011262:	2300      	movlt	r3, #0
 8011264:	e734      	b.n	80110d0 <_dtoa_r+0x720>
 8011266:	9e07      	ldr	r6, [sp, #28]
 8011268:	9d04      	ldr	r5, [sp, #16]
 801126a:	9f08      	ldr	r7, [sp, #32]
 801126c:	e73b      	b.n	80110e6 <_dtoa_r+0x736>
 801126e:	9a07      	ldr	r2, [sp, #28]
 8011270:	e767      	b.n	8011142 <_dtoa_r+0x792>
 8011272:	9b06      	ldr	r3, [sp, #24]
 8011274:	2b01      	cmp	r3, #1
 8011276:	dc18      	bgt.n	80112aa <_dtoa_r+0x8fa>
 8011278:	f1ba 0f00 	cmp.w	sl, #0
 801127c:	d115      	bne.n	80112aa <_dtoa_r+0x8fa>
 801127e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011282:	b993      	cbnz	r3, 80112aa <_dtoa_r+0x8fa>
 8011284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011288:	0d1b      	lsrs	r3, r3, #20
 801128a:	051b      	lsls	r3, r3, #20
 801128c:	b183      	cbz	r3, 80112b0 <_dtoa_r+0x900>
 801128e:	9b04      	ldr	r3, [sp, #16]
 8011290:	3301      	adds	r3, #1
 8011292:	9304      	str	r3, [sp, #16]
 8011294:	9b05      	ldr	r3, [sp, #20]
 8011296:	3301      	adds	r3, #1
 8011298:	9305      	str	r3, [sp, #20]
 801129a:	f04f 0801 	mov.w	r8, #1
 801129e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	f47f af6a 	bne.w	801117a <_dtoa_r+0x7ca>
 80112a6:	2001      	movs	r0, #1
 80112a8:	e76f      	b.n	801118a <_dtoa_r+0x7da>
 80112aa:	f04f 0800 	mov.w	r8, #0
 80112ae:	e7f6      	b.n	801129e <_dtoa_r+0x8ee>
 80112b0:	4698      	mov	r8, r3
 80112b2:	e7f4      	b.n	801129e <_dtoa_r+0x8ee>
 80112b4:	f43f af7d 	beq.w	80111b2 <_dtoa_r+0x802>
 80112b8:	4618      	mov	r0, r3
 80112ba:	301c      	adds	r0, #28
 80112bc:	e772      	b.n	80111a4 <_dtoa_r+0x7f4>
 80112be:	9b03      	ldr	r3, [sp, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	dc37      	bgt.n	8011334 <_dtoa_r+0x984>
 80112c4:	9b06      	ldr	r3, [sp, #24]
 80112c6:	2b02      	cmp	r3, #2
 80112c8:	dd34      	ble.n	8011334 <_dtoa_r+0x984>
 80112ca:	9b03      	ldr	r3, [sp, #12]
 80112cc:	9302      	str	r3, [sp, #8]
 80112ce:	9b02      	ldr	r3, [sp, #8]
 80112d0:	b96b      	cbnz	r3, 80112ee <_dtoa_r+0x93e>
 80112d2:	4631      	mov	r1, r6
 80112d4:	2205      	movs	r2, #5
 80112d6:	4620      	mov	r0, r4
 80112d8:	f000 fc18 	bl	8011b0c <__multadd>
 80112dc:	4601      	mov	r1, r0
 80112de:	4606      	mov	r6, r0
 80112e0:	ee18 0a10 	vmov	r0, s16
 80112e4:	f000 fe32 	bl	8011f4c <__mcmp>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	f73f adbb 	bgt.w	8010e64 <_dtoa_r+0x4b4>
 80112ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112f0:	9d01      	ldr	r5, [sp, #4]
 80112f2:	43db      	mvns	r3, r3
 80112f4:	9300      	str	r3, [sp, #0]
 80112f6:	f04f 0800 	mov.w	r8, #0
 80112fa:	4631      	mov	r1, r6
 80112fc:	4620      	mov	r0, r4
 80112fe:	f000 fbe3 	bl	8011ac8 <_Bfree>
 8011302:	2f00      	cmp	r7, #0
 8011304:	f43f aea4 	beq.w	8011050 <_dtoa_r+0x6a0>
 8011308:	f1b8 0f00 	cmp.w	r8, #0
 801130c:	d005      	beq.n	801131a <_dtoa_r+0x96a>
 801130e:	45b8      	cmp	r8, r7
 8011310:	d003      	beq.n	801131a <_dtoa_r+0x96a>
 8011312:	4641      	mov	r1, r8
 8011314:	4620      	mov	r0, r4
 8011316:	f000 fbd7 	bl	8011ac8 <_Bfree>
 801131a:	4639      	mov	r1, r7
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fbd3 	bl	8011ac8 <_Bfree>
 8011322:	e695      	b.n	8011050 <_dtoa_r+0x6a0>
 8011324:	2600      	movs	r6, #0
 8011326:	4637      	mov	r7, r6
 8011328:	e7e1      	b.n	80112ee <_dtoa_r+0x93e>
 801132a:	9700      	str	r7, [sp, #0]
 801132c:	4637      	mov	r7, r6
 801132e:	e599      	b.n	8010e64 <_dtoa_r+0x4b4>
 8011330:	40240000 	.word	0x40240000
 8011334:	9b08      	ldr	r3, [sp, #32]
 8011336:	2b00      	cmp	r3, #0
 8011338:	f000 80ca 	beq.w	80114d0 <_dtoa_r+0xb20>
 801133c:	9b03      	ldr	r3, [sp, #12]
 801133e:	9302      	str	r3, [sp, #8]
 8011340:	2d00      	cmp	r5, #0
 8011342:	dd05      	ble.n	8011350 <_dtoa_r+0x9a0>
 8011344:	4639      	mov	r1, r7
 8011346:	462a      	mov	r2, r5
 8011348:	4620      	mov	r0, r4
 801134a:	f000 fd8f 	bl	8011e6c <__lshift>
 801134e:	4607      	mov	r7, r0
 8011350:	f1b8 0f00 	cmp.w	r8, #0
 8011354:	d05b      	beq.n	801140e <_dtoa_r+0xa5e>
 8011356:	6879      	ldr	r1, [r7, #4]
 8011358:	4620      	mov	r0, r4
 801135a:	f000 fb75 	bl	8011a48 <_Balloc>
 801135e:	4605      	mov	r5, r0
 8011360:	b928      	cbnz	r0, 801136e <_dtoa_r+0x9be>
 8011362:	4b87      	ldr	r3, [pc, #540]	; (8011580 <_dtoa_r+0xbd0>)
 8011364:	4602      	mov	r2, r0
 8011366:	f240 21ea 	movw	r1, #746	; 0x2ea
 801136a:	f7ff bb3b 	b.w	80109e4 <_dtoa_r+0x34>
 801136e:	693a      	ldr	r2, [r7, #16]
 8011370:	3202      	adds	r2, #2
 8011372:	0092      	lsls	r2, r2, #2
 8011374:	f107 010c 	add.w	r1, r7, #12
 8011378:	300c      	adds	r0, #12
 801137a:	f7fe fb45 	bl	800fa08 <memcpy>
 801137e:	2201      	movs	r2, #1
 8011380:	4629      	mov	r1, r5
 8011382:	4620      	mov	r0, r4
 8011384:	f000 fd72 	bl	8011e6c <__lshift>
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	f103 0901 	add.w	r9, r3, #1
 801138e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011392:	4413      	add	r3, r2
 8011394:	9305      	str	r3, [sp, #20]
 8011396:	f00a 0301 	and.w	r3, sl, #1
 801139a:	46b8      	mov	r8, r7
 801139c:	9304      	str	r3, [sp, #16]
 801139e:	4607      	mov	r7, r0
 80113a0:	4631      	mov	r1, r6
 80113a2:	ee18 0a10 	vmov	r0, s16
 80113a6:	f7ff fa75 	bl	8010894 <quorem>
 80113aa:	4641      	mov	r1, r8
 80113ac:	9002      	str	r0, [sp, #8]
 80113ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80113b2:	ee18 0a10 	vmov	r0, s16
 80113b6:	f000 fdc9 	bl	8011f4c <__mcmp>
 80113ba:	463a      	mov	r2, r7
 80113bc:	9003      	str	r0, [sp, #12]
 80113be:	4631      	mov	r1, r6
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fddf 	bl	8011f84 <__mdiff>
 80113c6:	68c2      	ldr	r2, [r0, #12]
 80113c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80113cc:	4605      	mov	r5, r0
 80113ce:	bb02      	cbnz	r2, 8011412 <_dtoa_r+0xa62>
 80113d0:	4601      	mov	r1, r0
 80113d2:	ee18 0a10 	vmov	r0, s16
 80113d6:	f000 fdb9 	bl	8011f4c <__mcmp>
 80113da:	4602      	mov	r2, r0
 80113dc:	4629      	mov	r1, r5
 80113de:	4620      	mov	r0, r4
 80113e0:	9207      	str	r2, [sp, #28]
 80113e2:	f000 fb71 	bl	8011ac8 <_Bfree>
 80113e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80113ea:	ea43 0102 	orr.w	r1, r3, r2
 80113ee:	9b04      	ldr	r3, [sp, #16]
 80113f0:	430b      	orrs	r3, r1
 80113f2:	464d      	mov	r5, r9
 80113f4:	d10f      	bne.n	8011416 <_dtoa_r+0xa66>
 80113f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80113fa:	d02a      	beq.n	8011452 <_dtoa_r+0xaa2>
 80113fc:	9b03      	ldr	r3, [sp, #12]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	dd02      	ble.n	8011408 <_dtoa_r+0xa58>
 8011402:	9b02      	ldr	r3, [sp, #8]
 8011404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011408:	f88b a000 	strb.w	sl, [fp]
 801140c:	e775      	b.n	80112fa <_dtoa_r+0x94a>
 801140e:	4638      	mov	r0, r7
 8011410:	e7ba      	b.n	8011388 <_dtoa_r+0x9d8>
 8011412:	2201      	movs	r2, #1
 8011414:	e7e2      	b.n	80113dc <_dtoa_r+0xa2c>
 8011416:	9b03      	ldr	r3, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	db04      	blt.n	8011426 <_dtoa_r+0xa76>
 801141c:	9906      	ldr	r1, [sp, #24]
 801141e:	430b      	orrs	r3, r1
 8011420:	9904      	ldr	r1, [sp, #16]
 8011422:	430b      	orrs	r3, r1
 8011424:	d122      	bne.n	801146c <_dtoa_r+0xabc>
 8011426:	2a00      	cmp	r2, #0
 8011428:	ddee      	ble.n	8011408 <_dtoa_r+0xa58>
 801142a:	ee18 1a10 	vmov	r1, s16
 801142e:	2201      	movs	r2, #1
 8011430:	4620      	mov	r0, r4
 8011432:	f000 fd1b 	bl	8011e6c <__lshift>
 8011436:	4631      	mov	r1, r6
 8011438:	ee08 0a10 	vmov	s16, r0
 801143c:	f000 fd86 	bl	8011f4c <__mcmp>
 8011440:	2800      	cmp	r0, #0
 8011442:	dc03      	bgt.n	801144c <_dtoa_r+0xa9c>
 8011444:	d1e0      	bne.n	8011408 <_dtoa_r+0xa58>
 8011446:	f01a 0f01 	tst.w	sl, #1
 801144a:	d0dd      	beq.n	8011408 <_dtoa_r+0xa58>
 801144c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011450:	d1d7      	bne.n	8011402 <_dtoa_r+0xa52>
 8011452:	2339      	movs	r3, #57	; 0x39
 8011454:	f88b 3000 	strb.w	r3, [fp]
 8011458:	462b      	mov	r3, r5
 801145a:	461d      	mov	r5, r3
 801145c:	3b01      	subs	r3, #1
 801145e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011462:	2a39      	cmp	r2, #57	; 0x39
 8011464:	d071      	beq.n	801154a <_dtoa_r+0xb9a>
 8011466:	3201      	adds	r2, #1
 8011468:	701a      	strb	r2, [r3, #0]
 801146a:	e746      	b.n	80112fa <_dtoa_r+0x94a>
 801146c:	2a00      	cmp	r2, #0
 801146e:	dd07      	ble.n	8011480 <_dtoa_r+0xad0>
 8011470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011474:	d0ed      	beq.n	8011452 <_dtoa_r+0xaa2>
 8011476:	f10a 0301 	add.w	r3, sl, #1
 801147a:	f88b 3000 	strb.w	r3, [fp]
 801147e:	e73c      	b.n	80112fa <_dtoa_r+0x94a>
 8011480:	9b05      	ldr	r3, [sp, #20]
 8011482:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011486:	4599      	cmp	r9, r3
 8011488:	d047      	beq.n	801151a <_dtoa_r+0xb6a>
 801148a:	ee18 1a10 	vmov	r1, s16
 801148e:	2300      	movs	r3, #0
 8011490:	220a      	movs	r2, #10
 8011492:	4620      	mov	r0, r4
 8011494:	f000 fb3a 	bl	8011b0c <__multadd>
 8011498:	45b8      	cmp	r8, r7
 801149a:	ee08 0a10 	vmov	s16, r0
 801149e:	f04f 0300 	mov.w	r3, #0
 80114a2:	f04f 020a 	mov.w	r2, #10
 80114a6:	4641      	mov	r1, r8
 80114a8:	4620      	mov	r0, r4
 80114aa:	d106      	bne.n	80114ba <_dtoa_r+0xb0a>
 80114ac:	f000 fb2e 	bl	8011b0c <__multadd>
 80114b0:	4680      	mov	r8, r0
 80114b2:	4607      	mov	r7, r0
 80114b4:	f109 0901 	add.w	r9, r9, #1
 80114b8:	e772      	b.n	80113a0 <_dtoa_r+0x9f0>
 80114ba:	f000 fb27 	bl	8011b0c <__multadd>
 80114be:	4639      	mov	r1, r7
 80114c0:	4680      	mov	r8, r0
 80114c2:	2300      	movs	r3, #0
 80114c4:	220a      	movs	r2, #10
 80114c6:	4620      	mov	r0, r4
 80114c8:	f000 fb20 	bl	8011b0c <__multadd>
 80114cc:	4607      	mov	r7, r0
 80114ce:	e7f1      	b.n	80114b4 <_dtoa_r+0xb04>
 80114d0:	9b03      	ldr	r3, [sp, #12]
 80114d2:	9302      	str	r3, [sp, #8]
 80114d4:	9d01      	ldr	r5, [sp, #4]
 80114d6:	ee18 0a10 	vmov	r0, s16
 80114da:	4631      	mov	r1, r6
 80114dc:	f7ff f9da 	bl	8010894 <quorem>
 80114e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80114e4:	9b01      	ldr	r3, [sp, #4]
 80114e6:	f805 ab01 	strb.w	sl, [r5], #1
 80114ea:	1aea      	subs	r2, r5, r3
 80114ec:	9b02      	ldr	r3, [sp, #8]
 80114ee:	4293      	cmp	r3, r2
 80114f0:	dd09      	ble.n	8011506 <_dtoa_r+0xb56>
 80114f2:	ee18 1a10 	vmov	r1, s16
 80114f6:	2300      	movs	r3, #0
 80114f8:	220a      	movs	r2, #10
 80114fa:	4620      	mov	r0, r4
 80114fc:	f000 fb06 	bl	8011b0c <__multadd>
 8011500:	ee08 0a10 	vmov	s16, r0
 8011504:	e7e7      	b.n	80114d6 <_dtoa_r+0xb26>
 8011506:	9b02      	ldr	r3, [sp, #8]
 8011508:	2b00      	cmp	r3, #0
 801150a:	bfc8      	it	gt
 801150c:	461d      	movgt	r5, r3
 801150e:	9b01      	ldr	r3, [sp, #4]
 8011510:	bfd8      	it	le
 8011512:	2501      	movle	r5, #1
 8011514:	441d      	add	r5, r3
 8011516:	f04f 0800 	mov.w	r8, #0
 801151a:	ee18 1a10 	vmov	r1, s16
 801151e:	2201      	movs	r2, #1
 8011520:	4620      	mov	r0, r4
 8011522:	f000 fca3 	bl	8011e6c <__lshift>
 8011526:	4631      	mov	r1, r6
 8011528:	ee08 0a10 	vmov	s16, r0
 801152c:	f000 fd0e 	bl	8011f4c <__mcmp>
 8011530:	2800      	cmp	r0, #0
 8011532:	dc91      	bgt.n	8011458 <_dtoa_r+0xaa8>
 8011534:	d102      	bne.n	801153c <_dtoa_r+0xb8c>
 8011536:	f01a 0f01 	tst.w	sl, #1
 801153a:	d18d      	bne.n	8011458 <_dtoa_r+0xaa8>
 801153c:	462b      	mov	r3, r5
 801153e:	461d      	mov	r5, r3
 8011540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011544:	2a30      	cmp	r2, #48	; 0x30
 8011546:	d0fa      	beq.n	801153e <_dtoa_r+0xb8e>
 8011548:	e6d7      	b.n	80112fa <_dtoa_r+0x94a>
 801154a:	9a01      	ldr	r2, [sp, #4]
 801154c:	429a      	cmp	r2, r3
 801154e:	d184      	bne.n	801145a <_dtoa_r+0xaaa>
 8011550:	9b00      	ldr	r3, [sp, #0]
 8011552:	3301      	adds	r3, #1
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	2331      	movs	r3, #49	; 0x31
 8011558:	7013      	strb	r3, [r2, #0]
 801155a:	e6ce      	b.n	80112fa <_dtoa_r+0x94a>
 801155c:	4b09      	ldr	r3, [pc, #36]	; (8011584 <_dtoa_r+0xbd4>)
 801155e:	f7ff ba95 	b.w	8010a8c <_dtoa_r+0xdc>
 8011562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011564:	2b00      	cmp	r3, #0
 8011566:	f47f aa6e 	bne.w	8010a46 <_dtoa_r+0x96>
 801156a:	4b07      	ldr	r3, [pc, #28]	; (8011588 <_dtoa_r+0xbd8>)
 801156c:	f7ff ba8e 	b.w	8010a8c <_dtoa_r+0xdc>
 8011570:	9b02      	ldr	r3, [sp, #8]
 8011572:	2b00      	cmp	r3, #0
 8011574:	dcae      	bgt.n	80114d4 <_dtoa_r+0xb24>
 8011576:	9b06      	ldr	r3, [sp, #24]
 8011578:	2b02      	cmp	r3, #2
 801157a:	f73f aea8 	bgt.w	80112ce <_dtoa_r+0x91e>
 801157e:	e7a9      	b.n	80114d4 <_dtoa_r+0xb24>
 8011580:	08014621 	.word	0x08014621
 8011584:	08014801 	.word	0x08014801
 8011588:	080145a2 	.word	0x080145a2

0801158c <__sflush_r>:
 801158c:	898a      	ldrh	r2, [r1, #12]
 801158e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011592:	4605      	mov	r5, r0
 8011594:	0710      	lsls	r0, r2, #28
 8011596:	460c      	mov	r4, r1
 8011598:	d458      	bmi.n	801164c <__sflush_r+0xc0>
 801159a:	684b      	ldr	r3, [r1, #4]
 801159c:	2b00      	cmp	r3, #0
 801159e:	dc05      	bgt.n	80115ac <__sflush_r+0x20>
 80115a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	dc02      	bgt.n	80115ac <__sflush_r+0x20>
 80115a6:	2000      	movs	r0, #0
 80115a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115ae:	2e00      	cmp	r6, #0
 80115b0:	d0f9      	beq.n	80115a6 <__sflush_r+0x1a>
 80115b2:	2300      	movs	r3, #0
 80115b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115b8:	682f      	ldr	r7, [r5, #0]
 80115ba:	602b      	str	r3, [r5, #0]
 80115bc:	d032      	beq.n	8011624 <__sflush_r+0x98>
 80115be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115c0:	89a3      	ldrh	r3, [r4, #12]
 80115c2:	075a      	lsls	r2, r3, #29
 80115c4:	d505      	bpl.n	80115d2 <__sflush_r+0x46>
 80115c6:	6863      	ldr	r3, [r4, #4]
 80115c8:	1ac0      	subs	r0, r0, r3
 80115ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115cc:	b10b      	cbz	r3, 80115d2 <__sflush_r+0x46>
 80115ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115d0:	1ac0      	subs	r0, r0, r3
 80115d2:	2300      	movs	r3, #0
 80115d4:	4602      	mov	r2, r0
 80115d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115d8:	6a21      	ldr	r1, [r4, #32]
 80115da:	4628      	mov	r0, r5
 80115dc:	47b0      	blx	r6
 80115de:	1c43      	adds	r3, r0, #1
 80115e0:	89a3      	ldrh	r3, [r4, #12]
 80115e2:	d106      	bne.n	80115f2 <__sflush_r+0x66>
 80115e4:	6829      	ldr	r1, [r5, #0]
 80115e6:	291d      	cmp	r1, #29
 80115e8:	d82c      	bhi.n	8011644 <__sflush_r+0xb8>
 80115ea:	4a2a      	ldr	r2, [pc, #168]	; (8011694 <__sflush_r+0x108>)
 80115ec:	40ca      	lsrs	r2, r1
 80115ee:	07d6      	lsls	r6, r2, #31
 80115f0:	d528      	bpl.n	8011644 <__sflush_r+0xb8>
 80115f2:	2200      	movs	r2, #0
 80115f4:	6062      	str	r2, [r4, #4]
 80115f6:	04d9      	lsls	r1, r3, #19
 80115f8:	6922      	ldr	r2, [r4, #16]
 80115fa:	6022      	str	r2, [r4, #0]
 80115fc:	d504      	bpl.n	8011608 <__sflush_r+0x7c>
 80115fe:	1c42      	adds	r2, r0, #1
 8011600:	d101      	bne.n	8011606 <__sflush_r+0x7a>
 8011602:	682b      	ldr	r3, [r5, #0]
 8011604:	b903      	cbnz	r3, 8011608 <__sflush_r+0x7c>
 8011606:	6560      	str	r0, [r4, #84]	; 0x54
 8011608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801160a:	602f      	str	r7, [r5, #0]
 801160c:	2900      	cmp	r1, #0
 801160e:	d0ca      	beq.n	80115a6 <__sflush_r+0x1a>
 8011610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011614:	4299      	cmp	r1, r3
 8011616:	d002      	beq.n	801161e <__sflush_r+0x92>
 8011618:	4628      	mov	r0, r5
 801161a:	f7fe fa0b 	bl	800fa34 <_free_r>
 801161e:	2000      	movs	r0, #0
 8011620:	6360      	str	r0, [r4, #52]	; 0x34
 8011622:	e7c1      	b.n	80115a8 <__sflush_r+0x1c>
 8011624:	6a21      	ldr	r1, [r4, #32]
 8011626:	2301      	movs	r3, #1
 8011628:	4628      	mov	r0, r5
 801162a:	47b0      	blx	r6
 801162c:	1c41      	adds	r1, r0, #1
 801162e:	d1c7      	bne.n	80115c0 <__sflush_r+0x34>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d0c4      	beq.n	80115c0 <__sflush_r+0x34>
 8011636:	2b1d      	cmp	r3, #29
 8011638:	d001      	beq.n	801163e <__sflush_r+0xb2>
 801163a:	2b16      	cmp	r3, #22
 801163c:	d101      	bne.n	8011642 <__sflush_r+0xb6>
 801163e:	602f      	str	r7, [r5, #0]
 8011640:	e7b1      	b.n	80115a6 <__sflush_r+0x1a>
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011648:	81a3      	strh	r3, [r4, #12]
 801164a:	e7ad      	b.n	80115a8 <__sflush_r+0x1c>
 801164c:	690f      	ldr	r7, [r1, #16]
 801164e:	2f00      	cmp	r7, #0
 8011650:	d0a9      	beq.n	80115a6 <__sflush_r+0x1a>
 8011652:	0793      	lsls	r3, r2, #30
 8011654:	680e      	ldr	r6, [r1, #0]
 8011656:	bf08      	it	eq
 8011658:	694b      	ldreq	r3, [r1, #20]
 801165a:	600f      	str	r7, [r1, #0]
 801165c:	bf18      	it	ne
 801165e:	2300      	movne	r3, #0
 8011660:	eba6 0807 	sub.w	r8, r6, r7
 8011664:	608b      	str	r3, [r1, #8]
 8011666:	f1b8 0f00 	cmp.w	r8, #0
 801166a:	dd9c      	ble.n	80115a6 <__sflush_r+0x1a>
 801166c:	6a21      	ldr	r1, [r4, #32]
 801166e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011670:	4643      	mov	r3, r8
 8011672:	463a      	mov	r2, r7
 8011674:	4628      	mov	r0, r5
 8011676:	47b0      	blx	r6
 8011678:	2800      	cmp	r0, #0
 801167a:	dc06      	bgt.n	801168a <__sflush_r+0xfe>
 801167c:	89a3      	ldrh	r3, [r4, #12]
 801167e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011682:	81a3      	strh	r3, [r4, #12]
 8011684:	f04f 30ff 	mov.w	r0, #4294967295
 8011688:	e78e      	b.n	80115a8 <__sflush_r+0x1c>
 801168a:	4407      	add	r7, r0
 801168c:	eba8 0800 	sub.w	r8, r8, r0
 8011690:	e7e9      	b.n	8011666 <__sflush_r+0xda>
 8011692:	bf00      	nop
 8011694:	20400001 	.word	0x20400001

08011698 <_fflush_r>:
 8011698:	b538      	push	{r3, r4, r5, lr}
 801169a:	690b      	ldr	r3, [r1, #16]
 801169c:	4605      	mov	r5, r0
 801169e:	460c      	mov	r4, r1
 80116a0:	b913      	cbnz	r3, 80116a8 <_fflush_r+0x10>
 80116a2:	2500      	movs	r5, #0
 80116a4:	4628      	mov	r0, r5
 80116a6:	bd38      	pop	{r3, r4, r5, pc}
 80116a8:	b118      	cbz	r0, 80116b2 <_fflush_r+0x1a>
 80116aa:	6983      	ldr	r3, [r0, #24]
 80116ac:	b90b      	cbnz	r3, 80116b2 <_fflush_r+0x1a>
 80116ae:	f000 f899 	bl	80117e4 <__sinit>
 80116b2:	4b14      	ldr	r3, [pc, #80]	; (8011704 <_fflush_r+0x6c>)
 80116b4:	429c      	cmp	r4, r3
 80116b6:	d11b      	bne.n	80116f0 <_fflush_r+0x58>
 80116b8:	686c      	ldr	r4, [r5, #4]
 80116ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d0ef      	beq.n	80116a2 <_fflush_r+0xa>
 80116c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116c4:	07d0      	lsls	r0, r2, #31
 80116c6:	d404      	bmi.n	80116d2 <_fflush_r+0x3a>
 80116c8:	0599      	lsls	r1, r3, #22
 80116ca:	d402      	bmi.n	80116d2 <_fflush_r+0x3a>
 80116cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ce:	f000 f948 	bl	8011962 <__retarget_lock_acquire_recursive>
 80116d2:	4628      	mov	r0, r5
 80116d4:	4621      	mov	r1, r4
 80116d6:	f7ff ff59 	bl	801158c <__sflush_r>
 80116da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116dc:	07da      	lsls	r2, r3, #31
 80116de:	4605      	mov	r5, r0
 80116e0:	d4e0      	bmi.n	80116a4 <_fflush_r+0xc>
 80116e2:	89a3      	ldrh	r3, [r4, #12]
 80116e4:	059b      	lsls	r3, r3, #22
 80116e6:	d4dd      	bmi.n	80116a4 <_fflush_r+0xc>
 80116e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ea:	f000 f93b 	bl	8011964 <__retarget_lock_release_recursive>
 80116ee:	e7d9      	b.n	80116a4 <_fflush_r+0xc>
 80116f0:	4b05      	ldr	r3, [pc, #20]	; (8011708 <_fflush_r+0x70>)
 80116f2:	429c      	cmp	r4, r3
 80116f4:	d101      	bne.n	80116fa <_fflush_r+0x62>
 80116f6:	68ac      	ldr	r4, [r5, #8]
 80116f8:	e7df      	b.n	80116ba <_fflush_r+0x22>
 80116fa:	4b04      	ldr	r3, [pc, #16]	; (801170c <_fflush_r+0x74>)
 80116fc:	429c      	cmp	r4, r3
 80116fe:	bf08      	it	eq
 8011700:	68ec      	ldreq	r4, [r5, #12]
 8011702:	e7da      	b.n	80116ba <_fflush_r+0x22>
 8011704:	08014654 	.word	0x08014654
 8011708:	08014674 	.word	0x08014674
 801170c:	08014634 	.word	0x08014634

08011710 <fflush>:
 8011710:	4601      	mov	r1, r0
 8011712:	b920      	cbnz	r0, 801171e <fflush+0xe>
 8011714:	4b04      	ldr	r3, [pc, #16]	; (8011728 <fflush+0x18>)
 8011716:	4905      	ldr	r1, [pc, #20]	; (801172c <fflush+0x1c>)
 8011718:	6818      	ldr	r0, [r3, #0]
 801171a:	f000 b8fe 	b.w	801191a <_fwalk_reent>
 801171e:	4b04      	ldr	r3, [pc, #16]	; (8011730 <fflush+0x20>)
 8011720:	6818      	ldr	r0, [r3, #0]
 8011722:	f7ff bfb9 	b.w	8011698 <_fflush_r>
 8011726:	bf00      	nop
 8011728:	0801456c 	.word	0x0801456c
 801172c:	08011699 	.word	0x08011699
 8011730:	20000044 	.word	0x20000044

08011734 <std>:
 8011734:	2300      	movs	r3, #0
 8011736:	b510      	push	{r4, lr}
 8011738:	4604      	mov	r4, r0
 801173a:	e9c0 3300 	strd	r3, r3, [r0]
 801173e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011742:	6083      	str	r3, [r0, #8]
 8011744:	8181      	strh	r1, [r0, #12]
 8011746:	6643      	str	r3, [r0, #100]	; 0x64
 8011748:	81c2      	strh	r2, [r0, #14]
 801174a:	6183      	str	r3, [r0, #24]
 801174c:	4619      	mov	r1, r3
 801174e:	2208      	movs	r2, #8
 8011750:	305c      	adds	r0, #92	; 0x5c
 8011752:	f7fe f967 	bl	800fa24 <memset>
 8011756:	4b05      	ldr	r3, [pc, #20]	; (801176c <std+0x38>)
 8011758:	6263      	str	r3, [r4, #36]	; 0x24
 801175a:	4b05      	ldr	r3, [pc, #20]	; (8011770 <std+0x3c>)
 801175c:	62a3      	str	r3, [r4, #40]	; 0x28
 801175e:	4b05      	ldr	r3, [pc, #20]	; (8011774 <std+0x40>)
 8011760:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011762:	4b05      	ldr	r3, [pc, #20]	; (8011778 <std+0x44>)
 8011764:	6224      	str	r4, [r4, #32]
 8011766:	6323      	str	r3, [r4, #48]	; 0x30
 8011768:	bd10      	pop	{r4, pc}
 801176a:	bf00      	nop
 801176c:	08012ec1 	.word	0x08012ec1
 8011770:	08012ee3 	.word	0x08012ee3
 8011774:	08012f1b 	.word	0x08012f1b
 8011778:	08012f3f 	.word	0x08012f3f

0801177c <_cleanup_r>:
 801177c:	4901      	ldr	r1, [pc, #4]	; (8011784 <_cleanup_r+0x8>)
 801177e:	f000 b8cc 	b.w	801191a <_fwalk_reent>
 8011782:	bf00      	nop
 8011784:	08011699 	.word	0x08011699

08011788 <__sfmoreglue>:
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	2268      	movs	r2, #104	; 0x68
 801178c:	1e4d      	subs	r5, r1, #1
 801178e:	4355      	muls	r5, r2
 8011790:	460e      	mov	r6, r1
 8011792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011796:	f7fe f9b9 	bl	800fb0c <_malloc_r>
 801179a:	4604      	mov	r4, r0
 801179c:	b140      	cbz	r0, 80117b0 <__sfmoreglue+0x28>
 801179e:	2100      	movs	r1, #0
 80117a0:	e9c0 1600 	strd	r1, r6, [r0]
 80117a4:	300c      	adds	r0, #12
 80117a6:	60a0      	str	r0, [r4, #8]
 80117a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80117ac:	f7fe f93a 	bl	800fa24 <memset>
 80117b0:	4620      	mov	r0, r4
 80117b2:	bd70      	pop	{r4, r5, r6, pc}

080117b4 <__sfp_lock_acquire>:
 80117b4:	4801      	ldr	r0, [pc, #4]	; (80117bc <__sfp_lock_acquire+0x8>)
 80117b6:	f000 b8d4 	b.w	8011962 <__retarget_lock_acquire_recursive>
 80117ba:	bf00      	nop
 80117bc:	2000096d 	.word	0x2000096d

080117c0 <__sfp_lock_release>:
 80117c0:	4801      	ldr	r0, [pc, #4]	; (80117c8 <__sfp_lock_release+0x8>)
 80117c2:	f000 b8cf 	b.w	8011964 <__retarget_lock_release_recursive>
 80117c6:	bf00      	nop
 80117c8:	2000096d 	.word	0x2000096d

080117cc <__sinit_lock_acquire>:
 80117cc:	4801      	ldr	r0, [pc, #4]	; (80117d4 <__sinit_lock_acquire+0x8>)
 80117ce:	f000 b8c8 	b.w	8011962 <__retarget_lock_acquire_recursive>
 80117d2:	bf00      	nop
 80117d4:	2000096e 	.word	0x2000096e

080117d8 <__sinit_lock_release>:
 80117d8:	4801      	ldr	r0, [pc, #4]	; (80117e0 <__sinit_lock_release+0x8>)
 80117da:	f000 b8c3 	b.w	8011964 <__retarget_lock_release_recursive>
 80117de:	bf00      	nop
 80117e0:	2000096e 	.word	0x2000096e

080117e4 <__sinit>:
 80117e4:	b510      	push	{r4, lr}
 80117e6:	4604      	mov	r4, r0
 80117e8:	f7ff fff0 	bl	80117cc <__sinit_lock_acquire>
 80117ec:	69a3      	ldr	r3, [r4, #24]
 80117ee:	b11b      	cbz	r3, 80117f8 <__sinit+0x14>
 80117f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117f4:	f7ff bff0 	b.w	80117d8 <__sinit_lock_release>
 80117f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117fc:	6523      	str	r3, [r4, #80]	; 0x50
 80117fe:	4b13      	ldr	r3, [pc, #76]	; (801184c <__sinit+0x68>)
 8011800:	4a13      	ldr	r2, [pc, #76]	; (8011850 <__sinit+0x6c>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	62a2      	str	r2, [r4, #40]	; 0x28
 8011806:	42a3      	cmp	r3, r4
 8011808:	bf04      	itt	eq
 801180a:	2301      	moveq	r3, #1
 801180c:	61a3      	streq	r3, [r4, #24]
 801180e:	4620      	mov	r0, r4
 8011810:	f000 f820 	bl	8011854 <__sfp>
 8011814:	6060      	str	r0, [r4, #4]
 8011816:	4620      	mov	r0, r4
 8011818:	f000 f81c 	bl	8011854 <__sfp>
 801181c:	60a0      	str	r0, [r4, #8]
 801181e:	4620      	mov	r0, r4
 8011820:	f000 f818 	bl	8011854 <__sfp>
 8011824:	2200      	movs	r2, #0
 8011826:	60e0      	str	r0, [r4, #12]
 8011828:	2104      	movs	r1, #4
 801182a:	6860      	ldr	r0, [r4, #4]
 801182c:	f7ff ff82 	bl	8011734 <std>
 8011830:	68a0      	ldr	r0, [r4, #8]
 8011832:	2201      	movs	r2, #1
 8011834:	2109      	movs	r1, #9
 8011836:	f7ff ff7d 	bl	8011734 <std>
 801183a:	68e0      	ldr	r0, [r4, #12]
 801183c:	2202      	movs	r2, #2
 801183e:	2112      	movs	r1, #18
 8011840:	f7ff ff78 	bl	8011734 <std>
 8011844:	2301      	movs	r3, #1
 8011846:	61a3      	str	r3, [r4, #24]
 8011848:	e7d2      	b.n	80117f0 <__sinit+0xc>
 801184a:	bf00      	nop
 801184c:	0801456c 	.word	0x0801456c
 8011850:	0801177d 	.word	0x0801177d

08011854 <__sfp>:
 8011854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011856:	4607      	mov	r7, r0
 8011858:	f7ff ffac 	bl	80117b4 <__sfp_lock_acquire>
 801185c:	4b1e      	ldr	r3, [pc, #120]	; (80118d8 <__sfp+0x84>)
 801185e:	681e      	ldr	r6, [r3, #0]
 8011860:	69b3      	ldr	r3, [r6, #24]
 8011862:	b913      	cbnz	r3, 801186a <__sfp+0x16>
 8011864:	4630      	mov	r0, r6
 8011866:	f7ff ffbd 	bl	80117e4 <__sinit>
 801186a:	3648      	adds	r6, #72	; 0x48
 801186c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011870:	3b01      	subs	r3, #1
 8011872:	d503      	bpl.n	801187c <__sfp+0x28>
 8011874:	6833      	ldr	r3, [r6, #0]
 8011876:	b30b      	cbz	r3, 80118bc <__sfp+0x68>
 8011878:	6836      	ldr	r6, [r6, #0]
 801187a:	e7f7      	b.n	801186c <__sfp+0x18>
 801187c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011880:	b9d5      	cbnz	r5, 80118b8 <__sfp+0x64>
 8011882:	4b16      	ldr	r3, [pc, #88]	; (80118dc <__sfp+0x88>)
 8011884:	60e3      	str	r3, [r4, #12]
 8011886:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801188a:	6665      	str	r5, [r4, #100]	; 0x64
 801188c:	f000 f868 	bl	8011960 <__retarget_lock_init_recursive>
 8011890:	f7ff ff96 	bl	80117c0 <__sfp_lock_release>
 8011894:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011898:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801189c:	6025      	str	r5, [r4, #0]
 801189e:	61a5      	str	r5, [r4, #24]
 80118a0:	2208      	movs	r2, #8
 80118a2:	4629      	mov	r1, r5
 80118a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80118a8:	f7fe f8bc 	bl	800fa24 <memset>
 80118ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80118b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80118b4:	4620      	mov	r0, r4
 80118b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118b8:	3468      	adds	r4, #104	; 0x68
 80118ba:	e7d9      	b.n	8011870 <__sfp+0x1c>
 80118bc:	2104      	movs	r1, #4
 80118be:	4638      	mov	r0, r7
 80118c0:	f7ff ff62 	bl	8011788 <__sfmoreglue>
 80118c4:	4604      	mov	r4, r0
 80118c6:	6030      	str	r0, [r6, #0]
 80118c8:	2800      	cmp	r0, #0
 80118ca:	d1d5      	bne.n	8011878 <__sfp+0x24>
 80118cc:	f7ff ff78 	bl	80117c0 <__sfp_lock_release>
 80118d0:	230c      	movs	r3, #12
 80118d2:	603b      	str	r3, [r7, #0]
 80118d4:	e7ee      	b.n	80118b4 <__sfp+0x60>
 80118d6:	bf00      	nop
 80118d8:	0801456c 	.word	0x0801456c
 80118dc:	ffff0001 	.word	0xffff0001

080118e0 <_fwalk>:
 80118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e4:	460f      	mov	r7, r1
 80118e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118ea:	2600      	movs	r6, #0
 80118ec:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80118f0:	f1b8 0801 	subs.w	r8, r8, #1
 80118f4:	d505      	bpl.n	8011902 <_fwalk+0x22>
 80118f6:	6824      	ldr	r4, [r4, #0]
 80118f8:	2c00      	cmp	r4, #0
 80118fa:	d1f7      	bne.n	80118ec <_fwalk+0xc>
 80118fc:	4630      	mov	r0, r6
 80118fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011902:	89ab      	ldrh	r3, [r5, #12]
 8011904:	2b01      	cmp	r3, #1
 8011906:	d906      	bls.n	8011916 <_fwalk+0x36>
 8011908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801190c:	3301      	adds	r3, #1
 801190e:	d002      	beq.n	8011916 <_fwalk+0x36>
 8011910:	4628      	mov	r0, r5
 8011912:	47b8      	blx	r7
 8011914:	4306      	orrs	r6, r0
 8011916:	3568      	adds	r5, #104	; 0x68
 8011918:	e7ea      	b.n	80118f0 <_fwalk+0x10>

0801191a <_fwalk_reent>:
 801191a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801191e:	4606      	mov	r6, r0
 8011920:	4688      	mov	r8, r1
 8011922:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011926:	2700      	movs	r7, #0
 8011928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801192c:	f1b9 0901 	subs.w	r9, r9, #1
 8011930:	d505      	bpl.n	801193e <_fwalk_reent+0x24>
 8011932:	6824      	ldr	r4, [r4, #0]
 8011934:	2c00      	cmp	r4, #0
 8011936:	d1f7      	bne.n	8011928 <_fwalk_reent+0xe>
 8011938:	4638      	mov	r0, r7
 801193a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801193e:	89ab      	ldrh	r3, [r5, #12]
 8011940:	2b01      	cmp	r3, #1
 8011942:	d907      	bls.n	8011954 <_fwalk_reent+0x3a>
 8011944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011948:	3301      	adds	r3, #1
 801194a:	d003      	beq.n	8011954 <_fwalk_reent+0x3a>
 801194c:	4629      	mov	r1, r5
 801194e:	4630      	mov	r0, r6
 8011950:	47c0      	blx	r8
 8011952:	4307      	orrs	r7, r0
 8011954:	3568      	adds	r5, #104	; 0x68
 8011956:	e7e9      	b.n	801192c <_fwalk_reent+0x12>

08011958 <_localeconv_r>:
 8011958:	4800      	ldr	r0, [pc, #0]	; (801195c <_localeconv_r+0x4>)
 801195a:	4770      	bx	lr
 801195c:	20000198 	.word	0x20000198

08011960 <__retarget_lock_init_recursive>:
 8011960:	4770      	bx	lr

08011962 <__retarget_lock_acquire_recursive>:
 8011962:	4770      	bx	lr

08011964 <__retarget_lock_release_recursive>:
 8011964:	4770      	bx	lr

08011966 <__swhatbuf_r>:
 8011966:	b570      	push	{r4, r5, r6, lr}
 8011968:	460e      	mov	r6, r1
 801196a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801196e:	2900      	cmp	r1, #0
 8011970:	b096      	sub	sp, #88	; 0x58
 8011972:	4614      	mov	r4, r2
 8011974:	461d      	mov	r5, r3
 8011976:	da08      	bge.n	801198a <__swhatbuf_r+0x24>
 8011978:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	602a      	str	r2, [r5, #0]
 8011980:	061a      	lsls	r2, r3, #24
 8011982:	d410      	bmi.n	80119a6 <__swhatbuf_r+0x40>
 8011984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011988:	e00e      	b.n	80119a8 <__swhatbuf_r+0x42>
 801198a:	466a      	mov	r2, sp
 801198c:	f001 fcf8 	bl	8013380 <_fstat_r>
 8011990:	2800      	cmp	r0, #0
 8011992:	dbf1      	blt.n	8011978 <__swhatbuf_r+0x12>
 8011994:	9a01      	ldr	r2, [sp, #4]
 8011996:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801199a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801199e:	425a      	negs	r2, r3
 80119a0:	415a      	adcs	r2, r3
 80119a2:	602a      	str	r2, [r5, #0]
 80119a4:	e7ee      	b.n	8011984 <__swhatbuf_r+0x1e>
 80119a6:	2340      	movs	r3, #64	; 0x40
 80119a8:	2000      	movs	r0, #0
 80119aa:	6023      	str	r3, [r4, #0]
 80119ac:	b016      	add	sp, #88	; 0x58
 80119ae:	bd70      	pop	{r4, r5, r6, pc}

080119b0 <__smakebuf_r>:
 80119b0:	898b      	ldrh	r3, [r1, #12]
 80119b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119b4:	079d      	lsls	r5, r3, #30
 80119b6:	4606      	mov	r6, r0
 80119b8:	460c      	mov	r4, r1
 80119ba:	d507      	bpl.n	80119cc <__smakebuf_r+0x1c>
 80119bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	6123      	str	r3, [r4, #16]
 80119c4:	2301      	movs	r3, #1
 80119c6:	6163      	str	r3, [r4, #20]
 80119c8:	b002      	add	sp, #8
 80119ca:	bd70      	pop	{r4, r5, r6, pc}
 80119cc:	ab01      	add	r3, sp, #4
 80119ce:	466a      	mov	r2, sp
 80119d0:	f7ff ffc9 	bl	8011966 <__swhatbuf_r>
 80119d4:	9900      	ldr	r1, [sp, #0]
 80119d6:	4605      	mov	r5, r0
 80119d8:	4630      	mov	r0, r6
 80119da:	f7fe f897 	bl	800fb0c <_malloc_r>
 80119de:	b948      	cbnz	r0, 80119f4 <__smakebuf_r+0x44>
 80119e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119e4:	059a      	lsls	r2, r3, #22
 80119e6:	d4ef      	bmi.n	80119c8 <__smakebuf_r+0x18>
 80119e8:	f023 0303 	bic.w	r3, r3, #3
 80119ec:	f043 0302 	orr.w	r3, r3, #2
 80119f0:	81a3      	strh	r3, [r4, #12]
 80119f2:	e7e3      	b.n	80119bc <__smakebuf_r+0xc>
 80119f4:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <__smakebuf_r+0x7c>)
 80119f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80119f8:	89a3      	ldrh	r3, [r4, #12]
 80119fa:	6020      	str	r0, [r4, #0]
 80119fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a00:	81a3      	strh	r3, [r4, #12]
 8011a02:	9b00      	ldr	r3, [sp, #0]
 8011a04:	6163      	str	r3, [r4, #20]
 8011a06:	9b01      	ldr	r3, [sp, #4]
 8011a08:	6120      	str	r0, [r4, #16]
 8011a0a:	b15b      	cbz	r3, 8011a24 <__smakebuf_r+0x74>
 8011a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a10:	4630      	mov	r0, r6
 8011a12:	f001 fcc7 	bl	80133a4 <_isatty_r>
 8011a16:	b128      	cbz	r0, 8011a24 <__smakebuf_r+0x74>
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	f023 0303 	bic.w	r3, r3, #3
 8011a1e:	f043 0301 	orr.w	r3, r3, #1
 8011a22:	81a3      	strh	r3, [r4, #12]
 8011a24:	89a0      	ldrh	r0, [r4, #12]
 8011a26:	4305      	orrs	r5, r0
 8011a28:	81a5      	strh	r5, [r4, #12]
 8011a2a:	e7cd      	b.n	80119c8 <__smakebuf_r+0x18>
 8011a2c:	0801177d 	.word	0x0801177d

08011a30 <__malloc_lock>:
 8011a30:	4801      	ldr	r0, [pc, #4]	; (8011a38 <__malloc_lock+0x8>)
 8011a32:	f7ff bf96 	b.w	8011962 <__retarget_lock_acquire_recursive>
 8011a36:	bf00      	nop
 8011a38:	2000096c 	.word	0x2000096c

08011a3c <__malloc_unlock>:
 8011a3c:	4801      	ldr	r0, [pc, #4]	; (8011a44 <__malloc_unlock+0x8>)
 8011a3e:	f7ff bf91 	b.w	8011964 <__retarget_lock_release_recursive>
 8011a42:	bf00      	nop
 8011a44:	2000096c 	.word	0x2000096c

08011a48 <_Balloc>:
 8011a48:	b570      	push	{r4, r5, r6, lr}
 8011a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011a4c:	4604      	mov	r4, r0
 8011a4e:	460d      	mov	r5, r1
 8011a50:	b976      	cbnz	r6, 8011a70 <_Balloc+0x28>
 8011a52:	2010      	movs	r0, #16
 8011a54:	f7fd ffd0 	bl	800f9f8 <malloc>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	6260      	str	r0, [r4, #36]	; 0x24
 8011a5c:	b920      	cbnz	r0, 8011a68 <_Balloc+0x20>
 8011a5e:	4b18      	ldr	r3, [pc, #96]	; (8011ac0 <_Balloc+0x78>)
 8011a60:	4818      	ldr	r0, [pc, #96]	; (8011ac4 <_Balloc+0x7c>)
 8011a62:	2166      	movs	r1, #102	; 0x66
 8011a64:	f001 fc4c 	bl	8013300 <__assert_func>
 8011a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011a6c:	6006      	str	r6, [r0, #0]
 8011a6e:	60c6      	str	r6, [r0, #12]
 8011a70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011a72:	68f3      	ldr	r3, [r6, #12]
 8011a74:	b183      	cbz	r3, 8011a98 <_Balloc+0x50>
 8011a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011a7e:	b9b8      	cbnz	r0, 8011ab0 <_Balloc+0x68>
 8011a80:	2101      	movs	r1, #1
 8011a82:	fa01 f605 	lsl.w	r6, r1, r5
 8011a86:	1d72      	adds	r2, r6, #5
 8011a88:	0092      	lsls	r2, r2, #2
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f000 fb60 	bl	8012150 <_calloc_r>
 8011a90:	b160      	cbz	r0, 8011aac <_Balloc+0x64>
 8011a92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011a96:	e00e      	b.n	8011ab6 <_Balloc+0x6e>
 8011a98:	2221      	movs	r2, #33	; 0x21
 8011a9a:	2104      	movs	r1, #4
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	f000 fb57 	bl	8012150 <_calloc_r>
 8011aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aa4:	60f0      	str	r0, [r6, #12]
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d1e4      	bne.n	8011a76 <_Balloc+0x2e>
 8011aac:	2000      	movs	r0, #0
 8011aae:	bd70      	pop	{r4, r5, r6, pc}
 8011ab0:	6802      	ldr	r2, [r0, #0]
 8011ab2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011abc:	e7f7      	b.n	8011aae <_Balloc+0x66>
 8011abe:	bf00      	nop
 8011ac0:	080145af 	.word	0x080145af
 8011ac4:	08014694 	.word	0x08014694

08011ac8 <_Bfree>:
 8011ac8:	b570      	push	{r4, r5, r6, lr}
 8011aca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011acc:	4605      	mov	r5, r0
 8011ace:	460c      	mov	r4, r1
 8011ad0:	b976      	cbnz	r6, 8011af0 <_Bfree+0x28>
 8011ad2:	2010      	movs	r0, #16
 8011ad4:	f7fd ff90 	bl	800f9f8 <malloc>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	6268      	str	r0, [r5, #36]	; 0x24
 8011adc:	b920      	cbnz	r0, 8011ae8 <_Bfree+0x20>
 8011ade:	4b09      	ldr	r3, [pc, #36]	; (8011b04 <_Bfree+0x3c>)
 8011ae0:	4809      	ldr	r0, [pc, #36]	; (8011b08 <_Bfree+0x40>)
 8011ae2:	218a      	movs	r1, #138	; 0x8a
 8011ae4:	f001 fc0c 	bl	8013300 <__assert_func>
 8011ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011aec:	6006      	str	r6, [r0, #0]
 8011aee:	60c6      	str	r6, [r0, #12]
 8011af0:	b13c      	cbz	r4, 8011b02 <_Bfree+0x3a>
 8011af2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011af4:	6862      	ldr	r2, [r4, #4]
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011afc:	6021      	str	r1, [r4, #0]
 8011afe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011b02:	bd70      	pop	{r4, r5, r6, pc}
 8011b04:	080145af 	.word	0x080145af
 8011b08:	08014694 	.word	0x08014694

08011b0c <__multadd>:
 8011b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b10:	690d      	ldr	r5, [r1, #16]
 8011b12:	4607      	mov	r7, r0
 8011b14:	460c      	mov	r4, r1
 8011b16:	461e      	mov	r6, r3
 8011b18:	f101 0c14 	add.w	ip, r1, #20
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8011b22:	b299      	uxth	r1, r3
 8011b24:	fb02 6101 	mla	r1, r2, r1, r6
 8011b28:	0c1e      	lsrs	r6, r3, #16
 8011b2a:	0c0b      	lsrs	r3, r1, #16
 8011b2c:	fb02 3306 	mla	r3, r2, r6, r3
 8011b30:	b289      	uxth	r1, r1
 8011b32:	3001      	adds	r0, #1
 8011b34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011b38:	4285      	cmp	r5, r0
 8011b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8011b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011b42:	dcec      	bgt.n	8011b1e <__multadd+0x12>
 8011b44:	b30e      	cbz	r6, 8011b8a <__multadd+0x7e>
 8011b46:	68a3      	ldr	r3, [r4, #8]
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dc19      	bgt.n	8011b80 <__multadd+0x74>
 8011b4c:	6861      	ldr	r1, [r4, #4]
 8011b4e:	4638      	mov	r0, r7
 8011b50:	3101      	adds	r1, #1
 8011b52:	f7ff ff79 	bl	8011a48 <_Balloc>
 8011b56:	4680      	mov	r8, r0
 8011b58:	b928      	cbnz	r0, 8011b66 <__multadd+0x5a>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	4b0c      	ldr	r3, [pc, #48]	; (8011b90 <__multadd+0x84>)
 8011b5e:	480d      	ldr	r0, [pc, #52]	; (8011b94 <__multadd+0x88>)
 8011b60:	21b5      	movs	r1, #181	; 0xb5
 8011b62:	f001 fbcd 	bl	8013300 <__assert_func>
 8011b66:	6922      	ldr	r2, [r4, #16]
 8011b68:	3202      	adds	r2, #2
 8011b6a:	f104 010c 	add.w	r1, r4, #12
 8011b6e:	0092      	lsls	r2, r2, #2
 8011b70:	300c      	adds	r0, #12
 8011b72:	f7fd ff49 	bl	800fa08 <memcpy>
 8011b76:	4621      	mov	r1, r4
 8011b78:	4638      	mov	r0, r7
 8011b7a:	f7ff ffa5 	bl	8011ac8 <_Bfree>
 8011b7e:	4644      	mov	r4, r8
 8011b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011b84:	3501      	adds	r5, #1
 8011b86:	615e      	str	r6, [r3, #20]
 8011b88:	6125      	str	r5, [r4, #16]
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b90:	08014621 	.word	0x08014621
 8011b94:	08014694 	.word	0x08014694

08011b98 <__hi0bits>:
 8011b98:	0c03      	lsrs	r3, r0, #16
 8011b9a:	041b      	lsls	r3, r3, #16
 8011b9c:	b9d3      	cbnz	r3, 8011bd4 <__hi0bits+0x3c>
 8011b9e:	0400      	lsls	r0, r0, #16
 8011ba0:	2310      	movs	r3, #16
 8011ba2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011ba6:	bf04      	itt	eq
 8011ba8:	0200      	lsleq	r0, r0, #8
 8011baa:	3308      	addeq	r3, #8
 8011bac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011bb0:	bf04      	itt	eq
 8011bb2:	0100      	lsleq	r0, r0, #4
 8011bb4:	3304      	addeq	r3, #4
 8011bb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011bba:	bf04      	itt	eq
 8011bbc:	0080      	lsleq	r0, r0, #2
 8011bbe:	3302      	addeq	r3, #2
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	db05      	blt.n	8011bd0 <__hi0bits+0x38>
 8011bc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011bc8:	f103 0301 	add.w	r3, r3, #1
 8011bcc:	bf08      	it	eq
 8011bce:	2320      	moveq	r3, #32
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	4770      	bx	lr
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	e7e4      	b.n	8011ba2 <__hi0bits+0xa>

08011bd8 <__lo0bits>:
 8011bd8:	6803      	ldr	r3, [r0, #0]
 8011bda:	f013 0207 	ands.w	r2, r3, #7
 8011bde:	4601      	mov	r1, r0
 8011be0:	d00b      	beq.n	8011bfa <__lo0bits+0x22>
 8011be2:	07da      	lsls	r2, r3, #31
 8011be4:	d423      	bmi.n	8011c2e <__lo0bits+0x56>
 8011be6:	0798      	lsls	r0, r3, #30
 8011be8:	bf49      	itett	mi
 8011bea:	085b      	lsrmi	r3, r3, #1
 8011bec:	089b      	lsrpl	r3, r3, #2
 8011bee:	2001      	movmi	r0, #1
 8011bf0:	600b      	strmi	r3, [r1, #0]
 8011bf2:	bf5c      	itt	pl
 8011bf4:	600b      	strpl	r3, [r1, #0]
 8011bf6:	2002      	movpl	r0, #2
 8011bf8:	4770      	bx	lr
 8011bfa:	b298      	uxth	r0, r3
 8011bfc:	b9a8      	cbnz	r0, 8011c2a <__lo0bits+0x52>
 8011bfe:	0c1b      	lsrs	r3, r3, #16
 8011c00:	2010      	movs	r0, #16
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	b90a      	cbnz	r2, 8011c0a <__lo0bits+0x32>
 8011c06:	3008      	adds	r0, #8
 8011c08:	0a1b      	lsrs	r3, r3, #8
 8011c0a:	071a      	lsls	r2, r3, #28
 8011c0c:	bf04      	itt	eq
 8011c0e:	091b      	lsreq	r3, r3, #4
 8011c10:	3004      	addeq	r0, #4
 8011c12:	079a      	lsls	r2, r3, #30
 8011c14:	bf04      	itt	eq
 8011c16:	089b      	lsreq	r3, r3, #2
 8011c18:	3002      	addeq	r0, #2
 8011c1a:	07da      	lsls	r2, r3, #31
 8011c1c:	d403      	bmi.n	8011c26 <__lo0bits+0x4e>
 8011c1e:	085b      	lsrs	r3, r3, #1
 8011c20:	f100 0001 	add.w	r0, r0, #1
 8011c24:	d005      	beq.n	8011c32 <__lo0bits+0x5a>
 8011c26:	600b      	str	r3, [r1, #0]
 8011c28:	4770      	bx	lr
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	e7e9      	b.n	8011c02 <__lo0bits+0x2a>
 8011c2e:	2000      	movs	r0, #0
 8011c30:	4770      	bx	lr
 8011c32:	2020      	movs	r0, #32
 8011c34:	4770      	bx	lr
	...

08011c38 <__i2b>:
 8011c38:	b510      	push	{r4, lr}
 8011c3a:	460c      	mov	r4, r1
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	f7ff ff03 	bl	8011a48 <_Balloc>
 8011c42:	4602      	mov	r2, r0
 8011c44:	b928      	cbnz	r0, 8011c52 <__i2b+0x1a>
 8011c46:	4b05      	ldr	r3, [pc, #20]	; (8011c5c <__i2b+0x24>)
 8011c48:	4805      	ldr	r0, [pc, #20]	; (8011c60 <__i2b+0x28>)
 8011c4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011c4e:	f001 fb57 	bl	8013300 <__assert_func>
 8011c52:	2301      	movs	r3, #1
 8011c54:	6144      	str	r4, [r0, #20]
 8011c56:	6103      	str	r3, [r0, #16]
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	bf00      	nop
 8011c5c:	08014621 	.word	0x08014621
 8011c60:	08014694 	.word	0x08014694

08011c64 <__multiply>:
 8011c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c68:	4691      	mov	r9, r2
 8011c6a:	690a      	ldr	r2, [r1, #16]
 8011c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	bfb8      	it	lt
 8011c74:	460b      	movlt	r3, r1
 8011c76:	460c      	mov	r4, r1
 8011c78:	bfbc      	itt	lt
 8011c7a:	464c      	movlt	r4, r9
 8011c7c:	4699      	movlt	r9, r3
 8011c7e:	6927      	ldr	r7, [r4, #16]
 8011c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011c84:	68a3      	ldr	r3, [r4, #8]
 8011c86:	6861      	ldr	r1, [r4, #4]
 8011c88:	eb07 060a 	add.w	r6, r7, sl
 8011c8c:	42b3      	cmp	r3, r6
 8011c8e:	b085      	sub	sp, #20
 8011c90:	bfb8      	it	lt
 8011c92:	3101      	addlt	r1, #1
 8011c94:	f7ff fed8 	bl	8011a48 <_Balloc>
 8011c98:	b930      	cbnz	r0, 8011ca8 <__multiply+0x44>
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	4b44      	ldr	r3, [pc, #272]	; (8011db0 <__multiply+0x14c>)
 8011c9e:	4845      	ldr	r0, [pc, #276]	; (8011db4 <__multiply+0x150>)
 8011ca0:	f240 115d 	movw	r1, #349	; 0x15d
 8011ca4:	f001 fb2c 	bl	8013300 <__assert_func>
 8011ca8:	f100 0514 	add.w	r5, r0, #20
 8011cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011cb0:	462b      	mov	r3, r5
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	4543      	cmp	r3, r8
 8011cb6:	d321      	bcc.n	8011cfc <__multiply+0x98>
 8011cb8:	f104 0314 	add.w	r3, r4, #20
 8011cbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011cc0:	f109 0314 	add.w	r3, r9, #20
 8011cc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011cc8:	9202      	str	r2, [sp, #8]
 8011cca:	1b3a      	subs	r2, r7, r4
 8011ccc:	3a15      	subs	r2, #21
 8011cce:	f022 0203 	bic.w	r2, r2, #3
 8011cd2:	3204      	adds	r2, #4
 8011cd4:	f104 0115 	add.w	r1, r4, #21
 8011cd8:	428f      	cmp	r7, r1
 8011cda:	bf38      	it	cc
 8011cdc:	2204      	movcc	r2, #4
 8011cde:	9201      	str	r2, [sp, #4]
 8011ce0:	9a02      	ldr	r2, [sp, #8]
 8011ce2:	9303      	str	r3, [sp, #12]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d80c      	bhi.n	8011d02 <__multiply+0x9e>
 8011ce8:	2e00      	cmp	r6, #0
 8011cea:	dd03      	ble.n	8011cf4 <__multiply+0x90>
 8011cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d05a      	beq.n	8011daa <__multiply+0x146>
 8011cf4:	6106      	str	r6, [r0, #16]
 8011cf6:	b005      	add	sp, #20
 8011cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cfc:	f843 2b04 	str.w	r2, [r3], #4
 8011d00:	e7d8      	b.n	8011cb4 <__multiply+0x50>
 8011d02:	f8b3 a000 	ldrh.w	sl, [r3]
 8011d06:	f1ba 0f00 	cmp.w	sl, #0
 8011d0a:	d024      	beq.n	8011d56 <__multiply+0xf2>
 8011d0c:	f104 0e14 	add.w	lr, r4, #20
 8011d10:	46a9      	mov	r9, r5
 8011d12:	f04f 0c00 	mov.w	ip, #0
 8011d16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8011d1e:	fa1f fb82 	uxth.w	fp, r2
 8011d22:	b289      	uxth	r1, r1
 8011d24:	fb0a 110b 	mla	r1, sl, fp, r1
 8011d28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8011d30:	4461      	add	r1, ip
 8011d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d36:	fb0a c20b 	mla	r2, sl, fp, ip
 8011d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011d3e:	b289      	uxth	r1, r1
 8011d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011d44:	4577      	cmp	r7, lr
 8011d46:	f849 1b04 	str.w	r1, [r9], #4
 8011d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011d4e:	d8e2      	bhi.n	8011d16 <__multiply+0xb2>
 8011d50:	9a01      	ldr	r2, [sp, #4]
 8011d52:	f845 c002 	str.w	ip, [r5, r2]
 8011d56:	9a03      	ldr	r2, [sp, #12]
 8011d58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	f1b9 0f00 	cmp.w	r9, #0
 8011d62:	d020      	beq.n	8011da6 <__multiply+0x142>
 8011d64:	6829      	ldr	r1, [r5, #0]
 8011d66:	f104 0c14 	add.w	ip, r4, #20
 8011d6a:	46ae      	mov	lr, r5
 8011d6c:	f04f 0a00 	mov.w	sl, #0
 8011d70:	f8bc b000 	ldrh.w	fp, [ip]
 8011d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011d78:	fb09 220b 	mla	r2, r9, fp, r2
 8011d7c:	4492      	add	sl, r2
 8011d7e:	b289      	uxth	r1, r1
 8011d80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011d84:	f84e 1b04 	str.w	r1, [lr], #4
 8011d88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011d8c:	f8be 1000 	ldrh.w	r1, [lr]
 8011d90:	0c12      	lsrs	r2, r2, #16
 8011d92:	fb09 1102 	mla	r1, r9, r2, r1
 8011d96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011d9a:	4567      	cmp	r7, ip
 8011d9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011da0:	d8e6      	bhi.n	8011d70 <__multiply+0x10c>
 8011da2:	9a01      	ldr	r2, [sp, #4]
 8011da4:	50a9      	str	r1, [r5, r2]
 8011da6:	3504      	adds	r5, #4
 8011da8:	e79a      	b.n	8011ce0 <__multiply+0x7c>
 8011daa:	3e01      	subs	r6, #1
 8011dac:	e79c      	b.n	8011ce8 <__multiply+0x84>
 8011dae:	bf00      	nop
 8011db0:	08014621 	.word	0x08014621
 8011db4:	08014694 	.word	0x08014694

08011db8 <__pow5mult>:
 8011db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dbc:	4615      	mov	r5, r2
 8011dbe:	f012 0203 	ands.w	r2, r2, #3
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	460f      	mov	r7, r1
 8011dc6:	d007      	beq.n	8011dd8 <__pow5mult+0x20>
 8011dc8:	4c25      	ldr	r4, [pc, #148]	; (8011e60 <__pow5mult+0xa8>)
 8011dca:	3a01      	subs	r2, #1
 8011dcc:	2300      	movs	r3, #0
 8011dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011dd2:	f7ff fe9b 	bl	8011b0c <__multadd>
 8011dd6:	4607      	mov	r7, r0
 8011dd8:	10ad      	asrs	r5, r5, #2
 8011dda:	d03d      	beq.n	8011e58 <__pow5mult+0xa0>
 8011ddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011dde:	b97c      	cbnz	r4, 8011e00 <__pow5mult+0x48>
 8011de0:	2010      	movs	r0, #16
 8011de2:	f7fd fe09 	bl	800f9f8 <malloc>
 8011de6:	4602      	mov	r2, r0
 8011de8:	6270      	str	r0, [r6, #36]	; 0x24
 8011dea:	b928      	cbnz	r0, 8011df8 <__pow5mult+0x40>
 8011dec:	4b1d      	ldr	r3, [pc, #116]	; (8011e64 <__pow5mult+0xac>)
 8011dee:	481e      	ldr	r0, [pc, #120]	; (8011e68 <__pow5mult+0xb0>)
 8011df0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011df4:	f001 fa84 	bl	8013300 <__assert_func>
 8011df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011dfc:	6004      	str	r4, [r0, #0]
 8011dfe:	60c4      	str	r4, [r0, #12]
 8011e00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011e08:	b94c      	cbnz	r4, 8011e1e <__pow5mult+0x66>
 8011e0a:	f240 2171 	movw	r1, #625	; 0x271
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff ff12 	bl	8011c38 <__i2b>
 8011e14:	2300      	movs	r3, #0
 8011e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	6003      	str	r3, [r0, #0]
 8011e1e:	f04f 0900 	mov.w	r9, #0
 8011e22:	07eb      	lsls	r3, r5, #31
 8011e24:	d50a      	bpl.n	8011e3c <__pow5mult+0x84>
 8011e26:	4639      	mov	r1, r7
 8011e28:	4622      	mov	r2, r4
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	f7ff ff1a 	bl	8011c64 <__multiply>
 8011e30:	4639      	mov	r1, r7
 8011e32:	4680      	mov	r8, r0
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7ff fe47 	bl	8011ac8 <_Bfree>
 8011e3a:	4647      	mov	r7, r8
 8011e3c:	106d      	asrs	r5, r5, #1
 8011e3e:	d00b      	beq.n	8011e58 <__pow5mult+0xa0>
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	b938      	cbnz	r0, 8011e54 <__pow5mult+0x9c>
 8011e44:	4622      	mov	r2, r4
 8011e46:	4621      	mov	r1, r4
 8011e48:	4630      	mov	r0, r6
 8011e4a:	f7ff ff0b 	bl	8011c64 <__multiply>
 8011e4e:	6020      	str	r0, [r4, #0]
 8011e50:	f8c0 9000 	str.w	r9, [r0]
 8011e54:	4604      	mov	r4, r0
 8011e56:	e7e4      	b.n	8011e22 <__pow5mult+0x6a>
 8011e58:	4638      	mov	r0, r7
 8011e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e5e:	bf00      	nop
 8011e60:	080147e0 	.word	0x080147e0
 8011e64:	080145af 	.word	0x080145af
 8011e68:	08014694 	.word	0x08014694

08011e6c <__lshift>:
 8011e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e70:	460c      	mov	r4, r1
 8011e72:	6849      	ldr	r1, [r1, #4]
 8011e74:	6923      	ldr	r3, [r4, #16]
 8011e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011e7a:	68a3      	ldr	r3, [r4, #8]
 8011e7c:	4607      	mov	r7, r0
 8011e7e:	4691      	mov	r9, r2
 8011e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011e84:	f108 0601 	add.w	r6, r8, #1
 8011e88:	42b3      	cmp	r3, r6
 8011e8a:	db0b      	blt.n	8011ea4 <__lshift+0x38>
 8011e8c:	4638      	mov	r0, r7
 8011e8e:	f7ff fddb 	bl	8011a48 <_Balloc>
 8011e92:	4605      	mov	r5, r0
 8011e94:	b948      	cbnz	r0, 8011eaa <__lshift+0x3e>
 8011e96:	4602      	mov	r2, r0
 8011e98:	4b2a      	ldr	r3, [pc, #168]	; (8011f44 <__lshift+0xd8>)
 8011e9a:	482b      	ldr	r0, [pc, #172]	; (8011f48 <__lshift+0xdc>)
 8011e9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011ea0:	f001 fa2e 	bl	8013300 <__assert_func>
 8011ea4:	3101      	adds	r1, #1
 8011ea6:	005b      	lsls	r3, r3, #1
 8011ea8:	e7ee      	b.n	8011e88 <__lshift+0x1c>
 8011eaa:	2300      	movs	r3, #0
 8011eac:	f100 0114 	add.w	r1, r0, #20
 8011eb0:	f100 0210 	add.w	r2, r0, #16
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	4553      	cmp	r3, sl
 8011eb8:	db37      	blt.n	8011f2a <__lshift+0xbe>
 8011eba:	6920      	ldr	r0, [r4, #16]
 8011ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ec0:	f104 0314 	add.w	r3, r4, #20
 8011ec4:	f019 091f 	ands.w	r9, r9, #31
 8011ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011ed0:	d02f      	beq.n	8011f32 <__lshift+0xc6>
 8011ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8011ed6:	468a      	mov	sl, r1
 8011ed8:	f04f 0c00 	mov.w	ip, #0
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	fa02 f209 	lsl.w	r2, r2, r9
 8011ee2:	ea42 020c 	orr.w	r2, r2, ip
 8011ee6:	f84a 2b04 	str.w	r2, [sl], #4
 8011eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8011eee:	4298      	cmp	r0, r3
 8011ef0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011ef4:	d8f2      	bhi.n	8011edc <__lshift+0x70>
 8011ef6:	1b03      	subs	r3, r0, r4
 8011ef8:	3b15      	subs	r3, #21
 8011efa:	f023 0303 	bic.w	r3, r3, #3
 8011efe:	3304      	adds	r3, #4
 8011f00:	f104 0215 	add.w	r2, r4, #21
 8011f04:	4290      	cmp	r0, r2
 8011f06:	bf38      	it	cc
 8011f08:	2304      	movcc	r3, #4
 8011f0a:	f841 c003 	str.w	ip, [r1, r3]
 8011f0e:	f1bc 0f00 	cmp.w	ip, #0
 8011f12:	d001      	beq.n	8011f18 <__lshift+0xac>
 8011f14:	f108 0602 	add.w	r6, r8, #2
 8011f18:	3e01      	subs	r6, #1
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	612e      	str	r6, [r5, #16]
 8011f1e:	4621      	mov	r1, r4
 8011f20:	f7ff fdd2 	bl	8011ac8 <_Bfree>
 8011f24:	4628      	mov	r0, r5
 8011f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8011f2e:	3301      	adds	r3, #1
 8011f30:	e7c1      	b.n	8011eb6 <__lshift+0x4a>
 8011f32:	3904      	subs	r1, #4
 8011f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f38:	f841 2f04 	str.w	r2, [r1, #4]!
 8011f3c:	4298      	cmp	r0, r3
 8011f3e:	d8f9      	bhi.n	8011f34 <__lshift+0xc8>
 8011f40:	e7ea      	b.n	8011f18 <__lshift+0xac>
 8011f42:	bf00      	nop
 8011f44:	08014621 	.word	0x08014621
 8011f48:	08014694 	.word	0x08014694

08011f4c <__mcmp>:
 8011f4c:	b530      	push	{r4, r5, lr}
 8011f4e:	6902      	ldr	r2, [r0, #16]
 8011f50:	690c      	ldr	r4, [r1, #16]
 8011f52:	1b12      	subs	r2, r2, r4
 8011f54:	d10e      	bne.n	8011f74 <__mcmp+0x28>
 8011f56:	f100 0314 	add.w	r3, r0, #20
 8011f5a:	3114      	adds	r1, #20
 8011f5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011f60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011f64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011f68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011f6c:	42a5      	cmp	r5, r4
 8011f6e:	d003      	beq.n	8011f78 <__mcmp+0x2c>
 8011f70:	d305      	bcc.n	8011f7e <__mcmp+0x32>
 8011f72:	2201      	movs	r2, #1
 8011f74:	4610      	mov	r0, r2
 8011f76:	bd30      	pop	{r4, r5, pc}
 8011f78:	4283      	cmp	r3, r0
 8011f7a:	d3f3      	bcc.n	8011f64 <__mcmp+0x18>
 8011f7c:	e7fa      	b.n	8011f74 <__mcmp+0x28>
 8011f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f82:	e7f7      	b.n	8011f74 <__mcmp+0x28>

08011f84 <__mdiff>:
 8011f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f88:	460c      	mov	r4, r1
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	4611      	mov	r1, r2
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4690      	mov	r8, r2
 8011f92:	f7ff ffdb 	bl	8011f4c <__mcmp>
 8011f96:	1e05      	subs	r5, r0, #0
 8011f98:	d110      	bne.n	8011fbc <__mdiff+0x38>
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f7ff fd53 	bl	8011a48 <_Balloc>
 8011fa2:	b930      	cbnz	r0, 8011fb2 <__mdiff+0x2e>
 8011fa4:	4b3a      	ldr	r3, [pc, #232]	; (8012090 <__mdiff+0x10c>)
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	f240 2132 	movw	r1, #562	; 0x232
 8011fac:	4839      	ldr	r0, [pc, #228]	; (8012094 <__mdiff+0x110>)
 8011fae:	f001 f9a7 	bl	8013300 <__assert_func>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fbc:	bfa4      	itt	ge
 8011fbe:	4643      	movge	r3, r8
 8011fc0:	46a0      	movge	r8, r4
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011fc8:	bfa6      	itte	ge
 8011fca:	461c      	movge	r4, r3
 8011fcc:	2500      	movge	r5, #0
 8011fce:	2501      	movlt	r5, #1
 8011fd0:	f7ff fd3a 	bl	8011a48 <_Balloc>
 8011fd4:	b920      	cbnz	r0, 8011fe0 <__mdiff+0x5c>
 8011fd6:	4b2e      	ldr	r3, [pc, #184]	; (8012090 <__mdiff+0x10c>)
 8011fd8:	4602      	mov	r2, r0
 8011fda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011fde:	e7e5      	b.n	8011fac <__mdiff+0x28>
 8011fe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011fe4:	6926      	ldr	r6, [r4, #16]
 8011fe6:	60c5      	str	r5, [r0, #12]
 8011fe8:	f104 0914 	add.w	r9, r4, #20
 8011fec:	f108 0514 	add.w	r5, r8, #20
 8011ff0:	f100 0e14 	add.w	lr, r0, #20
 8011ff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ffc:	f108 0210 	add.w	r2, r8, #16
 8012000:	46f2      	mov	sl, lr
 8012002:	2100      	movs	r1, #0
 8012004:	f859 3b04 	ldr.w	r3, [r9], #4
 8012008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801200c:	fa1f f883 	uxth.w	r8, r3
 8012010:	fa11 f18b 	uxtah	r1, r1, fp
 8012014:	0c1b      	lsrs	r3, r3, #16
 8012016:	eba1 0808 	sub.w	r8, r1, r8
 801201a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801201e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012022:	fa1f f888 	uxth.w	r8, r8
 8012026:	1419      	asrs	r1, r3, #16
 8012028:	454e      	cmp	r6, r9
 801202a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801202e:	f84a 3b04 	str.w	r3, [sl], #4
 8012032:	d8e7      	bhi.n	8012004 <__mdiff+0x80>
 8012034:	1b33      	subs	r3, r6, r4
 8012036:	3b15      	subs	r3, #21
 8012038:	f023 0303 	bic.w	r3, r3, #3
 801203c:	3304      	adds	r3, #4
 801203e:	3415      	adds	r4, #21
 8012040:	42a6      	cmp	r6, r4
 8012042:	bf38      	it	cc
 8012044:	2304      	movcc	r3, #4
 8012046:	441d      	add	r5, r3
 8012048:	4473      	add	r3, lr
 801204a:	469e      	mov	lr, r3
 801204c:	462e      	mov	r6, r5
 801204e:	4566      	cmp	r6, ip
 8012050:	d30e      	bcc.n	8012070 <__mdiff+0xec>
 8012052:	f10c 0203 	add.w	r2, ip, #3
 8012056:	1b52      	subs	r2, r2, r5
 8012058:	f022 0203 	bic.w	r2, r2, #3
 801205c:	3d03      	subs	r5, #3
 801205e:	45ac      	cmp	ip, r5
 8012060:	bf38      	it	cc
 8012062:	2200      	movcc	r2, #0
 8012064:	441a      	add	r2, r3
 8012066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801206a:	b17b      	cbz	r3, 801208c <__mdiff+0x108>
 801206c:	6107      	str	r7, [r0, #16]
 801206e:	e7a3      	b.n	8011fb8 <__mdiff+0x34>
 8012070:	f856 8b04 	ldr.w	r8, [r6], #4
 8012074:	fa11 f288 	uxtah	r2, r1, r8
 8012078:	1414      	asrs	r4, r2, #16
 801207a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801207e:	b292      	uxth	r2, r2
 8012080:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012084:	f84e 2b04 	str.w	r2, [lr], #4
 8012088:	1421      	asrs	r1, r4, #16
 801208a:	e7e0      	b.n	801204e <__mdiff+0xca>
 801208c:	3f01      	subs	r7, #1
 801208e:	e7ea      	b.n	8012066 <__mdiff+0xe2>
 8012090:	08014621 	.word	0x08014621
 8012094:	08014694 	.word	0x08014694

08012098 <__d2b>:
 8012098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801209c:	4689      	mov	r9, r1
 801209e:	2101      	movs	r1, #1
 80120a0:	ec57 6b10 	vmov	r6, r7, d0
 80120a4:	4690      	mov	r8, r2
 80120a6:	f7ff fccf 	bl	8011a48 <_Balloc>
 80120aa:	4604      	mov	r4, r0
 80120ac:	b930      	cbnz	r0, 80120bc <__d2b+0x24>
 80120ae:	4602      	mov	r2, r0
 80120b0:	4b25      	ldr	r3, [pc, #148]	; (8012148 <__d2b+0xb0>)
 80120b2:	4826      	ldr	r0, [pc, #152]	; (801214c <__d2b+0xb4>)
 80120b4:	f240 310a 	movw	r1, #778	; 0x30a
 80120b8:	f001 f922 	bl	8013300 <__assert_func>
 80120bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80120c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80120c4:	bb35      	cbnz	r5, 8012114 <__d2b+0x7c>
 80120c6:	2e00      	cmp	r6, #0
 80120c8:	9301      	str	r3, [sp, #4]
 80120ca:	d028      	beq.n	801211e <__d2b+0x86>
 80120cc:	4668      	mov	r0, sp
 80120ce:	9600      	str	r6, [sp, #0]
 80120d0:	f7ff fd82 	bl	8011bd8 <__lo0bits>
 80120d4:	9900      	ldr	r1, [sp, #0]
 80120d6:	b300      	cbz	r0, 801211a <__d2b+0x82>
 80120d8:	9a01      	ldr	r2, [sp, #4]
 80120da:	f1c0 0320 	rsb	r3, r0, #32
 80120de:	fa02 f303 	lsl.w	r3, r2, r3
 80120e2:	430b      	orrs	r3, r1
 80120e4:	40c2      	lsrs	r2, r0
 80120e6:	6163      	str	r3, [r4, #20]
 80120e8:	9201      	str	r2, [sp, #4]
 80120ea:	9b01      	ldr	r3, [sp, #4]
 80120ec:	61a3      	str	r3, [r4, #24]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	bf14      	ite	ne
 80120f2:	2202      	movne	r2, #2
 80120f4:	2201      	moveq	r2, #1
 80120f6:	6122      	str	r2, [r4, #16]
 80120f8:	b1d5      	cbz	r5, 8012130 <__d2b+0x98>
 80120fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80120fe:	4405      	add	r5, r0
 8012100:	f8c9 5000 	str.w	r5, [r9]
 8012104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012108:	f8c8 0000 	str.w	r0, [r8]
 801210c:	4620      	mov	r0, r4
 801210e:	b003      	add	sp, #12
 8012110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012118:	e7d5      	b.n	80120c6 <__d2b+0x2e>
 801211a:	6161      	str	r1, [r4, #20]
 801211c:	e7e5      	b.n	80120ea <__d2b+0x52>
 801211e:	a801      	add	r0, sp, #4
 8012120:	f7ff fd5a 	bl	8011bd8 <__lo0bits>
 8012124:	9b01      	ldr	r3, [sp, #4]
 8012126:	6163      	str	r3, [r4, #20]
 8012128:	2201      	movs	r2, #1
 801212a:	6122      	str	r2, [r4, #16]
 801212c:	3020      	adds	r0, #32
 801212e:	e7e3      	b.n	80120f8 <__d2b+0x60>
 8012130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012138:	f8c9 0000 	str.w	r0, [r9]
 801213c:	6918      	ldr	r0, [r3, #16]
 801213e:	f7ff fd2b 	bl	8011b98 <__hi0bits>
 8012142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012146:	e7df      	b.n	8012108 <__d2b+0x70>
 8012148:	08014621 	.word	0x08014621
 801214c:	08014694 	.word	0x08014694

08012150 <_calloc_r>:
 8012150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012152:	fba1 2402 	umull	r2, r4, r1, r2
 8012156:	b94c      	cbnz	r4, 801216c <_calloc_r+0x1c>
 8012158:	4611      	mov	r1, r2
 801215a:	9201      	str	r2, [sp, #4]
 801215c:	f7fd fcd6 	bl	800fb0c <_malloc_r>
 8012160:	9a01      	ldr	r2, [sp, #4]
 8012162:	4605      	mov	r5, r0
 8012164:	b930      	cbnz	r0, 8012174 <_calloc_r+0x24>
 8012166:	4628      	mov	r0, r5
 8012168:	b003      	add	sp, #12
 801216a:	bd30      	pop	{r4, r5, pc}
 801216c:	220c      	movs	r2, #12
 801216e:	6002      	str	r2, [r0, #0]
 8012170:	2500      	movs	r5, #0
 8012172:	e7f8      	b.n	8012166 <_calloc_r+0x16>
 8012174:	4621      	mov	r1, r4
 8012176:	f7fd fc55 	bl	800fa24 <memset>
 801217a:	e7f4      	b.n	8012166 <_calloc_r+0x16>

0801217c <__ssputs_r>:
 801217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012180:	688e      	ldr	r6, [r1, #8]
 8012182:	429e      	cmp	r6, r3
 8012184:	4682      	mov	sl, r0
 8012186:	460c      	mov	r4, r1
 8012188:	4690      	mov	r8, r2
 801218a:	461f      	mov	r7, r3
 801218c:	d838      	bhi.n	8012200 <__ssputs_r+0x84>
 801218e:	898a      	ldrh	r2, [r1, #12]
 8012190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012194:	d032      	beq.n	80121fc <__ssputs_r+0x80>
 8012196:	6825      	ldr	r5, [r4, #0]
 8012198:	6909      	ldr	r1, [r1, #16]
 801219a:	eba5 0901 	sub.w	r9, r5, r1
 801219e:	6965      	ldr	r5, [r4, #20]
 80121a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80121a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80121a8:	3301      	adds	r3, #1
 80121aa:	444b      	add	r3, r9
 80121ac:	106d      	asrs	r5, r5, #1
 80121ae:	429d      	cmp	r5, r3
 80121b0:	bf38      	it	cc
 80121b2:	461d      	movcc	r5, r3
 80121b4:	0553      	lsls	r3, r2, #21
 80121b6:	d531      	bpl.n	801221c <__ssputs_r+0xa0>
 80121b8:	4629      	mov	r1, r5
 80121ba:	f7fd fca7 	bl	800fb0c <_malloc_r>
 80121be:	4606      	mov	r6, r0
 80121c0:	b950      	cbnz	r0, 80121d8 <__ssputs_r+0x5c>
 80121c2:	230c      	movs	r3, #12
 80121c4:	f8ca 3000 	str.w	r3, [sl]
 80121c8:	89a3      	ldrh	r3, [r4, #12]
 80121ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121ce:	81a3      	strh	r3, [r4, #12]
 80121d0:	f04f 30ff 	mov.w	r0, #4294967295
 80121d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121d8:	6921      	ldr	r1, [r4, #16]
 80121da:	464a      	mov	r2, r9
 80121dc:	f7fd fc14 	bl	800fa08 <memcpy>
 80121e0:	89a3      	ldrh	r3, [r4, #12]
 80121e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121ea:	81a3      	strh	r3, [r4, #12]
 80121ec:	6126      	str	r6, [r4, #16]
 80121ee:	6165      	str	r5, [r4, #20]
 80121f0:	444e      	add	r6, r9
 80121f2:	eba5 0509 	sub.w	r5, r5, r9
 80121f6:	6026      	str	r6, [r4, #0]
 80121f8:	60a5      	str	r5, [r4, #8]
 80121fa:	463e      	mov	r6, r7
 80121fc:	42be      	cmp	r6, r7
 80121fe:	d900      	bls.n	8012202 <__ssputs_r+0x86>
 8012200:	463e      	mov	r6, r7
 8012202:	6820      	ldr	r0, [r4, #0]
 8012204:	4632      	mov	r2, r6
 8012206:	4641      	mov	r1, r8
 8012208:	f001 f900 	bl	801340c <memmove>
 801220c:	68a3      	ldr	r3, [r4, #8]
 801220e:	1b9b      	subs	r3, r3, r6
 8012210:	60a3      	str	r3, [r4, #8]
 8012212:	6823      	ldr	r3, [r4, #0]
 8012214:	4433      	add	r3, r6
 8012216:	6023      	str	r3, [r4, #0]
 8012218:	2000      	movs	r0, #0
 801221a:	e7db      	b.n	80121d4 <__ssputs_r+0x58>
 801221c:	462a      	mov	r2, r5
 801221e:	f001 f90f 	bl	8013440 <_realloc_r>
 8012222:	4606      	mov	r6, r0
 8012224:	2800      	cmp	r0, #0
 8012226:	d1e1      	bne.n	80121ec <__ssputs_r+0x70>
 8012228:	6921      	ldr	r1, [r4, #16]
 801222a:	4650      	mov	r0, sl
 801222c:	f7fd fc02 	bl	800fa34 <_free_r>
 8012230:	e7c7      	b.n	80121c2 <__ssputs_r+0x46>
	...

08012234 <_svfiprintf_r>:
 8012234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012238:	4698      	mov	r8, r3
 801223a:	898b      	ldrh	r3, [r1, #12]
 801223c:	061b      	lsls	r3, r3, #24
 801223e:	b09d      	sub	sp, #116	; 0x74
 8012240:	4607      	mov	r7, r0
 8012242:	460d      	mov	r5, r1
 8012244:	4614      	mov	r4, r2
 8012246:	d50e      	bpl.n	8012266 <_svfiprintf_r+0x32>
 8012248:	690b      	ldr	r3, [r1, #16]
 801224a:	b963      	cbnz	r3, 8012266 <_svfiprintf_r+0x32>
 801224c:	2140      	movs	r1, #64	; 0x40
 801224e:	f7fd fc5d 	bl	800fb0c <_malloc_r>
 8012252:	6028      	str	r0, [r5, #0]
 8012254:	6128      	str	r0, [r5, #16]
 8012256:	b920      	cbnz	r0, 8012262 <_svfiprintf_r+0x2e>
 8012258:	230c      	movs	r3, #12
 801225a:	603b      	str	r3, [r7, #0]
 801225c:	f04f 30ff 	mov.w	r0, #4294967295
 8012260:	e0d1      	b.n	8012406 <_svfiprintf_r+0x1d2>
 8012262:	2340      	movs	r3, #64	; 0x40
 8012264:	616b      	str	r3, [r5, #20]
 8012266:	2300      	movs	r3, #0
 8012268:	9309      	str	r3, [sp, #36]	; 0x24
 801226a:	2320      	movs	r3, #32
 801226c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012270:	f8cd 800c 	str.w	r8, [sp, #12]
 8012274:	2330      	movs	r3, #48	; 0x30
 8012276:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012420 <_svfiprintf_r+0x1ec>
 801227a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801227e:	f04f 0901 	mov.w	r9, #1
 8012282:	4623      	mov	r3, r4
 8012284:	469a      	mov	sl, r3
 8012286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801228a:	b10a      	cbz	r2, 8012290 <_svfiprintf_r+0x5c>
 801228c:	2a25      	cmp	r2, #37	; 0x25
 801228e:	d1f9      	bne.n	8012284 <_svfiprintf_r+0x50>
 8012290:	ebba 0b04 	subs.w	fp, sl, r4
 8012294:	d00b      	beq.n	80122ae <_svfiprintf_r+0x7a>
 8012296:	465b      	mov	r3, fp
 8012298:	4622      	mov	r2, r4
 801229a:	4629      	mov	r1, r5
 801229c:	4638      	mov	r0, r7
 801229e:	f7ff ff6d 	bl	801217c <__ssputs_r>
 80122a2:	3001      	adds	r0, #1
 80122a4:	f000 80aa 	beq.w	80123fc <_svfiprintf_r+0x1c8>
 80122a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122aa:	445a      	add	r2, fp
 80122ac:	9209      	str	r2, [sp, #36]	; 0x24
 80122ae:	f89a 3000 	ldrb.w	r3, [sl]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 80a2 	beq.w	80123fc <_svfiprintf_r+0x1c8>
 80122b8:	2300      	movs	r3, #0
 80122ba:	f04f 32ff 	mov.w	r2, #4294967295
 80122be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122c2:	f10a 0a01 	add.w	sl, sl, #1
 80122c6:	9304      	str	r3, [sp, #16]
 80122c8:	9307      	str	r3, [sp, #28]
 80122ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122ce:	931a      	str	r3, [sp, #104]	; 0x68
 80122d0:	4654      	mov	r4, sl
 80122d2:	2205      	movs	r2, #5
 80122d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122d8:	4851      	ldr	r0, [pc, #324]	; (8012420 <_svfiprintf_r+0x1ec>)
 80122da:	f7ed ff81 	bl	80001e0 <memchr>
 80122de:	9a04      	ldr	r2, [sp, #16]
 80122e0:	b9d8      	cbnz	r0, 801231a <_svfiprintf_r+0xe6>
 80122e2:	06d0      	lsls	r0, r2, #27
 80122e4:	bf44      	itt	mi
 80122e6:	2320      	movmi	r3, #32
 80122e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122ec:	0711      	lsls	r1, r2, #28
 80122ee:	bf44      	itt	mi
 80122f0:	232b      	movmi	r3, #43	; 0x2b
 80122f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122f6:	f89a 3000 	ldrb.w	r3, [sl]
 80122fa:	2b2a      	cmp	r3, #42	; 0x2a
 80122fc:	d015      	beq.n	801232a <_svfiprintf_r+0xf6>
 80122fe:	9a07      	ldr	r2, [sp, #28]
 8012300:	4654      	mov	r4, sl
 8012302:	2000      	movs	r0, #0
 8012304:	f04f 0c0a 	mov.w	ip, #10
 8012308:	4621      	mov	r1, r4
 801230a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801230e:	3b30      	subs	r3, #48	; 0x30
 8012310:	2b09      	cmp	r3, #9
 8012312:	d94e      	bls.n	80123b2 <_svfiprintf_r+0x17e>
 8012314:	b1b0      	cbz	r0, 8012344 <_svfiprintf_r+0x110>
 8012316:	9207      	str	r2, [sp, #28]
 8012318:	e014      	b.n	8012344 <_svfiprintf_r+0x110>
 801231a:	eba0 0308 	sub.w	r3, r0, r8
 801231e:	fa09 f303 	lsl.w	r3, r9, r3
 8012322:	4313      	orrs	r3, r2
 8012324:	9304      	str	r3, [sp, #16]
 8012326:	46a2      	mov	sl, r4
 8012328:	e7d2      	b.n	80122d0 <_svfiprintf_r+0x9c>
 801232a:	9b03      	ldr	r3, [sp, #12]
 801232c:	1d19      	adds	r1, r3, #4
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	9103      	str	r1, [sp, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	bfbb      	ittet	lt
 8012336:	425b      	neglt	r3, r3
 8012338:	f042 0202 	orrlt.w	r2, r2, #2
 801233c:	9307      	strge	r3, [sp, #28]
 801233e:	9307      	strlt	r3, [sp, #28]
 8012340:	bfb8      	it	lt
 8012342:	9204      	strlt	r2, [sp, #16]
 8012344:	7823      	ldrb	r3, [r4, #0]
 8012346:	2b2e      	cmp	r3, #46	; 0x2e
 8012348:	d10c      	bne.n	8012364 <_svfiprintf_r+0x130>
 801234a:	7863      	ldrb	r3, [r4, #1]
 801234c:	2b2a      	cmp	r3, #42	; 0x2a
 801234e:	d135      	bne.n	80123bc <_svfiprintf_r+0x188>
 8012350:	9b03      	ldr	r3, [sp, #12]
 8012352:	1d1a      	adds	r2, r3, #4
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	9203      	str	r2, [sp, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	bfb8      	it	lt
 801235c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012360:	3402      	adds	r4, #2
 8012362:	9305      	str	r3, [sp, #20]
 8012364:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012430 <_svfiprintf_r+0x1fc>
 8012368:	7821      	ldrb	r1, [r4, #0]
 801236a:	2203      	movs	r2, #3
 801236c:	4650      	mov	r0, sl
 801236e:	f7ed ff37 	bl	80001e0 <memchr>
 8012372:	b140      	cbz	r0, 8012386 <_svfiprintf_r+0x152>
 8012374:	2340      	movs	r3, #64	; 0x40
 8012376:	eba0 000a 	sub.w	r0, r0, sl
 801237a:	fa03 f000 	lsl.w	r0, r3, r0
 801237e:	9b04      	ldr	r3, [sp, #16]
 8012380:	4303      	orrs	r3, r0
 8012382:	3401      	adds	r4, #1
 8012384:	9304      	str	r3, [sp, #16]
 8012386:	f814 1b01 	ldrb.w	r1, [r4], #1
 801238a:	4826      	ldr	r0, [pc, #152]	; (8012424 <_svfiprintf_r+0x1f0>)
 801238c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012390:	2206      	movs	r2, #6
 8012392:	f7ed ff25 	bl	80001e0 <memchr>
 8012396:	2800      	cmp	r0, #0
 8012398:	d038      	beq.n	801240c <_svfiprintf_r+0x1d8>
 801239a:	4b23      	ldr	r3, [pc, #140]	; (8012428 <_svfiprintf_r+0x1f4>)
 801239c:	bb1b      	cbnz	r3, 80123e6 <_svfiprintf_r+0x1b2>
 801239e:	9b03      	ldr	r3, [sp, #12]
 80123a0:	3307      	adds	r3, #7
 80123a2:	f023 0307 	bic.w	r3, r3, #7
 80123a6:	3308      	adds	r3, #8
 80123a8:	9303      	str	r3, [sp, #12]
 80123aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123ac:	4433      	add	r3, r6
 80123ae:	9309      	str	r3, [sp, #36]	; 0x24
 80123b0:	e767      	b.n	8012282 <_svfiprintf_r+0x4e>
 80123b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80123b6:	460c      	mov	r4, r1
 80123b8:	2001      	movs	r0, #1
 80123ba:	e7a5      	b.n	8012308 <_svfiprintf_r+0xd4>
 80123bc:	2300      	movs	r3, #0
 80123be:	3401      	adds	r4, #1
 80123c0:	9305      	str	r3, [sp, #20]
 80123c2:	4619      	mov	r1, r3
 80123c4:	f04f 0c0a 	mov.w	ip, #10
 80123c8:	4620      	mov	r0, r4
 80123ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123ce:	3a30      	subs	r2, #48	; 0x30
 80123d0:	2a09      	cmp	r2, #9
 80123d2:	d903      	bls.n	80123dc <_svfiprintf_r+0x1a8>
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d0c5      	beq.n	8012364 <_svfiprintf_r+0x130>
 80123d8:	9105      	str	r1, [sp, #20]
 80123da:	e7c3      	b.n	8012364 <_svfiprintf_r+0x130>
 80123dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80123e0:	4604      	mov	r4, r0
 80123e2:	2301      	movs	r3, #1
 80123e4:	e7f0      	b.n	80123c8 <_svfiprintf_r+0x194>
 80123e6:	ab03      	add	r3, sp, #12
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	462a      	mov	r2, r5
 80123ec:	4b0f      	ldr	r3, [pc, #60]	; (801242c <_svfiprintf_r+0x1f8>)
 80123ee:	a904      	add	r1, sp, #16
 80123f0:	4638      	mov	r0, r7
 80123f2:	f7fd fc9f 	bl	800fd34 <_printf_float>
 80123f6:	1c42      	adds	r2, r0, #1
 80123f8:	4606      	mov	r6, r0
 80123fa:	d1d6      	bne.n	80123aa <_svfiprintf_r+0x176>
 80123fc:	89ab      	ldrh	r3, [r5, #12]
 80123fe:	065b      	lsls	r3, r3, #25
 8012400:	f53f af2c 	bmi.w	801225c <_svfiprintf_r+0x28>
 8012404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012406:	b01d      	add	sp, #116	; 0x74
 8012408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240c:	ab03      	add	r3, sp, #12
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	462a      	mov	r2, r5
 8012412:	4b06      	ldr	r3, [pc, #24]	; (801242c <_svfiprintf_r+0x1f8>)
 8012414:	a904      	add	r1, sp, #16
 8012416:	4638      	mov	r0, r7
 8012418:	f7fd ff30 	bl	801027c <_printf_i>
 801241c:	e7eb      	b.n	80123f6 <_svfiprintf_r+0x1c2>
 801241e:	bf00      	nop
 8012420:	080147ec 	.word	0x080147ec
 8012424:	080147f6 	.word	0x080147f6
 8012428:	0800fd35 	.word	0x0800fd35
 801242c:	0801217d 	.word	0x0801217d
 8012430:	080147f2 	.word	0x080147f2

08012434 <__sfputc_r>:
 8012434:	6893      	ldr	r3, [r2, #8]
 8012436:	3b01      	subs	r3, #1
 8012438:	2b00      	cmp	r3, #0
 801243a:	b410      	push	{r4}
 801243c:	6093      	str	r3, [r2, #8]
 801243e:	da08      	bge.n	8012452 <__sfputc_r+0x1e>
 8012440:	6994      	ldr	r4, [r2, #24]
 8012442:	42a3      	cmp	r3, r4
 8012444:	db01      	blt.n	801244a <__sfputc_r+0x16>
 8012446:	290a      	cmp	r1, #10
 8012448:	d103      	bne.n	8012452 <__sfputc_r+0x1e>
 801244a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801244e:	f7fe b961 	b.w	8010714 <__swbuf_r>
 8012452:	6813      	ldr	r3, [r2, #0]
 8012454:	1c58      	adds	r0, r3, #1
 8012456:	6010      	str	r0, [r2, #0]
 8012458:	7019      	strb	r1, [r3, #0]
 801245a:	4608      	mov	r0, r1
 801245c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012460:	4770      	bx	lr

08012462 <__sfputs_r>:
 8012462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012464:	4606      	mov	r6, r0
 8012466:	460f      	mov	r7, r1
 8012468:	4614      	mov	r4, r2
 801246a:	18d5      	adds	r5, r2, r3
 801246c:	42ac      	cmp	r4, r5
 801246e:	d101      	bne.n	8012474 <__sfputs_r+0x12>
 8012470:	2000      	movs	r0, #0
 8012472:	e007      	b.n	8012484 <__sfputs_r+0x22>
 8012474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012478:	463a      	mov	r2, r7
 801247a:	4630      	mov	r0, r6
 801247c:	f7ff ffda 	bl	8012434 <__sfputc_r>
 8012480:	1c43      	adds	r3, r0, #1
 8012482:	d1f3      	bne.n	801246c <__sfputs_r+0xa>
 8012484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012488 <_vfiprintf_r>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	460d      	mov	r5, r1
 801248e:	b09d      	sub	sp, #116	; 0x74
 8012490:	4614      	mov	r4, r2
 8012492:	4698      	mov	r8, r3
 8012494:	4606      	mov	r6, r0
 8012496:	b118      	cbz	r0, 80124a0 <_vfiprintf_r+0x18>
 8012498:	6983      	ldr	r3, [r0, #24]
 801249a:	b90b      	cbnz	r3, 80124a0 <_vfiprintf_r+0x18>
 801249c:	f7ff f9a2 	bl	80117e4 <__sinit>
 80124a0:	4b89      	ldr	r3, [pc, #548]	; (80126c8 <_vfiprintf_r+0x240>)
 80124a2:	429d      	cmp	r5, r3
 80124a4:	d11b      	bne.n	80124de <_vfiprintf_r+0x56>
 80124a6:	6875      	ldr	r5, [r6, #4]
 80124a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124aa:	07d9      	lsls	r1, r3, #31
 80124ac:	d405      	bmi.n	80124ba <_vfiprintf_r+0x32>
 80124ae:	89ab      	ldrh	r3, [r5, #12]
 80124b0:	059a      	lsls	r2, r3, #22
 80124b2:	d402      	bmi.n	80124ba <_vfiprintf_r+0x32>
 80124b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124b6:	f7ff fa54 	bl	8011962 <__retarget_lock_acquire_recursive>
 80124ba:	89ab      	ldrh	r3, [r5, #12]
 80124bc:	071b      	lsls	r3, r3, #28
 80124be:	d501      	bpl.n	80124c4 <_vfiprintf_r+0x3c>
 80124c0:	692b      	ldr	r3, [r5, #16]
 80124c2:	b9eb      	cbnz	r3, 8012500 <_vfiprintf_r+0x78>
 80124c4:	4629      	mov	r1, r5
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7fe f976 	bl	80107b8 <__swsetup_r>
 80124cc:	b1c0      	cbz	r0, 8012500 <_vfiprintf_r+0x78>
 80124ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80124d0:	07dc      	lsls	r4, r3, #31
 80124d2:	d50e      	bpl.n	80124f2 <_vfiprintf_r+0x6a>
 80124d4:	f04f 30ff 	mov.w	r0, #4294967295
 80124d8:	b01d      	add	sp, #116	; 0x74
 80124da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124de:	4b7b      	ldr	r3, [pc, #492]	; (80126cc <_vfiprintf_r+0x244>)
 80124e0:	429d      	cmp	r5, r3
 80124e2:	d101      	bne.n	80124e8 <_vfiprintf_r+0x60>
 80124e4:	68b5      	ldr	r5, [r6, #8]
 80124e6:	e7df      	b.n	80124a8 <_vfiprintf_r+0x20>
 80124e8:	4b79      	ldr	r3, [pc, #484]	; (80126d0 <_vfiprintf_r+0x248>)
 80124ea:	429d      	cmp	r5, r3
 80124ec:	bf08      	it	eq
 80124ee:	68f5      	ldreq	r5, [r6, #12]
 80124f0:	e7da      	b.n	80124a8 <_vfiprintf_r+0x20>
 80124f2:	89ab      	ldrh	r3, [r5, #12]
 80124f4:	0598      	lsls	r0, r3, #22
 80124f6:	d4ed      	bmi.n	80124d4 <_vfiprintf_r+0x4c>
 80124f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124fa:	f7ff fa33 	bl	8011964 <__retarget_lock_release_recursive>
 80124fe:	e7e9      	b.n	80124d4 <_vfiprintf_r+0x4c>
 8012500:	2300      	movs	r3, #0
 8012502:	9309      	str	r3, [sp, #36]	; 0x24
 8012504:	2320      	movs	r3, #32
 8012506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801250a:	f8cd 800c 	str.w	r8, [sp, #12]
 801250e:	2330      	movs	r3, #48	; 0x30
 8012510:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80126d4 <_vfiprintf_r+0x24c>
 8012514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012518:	f04f 0901 	mov.w	r9, #1
 801251c:	4623      	mov	r3, r4
 801251e:	469a      	mov	sl, r3
 8012520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012524:	b10a      	cbz	r2, 801252a <_vfiprintf_r+0xa2>
 8012526:	2a25      	cmp	r2, #37	; 0x25
 8012528:	d1f9      	bne.n	801251e <_vfiprintf_r+0x96>
 801252a:	ebba 0b04 	subs.w	fp, sl, r4
 801252e:	d00b      	beq.n	8012548 <_vfiprintf_r+0xc0>
 8012530:	465b      	mov	r3, fp
 8012532:	4622      	mov	r2, r4
 8012534:	4629      	mov	r1, r5
 8012536:	4630      	mov	r0, r6
 8012538:	f7ff ff93 	bl	8012462 <__sfputs_r>
 801253c:	3001      	adds	r0, #1
 801253e:	f000 80aa 	beq.w	8012696 <_vfiprintf_r+0x20e>
 8012542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012544:	445a      	add	r2, fp
 8012546:	9209      	str	r2, [sp, #36]	; 0x24
 8012548:	f89a 3000 	ldrb.w	r3, [sl]
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 80a2 	beq.w	8012696 <_vfiprintf_r+0x20e>
 8012552:	2300      	movs	r3, #0
 8012554:	f04f 32ff 	mov.w	r2, #4294967295
 8012558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801255c:	f10a 0a01 	add.w	sl, sl, #1
 8012560:	9304      	str	r3, [sp, #16]
 8012562:	9307      	str	r3, [sp, #28]
 8012564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012568:	931a      	str	r3, [sp, #104]	; 0x68
 801256a:	4654      	mov	r4, sl
 801256c:	2205      	movs	r2, #5
 801256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012572:	4858      	ldr	r0, [pc, #352]	; (80126d4 <_vfiprintf_r+0x24c>)
 8012574:	f7ed fe34 	bl	80001e0 <memchr>
 8012578:	9a04      	ldr	r2, [sp, #16]
 801257a:	b9d8      	cbnz	r0, 80125b4 <_vfiprintf_r+0x12c>
 801257c:	06d1      	lsls	r1, r2, #27
 801257e:	bf44      	itt	mi
 8012580:	2320      	movmi	r3, #32
 8012582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012586:	0713      	lsls	r3, r2, #28
 8012588:	bf44      	itt	mi
 801258a:	232b      	movmi	r3, #43	; 0x2b
 801258c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012590:	f89a 3000 	ldrb.w	r3, [sl]
 8012594:	2b2a      	cmp	r3, #42	; 0x2a
 8012596:	d015      	beq.n	80125c4 <_vfiprintf_r+0x13c>
 8012598:	9a07      	ldr	r2, [sp, #28]
 801259a:	4654      	mov	r4, sl
 801259c:	2000      	movs	r0, #0
 801259e:	f04f 0c0a 	mov.w	ip, #10
 80125a2:	4621      	mov	r1, r4
 80125a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125a8:	3b30      	subs	r3, #48	; 0x30
 80125aa:	2b09      	cmp	r3, #9
 80125ac:	d94e      	bls.n	801264c <_vfiprintf_r+0x1c4>
 80125ae:	b1b0      	cbz	r0, 80125de <_vfiprintf_r+0x156>
 80125b0:	9207      	str	r2, [sp, #28]
 80125b2:	e014      	b.n	80125de <_vfiprintf_r+0x156>
 80125b4:	eba0 0308 	sub.w	r3, r0, r8
 80125b8:	fa09 f303 	lsl.w	r3, r9, r3
 80125bc:	4313      	orrs	r3, r2
 80125be:	9304      	str	r3, [sp, #16]
 80125c0:	46a2      	mov	sl, r4
 80125c2:	e7d2      	b.n	801256a <_vfiprintf_r+0xe2>
 80125c4:	9b03      	ldr	r3, [sp, #12]
 80125c6:	1d19      	adds	r1, r3, #4
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	9103      	str	r1, [sp, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	bfbb      	ittet	lt
 80125d0:	425b      	neglt	r3, r3
 80125d2:	f042 0202 	orrlt.w	r2, r2, #2
 80125d6:	9307      	strge	r3, [sp, #28]
 80125d8:	9307      	strlt	r3, [sp, #28]
 80125da:	bfb8      	it	lt
 80125dc:	9204      	strlt	r2, [sp, #16]
 80125de:	7823      	ldrb	r3, [r4, #0]
 80125e0:	2b2e      	cmp	r3, #46	; 0x2e
 80125e2:	d10c      	bne.n	80125fe <_vfiprintf_r+0x176>
 80125e4:	7863      	ldrb	r3, [r4, #1]
 80125e6:	2b2a      	cmp	r3, #42	; 0x2a
 80125e8:	d135      	bne.n	8012656 <_vfiprintf_r+0x1ce>
 80125ea:	9b03      	ldr	r3, [sp, #12]
 80125ec:	1d1a      	adds	r2, r3, #4
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	9203      	str	r2, [sp, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	bfb8      	it	lt
 80125f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80125fa:	3402      	adds	r4, #2
 80125fc:	9305      	str	r3, [sp, #20]
 80125fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126e4 <_vfiprintf_r+0x25c>
 8012602:	7821      	ldrb	r1, [r4, #0]
 8012604:	2203      	movs	r2, #3
 8012606:	4650      	mov	r0, sl
 8012608:	f7ed fdea 	bl	80001e0 <memchr>
 801260c:	b140      	cbz	r0, 8012620 <_vfiprintf_r+0x198>
 801260e:	2340      	movs	r3, #64	; 0x40
 8012610:	eba0 000a 	sub.w	r0, r0, sl
 8012614:	fa03 f000 	lsl.w	r0, r3, r0
 8012618:	9b04      	ldr	r3, [sp, #16]
 801261a:	4303      	orrs	r3, r0
 801261c:	3401      	adds	r4, #1
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012624:	482c      	ldr	r0, [pc, #176]	; (80126d8 <_vfiprintf_r+0x250>)
 8012626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801262a:	2206      	movs	r2, #6
 801262c:	f7ed fdd8 	bl	80001e0 <memchr>
 8012630:	2800      	cmp	r0, #0
 8012632:	d03f      	beq.n	80126b4 <_vfiprintf_r+0x22c>
 8012634:	4b29      	ldr	r3, [pc, #164]	; (80126dc <_vfiprintf_r+0x254>)
 8012636:	bb1b      	cbnz	r3, 8012680 <_vfiprintf_r+0x1f8>
 8012638:	9b03      	ldr	r3, [sp, #12]
 801263a:	3307      	adds	r3, #7
 801263c:	f023 0307 	bic.w	r3, r3, #7
 8012640:	3308      	adds	r3, #8
 8012642:	9303      	str	r3, [sp, #12]
 8012644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012646:	443b      	add	r3, r7
 8012648:	9309      	str	r3, [sp, #36]	; 0x24
 801264a:	e767      	b.n	801251c <_vfiprintf_r+0x94>
 801264c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012650:	460c      	mov	r4, r1
 8012652:	2001      	movs	r0, #1
 8012654:	e7a5      	b.n	80125a2 <_vfiprintf_r+0x11a>
 8012656:	2300      	movs	r3, #0
 8012658:	3401      	adds	r4, #1
 801265a:	9305      	str	r3, [sp, #20]
 801265c:	4619      	mov	r1, r3
 801265e:	f04f 0c0a 	mov.w	ip, #10
 8012662:	4620      	mov	r0, r4
 8012664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012668:	3a30      	subs	r2, #48	; 0x30
 801266a:	2a09      	cmp	r2, #9
 801266c:	d903      	bls.n	8012676 <_vfiprintf_r+0x1ee>
 801266e:	2b00      	cmp	r3, #0
 8012670:	d0c5      	beq.n	80125fe <_vfiprintf_r+0x176>
 8012672:	9105      	str	r1, [sp, #20]
 8012674:	e7c3      	b.n	80125fe <_vfiprintf_r+0x176>
 8012676:	fb0c 2101 	mla	r1, ip, r1, r2
 801267a:	4604      	mov	r4, r0
 801267c:	2301      	movs	r3, #1
 801267e:	e7f0      	b.n	8012662 <_vfiprintf_r+0x1da>
 8012680:	ab03      	add	r3, sp, #12
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	462a      	mov	r2, r5
 8012686:	4b16      	ldr	r3, [pc, #88]	; (80126e0 <_vfiprintf_r+0x258>)
 8012688:	a904      	add	r1, sp, #16
 801268a:	4630      	mov	r0, r6
 801268c:	f7fd fb52 	bl	800fd34 <_printf_float>
 8012690:	4607      	mov	r7, r0
 8012692:	1c78      	adds	r0, r7, #1
 8012694:	d1d6      	bne.n	8012644 <_vfiprintf_r+0x1bc>
 8012696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012698:	07d9      	lsls	r1, r3, #31
 801269a:	d405      	bmi.n	80126a8 <_vfiprintf_r+0x220>
 801269c:	89ab      	ldrh	r3, [r5, #12]
 801269e:	059a      	lsls	r2, r3, #22
 80126a0:	d402      	bmi.n	80126a8 <_vfiprintf_r+0x220>
 80126a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126a4:	f7ff f95e 	bl	8011964 <__retarget_lock_release_recursive>
 80126a8:	89ab      	ldrh	r3, [r5, #12]
 80126aa:	065b      	lsls	r3, r3, #25
 80126ac:	f53f af12 	bmi.w	80124d4 <_vfiprintf_r+0x4c>
 80126b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126b2:	e711      	b.n	80124d8 <_vfiprintf_r+0x50>
 80126b4:	ab03      	add	r3, sp, #12
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	462a      	mov	r2, r5
 80126ba:	4b09      	ldr	r3, [pc, #36]	; (80126e0 <_vfiprintf_r+0x258>)
 80126bc:	a904      	add	r1, sp, #16
 80126be:	4630      	mov	r0, r6
 80126c0:	f7fd fddc 	bl	801027c <_printf_i>
 80126c4:	e7e4      	b.n	8012690 <_vfiprintf_r+0x208>
 80126c6:	bf00      	nop
 80126c8:	08014654 	.word	0x08014654
 80126cc:	08014674 	.word	0x08014674
 80126d0:	08014634 	.word	0x08014634
 80126d4:	080147ec 	.word	0x080147ec
 80126d8:	080147f6 	.word	0x080147f6
 80126dc:	0800fd35 	.word	0x0800fd35
 80126e0:	08012463 	.word	0x08012463
 80126e4:	080147f2 	.word	0x080147f2

080126e8 <__svfiscanf_r>:
 80126e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126ec:	461d      	mov	r5, r3
 80126ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80126f0:	07df      	lsls	r7, r3, #31
 80126f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80126f6:	4606      	mov	r6, r0
 80126f8:	460c      	mov	r4, r1
 80126fa:	4692      	mov	sl, r2
 80126fc:	d405      	bmi.n	801270a <__svfiscanf_r+0x22>
 80126fe:	898b      	ldrh	r3, [r1, #12]
 8012700:	0598      	lsls	r0, r3, #22
 8012702:	d402      	bmi.n	801270a <__svfiscanf_r+0x22>
 8012704:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8012706:	f7ff f92c 	bl	8011962 <__retarget_lock_acquire_recursive>
 801270a:	2300      	movs	r3, #0
 801270c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8012710:	4ba6      	ldr	r3, [pc, #664]	; (80129ac <__svfiscanf_r+0x2c4>)
 8012712:	93a0      	str	r3, [sp, #640]	; 0x280
 8012714:	f10d 0804 	add.w	r8, sp, #4
 8012718:	4ba5      	ldr	r3, [pc, #660]	; (80129b0 <__svfiscanf_r+0x2c8>)
 801271a:	4fa6      	ldr	r7, [pc, #664]	; (80129b4 <__svfiscanf_r+0x2cc>)
 801271c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80129b8 <__svfiscanf_r+0x2d0>
 8012720:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012724:	93a1      	str	r3, [sp, #644]	; 0x284
 8012726:	9500      	str	r5, [sp, #0]
 8012728:	f89a 3000 	ldrb.w	r3, [sl]
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 8173 	beq.w	8012a18 <__svfiscanf_r+0x330>
 8012732:	5dd9      	ldrb	r1, [r3, r7]
 8012734:	f011 0108 	ands.w	r1, r1, #8
 8012738:	f10a 0501 	add.w	r5, sl, #1
 801273c:	d019      	beq.n	8012772 <__svfiscanf_r+0x8a>
 801273e:	6863      	ldr	r3, [r4, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	dd0f      	ble.n	8012764 <__svfiscanf_r+0x7c>
 8012744:	6823      	ldr	r3, [r4, #0]
 8012746:	781a      	ldrb	r2, [r3, #0]
 8012748:	5cba      	ldrb	r2, [r7, r2]
 801274a:	0711      	lsls	r1, r2, #28
 801274c:	d401      	bmi.n	8012752 <__svfiscanf_r+0x6a>
 801274e:	46aa      	mov	sl, r5
 8012750:	e7ea      	b.n	8012728 <__svfiscanf_r+0x40>
 8012752:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012754:	3201      	adds	r2, #1
 8012756:	9245      	str	r2, [sp, #276]	; 0x114
 8012758:	6862      	ldr	r2, [r4, #4]
 801275a:	3301      	adds	r3, #1
 801275c:	3a01      	subs	r2, #1
 801275e:	6062      	str	r2, [r4, #4]
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	e7ec      	b.n	801273e <__svfiscanf_r+0x56>
 8012764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012766:	4621      	mov	r1, r4
 8012768:	4630      	mov	r0, r6
 801276a:	4798      	blx	r3
 801276c:	2800      	cmp	r0, #0
 801276e:	d0e9      	beq.n	8012744 <__svfiscanf_r+0x5c>
 8012770:	e7ed      	b.n	801274e <__svfiscanf_r+0x66>
 8012772:	2b25      	cmp	r3, #37	; 0x25
 8012774:	d012      	beq.n	801279c <__svfiscanf_r+0xb4>
 8012776:	469a      	mov	sl, r3
 8012778:	6863      	ldr	r3, [r4, #4]
 801277a:	2b00      	cmp	r3, #0
 801277c:	f340 8095 	ble.w	80128aa <__svfiscanf_r+0x1c2>
 8012780:	6822      	ldr	r2, [r4, #0]
 8012782:	7813      	ldrb	r3, [r2, #0]
 8012784:	4553      	cmp	r3, sl
 8012786:	f040 8147 	bne.w	8012a18 <__svfiscanf_r+0x330>
 801278a:	6863      	ldr	r3, [r4, #4]
 801278c:	3b01      	subs	r3, #1
 801278e:	6063      	str	r3, [r4, #4]
 8012790:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012792:	3201      	adds	r2, #1
 8012794:	3301      	adds	r3, #1
 8012796:	6022      	str	r2, [r4, #0]
 8012798:	9345      	str	r3, [sp, #276]	; 0x114
 801279a:	e7d8      	b.n	801274e <__svfiscanf_r+0x66>
 801279c:	9141      	str	r1, [sp, #260]	; 0x104
 801279e:	9143      	str	r1, [sp, #268]	; 0x10c
 80127a0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80127a4:	2b2a      	cmp	r3, #42	; 0x2a
 80127a6:	bf02      	ittt	eq
 80127a8:	2310      	moveq	r3, #16
 80127aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80127ac:	f10a 0502 	addeq.w	r5, sl, #2
 80127b0:	220a      	movs	r2, #10
 80127b2:	46aa      	mov	sl, r5
 80127b4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80127b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80127bc:	2b09      	cmp	r3, #9
 80127be:	d91e      	bls.n	80127fe <__svfiscanf_r+0x116>
 80127c0:	487d      	ldr	r0, [pc, #500]	; (80129b8 <__svfiscanf_r+0x2d0>)
 80127c2:	2203      	movs	r2, #3
 80127c4:	f7ed fd0c 	bl	80001e0 <memchr>
 80127c8:	b140      	cbz	r0, 80127dc <__svfiscanf_r+0xf4>
 80127ca:	2301      	movs	r3, #1
 80127cc:	eba0 0009 	sub.w	r0, r0, r9
 80127d0:	fa03 f000 	lsl.w	r0, r3, r0
 80127d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80127d6:	4318      	orrs	r0, r3
 80127d8:	9041      	str	r0, [sp, #260]	; 0x104
 80127da:	4655      	mov	r5, sl
 80127dc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80127e0:	2b78      	cmp	r3, #120	; 0x78
 80127e2:	d807      	bhi.n	80127f4 <__svfiscanf_r+0x10c>
 80127e4:	2b57      	cmp	r3, #87	; 0x57
 80127e6:	d811      	bhi.n	801280c <__svfiscanf_r+0x124>
 80127e8:	2b25      	cmp	r3, #37	; 0x25
 80127ea:	d0c4      	beq.n	8012776 <__svfiscanf_r+0x8e>
 80127ec:	d858      	bhi.n	80128a0 <__svfiscanf_r+0x1b8>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f000 80c8 	beq.w	8012984 <__svfiscanf_r+0x29c>
 80127f4:	2303      	movs	r3, #3
 80127f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80127f8:	230a      	movs	r3, #10
 80127fa:	9342      	str	r3, [sp, #264]	; 0x108
 80127fc:	e07c      	b.n	80128f8 <__svfiscanf_r+0x210>
 80127fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012800:	fb02 1103 	mla	r1, r2, r3, r1
 8012804:	3930      	subs	r1, #48	; 0x30
 8012806:	9143      	str	r1, [sp, #268]	; 0x10c
 8012808:	4655      	mov	r5, sl
 801280a:	e7d2      	b.n	80127b2 <__svfiscanf_r+0xca>
 801280c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012810:	2a20      	cmp	r2, #32
 8012812:	d8ef      	bhi.n	80127f4 <__svfiscanf_r+0x10c>
 8012814:	a101      	add	r1, pc, #4	; (adr r1, 801281c <__svfiscanf_r+0x134>)
 8012816:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801281a:	bf00      	nop
 801281c:	080128e3 	.word	0x080128e3
 8012820:	080127f5 	.word	0x080127f5
 8012824:	080127f5 	.word	0x080127f5
 8012828:	08012941 	.word	0x08012941
 801282c:	080127f5 	.word	0x080127f5
 8012830:	080127f5 	.word	0x080127f5
 8012834:	080127f5 	.word	0x080127f5
 8012838:	080127f5 	.word	0x080127f5
 801283c:	080127f5 	.word	0x080127f5
 8012840:	080127f5 	.word	0x080127f5
 8012844:	080127f5 	.word	0x080127f5
 8012848:	08012957 	.word	0x08012957
 801284c:	0801292d 	.word	0x0801292d
 8012850:	080128a7 	.word	0x080128a7
 8012854:	080128a7 	.word	0x080128a7
 8012858:	080128a7 	.word	0x080128a7
 801285c:	080127f5 	.word	0x080127f5
 8012860:	08012931 	.word	0x08012931
 8012864:	080127f5 	.word	0x080127f5
 8012868:	080127f5 	.word	0x080127f5
 801286c:	080127f5 	.word	0x080127f5
 8012870:	080127f5 	.word	0x080127f5
 8012874:	08012967 	.word	0x08012967
 8012878:	08012939 	.word	0x08012939
 801287c:	080128db 	.word	0x080128db
 8012880:	080127f5 	.word	0x080127f5
 8012884:	080127f5 	.word	0x080127f5
 8012888:	08012963 	.word	0x08012963
 801288c:	080127f5 	.word	0x080127f5
 8012890:	0801292d 	.word	0x0801292d
 8012894:	080127f5 	.word	0x080127f5
 8012898:	080127f5 	.word	0x080127f5
 801289c:	080128e3 	.word	0x080128e3
 80128a0:	3b45      	subs	r3, #69	; 0x45
 80128a2:	2b02      	cmp	r3, #2
 80128a4:	d8a6      	bhi.n	80127f4 <__svfiscanf_r+0x10c>
 80128a6:	2305      	movs	r3, #5
 80128a8:	e025      	b.n	80128f6 <__svfiscanf_r+0x20e>
 80128aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80128ac:	4621      	mov	r1, r4
 80128ae:	4630      	mov	r0, r6
 80128b0:	4798      	blx	r3
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f43f af64 	beq.w	8012780 <__svfiscanf_r+0x98>
 80128b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128ba:	07da      	lsls	r2, r3, #31
 80128bc:	f140 80a4 	bpl.w	8012a08 <__svfiscanf_r+0x320>
 80128c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d067      	beq.n	8012996 <__svfiscanf_r+0x2ae>
 80128c6:	89a3      	ldrh	r3, [r4, #12]
 80128c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80128cc:	bf18      	it	ne
 80128ce:	f04f 30ff 	movne.w	r0, #4294967295
 80128d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80128d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80128dc:	f042 0220 	orr.w	r2, r2, #32
 80128e0:	9241      	str	r2, [sp, #260]	; 0x104
 80128e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80128e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80128e8:	9241      	str	r2, [sp, #260]	; 0x104
 80128ea:	2210      	movs	r2, #16
 80128ec:	2b6f      	cmp	r3, #111	; 0x6f
 80128ee:	9242      	str	r2, [sp, #264]	; 0x108
 80128f0:	bf34      	ite	cc
 80128f2:	2303      	movcc	r3, #3
 80128f4:	2304      	movcs	r3, #4
 80128f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80128f8:	6863      	ldr	r3, [r4, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	dd4e      	ble.n	801299c <__svfiscanf_r+0x2b4>
 80128fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012900:	065b      	lsls	r3, r3, #25
 8012902:	d404      	bmi.n	801290e <__svfiscanf_r+0x226>
 8012904:	6823      	ldr	r3, [r4, #0]
 8012906:	781a      	ldrb	r2, [r3, #0]
 8012908:	5cba      	ldrb	r2, [r7, r2]
 801290a:	0710      	lsls	r0, r2, #28
 801290c:	d456      	bmi.n	80129bc <__svfiscanf_r+0x2d4>
 801290e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012910:	2b02      	cmp	r3, #2
 8012912:	dc65      	bgt.n	80129e0 <__svfiscanf_r+0x2f8>
 8012914:	466b      	mov	r3, sp
 8012916:	4622      	mov	r2, r4
 8012918:	a941      	add	r1, sp, #260	; 0x104
 801291a:	4630      	mov	r0, r6
 801291c:	f000 f8b2 	bl	8012a84 <_scanf_chars>
 8012920:	2801      	cmp	r0, #1
 8012922:	d079      	beq.n	8012a18 <__svfiscanf_r+0x330>
 8012924:	2802      	cmp	r0, #2
 8012926:	f47f af12 	bne.w	801274e <__svfiscanf_r+0x66>
 801292a:	e7c5      	b.n	80128b8 <__svfiscanf_r+0x1d0>
 801292c:	220a      	movs	r2, #10
 801292e:	e7dd      	b.n	80128ec <__svfiscanf_r+0x204>
 8012930:	2300      	movs	r3, #0
 8012932:	9342      	str	r3, [sp, #264]	; 0x108
 8012934:	2303      	movs	r3, #3
 8012936:	e7de      	b.n	80128f6 <__svfiscanf_r+0x20e>
 8012938:	2308      	movs	r3, #8
 801293a:	9342      	str	r3, [sp, #264]	; 0x108
 801293c:	2304      	movs	r3, #4
 801293e:	e7da      	b.n	80128f6 <__svfiscanf_r+0x20e>
 8012940:	4629      	mov	r1, r5
 8012942:	4640      	mov	r0, r8
 8012944:	f000 fa84 	bl	8012e50 <__sccl>
 8012948:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801294a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801294e:	9341      	str	r3, [sp, #260]	; 0x104
 8012950:	4605      	mov	r5, r0
 8012952:	2301      	movs	r3, #1
 8012954:	e7cf      	b.n	80128f6 <__svfiscanf_r+0x20e>
 8012956:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801295c:	9341      	str	r3, [sp, #260]	; 0x104
 801295e:	2300      	movs	r3, #0
 8012960:	e7c9      	b.n	80128f6 <__svfiscanf_r+0x20e>
 8012962:	2302      	movs	r3, #2
 8012964:	e7c7      	b.n	80128f6 <__svfiscanf_r+0x20e>
 8012966:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012968:	06c3      	lsls	r3, r0, #27
 801296a:	f53f aef0 	bmi.w	801274e <__svfiscanf_r+0x66>
 801296e:	9b00      	ldr	r3, [sp, #0]
 8012970:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012972:	1d19      	adds	r1, r3, #4
 8012974:	9100      	str	r1, [sp, #0]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	f010 0f01 	tst.w	r0, #1
 801297c:	bf14      	ite	ne
 801297e:	801a      	strhne	r2, [r3, #0]
 8012980:	601a      	streq	r2, [r3, #0]
 8012982:	e6e4      	b.n	801274e <__svfiscanf_r+0x66>
 8012984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012986:	07d8      	lsls	r0, r3, #31
 8012988:	d405      	bmi.n	8012996 <__svfiscanf_r+0x2ae>
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	0599      	lsls	r1, r3, #22
 801298e:	d402      	bmi.n	8012996 <__svfiscanf_r+0x2ae>
 8012990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012992:	f7fe ffe7 	bl	8011964 <__retarget_lock_release_recursive>
 8012996:	f04f 30ff 	mov.w	r0, #4294967295
 801299a:	e79a      	b.n	80128d2 <__svfiscanf_r+0x1ea>
 801299c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801299e:	4621      	mov	r1, r4
 80129a0:	4630      	mov	r0, r6
 80129a2:	4798      	blx	r3
 80129a4:	2800      	cmp	r0, #0
 80129a6:	d0aa      	beq.n	80128fe <__svfiscanf_r+0x216>
 80129a8:	e786      	b.n	80128b8 <__svfiscanf_r+0x1d0>
 80129aa:	bf00      	nop
 80129ac:	080131ad 	.word	0x080131ad
 80129b0:	08012d3d 	.word	0x08012d3d
 80129b4:	08014469 	.word	0x08014469
 80129b8:	080147f2 	.word	0x080147f2
 80129bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80129be:	3201      	adds	r2, #1
 80129c0:	9245      	str	r2, [sp, #276]	; 0x114
 80129c2:	6862      	ldr	r2, [r4, #4]
 80129c4:	3a01      	subs	r2, #1
 80129c6:	2a00      	cmp	r2, #0
 80129c8:	6062      	str	r2, [r4, #4]
 80129ca:	dd02      	ble.n	80129d2 <__svfiscanf_r+0x2ea>
 80129cc:	3301      	adds	r3, #1
 80129ce:	6023      	str	r3, [r4, #0]
 80129d0:	e798      	b.n	8012904 <__svfiscanf_r+0x21c>
 80129d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80129d4:	4621      	mov	r1, r4
 80129d6:	4630      	mov	r0, r6
 80129d8:	4798      	blx	r3
 80129da:	2800      	cmp	r0, #0
 80129dc:	d092      	beq.n	8012904 <__svfiscanf_r+0x21c>
 80129de:	e76b      	b.n	80128b8 <__svfiscanf_r+0x1d0>
 80129e0:	2b04      	cmp	r3, #4
 80129e2:	dc06      	bgt.n	80129f2 <__svfiscanf_r+0x30a>
 80129e4:	466b      	mov	r3, sp
 80129e6:	4622      	mov	r2, r4
 80129e8:	a941      	add	r1, sp, #260	; 0x104
 80129ea:	4630      	mov	r0, r6
 80129ec:	f000 f8a4 	bl	8012b38 <_scanf_i>
 80129f0:	e796      	b.n	8012920 <__svfiscanf_r+0x238>
 80129f2:	4b0f      	ldr	r3, [pc, #60]	; (8012a30 <__svfiscanf_r+0x348>)
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	f43f aeaa 	beq.w	801274e <__svfiscanf_r+0x66>
 80129fa:	466b      	mov	r3, sp
 80129fc:	4622      	mov	r2, r4
 80129fe:	a941      	add	r1, sp, #260	; 0x104
 8012a00:	4630      	mov	r0, r6
 8012a02:	f3af 8000 	nop.w
 8012a06:	e78b      	b.n	8012920 <__svfiscanf_r+0x238>
 8012a08:	89a3      	ldrh	r3, [r4, #12]
 8012a0a:	0599      	lsls	r1, r3, #22
 8012a0c:	f53f af58 	bmi.w	80128c0 <__svfiscanf_r+0x1d8>
 8012a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a12:	f7fe ffa7 	bl	8011964 <__retarget_lock_release_recursive>
 8012a16:	e753      	b.n	80128c0 <__svfiscanf_r+0x1d8>
 8012a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a1a:	07da      	lsls	r2, r3, #31
 8012a1c:	d405      	bmi.n	8012a2a <__svfiscanf_r+0x342>
 8012a1e:	89a3      	ldrh	r3, [r4, #12]
 8012a20:	059b      	lsls	r3, r3, #22
 8012a22:	d402      	bmi.n	8012a2a <__svfiscanf_r+0x342>
 8012a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a26:	f7fe ff9d 	bl	8011964 <__retarget_lock_release_recursive>
 8012a2a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012a2c:	e751      	b.n	80128d2 <__svfiscanf_r+0x1ea>
 8012a2e:	bf00      	nop
 8012a30:	00000000 	.word	0x00000000

08012a34 <_vfiscanf_r>:
 8012a34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a36:	460c      	mov	r4, r1
 8012a38:	4605      	mov	r5, r0
 8012a3a:	b138      	cbz	r0, 8012a4c <_vfiscanf_r+0x18>
 8012a3c:	6981      	ldr	r1, [r0, #24]
 8012a3e:	b929      	cbnz	r1, 8012a4c <_vfiscanf_r+0x18>
 8012a40:	e9cd 2300 	strd	r2, r3, [sp]
 8012a44:	f7fe fece 	bl	80117e4 <__sinit>
 8012a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a4c:	490a      	ldr	r1, [pc, #40]	; (8012a78 <_vfiscanf_r+0x44>)
 8012a4e:	428c      	cmp	r4, r1
 8012a50:	d107      	bne.n	8012a62 <_vfiscanf_r+0x2e>
 8012a52:	686c      	ldr	r4, [r5, #4]
 8012a54:	4621      	mov	r1, r4
 8012a56:	4628      	mov	r0, r5
 8012a58:	b003      	add	sp, #12
 8012a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a5e:	f7ff be43 	b.w	80126e8 <__svfiscanf_r>
 8012a62:	4906      	ldr	r1, [pc, #24]	; (8012a7c <_vfiscanf_r+0x48>)
 8012a64:	428c      	cmp	r4, r1
 8012a66:	d101      	bne.n	8012a6c <_vfiscanf_r+0x38>
 8012a68:	68ac      	ldr	r4, [r5, #8]
 8012a6a:	e7f3      	b.n	8012a54 <_vfiscanf_r+0x20>
 8012a6c:	4904      	ldr	r1, [pc, #16]	; (8012a80 <_vfiscanf_r+0x4c>)
 8012a6e:	428c      	cmp	r4, r1
 8012a70:	bf08      	it	eq
 8012a72:	68ec      	ldreq	r4, [r5, #12]
 8012a74:	e7ee      	b.n	8012a54 <_vfiscanf_r+0x20>
 8012a76:	bf00      	nop
 8012a78:	08014654 	.word	0x08014654
 8012a7c:	08014674 	.word	0x08014674
 8012a80:	08014634 	.word	0x08014634

08012a84 <_scanf_chars>:
 8012a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a88:	4615      	mov	r5, r2
 8012a8a:	688a      	ldr	r2, [r1, #8]
 8012a8c:	4680      	mov	r8, r0
 8012a8e:	460c      	mov	r4, r1
 8012a90:	b932      	cbnz	r2, 8012aa0 <_scanf_chars+0x1c>
 8012a92:	698a      	ldr	r2, [r1, #24]
 8012a94:	2a00      	cmp	r2, #0
 8012a96:	bf0c      	ite	eq
 8012a98:	2201      	moveq	r2, #1
 8012a9a:	f04f 32ff 	movne.w	r2, #4294967295
 8012a9e:	608a      	str	r2, [r1, #8]
 8012aa0:	6822      	ldr	r2, [r4, #0]
 8012aa2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012b34 <_scanf_chars+0xb0>
 8012aa6:	06d1      	lsls	r1, r2, #27
 8012aa8:	bf5f      	itttt	pl
 8012aaa:	681a      	ldrpl	r2, [r3, #0]
 8012aac:	1d11      	addpl	r1, r2, #4
 8012aae:	6019      	strpl	r1, [r3, #0]
 8012ab0:	6816      	ldrpl	r6, [r2, #0]
 8012ab2:	2700      	movs	r7, #0
 8012ab4:	69a0      	ldr	r0, [r4, #24]
 8012ab6:	b188      	cbz	r0, 8012adc <_scanf_chars+0x58>
 8012ab8:	2801      	cmp	r0, #1
 8012aba:	d107      	bne.n	8012acc <_scanf_chars+0x48>
 8012abc:	682a      	ldr	r2, [r5, #0]
 8012abe:	7811      	ldrb	r1, [r2, #0]
 8012ac0:	6962      	ldr	r2, [r4, #20]
 8012ac2:	5c52      	ldrb	r2, [r2, r1]
 8012ac4:	b952      	cbnz	r2, 8012adc <_scanf_chars+0x58>
 8012ac6:	2f00      	cmp	r7, #0
 8012ac8:	d031      	beq.n	8012b2e <_scanf_chars+0xaa>
 8012aca:	e022      	b.n	8012b12 <_scanf_chars+0x8e>
 8012acc:	2802      	cmp	r0, #2
 8012ace:	d120      	bne.n	8012b12 <_scanf_chars+0x8e>
 8012ad0:	682b      	ldr	r3, [r5, #0]
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012ad8:	071b      	lsls	r3, r3, #28
 8012ada:	d41a      	bmi.n	8012b12 <_scanf_chars+0x8e>
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	06da      	lsls	r2, r3, #27
 8012ae0:	bf5e      	ittt	pl
 8012ae2:	682b      	ldrpl	r3, [r5, #0]
 8012ae4:	781b      	ldrbpl	r3, [r3, #0]
 8012ae6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012aea:	682a      	ldr	r2, [r5, #0]
 8012aec:	686b      	ldr	r3, [r5, #4]
 8012aee:	3201      	adds	r2, #1
 8012af0:	602a      	str	r2, [r5, #0]
 8012af2:	68a2      	ldr	r2, [r4, #8]
 8012af4:	3b01      	subs	r3, #1
 8012af6:	3a01      	subs	r2, #1
 8012af8:	606b      	str	r3, [r5, #4]
 8012afa:	3701      	adds	r7, #1
 8012afc:	60a2      	str	r2, [r4, #8]
 8012afe:	b142      	cbz	r2, 8012b12 <_scanf_chars+0x8e>
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	dcd7      	bgt.n	8012ab4 <_scanf_chars+0x30>
 8012b04:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012b08:	4629      	mov	r1, r5
 8012b0a:	4640      	mov	r0, r8
 8012b0c:	4798      	blx	r3
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	d0d0      	beq.n	8012ab4 <_scanf_chars+0x30>
 8012b12:	6823      	ldr	r3, [r4, #0]
 8012b14:	f013 0310 	ands.w	r3, r3, #16
 8012b18:	d105      	bne.n	8012b26 <_scanf_chars+0xa2>
 8012b1a:	68e2      	ldr	r2, [r4, #12]
 8012b1c:	3201      	adds	r2, #1
 8012b1e:	60e2      	str	r2, [r4, #12]
 8012b20:	69a2      	ldr	r2, [r4, #24]
 8012b22:	b102      	cbz	r2, 8012b26 <_scanf_chars+0xa2>
 8012b24:	7033      	strb	r3, [r6, #0]
 8012b26:	6923      	ldr	r3, [r4, #16]
 8012b28:	443b      	add	r3, r7
 8012b2a:	6123      	str	r3, [r4, #16]
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b32:	bf00      	nop
 8012b34:	08014469 	.word	0x08014469

08012b38 <_scanf_i>:
 8012b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b3c:	4698      	mov	r8, r3
 8012b3e:	4b76      	ldr	r3, [pc, #472]	; (8012d18 <_scanf_i+0x1e0>)
 8012b40:	460c      	mov	r4, r1
 8012b42:	4682      	mov	sl, r0
 8012b44:	4616      	mov	r6, r2
 8012b46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b4a:	b087      	sub	sp, #28
 8012b4c:	ab03      	add	r3, sp, #12
 8012b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012b52:	4b72      	ldr	r3, [pc, #456]	; (8012d1c <_scanf_i+0x1e4>)
 8012b54:	69a1      	ldr	r1, [r4, #24]
 8012b56:	4a72      	ldr	r2, [pc, #456]	; (8012d20 <_scanf_i+0x1e8>)
 8012b58:	2903      	cmp	r1, #3
 8012b5a:	bf18      	it	ne
 8012b5c:	461a      	movne	r2, r3
 8012b5e:	68a3      	ldr	r3, [r4, #8]
 8012b60:	9201      	str	r2, [sp, #4]
 8012b62:	1e5a      	subs	r2, r3, #1
 8012b64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012b68:	bf88      	it	hi
 8012b6a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012b6e:	4627      	mov	r7, r4
 8012b70:	bf82      	ittt	hi
 8012b72:	eb03 0905 	addhi.w	r9, r3, r5
 8012b76:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012b7a:	60a3      	strhi	r3, [r4, #8]
 8012b7c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012b80:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012b84:	bf98      	it	ls
 8012b86:	f04f 0900 	movls.w	r9, #0
 8012b8a:	6023      	str	r3, [r4, #0]
 8012b8c:	463d      	mov	r5, r7
 8012b8e:	f04f 0b00 	mov.w	fp, #0
 8012b92:	6831      	ldr	r1, [r6, #0]
 8012b94:	ab03      	add	r3, sp, #12
 8012b96:	7809      	ldrb	r1, [r1, #0]
 8012b98:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	f7ed fb1f 	bl	80001e0 <memchr>
 8012ba2:	b328      	cbz	r0, 8012bf0 <_scanf_i+0xb8>
 8012ba4:	f1bb 0f01 	cmp.w	fp, #1
 8012ba8:	d159      	bne.n	8012c5e <_scanf_i+0x126>
 8012baa:	6862      	ldr	r2, [r4, #4]
 8012bac:	b92a      	cbnz	r2, 8012bba <_scanf_i+0x82>
 8012bae:	6822      	ldr	r2, [r4, #0]
 8012bb0:	2308      	movs	r3, #8
 8012bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012bb6:	6063      	str	r3, [r4, #4]
 8012bb8:	6022      	str	r2, [r4, #0]
 8012bba:	6822      	ldr	r2, [r4, #0]
 8012bbc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012bc0:	6022      	str	r2, [r4, #0]
 8012bc2:	68a2      	ldr	r2, [r4, #8]
 8012bc4:	1e51      	subs	r1, r2, #1
 8012bc6:	60a1      	str	r1, [r4, #8]
 8012bc8:	b192      	cbz	r2, 8012bf0 <_scanf_i+0xb8>
 8012bca:	6832      	ldr	r2, [r6, #0]
 8012bcc:	1c51      	adds	r1, r2, #1
 8012bce:	6031      	str	r1, [r6, #0]
 8012bd0:	7812      	ldrb	r2, [r2, #0]
 8012bd2:	f805 2b01 	strb.w	r2, [r5], #1
 8012bd6:	6872      	ldr	r2, [r6, #4]
 8012bd8:	3a01      	subs	r2, #1
 8012bda:	2a00      	cmp	r2, #0
 8012bdc:	6072      	str	r2, [r6, #4]
 8012bde:	dc07      	bgt.n	8012bf0 <_scanf_i+0xb8>
 8012be0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012be4:	4631      	mov	r1, r6
 8012be6:	4650      	mov	r0, sl
 8012be8:	4790      	blx	r2
 8012bea:	2800      	cmp	r0, #0
 8012bec:	f040 8085 	bne.w	8012cfa <_scanf_i+0x1c2>
 8012bf0:	f10b 0b01 	add.w	fp, fp, #1
 8012bf4:	f1bb 0f03 	cmp.w	fp, #3
 8012bf8:	d1cb      	bne.n	8012b92 <_scanf_i+0x5a>
 8012bfa:	6863      	ldr	r3, [r4, #4]
 8012bfc:	b90b      	cbnz	r3, 8012c02 <_scanf_i+0xca>
 8012bfe:	230a      	movs	r3, #10
 8012c00:	6063      	str	r3, [r4, #4]
 8012c02:	6863      	ldr	r3, [r4, #4]
 8012c04:	4947      	ldr	r1, [pc, #284]	; (8012d24 <_scanf_i+0x1ec>)
 8012c06:	6960      	ldr	r0, [r4, #20]
 8012c08:	1ac9      	subs	r1, r1, r3
 8012c0a:	f000 f921 	bl	8012e50 <__sccl>
 8012c0e:	f04f 0b00 	mov.w	fp, #0
 8012c12:	68a3      	ldr	r3, [r4, #8]
 8012c14:	6822      	ldr	r2, [r4, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d03d      	beq.n	8012c96 <_scanf_i+0x15e>
 8012c1a:	6831      	ldr	r1, [r6, #0]
 8012c1c:	6960      	ldr	r0, [r4, #20]
 8012c1e:	f891 c000 	ldrb.w	ip, [r1]
 8012c22:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d035      	beq.n	8012c96 <_scanf_i+0x15e>
 8012c2a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012c2e:	d124      	bne.n	8012c7a <_scanf_i+0x142>
 8012c30:	0510      	lsls	r0, r2, #20
 8012c32:	d522      	bpl.n	8012c7a <_scanf_i+0x142>
 8012c34:	f10b 0b01 	add.w	fp, fp, #1
 8012c38:	f1b9 0f00 	cmp.w	r9, #0
 8012c3c:	d003      	beq.n	8012c46 <_scanf_i+0x10e>
 8012c3e:	3301      	adds	r3, #1
 8012c40:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c44:	60a3      	str	r3, [r4, #8]
 8012c46:	6873      	ldr	r3, [r6, #4]
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	6073      	str	r3, [r6, #4]
 8012c4e:	dd1b      	ble.n	8012c88 <_scanf_i+0x150>
 8012c50:	6833      	ldr	r3, [r6, #0]
 8012c52:	3301      	adds	r3, #1
 8012c54:	6033      	str	r3, [r6, #0]
 8012c56:	68a3      	ldr	r3, [r4, #8]
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	60a3      	str	r3, [r4, #8]
 8012c5c:	e7d9      	b.n	8012c12 <_scanf_i+0xda>
 8012c5e:	f1bb 0f02 	cmp.w	fp, #2
 8012c62:	d1ae      	bne.n	8012bc2 <_scanf_i+0x8a>
 8012c64:	6822      	ldr	r2, [r4, #0]
 8012c66:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012c6a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012c6e:	d1bf      	bne.n	8012bf0 <_scanf_i+0xb8>
 8012c70:	2310      	movs	r3, #16
 8012c72:	6063      	str	r3, [r4, #4]
 8012c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c78:	e7a2      	b.n	8012bc0 <_scanf_i+0x88>
 8012c7a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012c7e:	6022      	str	r2, [r4, #0]
 8012c80:	780b      	ldrb	r3, [r1, #0]
 8012c82:	f805 3b01 	strb.w	r3, [r5], #1
 8012c86:	e7de      	b.n	8012c46 <_scanf_i+0x10e>
 8012c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012c8c:	4631      	mov	r1, r6
 8012c8e:	4650      	mov	r0, sl
 8012c90:	4798      	blx	r3
 8012c92:	2800      	cmp	r0, #0
 8012c94:	d0df      	beq.n	8012c56 <_scanf_i+0x11e>
 8012c96:	6823      	ldr	r3, [r4, #0]
 8012c98:	05db      	lsls	r3, r3, #23
 8012c9a:	d50d      	bpl.n	8012cb8 <_scanf_i+0x180>
 8012c9c:	42bd      	cmp	r5, r7
 8012c9e:	d909      	bls.n	8012cb4 <_scanf_i+0x17c>
 8012ca0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ca8:	4632      	mov	r2, r6
 8012caa:	4650      	mov	r0, sl
 8012cac:	4798      	blx	r3
 8012cae:	f105 39ff 	add.w	r9, r5, #4294967295
 8012cb2:	464d      	mov	r5, r9
 8012cb4:	42bd      	cmp	r5, r7
 8012cb6:	d02d      	beq.n	8012d14 <_scanf_i+0x1dc>
 8012cb8:	6822      	ldr	r2, [r4, #0]
 8012cba:	f012 0210 	ands.w	r2, r2, #16
 8012cbe:	d113      	bne.n	8012ce8 <_scanf_i+0x1b0>
 8012cc0:	702a      	strb	r2, [r5, #0]
 8012cc2:	6863      	ldr	r3, [r4, #4]
 8012cc4:	9e01      	ldr	r6, [sp, #4]
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	4650      	mov	r0, sl
 8012cca:	47b0      	blx	r6
 8012ccc:	6821      	ldr	r1, [r4, #0]
 8012cce:	f8d8 3000 	ldr.w	r3, [r8]
 8012cd2:	f011 0f20 	tst.w	r1, #32
 8012cd6:	d013      	beq.n	8012d00 <_scanf_i+0x1c8>
 8012cd8:	1d1a      	adds	r2, r3, #4
 8012cda:	f8c8 2000 	str.w	r2, [r8]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	6018      	str	r0, [r3, #0]
 8012ce2:	68e3      	ldr	r3, [r4, #12]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	60e3      	str	r3, [r4, #12]
 8012ce8:	1bed      	subs	r5, r5, r7
 8012cea:	44ab      	add	fp, r5
 8012cec:	6925      	ldr	r5, [r4, #16]
 8012cee:	445d      	add	r5, fp
 8012cf0:	6125      	str	r5, [r4, #16]
 8012cf2:	2000      	movs	r0, #0
 8012cf4:	b007      	add	sp, #28
 8012cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfa:	f04f 0b00 	mov.w	fp, #0
 8012cfe:	e7ca      	b.n	8012c96 <_scanf_i+0x15e>
 8012d00:	1d1a      	adds	r2, r3, #4
 8012d02:	f8c8 2000 	str.w	r2, [r8]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f011 0f01 	tst.w	r1, #1
 8012d0c:	bf14      	ite	ne
 8012d0e:	8018      	strhne	r0, [r3, #0]
 8012d10:	6018      	streq	r0, [r3, #0]
 8012d12:	e7e6      	b.n	8012ce2 <_scanf_i+0x1aa>
 8012d14:	2001      	movs	r0, #1
 8012d16:	e7ed      	b.n	8012cf4 <_scanf_i+0x1bc>
 8012d18:	08013fd4 	.word	0x08013fd4
 8012d1c:	08013135 	.word	0x08013135
 8012d20:	0801304d 	.word	0x0801304d
 8012d24:	08014816 	.word	0x08014816

08012d28 <lflush>:
 8012d28:	8983      	ldrh	r3, [r0, #12]
 8012d2a:	f003 0309 	and.w	r3, r3, #9
 8012d2e:	2b09      	cmp	r3, #9
 8012d30:	d101      	bne.n	8012d36 <lflush+0xe>
 8012d32:	f7fe bced 	b.w	8011710 <fflush>
 8012d36:	2000      	movs	r0, #0
 8012d38:	4770      	bx	lr
	...

08012d3c <__srefill_r>:
 8012d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d3e:	460c      	mov	r4, r1
 8012d40:	4605      	mov	r5, r0
 8012d42:	b118      	cbz	r0, 8012d4c <__srefill_r+0x10>
 8012d44:	6983      	ldr	r3, [r0, #24]
 8012d46:	b90b      	cbnz	r3, 8012d4c <__srefill_r+0x10>
 8012d48:	f7fe fd4c 	bl	80117e4 <__sinit>
 8012d4c:	4b3b      	ldr	r3, [pc, #236]	; (8012e3c <__srefill_r+0x100>)
 8012d4e:	429c      	cmp	r4, r3
 8012d50:	d10a      	bne.n	8012d68 <__srefill_r+0x2c>
 8012d52:	686c      	ldr	r4, [r5, #4]
 8012d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012d58:	2300      	movs	r3, #0
 8012d5a:	6063      	str	r3, [r4, #4]
 8012d5c:	89a3      	ldrh	r3, [r4, #12]
 8012d5e:	069e      	lsls	r6, r3, #26
 8012d60:	d50c      	bpl.n	8012d7c <__srefill_r+0x40>
 8012d62:	f04f 30ff 	mov.w	r0, #4294967295
 8012d66:	e066      	b.n	8012e36 <__srefill_r+0xfa>
 8012d68:	4b35      	ldr	r3, [pc, #212]	; (8012e40 <__srefill_r+0x104>)
 8012d6a:	429c      	cmp	r4, r3
 8012d6c:	d101      	bne.n	8012d72 <__srefill_r+0x36>
 8012d6e:	68ac      	ldr	r4, [r5, #8]
 8012d70:	e7f0      	b.n	8012d54 <__srefill_r+0x18>
 8012d72:	4b34      	ldr	r3, [pc, #208]	; (8012e44 <__srefill_r+0x108>)
 8012d74:	429c      	cmp	r4, r3
 8012d76:	bf08      	it	eq
 8012d78:	68ec      	ldreq	r4, [r5, #12]
 8012d7a:	e7eb      	b.n	8012d54 <__srefill_r+0x18>
 8012d7c:	0758      	lsls	r0, r3, #29
 8012d7e:	d448      	bmi.n	8012e12 <__srefill_r+0xd6>
 8012d80:	06d9      	lsls	r1, r3, #27
 8012d82:	d405      	bmi.n	8012d90 <__srefill_r+0x54>
 8012d84:	2309      	movs	r3, #9
 8012d86:	602b      	str	r3, [r5, #0]
 8012d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	e7e8      	b.n	8012d62 <__srefill_r+0x26>
 8012d90:	071a      	lsls	r2, r3, #28
 8012d92:	d50b      	bpl.n	8012dac <__srefill_r+0x70>
 8012d94:	4621      	mov	r1, r4
 8012d96:	4628      	mov	r0, r5
 8012d98:	f7fe fc7e 	bl	8011698 <_fflush_r>
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	d1e0      	bne.n	8012d62 <__srefill_r+0x26>
 8012da0:	89a3      	ldrh	r3, [r4, #12]
 8012da2:	60a0      	str	r0, [r4, #8]
 8012da4:	f023 0308 	bic.w	r3, r3, #8
 8012da8:	81a3      	strh	r3, [r4, #12]
 8012daa:	61a0      	str	r0, [r4, #24]
 8012dac:	89a3      	ldrh	r3, [r4, #12]
 8012dae:	f043 0304 	orr.w	r3, r3, #4
 8012db2:	81a3      	strh	r3, [r4, #12]
 8012db4:	6923      	ldr	r3, [r4, #16]
 8012db6:	b91b      	cbnz	r3, 8012dc0 <__srefill_r+0x84>
 8012db8:	4621      	mov	r1, r4
 8012dba:	4628      	mov	r0, r5
 8012dbc:	f7fe fdf8 	bl	80119b0 <__smakebuf_r>
 8012dc0:	89a6      	ldrh	r6, [r4, #12]
 8012dc2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8012dc6:	07b3      	lsls	r3, r6, #30
 8012dc8:	d00f      	beq.n	8012dea <__srefill_r+0xae>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	81a3      	strh	r3, [r4, #12]
 8012dce:	4b1e      	ldr	r3, [pc, #120]	; (8012e48 <__srefill_r+0x10c>)
 8012dd0:	491e      	ldr	r1, [pc, #120]	; (8012e4c <__srefill_r+0x110>)
 8012dd2:	6818      	ldr	r0, [r3, #0]
 8012dd4:	f006 0609 	and.w	r6, r6, #9
 8012dd8:	f7fe fd82 	bl	80118e0 <_fwalk>
 8012ddc:	2e09      	cmp	r6, #9
 8012dde:	81a7      	strh	r7, [r4, #12]
 8012de0:	d103      	bne.n	8012dea <__srefill_r+0xae>
 8012de2:	4621      	mov	r1, r4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7fe fbd1 	bl	801158c <__sflush_r>
 8012dea:	6922      	ldr	r2, [r4, #16]
 8012dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012dee:	6963      	ldr	r3, [r4, #20]
 8012df0:	6a21      	ldr	r1, [r4, #32]
 8012df2:	6022      	str	r2, [r4, #0]
 8012df4:	4628      	mov	r0, r5
 8012df6:	47b0      	blx	r6
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	6060      	str	r0, [r4, #4]
 8012dfc:	dc1c      	bgt.n	8012e38 <__srefill_r+0xfc>
 8012dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e02:	bf17      	itett	ne
 8012e04:	2200      	movne	r2, #0
 8012e06:	f043 0320 	orreq.w	r3, r3, #32
 8012e0a:	6062      	strne	r2, [r4, #4]
 8012e0c:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8012e10:	e7bc      	b.n	8012d8c <__srefill_r+0x50>
 8012e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e14:	2900      	cmp	r1, #0
 8012e16:	d0cd      	beq.n	8012db4 <__srefill_r+0x78>
 8012e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e1c:	4299      	cmp	r1, r3
 8012e1e:	d002      	beq.n	8012e26 <__srefill_r+0xea>
 8012e20:	4628      	mov	r0, r5
 8012e22:	f7fc fe07 	bl	800fa34 <_free_r>
 8012e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e28:	6063      	str	r3, [r4, #4]
 8012e2a:	2000      	movs	r0, #0
 8012e2c:	6360      	str	r0, [r4, #52]	; 0x34
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d0c0      	beq.n	8012db4 <__srefill_r+0x78>
 8012e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012e34:	6023      	str	r3, [r4, #0]
 8012e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e38:	2000      	movs	r0, #0
 8012e3a:	e7fc      	b.n	8012e36 <__srefill_r+0xfa>
 8012e3c:	08014654 	.word	0x08014654
 8012e40:	08014674 	.word	0x08014674
 8012e44:	08014634 	.word	0x08014634
 8012e48:	0801456c 	.word	0x0801456c
 8012e4c:	08012d29 	.word	0x08012d29

08012e50 <__sccl>:
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	780b      	ldrb	r3, [r1, #0]
 8012e54:	4604      	mov	r4, r0
 8012e56:	2b5e      	cmp	r3, #94	; 0x5e
 8012e58:	bf0b      	itete	eq
 8012e5a:	784b      	ldrbeq	r3, [r1, #1]
 8012e5c:	1c48      	addne	r0, r1, #1
 8012e5e:	1c88      	addeq	r0, r1, #2
 8012e60:	2200      	movne	r2, #0
 8012e62:	bf08      	it	eq
 8012e64:	2201      	moveq	r2, #1
 8012e66:	1e61      	subs	r1, r4, #1
 8012e68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012e6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012e70:	42a9      	cmp	r1, r5
 8012e72:	d1fb      	bne.n	8012e6c <__sccl+0x1c>
 8012e74:	b90b      	cbnz	r3, 8012e7a <__sccl+0x2a>
 8012e76:	3801      	subs	r0, #1
 8012e78:	bd70      	pop	{r4, r5, r6, pc}
 8012e7a:	f082 0201 	eor.w	r2, r2, #1
 8012e7e:	54e2      	strb	r2, [r4, r3]
 8012e80:	4605      	mov	r5, r0
 8012e82:	4628      	mov	r0, r5
 8012e84:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012e88:	292d      	cmp	r1, #45	; 0x2d
 8012e8a:	d006      	beq.n	8012e9a <__sccl+0x4a>
 8012e8c:	295d      	cmp	r1, #93	; 0x5d
 8012e8e:	d0f3      	beq.n	8012e78 <__sccl+0x28>
 8012e90:	b909      	cbnz	r1, 8012e96 <__sccl+0x46>
 8012e92:	4628      	mov	r0, r5
 8012e94:	e7f0      	b.n	8012e78 <__sccl+0x28>
 8012e96:	460b      	mov	r3, r1
 8012e98:	e7f1      	b.n	8012e7e <__sccl+0x2e>
 8012e9a:	786e      	ldrb	r6, [r5, #1]
 8012e9c:	2e5d      	cmp	r6, #93	; 0x5d
 8012e9e:	d0fa      	beq.n	8012e96 <__sccl+0x46>
 8012ea0:	42b3      	cmp	r3, r6
 8012ea2:	dcf8      	bgt.n	8012e96 <__sccl+0x46>
 8012ea4:	3502      	adds	r5, #2
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	3101      	adds	r1, #1
 8012eaa:	428e      	cmp	r6, r1
 8012eac:	5462      	strb	r2, [r4, r1]
 8012eae:	dcfb      	bgt.n	8012ea8 <__sccl+0x58>
 8012eb0:	1af1      	subs	r1, r6, r3
 8012eb2:	3901      	subs	r1, #1
 8012eb4:	1c58      	adds	r0, r3, #1
 8012eb6:	42b3      	cmp	r3, r6
 8012eb8:	bfa8      	it	ge
 8012eba:	2100      	movge	r1, #0
 8012ebc:	1843      	adds	r3, r0, r1
 8012ebe:	e7e0      	b.n	8012e82 <__sccl+0x32>

08012ec0 <__sread>:
 8012ec0:	b510      	push	{r4, lr}
 8012ec2:	460c      	mov	r4, r1
 8012ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec8:	f000 faea 	bl	80134a0 <_read_r>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	bfab      	itete	ge
 8012ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8012ed4:	181b      	addge	r3, r3, r0
 8012ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012eda:	bfac      	ite	ge
 8012edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ede:	81a3      	strhlt	r3, [r4, #12]
 8012ee0:	bd10      	pop	{r4, pc}

08012ee2 <__swrite>:
 8012ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee6:	461f      	mov	r7, r3
 8012ee8:	898b      	ldrh	r3, [r1, #12]
 8012eea:	05db      	lsls	r3, r3, #23
 8012eec:	4605      	mov	r5, r0
 8012eee:	460c      	mov	r4, r1
 8012ef0:	4616      	mov	r6, r2
 8012ef2:	d505      	bpl.n	8012f00 <__swrite+0x1e>
 8012ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ef8:	2302      	movs	r3, #2
 8012efa:	2200      	movs	r2, #0
 8012efc:	f000 fa62 	bl	80133c4 <_lseek_r>
 8012f00:	89a3      	ldrh	r3, [r4, #12]
 8012f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f0a:	81a3      	strh	r3, [r4, #12]
 8012f0c:	4632      	mov	r2, r6
 8012f0e:	463b      	mov	r3, r7
 8012f10:	4628      	mov	r0, r5
 8012f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f16:	f000 b9e1 	b.w	80132dc <_write_r>

08012f1a <__sseek>:
 8012f1a:	b510      	push	{r4, lr}
 8012f1c:	460c      	mov	r4, r1
 8012f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f22:	f000 fa4f 	bl	80133c4 <_lseek_r>
 8012f26:	1c43      	adds	r3, r0, #1
 8012f28:	89a3      	ldrh	r3, [r4, #12]
 8012f2a:	bf15      	itete	ne
 8012f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f36:	81a3      	strheq	r3, [r4, #12]
 8012f38:	bf18      	it	ne
 8012f3a:	81a3      	strhne	r3, [r4, #12]
 8012f3c:	bd10      	pop	{r4, pc}

08012f3e <__sclose>:
 8012f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f42:	f000 b9fb 	b.w	801333c <_close_r>
	...

08012f48 <_strtol_l.constprop.0>:
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f4e:	d001      	beq.n	8012f54 <_strtol_l.constprop.0+0xc>
 8012f50:	2b24      	cmp	r3, #36	; 0x24
 8012f52:	d906      	bls.n	8012f62 <_strtol_l.constprop.0+0x1a>
 8012f54:	f7fc fd26 	bl	800f9a4 <__errno>
 8012f58:	2316      	movs	r3, #22
 8012f5a:	6003      	str	r3, [r0, #0]
 8012f5c:	2000      	movs	r0, #0
 8012f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013048 <_strtol_l.constprop.0+0x100>
 8012f66:	460d      	mov	r5, r1
 8012f68:	462e      	mov	r6, r5
 8012f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012f72:	f017 0708 	ands.w	r7, r7, #8
 8012f76:	d1f7      	bne.n	8012f68 <_strtol_l.constprop.0+0x20>
 8012f78:	2c2d      	cmp	r4, #45	; 0x2d
 8012f7a:	d132      	bne.n	8012fe2 <_strtol_l.constprop.0+0x9a>
 8012f7c:	782c      	ldrb	r4, [r5, #0]
 8012f7e:	2701      	movs	r7, #1
 8012f80:	1cb5      	adds	r5, r6, #2
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d05b      	beq.n	801303e <_strtol_l.constprop.0+0xf6>
 8012f86:	2b10      	cmp	r3, #16
 8012f88:	d109      	bne.n	8012f9e <_strtol_l.constprop.0+0x56>
 8012f8a:	2c30      	cmp	r4, #48	; 0x30
 8012f8c:	d107      	bne.n	8012f9e <_strtol_l.constprop.0+0x56>
 8012f8e:	782c      	ldrb	r4, [r5, #0]
 8012f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012f94:	2c58      	cmp	r4, #88	; 0x58
 8012f96:	d14d      	bne.n	8013034 <_strtol_l.constprop.0+0xec>
 8012f98:	786c      	ldrb	r4, [r5, #1]
 8012f9a:	2310      	movs	r3, #16
 8012f9c:	3502      	adds	r5, #2
 8012f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fa6:	f04f 0c00 	mov.w	ip, #0
 8012faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8012fae:	4666      	mov	r6, ip
 8012fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8012fb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012fb8:	f1be 0f09 	cmp.w	lr, #9
 8012fbc:	d816      	bhi.n	8012fec <_strtol_l.constprop.0+0xa4>
 8012fbe:	4674      	mov	r4, lr
 8012fc0:	42a3      	cmp	r3, r4
 8012fc2:	dd24      	ble.n	801300e <_strtol_l.constprop.0+0xc6>
 8012fc4:	f1bc 0f00 	cmp.w	ip, #0
 8012fc8:	db1e      	blt.n	8013008 <_strtol_l.constprop.0+0xc0>
 8012fca:	45b1      	cmp	r9, r6
 8012fcc:	d31c      	bcc.n	8013008 <_strtol_l.constprop.0+0xc0>
 8012fce:	d101      	bne.n	8012fd4 <_strtol_l.constprop.0+0x8c>
 8012fd0:	45a2      	cmp	sl, r4
 8012fd2:	db19      	blt.n	8013008 <_strtol_l.constprop.0+0xc0>
 8012fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8012fd8:	f04f 0c01 	mov.w	ip, #1
 8012fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fe0:	e7e8      	b.n	8012fb4 <_strtol_l.constprop.0+0x6c>
 8012fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8012fe4:	bf04      	itt	eq
 8012fe6:	782c      	ldrbeq	r4, [r5, #0]
 8012fe8:	1cb5      	addeq	r5, r6, #2
 8012fea:	e7ca      	b.n	8012f82 <_strtol_l.constprop.0+0x3a>
 8012fec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012ff0:	f1be 0f19 	cmp.w	lr, #25
 8012ff4:	d801      	bhi.n	8012ffa <_strtol_l.constprop.0+0xb2>
 8012ff6:	3c37      	subs	r4, #55	; 0x37
 8012ff8:	e7e2      	b.n	8012fc0 <_strtol_l.constprop.0+0x78>
 8012ffa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012ffe:	f1be 0f19 	cmp.w	lr, #25
 8013002:	d804      	bhi.n	801300e <_strtol_l.constprop.0+0xc6>
 8013004:	3c57      	subs	r4, #87	; 0x57
 8013006:	e7db      	b.n	8012fc0 <_strtol_l.constprop.0+0x78>
 8013008:	f04f 3cff 	mov.w	ip, #4294967295
 801300c:	e7e6      	b.n	8012fdc <_strtol_l.constprop.0+0x94>
 801300e:	f1bc 0f00 	cmp.w	ip, #0
 8013012:	da05      	bge.n	8013020 <_strtol_l.constprop.0+0xd8>
 8013014:	2322      	movs	r3, #34	; 0x22
 8013016:	6003      	str	r3, [r0, #0]
 8013018:	4646      	mov	r6, r8
 801301a:	b942      	cbnz	r2, 801302e <_strtol_l.constprop.0+0xe6>
 801301c:	4630      	mov	r0, r6
 801301e:	e79e      	b.n	8012f5e <_strtol_l.constprop.0+0x16>
 8013020:	b107      	cbz	r7, 8013024 <_strtol_l.constprop.0+0xdc>
 8013022:	4276      	negs	r6, r6
 8013024:	2a00      	cmp	r2, #0
 8013026:	d0f9      	beq.n	801301c <_strtol_l.constprop.0+0xd4>
 8013028:	f1bc 0f00 	cmp.w	ip, #0
 801302c:	d000      	beq.n	8013030 <_strtol_l.constprop.0+0xe8>
 801302e:	1e69      	subs	r1, r5, #1
 8013030:	6011      	str	r1, [r2, #0]
 8013032:	e7f3      	b.n	801301c <_strtol_l.constprop.0+0xd4>
 8013034:	2430      	movs	r4, #48	; 0x30
 8013036:	2b00      	cmp	r3, #0
 8013038:	d1b1      	bne.n	8012f9e <_strtol_l.constprop.0+0x56>
 801303a:	2308      	movs	r3, #8
 801303c:	e7af      	b.n	8012f9e <_strtol_l.constprop.0+0x56>
 801303e:	2c30      	cmp	r4, #48	; 0x30
 8013040:	d0a5      	beq.n	8012f8e <_strtol_l.constprop.0+0x46>
 8013042:	230a      	movs	r3, #10
 8013044:	e7ab      	b.n	8012f9e <_strtol_l.constprop.0+0x56>
 8013046:	bf00      	nop
 8013048:	08014469 	.word	0x08014469

0801304c <_strtol_r>:
 801304c:	f7ff bf7c 	b.w	8012f48 <_strtol_l.constprop.0>

08013050 <_strtoul_l.constprop.0>:
 8013050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013054:	4f36      	ldr	r7, [pc, #216]	; (8013130 <_strtoul_l.constprop.0+0xe0>)
 8013056:	4686      	mov	lr, r0
 8013058:	460d      	mov	r5, r1
 801305a:	4628      	mov	r0, r5
 801305c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013060:	5de6      	ldrb	r6, [r4, r7]
 8013062:	f016 0608 	ands.w	r6, r6, #8
 8013066:	d1f8      	bne.n	801305a <_strtoul_l.constprop.0+0xa>
 8013068:	2c2d      	cmp	r4, #45	; 0x2d
 801306a:	d12f      	bne.n	80130cc <_strtoul_l.constprop.0+0x7c>
 801306c:	782c      	ldrb	r4, [r5, #0]
 801306e:	2601      	movs	r6, #1
 8013070:	1c85      	adds	r5, r0, #2
 8013072:	2b00      	cmp	r3, #0
 8013074:	d057      	beq.n	8013126 <_strtoul_l.constprop.0+0xd6>
 8013076:	2b10      	cmp	r3, #16
 8013078:	d109      	bne.n	801308e <_strtoul_l.constprop.0+0x3e>
 801307a:	2c30      	cmp	r4, #48	; 0x30
 801307c:	d107      	bne.n	801308e <_strtoul_l.constprop.0+0x3e>
 801307e:	7828      	ldrb	r0, [r5, #0]
 8013080:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013084:	2858      	cmp	r0, #88	; 0x58
 8013086:	d149      	bne.n	801311c <_strtoul_l.constprop.0+0xcc>
 8013088:	786c      	ldrb	r4, [r5, #1]
 801308a:	2310      	movs	r3, #16
 801308c:	3502      	adds	r5, #2
 801308e:	f04f 38ff 	mov.w	r8, #4294967295
 8013092:	2700      	movs	r7, #0
 8013094:	fbb8 f8f3 	udiv	r8, r8, r3
 8013098:	fb03 f908 	mul.w	r9, r3, r8
 801309c:	ea6f 0909 	mvn.w	r9, r9
 80130a0:	4638      	mov	r0, r7
 80130a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80130a6:	f1bc 0f09 	cmp.w	ip, #9
 80130aa:	d814      	bhi.n	80130d6 <_strtoul_l.constprop.0+0x86>
 80130ac:	4664      	mov	r4, ip
 80130ae:	42a3      	cmp	r3, r4
 80130b0:	dd22      	ble.n	80130f8 <_strtoul_l.constprop.0+0xa8>
 80130b2:	2f00      	cmp	r7, #0
 80130b4:	db1d      	blt.n	80130f2 <_strtoul_l.constprop.0+0xa2>
 80130b6:	4580      	cmp	r8, r0
 80130b8:	d31b      	bcc.n	80130f2 <_strtoul_l.constprop.0+0xa2>
 80130ba:	d101      	bne.n	80130c0 <_strtoul_l.constprop.0+0x70>
 80130bc:	45a1      	cmp	r9, r4
 80130be:	db18      	blt.n	80130f2 <_strtoul_l.constprop.0+0xa2>
 80130c0:	fb00 4003 	mla	r0, r0, r3, r4
 80130c4:	2701      	movs	r7, #1
 80130c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130ca:	e7ea      	b.n	80130a2 <_strtoul_l.constprop.0+0x52>
 80130cc:	2c2b      	cmp	r4, #43	; 0x2b
 80130ce:	bf04      	itt	eq
 80130d0:	782c      	ldrbeq	r4, [r5, #0]
 80130d2:	1c85      	addeq	r5, r0, #2
 80130d4:	e7cd      	b.n	8013072 <_strtoul_l.constprop.0+0x22>
 80130d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80130da:	f1bc 0f19 	cmp.w	ip, #25
 80130de:	d801      	bhi.n	80130e4 <_strtoul_l.constprop.0+0x94>
 80130e0:	3c37      	subs	r4, #55	; 0x37
 80130e2:	e7e4      	b.n	80130ae <_strtoul_l.constprop.0+0x5e>
 80130e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80130e8:	f1bc 0f19 	cmp.w	ip, #25
 80130ec:	d804      	bhi.n	80130f8 <_strtoul_l.constprop.0+0xa8>
 80130ee:	3c57      	subs	r4, #87	; 0x57
 80130f0:	e7dd      	b.n	80130ae <_strtoul_l.constprop.0+0x5e>
 80130f2:	f04f 37ff 	mov.w	r7, #4294967295
 80130f6:	e7e6      	b.n	80130c6 <_strtoul_l.constprop.0+0x76>
 80130f8:	2f00      	cmp	r7, #0
 80130fa:	da07      	bge.n	801310c <_strtoul_l.constprop.0+0xbc>
 80130fc:	2322      	movs	r3, #34	; 0x22
 80130fe:	f8ce 3000 	str.w	r3, [lr]
 8013102:	f04f 30ff 	mov.w	r0, #4294967295
 8013106:	b932      	cbnz	r2, 8013116 <_strtoul_l.constprop.0+0xc6>
 8013108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801310c:	b106      	cbz	r6, 8013110 <_strtoul_l.constprop.0+0xc0>
 801310e:	4240      	negs	r0, r0
 8013110:	2a00      	cmp	r2, #0
 8013112:	d0f9      	beq.n	8013108 <_strtoul_l.constprop.0+0xb8>
 8013114:	b107      	cbz	r7, 8013118 <_strtoul_l.constprop.0+0xc8>
 8013116:	1e69      	subs	r1, r5, #1
 8013118:	6011      	str	r1, [r2, #0]
 801311a:	e7f5      	b.n	8013108 <_strtoul_l.constprop.0+0xb8>
 801311c:	2430      	movs	r4, #48	; 0x30
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1b5      	bne.n	801308e <_strtoul_l.constprop.0+0x3e>
 8013122:	2308      	movs	r3, #8
 8013124:	e7b3      	b.n	801308e <_strtoul_l.constprop.0+0x3e>
 8013126:	2c30      	cmp	r4, #48	; 0x30
 8013128:	d0a9      	beq.n	801307e <_strtoul_l.constprop.0+0x2e>
 801312a:	230a      	movs	r3, #10
 801312c:	e7af      	b.n	801308e <_strtoul_l.constprop.0+0x3e>
 801312e:	bf00      	nop
 8013130:	08014469 	.word	0x08014469

08013134 <_strtoul_r>:
 8013134:	f7ff bf8c 	b.w	8013050 <_strtoul_l.constprop.0>

08013138 <__submore>:
 8013138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801313c:	460c      	mov	r4, r1
 801313e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013144:	4299      	cmp	r1, r3
 8013146:	d11d      	bne.n	8013184 <__submore+0x4c>
 8013148:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801314c:	f7fc fcde 	bl	800fb0c <_malloc_r>
 8013150:	b918      	cbnz	r0, 801315a <__submore+0x22>
 8013152:	f04f 30ff 	mov.w	r0, #4294967295
 8013156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801315e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013160:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013164:	6360      	str	r0, [r4, #52]	; 0x34
 8013166:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801316a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801316e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8013172:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013176:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801317a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801317e:	6020      	str	r0, [r4, #0]
 8013180:	2000      	movs	r0, #0
 8013182:	e7e8      	b.n	8013156 <__submore+0x1e>
 8013184:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8013186:	0077      	lsls	r7, r6, #1
 8013188:	463a      	mov	r2, r7
 801318a:	f000 f959 	bl	8013440 <_realloc_r>
 801318e:	4605      	mov	r5, r0
 8013190:	2800      	cmp	r0, #0
 8013192:	d0de      	beq.n	8013152 <__submore+0x1a>
 8013194:	eb00 0806 	add.w	r8, r0, r6
 8013198:	4601      	mov	r1, r0
 801319a:	4632      	mov	r2, r6
 801319c:	4640      	mov	r0, r8
 801319e:	f7fc fc33 	bl	800fa08 <memcpy>
 80131a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80131a6:	f8c4 8000 	str.w	r8, [r4]
 80131aa:	e7e9      	b.n	8013180 <__submore+0x48>

080131ac <_ungetc_r>:
 80131ac:	b570      	push	{r4, r5, r6, lr}
 80131ae:	4614      	mov	r4, r2
 80131b0:	1c4a      	adds	r2, r1, #1
 80131b2:	4606      	mov	r6, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	d103      	bne.n	80131c0 <_ungetc_r+0x14>
 80131b8:	f04f 35ff 	mov.w	r5, #4294967295
 80131bc:	4628      	mov	r0, r5
 80131be:	bd70      	pop	{r4, r5, r6, pc}
 80131c0:	b118      	cbz	r0, 80131ca <_ungetc_r+0x1e>
 80131c2:	6983      	ldr	r3, [r0, #24]
 80131c4:	b90b      	cbnz	r3, 80131ca <_ungetc_r+0x1e>
 80131c6:	f7fe fb0d 	bl	80117e4 <__sinit>
 80131ca:	4b41      	ldr	r3, [pc, #260]	; (80132d0 <_ungetc_r+0x124>)
 80131cc:	429c      	cmp	r4, r3
 80131ce:	d11d      	bne.n	801320c <_ungetc_r+0x60>
 80131d0:	6874      	ldr	r4, [r6, #4]
 80131d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131d4:	07db      	lsls	r3, r3, #31
 80131d6:	d405      	bmi.n	80131e4 <_ungetc_r+0x38>
 80131d8:	89a3      	ldrh	r3, [r4, #12]
 80131da:	0598      	lsls	r0, r3, #22
 80131dc:	d402      	bmi.n	80131e4 <_ungetc_r+0x38>
 80131de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131e0:	f7fe fbbf 	bl	8011962 <__retarget_lock_acquire_recursive>
 80131e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131e8:	f023 0320 	bic.w	r3, r3, #32
 80131ec:	0759      	lsls	r1, r3, #29
 80131ee:	81a3      	strh	r3, [r4, #12]
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	d42d      	bmi.n	8013250 <_ungetc_r+0xa4>
 80131f4:	06d3      	lsls	r3, r2, #27
 80131f6:	d413      	bmi.n	8013220 <_ungetc_r+0x74>
 80131f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131fa:	07dd      	lsls	r5, r3, #31
 80131fc:	d4dc      	bmi.n	80131b8 <_ungetc_r+0xc>
 80131fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8013202:	d1d9      	bne.n	80131b8 <_ungetc_r+0xc>
 8013204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013206:	f7fe fbad 	bl	8011964 <__retarget_lock_release_recursive>
 801320a:	e7d5      	b.n	80131b8 <_ungetc_r+0xc>
 801320c:	4b31      	ldr	r3, [pc, #196]	; (80132d4 <_ungetc_r+0x128>)
 801320e:	429c      	cmp	r4, r3
 8013210:	d101      	bne.n	8013216 <_ungetc_r+0x6a>
 8013212:	68b4      	ldr	r4, [r6, #8]
 8013214:	e7dd      	b.n	80131d2 <_ungetc_r+0x26>
 8013216:	4b30      	ldr	r3, [pc, #192]	; (80132d8 <_ungetc_r+0x12c>)
 8013218:	429c      	cmp	r4, r3
 801321a:	bf08      	it	eq
 801321c:	68f4      	ldreq	r4, [r6, #12]
 801321e:	e7d8      	b.n	80131d2 <_ungetc_r+0x26>
 8013220:	0710      	lsls	r0, r2, #28
 8013222:	d511      	bpl.n	8013248 <_ungetc_r+0x9c>
 8013224:	4621      	mov	r1, r4
 8013226:	4630      	mov	r0, r6
 8013228:	f7fe fa36 	bl	8011698 <_fflush_r>
 801322c:	b130      	cbz	r0, 801323c <_ungetc_r+0x90>
 801322e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013230:	07d9      	lsls	r1, r3, #31
 8013232:	d4c1      	bmi.n	80131b8 <_ungetc_r+0xc>
 8013234:	89a3      	ldrh	r3, [r4, #12]
 8013236:	f413 7f00 	tst.w	r3, #512	; 0x200
 801323a:	e7e2      	b.n	8013202 <_ungetc_r+0x56>
 801323c:	89a3      	ldrh	r3, [r4, #12]
 801323e:	60a0      	str	r0, [r4, #8]
 8013240:	f023 0308 	bic.w	r3, r3, #8
 8013244:	81a3      	strh	r3, [r4, #12]
 8013246:	61a0      	str	r0, [r4, #24]
 8013248:	89a3      	ldrh	r3, [r4, #12]
 801324a:	f043 0304 	orr.w	r3, r3, #4
 801324e:	81a3      	strh	r3, [r4, #12]
 8013250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013252:	6862      	ldr	r2, [r4, #4]
 8013254:	b2ed      	uxtb	r5, r5
 8013256:	b1d3      	cbz	r3, 801328e <_ungetc_r+0xe2>
 8013258:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801325a:	4293      	cmp	r3, r2
 801325c:	dc05      	bgt.n	801326a <_ungetc_r+0xbe>
 801325e:	4621      	mov	r1, r4
 8013260:	4630      	mov	r0, r6
 8013262:	f7ff ff69 	bl	8013138 <__submore>
 8013266:	2800      	cmp	r0, #0
 8013268:	d1e1      	bne.n	801322e <_ungetc_r+0x82>
 801326a:	6823      	ldr	r3, [r4, #0]
 801326c:	1e5a      	subs	r2, r3, #1
 801326e:	6022      	str	r2, [r4, #0]
 8013270:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013274:	6863      	ldr	r3, [r4, #4]
 8013276:	3301      	adds	r3, #1
 8013278:	6063      	str	r3, [r4, #4]
 801327a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801327c:	07da      	lsls	r2, r3, #31
 801327e:	d49d      	bmi.n	80131bc <_ungetc_r+0x10>
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	059b      	lsls	r3, r3, #22
 8013284:	d49a      	bmi.n	80131bc <_ungetc_r+0x10>
 8013286:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013288:	f7fe fb6c 	bl	8011964 <__retarget_lock_release_recursive>
 801328c:	e796      	b.n	80131bc <_ungetc_r+0x10>
 801328e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8013290:	6920      	ldr	r0, [r4, #16]
 8013292:	6823      	ldr	r3, [r4, #0]
 8013294:	f001 0101 	and.w	r1, r1, #1
 8013298:	b160      	cbz	r0, 80132b4 <_ungetc_r+0x108>
 801329a:	4298      	cmp	r0, r3
 801329c:	d20a      	bcs.n	80132b4 <_ungetc_r+0x108>
 801329e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80132a2:	42a8      	cmp	r0, r5
 80132a4:	d106      	bne.n	80132b4 <_ungetc_r+0x108>
 80132a6:	3b01      	subs	r3, #1
 80132a8:	3201      	adds	r2, #1
 80132aa:	6023      	str	r3, [r4, #0]
 80132ac:	6062      	str	r2, [r4, #4]
 80132ae:	2900      	cmp	r1, #0
 80132b0:	d184      	bne.n	80131bc <_ungetc_r+0x10>
 80132b2:	e7e5      	b.n	8013280 <_ungetc_r+0xd4>
 80132b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80132b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132bc:	6363      	str	r3, [r4, #52]	; 0x34
 80132be:	2303      	movs	r3, #3
 80132c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80132c2:	4623      	mov	r3, r4
 80132c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80132c8:	6023      	str	r3, [r4, #0]
 80132ca:	2301      	movs	r3, #1
 80132cc:	6063      	str	r3, [r4, #4]
 80132ce:	e7ee      	b.n	80132ae <_ungetc_r+0x102>
 80132d0:	08014654 	.word	0x08014654
 80132d4:	08014674 	.word	0x08014674
 80132d8:	08014634 	.word	0x08014634

080132dc <_write_r>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	4d07      	ldr	r5, [pc, #28]	; (80132fc <_write_r+0x20>)
 80132e0:	4604      	mov	r4, r0
 80132e2:	4608      	mov	r0, r1
 80132e4:	4611      	mov	r1, r2
 80132e6:	2200      	movs	r2, #0
 80132e8:	602a      	str	r2, [r5, #0]
 80132ea:	461a      	mov	r2, r3
 80132ec:	f7f0 ff68 	bl	80041c0 <_write>
 80132f0:	1c43      	adds	r3, r0, #1
 80132f2:	d102      	bne.n	80132fa <_write_r+0x1e>
 80132f4:	682b      	ldr	r3, [r5, #0]
 80132f6:	b103      	cbz	r3, 80132fa <_write_r+0x1e>
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	20000970 	.word	0x20000970

08013300 <__assert_func>:
 8013300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013302:	4614      	mov	r4, r2
 8013304:	461a      	mov	r2, r3
 8013306:	4b09      	ldr	r3, [pc, #36]	; (801332c <__assert_func+0x2c>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4605      	mov	r5, r0
 801330c:	68d8      	ldr	r0, [r3, #12]
 801330e:	b14c      	cbz	r4, 8013324 <__assert_func+0x24>
 8013310:	4b07      	ldr	r3, [pc, #28]	; (8013330 <__assert_func+0x30>)
 8013312:	9100      	str	r1, [sp, #0]
 8013314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013318:	4906      	ldr	r1, [pc, #24]	; (8013334 <__assert_func+0x34>)
 801331a:	462b      	mov	r3, r5
 801331c:	f000 f81e 	bl	801335c <fiprintf>
 8013320:	f000 f8dd 	bl	80134de <abort>
 8013324:	4b04      	ldr	r3, [pc, #16]	; (8013338 <__assert_func+0x38>)
 8013326:	461c      	mov	r4, r3
 8013328:	e7f3      	b.n	8013312 <__assert_func+0x12>
 801332a:	bf00      	nop
 801332c:	20000044 	.word	0x20000044
 8013330:	08014818 	.word	0x08014818
 8013334:	08014825 	.word	0x08014825
 8013338:	08014853 	.word	0x08014853

0801333c <_close_r>:
 801333c:	b538      	push	{r3, r4, r5, lr}
 801333e:	4d06      	ldr	r5, [pc, #24]	; (8013358 <_close_r+0x1c>)
 8013340:	2300      	movs	r3, #0
 8013342:	4604      	mov	r4, r0
 8013344:	4608      	mov	r0, r1
 8013346:	602b      	str	r3, [r5, #0]
 8013348:	f7f0 ff66 	bl	8004218 <_close>
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	d102      	bne.n	8013356 <_close_r+0x1a>
 8013350:	682b      	ldr	r3, [r5, #0]
 8013352:	b103      	cbz	r3, 8013356 <_close_r+0x1a>
 8013354:	6023      	str	r3, [r4, #0]
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	20000970 	.word	0x20000970

0801335c <fiprintf>:
 801335c:	b40e      	push	{r1, r2, r3}
 801335e:	b503      	push	{r0, r1, lr}
 8013360:	4601      	mov	r1, r0
 8013362:	ab03      	add	r3, sp, #12
 8013364:	4805      	ldr	r0, [pc, #20]	; (801337c <fiprintf+0x20>)
 8013366:	f853 2b04 	ldr.w	r2, [r3], #4
 801336a:	6800      	ldr	r0, [r0, #0]
 801336c:	9301      	str	r3, [sp, #4]
 801336e:	f7ff f88b 	bl	8012488 <_vfiprintf_r>
 8013372:	b002      	add	sp, #8
 8013374:	f85d eb04 	ldr.w	lr, [sp], #4
 8013378:	b003      	add	sp, #12
 801337a:	4770      	bx	lr
 801337c:	20000044 	.word	0x20000044

08013380 <_fstat_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4d07      	ldr	r5, [pc, #28]	; (80133a0 <_fstat_r+0x20>)
 8013384:	2300      	movs	r3, #0
 8013386:	4604      	mov	r4, r0
 8013388:	4608      	mov	r0, r1
 801338a:	4611      	mov	r1, r2
 801338c:	602b      	str	r3, [r5, #0]
 801338e:	f7f0 ff93 	bl	80042b8 <_fstat>
 8013392:	1c43      	adds	r3, r0, #1
 8013394:	d102      	bne.n	801339c <_fstat_r+0x1c>
 8013396:	682b      	ldr	r3, [r5, #0]
 8013398:	b103      	cbz	r3, 801339c <_fstat_r+0x1c>
 801339a:	6023      	str	r3, [r4, #0]
 801339c:	bd38      	pop	{r3, r4, r5, pc}
 801339e:	bf00      	nop
 80133a0:	20000970 	.word	0x20000970

080133a4 <_isatty_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4d06      	ldr	r5, [pc, #24]	; (80133c0 <_isatty_r+0x1c>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4604      	mov	r4, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	602b      	str	r3, [r5, #0]
 80133b0:	f7f0 fef0 	bl	8004194 <_isatty>
 80133b4:	1c43      	adds	r3, r0, #1
 80133b6:	d102      	bne.n	80133be <_isatty_r+0x1a>
 80133b8:	682b      	ldr	r3, [r5, #0]
 80133ba:	b103      	cbz	r3, 80133be <_isatty_r+0x1a>
 80133bc:	6023      	str	r3, [r4, #0]
 80133be:	bd38      	pop	{r3, r4, r5, pc}
 80133c0:	20000970 	.word	0x20000970

080133c4 <_lseek_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d07      	ldr	r5, [pc, #28]	; (80133e4 <_lseek_r+0x20>)
 80133c8:	4604      	mov	r4, r0
 80133ca:	4608      	mov	r0, r1
 80133cc:	4611      	mov	r1, r2
 80133ce:	2200      	movs	r2, #0
 80133d0:	602a      	str	r2, [r5, #0]
 80133d2:	461a      	mov	r2, r3
 80133d4:	f7f0 ff37 	bl	8004246 <_lseek>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_lseek_r+0x1e>
 80133dc:	682b      	ldr	r3, [r5, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_lseek_r+0x1e>
 80133e0:	6023      	str	r3, [r4, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	20000970 	.word	0x20000970

080133e8 <__ascii_mbtowc>:
 80133e8:	b082      	sub	sp, #8
 80133ea:	b901      	cbnz	r1, 80133ee <__ascii_mbtowc+0x6>
 80133ec:	a901      	add	r1, sp, #4
 80133ee:	b142      	cbz	r2, 8013402 <__ascii_mbtowc+0x1a>
 80133f0:	b14b      	cbz	r3, 8013406 <__ascii_mbtowc+0x1e>
 80133f2:	7813      	ldrb	r3, [r2, #0]
 80133f4:	600b      	str	r3, [r1, #0]
 80133f6:	7812      	ldrb	r2, [r2, #0]
 80133f8:	1e10      	subs	r0, r2, #0
 80133fa:	bf18      	it	ne
 80133fc:	2001      	movne	r0, #1
 80133fe:	b002      	add	sp, #8
 8013400:	4770      	bx	lr
 8013402:	4610      	mov	r0, r2
 8013404:	e7fb      	b.n	80133fe <__ascii_mbtowc+0x16>
 8013406:	f06f 0001 	mvn.w	r0, #1
 801340a:	e7f8      	b.n	80133fe <__ascii_mbtowc+0x16>

0801340c <memmove>:
 801340c:	4288      	cmp	r0, r1
 801340e:	b510      	push	{r4, lr}
 8013410:	eb01 0402 	add.w	r4, r1, r2
 8013414:	d902      	bls.n	801341c <memmove+0x10>
 8013416:	4284      	cmp	r4, r0
 8013418:	4623      	mov	r3, r4
 801341a:	d807      	bhi.n	801342c <memmove+0x20>
 801341c:	1e43      	subs	r3, r0, #1
 801341e:	42a1      	cmp	r1, r4
 8013420:	d008      	beq.n	8013434 <memmove+0x28>
 8013422:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013426:	f803 2f01 	strb.w	r2, [r3, #1]!
 801342a:	e7f8      	b.n	801341e <memmove+0x12>
 801342c:	4402      	add	r2, r0
 801342e:	4601      	mov	r1, r0
 8013430:	428a      	cmp	r2, r1
 8013432:	d100      	bne.n	8013436 <memmove+0x2a>
 8013434:	bd10      	pop	{r4, pc}
 8013436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801343a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801343e:	e7f7      	b.n	8013430 <memmove+0x24>

08013440 <_realloc_r>:
 8013440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013444:	4680      	mov	r8, r0
 8013446:	4614      	mov	r4, r2
 8013448:	460e      	mov	r6, r1
 801344a:	b921      	cbnz	r1, 8013456 <_realloc_r+0x16>
 801344c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013450:	4611      	mov	r1, r2
 8013452:	f7fc bb5b 	b.w	800fb0c <_malloc_r>
 8013456:	b92a      	cbnz	r2, 8013464 <_realloc_r+0x24>
 8013458:	f7fc faec 	bl	800fa34 <_free_r>
 801345c:	4625      	mov	r5, r4
 801345e:	4628      	mov	r0, r5
 8013460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013464:	f000 f842 	bl	80134ec <_malloc_usable_size_r>
 8013468:	4284      	cmp	r4, r0
 801346a:	4607      	mov	r7, r0
 801346c:	d802      	bhi.n	8013474 <_realloc_r+0x34>
 801346e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013472:	d812      	bhi.n	801349a <_realloc_r+0x5a>
 8013474:	4621      	mov	r1, r4
 8013476:	4640      	mov	r0, r8
 8013478:	f7fc fb48 	bl	800fb0c <_malloc_r>
 801347c:	4605      	mov	r5, r0
 801347e:	2800      	cmp	r0, #0
 8013480:	d0ed      	beq.n	801345e <_realloc_r+0x1e>
 8013482:	42bc      	cmp	r4, r7
 8013484:	4622      	mov	r2, r4
 8013486:	4631      	mov	r1, r6
 8013488:	bf28      	it	cs
 801348a:	463a      	movcs	r2, r7
 801348c:	f7fc fabc 	bl	800fa08 <memcpy>
 8013490:	4631      	mov	r1, r6
 8013492:	4640      	mov	r0, r8
 8013494:	f7fc face 	bl	800fa34 <_free_r>
 8013498:	e7e1      	b.n	801345e <_realloc_r+0x1e>
 801349a:	4635      	mov	r5, r6
 801349c:	e7df      	b.n	801345e <_realloc_r+0x1e>
	...

080134a0 <_read_r>:
 80134a0:	b538      	push	{r3, r4, r5, lr}
 80134a2:	4d07      	ldr	r5, [pc, #28]	; (80134c0 <_read_r+0x20>)
 80134a4:	4604      	mov	r4, r0
 80134a6:	4608      	mov	r0, r1
 80134a8:	4611      	mov	r1, r2
 80134aa:	2200      	movs	r2, #0
 80134ac:	602a      	str	r2, [r5, #0]
 80134ae:	461a      	mov	r2, r3
 80134b0:	f7f0 feda 	bl	8004268 <_read>
 80134b4:	1c43      	adds	r3, r0, #1
 80134b6:	d102      	bne.n	80134be <_read_r+0x1e>
 80134b8:	682b      	ldr	r3, [r5, #0]
 80134ba:	b103      	cbz	r3, 80134be <_read_r+0x1e>
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	bd38      	pop	{r3, r4, r5, pc}
 80134c0:	20000970 	.word	0x20000970

080134c4 <__ascii_wctomb>:
 80134c4:	b149      	cbz	r1, 80134da <__ascii_wctomb+0x16>
 80134c6:	2aff      	cmp	r2, #255	; 0xff
 80134c8:	bf85      	ittet	hi
 80134ca:	238a      	movhi	r3, #138	; 0x8a
 80134cc:	6003      	strhi	r3, [r0, #0]
 80134ce:	700a      	strbls	r2, [r1, #0]
 80134d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80134d4:	bf98      	it	ls
 80134d6:	2001      	movls	r0, #1
 80134d8:	4770      	bx	lr
 80134da:	4608      	mov	r0, r1
 80134dc:	4770      	bx	lr

080134de <abort>:
 80134de:	b508      	push	{r3, lr}
 80134e0:	2006      	movs	r0, #6
 80134e2:	f000 f833 	bl	801354c <raise>
 80134e6:	2001      	movs	r0, #1
 80134e8:	f000 f85c 	bl	80135a4 <_exit>

080134ec <_malloc_usable_size_r>:
 80134ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134f0:	1f18      	subs	r0, r3, #4
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	bfbc      	itt	lt
 80134f6:	580b      	ldrlt	r3, [r1, r0]
 80134f8:	18c0      	addlt	r0, r0, r3
 80134fa:	4770      	bx	lr

080134fc <_raise_r>:
 80134fc:	291f      	cmp	r1, #31
 80134fe:	b538      	push	{r3, r4, r5, lr}
 8013500:	4604      	mov	r4, r0
 8013502:	460d      	mov	r5, r1
 8013504:	d904      	bls.n	8013510 <_raise_r+0x14>
 8013506:	2316      	movs	r3, #22
 8013508:	6003      	str	r3, [r0, #0]
 801350a:	f04f 30ff 	mov.w	r0, #4294967295
 801350e:	bd38      	pop	{r3, r4, r5, pc}
 8013510:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013512:	b112      	cbz	r2, 801351a <_raise_r+0x1e>
 8013514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013518:	b94b      	cbnz	r3, 801352e <_raise_r+0x32>
 801351a:	4620      	mov	r0, r4
 801351c:	f000 f830 	bl	8013580 <_getpid_r>
 8013520:	462a      	mov	r2, r5
 8013522:	4601      	mov	r1, r0
 8013524:	4620      	mov	r0, r4
 8013526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801352a:	f000 b817 	b.w	801355c <_kill_r>
 801352e:	2b01      	cmp	r3, #1
 8013530:	d00a      	beq.n	8013548 <_raise_r+0x4c>
 8013532:	1c59      	adds	r1, r3, #1
 8013534:	d103      	bne.n	801353e <_raise_r+0x42>
 8013536:	2316      	movs	r3, #22
 8013538:	6003      	str	r3, [r0, #0]
 801353a:	2001      	movs	r0, #1
 801353c:	e7e7      	b.n	801350e <_raise_r+0x12>
 801353e:	2400      	movs	r4, #0
 8013540:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013544:	4628      	mov	r0, r5
 8013546:	4798      	blx	r3
 8013548:	2000      	movs	r0, #0
 801354a:	e7e0      	b.n	801350e <_raise_r+0x12>

0801354c <raise>:
 801354c:	4b02      	ldr	r3, [pc, #8]	; (8013558 <raise+0xc>)
 801354e:	4601      	mov	r1, r0
 8013550:	6818      	ldr	r0, [r3, #0]
 8013552:	f7ff bfd3 	b.w	80134fc <_raise_r>
 8013556:	bf00      	nop
 8013558:	20000044 	.word	0x20000044

0801355c <_kill_r>:
 801355c:	b538      	push	{r3, r4, r5, lr}
 801355e:	4d07      	ldr	r5, [pc, #28]	; (801357c <_kill_r+0x20>)
 8013560:	2300      	movs	r3, #0
 8013562:	4604      	mov	r4, r0
 8013564:	4608      	mov	r0, r1
 8013566:	4611      	mov	r1, r2
 8013568:	602b      	str	r3, [r5, #0]
 801356a:	f000 f813 	bl	8013594 <_kill>
 801356e:	1c43      	adds	r3, r0, #1
 8013570:	d102      	bne.n	8013578 <_kill_r+0x1c>
 8013572:	682b      	ldr	r3, [r5, #0]
 8013574:	b103      	cbz	r3, 8013578 <_kill_r+0x1c>
 8013576:	6023      	str	r3, [r4, #0]
 8013578:	bd38      	pop	{r3, r4, r5, pc}
 801357a:	bf00      	nop
 801357c:	20000970 	.word	0x20000970

08013580 <_getpid_r>:
 8013580:	f000 b800 	b.w	8013584 <_getpid>

08013584 <_getpid>:
 8013584:	4b02      	ldr	r3, [pc, #8]	; (8013590 <_getpid+0xc>)
 8013586:	2258      	movs	r2, #88	; 0x58
 8013588:	601a      	str	r2, [r3, #0]
 801358a:	f04f 30ff 	mov.w	r0, #4294967295
 801358e:	4770      	bx	lr
 8013590:	20000970 	.word	0x20000970

08013594 <_kill>:
 8013594:	4b02      	ldr	r3, [pc, #8]	; (80135a0 <_kill+0xc>)
 8013596:	2258      	movs	r2, #88	; 0x58
 8013598:	601a      	str	r2, [r3, #0]
 801359a:	f04f 30ff 	mov.w	r0, #4294967295
 801359e:	4770      	bx	lr
 80135a0:	20000970 	.word	0x20000970

080135a4 <_exit>:
 80135a4:	e7fe      	b.n	80135a4 <_exit>
	...

080135a8 <_init>:
 80135a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135aa:	bf00      	nop
 80135ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ae:	bc08      	pop	{r3}
 80135b0:	469e      	mov	lr, r3
 80135b2:	4770      	bx	lr

080135b4 <_fini>:
 80135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b6:	bf00      	nop
 80135b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135ba:	bc08      	pop	{r3}
 80135bc:	469e      	mov	lr, r3
 80135be:	4770      	bx	lr
