
stmChild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08012378  08012378  00022378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f1c  08012f1c  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08012f1c  08012f1c  00022f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f24  08012f24  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f24  08012f24  00022f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f28  08012f28  00022f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012f2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000218  08013144  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007bc  08013144  000307bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d34  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005108  00000000  00000000  00055f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0005b088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001980  00000000  00000000  0005cc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226d7  00000000  00000000  0005e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002886a  00000000  00000000  00080c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c38ff  00000000  00000000  000a9501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ce00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c90  00000000  00000000  0016ce50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00175ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00175b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012360 	.word	0x08012360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012360 	.word	0x08012360

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <encodeMeasurementData>:
 */


#include "DataHandling.h"

void encodeMeasurementData(struct measurementData* data, uint8_t dataArray[], uint8_t* dataSize){
 8000ff8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ffc:	b0b8      	sub	sp, #224	; 0xe0
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8001004:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001008:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94

	uint64_t measurementValue = 0;//data->measurementTime;
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	uint8_t depthSign = (data->depthValue>0);
 8001018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bfcc      	ite	gt
 8001022:	2301      	movgt	r3, #1
 8001024:	2300      	movle	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	uint64_t depthValue = data->depthValue>0?data->depthValue:data->depthValue*-1;
 800102c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	bfb8      	it	lt
 8001036:	425b      	neglt	r3, r3
 8001038:	17da      	asrs	r2, r3, #31
 800103a:	653b      	str	r3, [r7, #80]	; 0x50
 800103c:	657a      	str	r2, [r7, #84]	; 0x54
 800103e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001042:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	measurementValue = measurementValue|(((uint64_t)depthSign)<<depthValueSignShift);
 8001046:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800104a:	2200      	movs	r2, #0
 800104c:	4698      	mov	r8, r3
 800104e:	4691      	mov	r9, r2
 8001050:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001054:	ea42 0a08 	orr.w	sl, r2, r8
 8001058:	ea43 0b09 	orr.w	fp, r3, r9
 800105c:	e9c7 ab34 	strd	sl, fp, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((depthValue)<<depthValueShift);
 8001060:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001064:	1891      	adds	r1, r2, r2
 8001066:	64b9      	str	r1, [r7, #72]	; 0x48
 8001068:	415b      	adcs	r3, r3
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800106c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001070:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001074:	ea42 0600 	orr.w	r6, r2, r0
 8001078:	643e      	str	r6, [r7, #64]	; 0x40
 800107a:	430b      	orrs	r3, r1
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
 800107e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001082:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	measurementValue = measurementValue|(((uint64_t)data->waterPressureValue)<<waterPressureShift);
 8001086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	17da      	asrs	r2, r3, #31
 800108e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001092:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001096:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800109a:	460b      	mov	r3, r1
 800109c:	14dd      	asrs	r5, r3, #19
 800109e:	460b      	mov	r3, r1
 80010a0:	035c      	lsls	r4, r3, #13
 80010a2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80010a6:	ea42 0104 	orr.w	r1, r2, r4
 80010aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80010ac:	432b      	orrs	r3, r5
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80010b4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	uint8_t temperatureSign = (data->surfaceTemperatureValue>0);
 80010b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	bfcc      	ite	gt
 80010c2:	2301      	movgt	r3, #1
 80010c4:	2300      	movle	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	uint64_t temperatureValue = data->surfaceTemperatureValue>0?data->surfaceTemperatureValue:data->surfaceTemperatureValue*-1;
 80010cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bfb8      	it	lt
 80010d6:	425b      	neglt	r3, r3
 80010d8:	17da      	asrs	r2, r3, #31
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
 80010dc:	637a      	str	r2, [r7, #52]	; 0x34
 80010de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80010e2:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	measurementValue = measurementValue|(((uint64_t)temperatureSign)<<surfaceTemperatureSignShift);
 80010e6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80010ea:	2200      	movs	r2, #0
 80010ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80010ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80010f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80010f4:	460b      	mov	r3, r1
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	677b      	str	r3, [r7, #116]	; 0x74
 80010fa:	460b      	mov	r3, r1
 80010fc:	079b      	lsls	r3, r3, #30
 80010fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001100:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001104:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001108:	4621      	mov	r1, r4
 800110a:	4311      	orrs	r1, r2
 800110c:	62b9      	str	r1, [r7, #40]	; 0x28
 800110e:	4629      	mov	r1, r5
 8001110:	4319      	orrs	r1, r3
 8001112:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001114:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001118:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((temperatureValue)<<surfaceTemperatureShift);
 800111c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001120:	105b      	asrs	r3, r3, #1
 8001122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001128:	07db      	lsls	r3, r3, #31
 800112a:	66bb      	str	r3, [r7, #104]	; 0x68
 800112c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001130:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001134:	4621      	mov	r1, r4
 8001136:	4311      	orrs	r1, r2
 8001138:	6239      	str	r1, [r7, #32]
 800113a:	4629      	mov	r1, r5
 800113c:	4319      	orrs	r1, r3
 800113e:	6279      	str	r1, [r7, #36]	; 0x24
 8001140:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001144:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	uint8_t undergroundTemperatureSign = (data->undergroundTemperatureValue>0);
 8001148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfcc      	ite	gt
 8001152:	2301      	movgt	r3, #1
 8001154:	2300      	movle	r3, #0
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	uint64_t undergroundTemperatureValue = data->undergroundTemperatureValue>0?data->undergroundTemperatureValue:data->undergroundTemperatureValue*-1;
 800115c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	bfb8      	it	lt
 8001166:	425b      	neglt	r3, r3
 8001168:	17da      	asrs	r2, r3, #31
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	61fa      	str	r2, [r7, #28]
 800116e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001172:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	measurementValue = measurementValue|(((uint64_t)undergroundTemperatureSign)<<undergroundTemperatureSignShift);
 8001176:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800117a:	2200      	movs	r2, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
 800117e:	667a      	str	r2, [r7, #100]	; 0x64
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800118a:	02cb      	lsls	r3, r1, #11
 800118c:	2200      	movs	r2, #0
 800118e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001192:	ea40 0402 	orr.w	r4, r0, r2
 8001196:	613c      	str	r4, [r7, #16]
 8001198:	430b      	orrs	r3, r1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80011a0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	measurementValue = measurementValue|((undergroundTemperatureValue)<<undergroundTemperatureShift);
 80011a4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	0303      	lsls	r3, r0, #12
 80011b2:	2200      	movs	r2, #0
 80011b4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80011b8:	ea40 0402 	orr.w	r4, r0, r2
 80011bc:	60bc      	str	r4, [r7, #8]
 80011be:	430b      	orrs	r3, r1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011c6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	measurementValue =  measurementValue|(((uint64_t)data->batteryStatus)<<batteryStatusShift);
 80011ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	17da      	asrs	r2, r3, #31
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80011d4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011e0:	060b      	lsls	r3, r1, #24
 80011e2:	2200      	movs	r2, #0
 80011e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80011e8:	ea40 0402 	orr.w	r4, r0, r2
 80011ec:	603c      	str	r4, [r7, #0]
 80011ee:	430b      	orrs	r3, r1
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011f6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

	int iterator = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i = 0;i<=overallDataBitSize;i+=8){
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001206:	e02e      	b.n	8001266 <encodeMeasurementData+0x26e>
		dataArray[iterator] = (measurementValue>>(i))&0xFF;
 8001208:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800120c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001210:	f1c1 0420 	rsb	r4, r1, #32
 8001214:	f1a1 0020 	sub.w	r0, r1, #32
 8001218:	fa22 f501 	lsr.w	r5, r2, r1
 800121c:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8001220:	fa03 f404 	lsl.w	r4, r3, r4
 8001224:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8001228:	4325      	orrs	r5, r4
 800122a:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 800122e:	fa23 f000 	lsr.w	r0, r3, r0
 8001232:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8001236:	4304      	orrs	r4, r0
 8001238:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800123c:	40cb      	lsrs	r3, r1
 800123e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001246:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800124a:	4413      	add	r3, r2
 800124c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001250:	701a      	strb	r2, [r3, #0]
		iterator++;
 8001252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001256:	3301      	adds	r3, #1
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	for(int i = 0;i<=overallDataBitSize;i+=8){
 800125c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001260:	3308      	adds	r3, #8
 8001262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800126a:	2b38      	cmp	r3, #56	; 0x38
 800126c:	ddcc      	ble.n	8001208 <encodeMeasurementData+0x210>
	}

	*dataSize = iterator;
 800126e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001272:	b2da      	uxtb	r2, r3
 8001274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001278:	701a      	strb	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	37e0      	adds	r7, #224	; 0xe0
 800127e:	46bd      	mov	sp, r7
 8001280:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001284:	4770      	bx	lr
	...

08001288 <Flash_Write_Data>:
 */

#include "../Inc/FlashMemoryAccess.h"

uint32_t Flash_Write_Data (uint32_t startAddress, uint64_t *data, int numberOfWords)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]

	uint32_t address = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61bb      	str	r3, [r7, #24]

	address = startAddress;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	61bb      	str	r3, [r7, #24]


	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80012a0:	f005 ff28 	bl	80070f4 <HAL_FLASH_Unlock>
	   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80012a4:	4b29      	ldr	r3, [pc, #164]	; (800134c <Flash_Write_Data+0xc4>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <Flash_Write_Data+0xc4>)
 80012aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <Flash_Write_Data+0xc4>)
 80012b2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80012b6:	611a      	str	r2, [r3, #16]

	   /* Erase the user Flash area*/
	   if(address<FLASH_BASE || address>FLASH_END-FLASH_PAGE_SIZE) return 0;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012be:	d303      	bcc.n	80012c8 <Flash_Write_Data+0x40>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <Flash_Write_Data+0xc8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d301      	bcc.n	80012cc <Flash_Write_Data+0x44>
 80012c8:	2300      	movs	r3, #0
 80012ca:	e03a      	b.n	8001342 <Flash_Write_Data+0xba>

	   //uint32_t StartPage = (StartAddress-FLASH_BASE)/FLASH_PAGE_SIZE;
	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80012cc:	4b21      	ldr	r3, [pc, #132]	; (8001354 <Flash_Write_Data+0xcc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.Page = (address-FLASH_BASE)/FLASH_PAGE_SIZE;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80012d8:	0adb      	lsrs	r3, r3, #11
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <Flash_Write_Data+0xcc>)
 80012dc:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages = 2;//(numberOfWords/FLASH_PAGE_SIZE) +1;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <Flash_Write_Data+0xcc>)
 80012e0:	2202      	movs	r2, #2
 80012e2:	60da      	str	r2, [r3, #12]
	   EraseInitStruct.Banks = FLASH_BANK_1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <Flash_Write_Data+0xcc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	605a      	str	r2, [r3, #4]
	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <Flash_Write_Data+0xcc>)
 80012f2:	f005 fff1 	bl	80072d8 <HAL_FLASHEx_Erase>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d01b      	beq.n	8001334 <Flash_Write_Data+0xac>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 80012fc:	f005 ff2c 	bl	8007158 <HAL_FLASH_GetError>
 8001300:	4603      	mov	r3, r0
 8001302:	e01e      	b.n	8001342 <Flash_Write_Data+0xba>
	   }

	   /* Program the user Flash area word by word*/
	 while (sofar<numberOfWords)
	 {
		 if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data[sofar]) == HAL_OK)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	69b9      	ldr	r1, [r7, #24]
 8001312:	2000      	movs	r0, #0
 8001314:	f005 fe82 	bl	800701c <HAL_FLASH_Program>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <Flash_Write_Data+0xa4>
		 {
			 address += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	3308      	adds	r3, #8
 8001322:	61bb      	str	r3, [r7, #24]
			 sofar++;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e003      	b.n	8001334 <Flash_Write_Data+0xac>
		 }
		 else{
		     /* Error occurred while writing data in Flash memory*/
			 return HAL_FLASH_GetError ();
 800132c:	f005 ff14 	bl	8007158 <HAL_FLASH_GetError>
 8001330:	4603      	mov	r3, r0
 8001332:	e006      	b.n	8001342 <Flash_Write_Data+0xba>
	 while (sofar<numberOfWords)
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbe3      	blt.n	8001304 <Flash_Write_Data+0x7c>
		 }
	 }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800133c:	f005 fefc 	bl	8007138 <HAL_FLASH_Lock>

	   return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000
 8001350:	0801f800 	.word	0x0801f800
 8001354:	20000234 	.word	0x20000234

08001358 <Flash_Read_Data>:

void Flash_Read_Data (uint32_t StartPageAddress, uint64_t *RxBuf, uint16_t numberofwords)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	4613      	mov	r3, r2
 8001364:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	e9c1 2300 	strd	r2, r3, [r1]
		StartPageAddress += 8;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3308      	adds	r3, #8
 8001376:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3308      	adds	r3, #8
 800137c:	60bb      	str	r3, [r7, #8]
		numberofwords--;
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	3b01      	subs	r3, #1
 8001382:	80fb      	strh	r3, [r7, #6]
		if (!(numberofwords)) break;
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d000      	beq.n	800138c <Flash_Read_Data+0x34>
		*RxBuf = *(__IO uint64_t *)StartPageAddress;
 800138a:	e7ec      	b.n	8001366 <Flash_Read_Data+0xe>
		if (!(numberofwords)) break;
 800138c:	bf00      	nop
	}
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <performDepthMeasurement>:

#include <ManagementChild.h>
#include "../Inc/FlashMemoryAccess.h"
#include "main.h"

void performDepthMeasurement(ADC_HandleTypeDef*  handle1, ADC_HandleTypeDef*  handle2, struct measurementData* data){
 800139c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a0:	b0a8      	sub	sp, #160	; 0xa0
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80013a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80013a8:	627a      	str	r2, [r7, #36]	; 0x24

	ADC_ChannelConfTypeDef sConfig = {0};
 80013aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ae:	2300      	movs	r3, #0
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	6053      	str	r3, [r2, #4]
 80013b4:	6093      	str	r3, [r2, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
 80013b8:	6113      	str	r3, [r2, #16]
 80013ba:	6153      	str	r3, [r2, #20]
	sConfig.Channel = ADC_CHANNEL_5;
 80013bc:	4b55      	ldr	r3, [pc, #340]	; (8001514 <performDepthMeasurement+0x178>)
 80013be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ce:	237f      	movs	r3, #127	; 0x7f
 80013d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013d4:	2304      	movs	r3, #4
 80013d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  sConfig.Offset = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  if (HAL_ADC_ConfigChannel(handle1, &sConfig) != HAL_OK)
 80013e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80013e4:	4619      	mov	r1, r3
 80013e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013e8:	f004 fe20 	bl	800602c <HAL_ADC_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <performDepthMeasurement+0x5a>
	  {
		Error_Handler();
 80013f2:	f001 fadf 	bl	80029b4 <Error_Handler>
	  }

	uint64_t supportVariables[numberOfDepthVariables];
	Flash_Read_Data(depthVariablesStartAddr, supportVariables, numberOfDepthVariables);
 80013f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013fa:	2207      	movs	r2, #7
 80013fc:	4619      	mov	r1, r3
 80013fe:	4846      	ldr	r0, [pc, #280]	; (8001518 <performDepthMeasurement+0x17c>)
 8001400:	f7ff ffaa 	bl	8001358 <Flash_Read_Data>

	//printf("\r\nDoing depth Measurement");

	struct DepthData depthData;

	depthData.pos = ((int)supportVariables[0]);
 8001404:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001408:	4613      	mov	r3, r2
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
	depthData.output1 = ((int)supportVariables[1]);
 800140c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001410:	4613      	mov	r3, r2
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
	depthData.output2 = ((int)supportVariables[2]);
 8001414:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001418:	4613      	mov	r3, r2
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
	depthData.max_value_1 = ((int)supportVariables[3]);
 800141c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001420:	4613      	mov	r3, r2
 8001422:	643b      	str	r3, [r7, #64]	; 0x40
	depthData.min_value_1 = ((int)supportVariables[4]);
 8001424:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001428:	4613      	mov	r3, r2
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
	depthData.max_value_2 = ((int)supportVariables[5]);
 800142c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001430:	4613      	mov	r3, r2
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
	depthData.min_value_2 = ((int)supportVariables[6]);
 8001434:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001438:	4613      	mov	r3, r2
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c

	//printf("\r\nstored data: %d, %d, %d, %d, %d, %d, %d", depthData.pos, depthData.output1, depthData.output2, depthData.max_value_1, depthData.min_value_1, depthData.max_value_2, depthData.min_value_2);
	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_SET); // depth activation pin
 800143c:	2201      	movs	r2, #1
 800143e:	2180      	movs	r1, #128	; 0x80
 8001440:	4836      	ldr	r0, [pc, #216]	; (800151c <performDepthMeasurement+0x180>)
 8001442:	f006 f9f7 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	; 0x64
 8001448:	f004 f854 	bl	80054f4 <HAL_Delay>

	calculateDistance(handle1, handle2, &depthData);
 800144c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001450:	461a      	mov	r2, r3
 8001452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001456:	f001 fea1 	bl	800319c <calculateDistance>

	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET); // depth
 800145a:	2200      	movs	r2, #0
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	482f      	ldr	r0, [pc, #188]	; (800151c <performDepthMeasurement+0x180>)
 8001460:	f006 f9e8 	bl	8007834 <HAL_GPIO_WritePin>

	data->depthValue = 100*(((float)depthData.pos)/35);
 8001464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001466:	ee07 3a90 	vmov	s15, r3
 800146a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800146e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001520 <performDepthMeasurement+0x184>
 8001472:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001476:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001524 <performDepthMeasurement+0x188>
 800147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 2a90 	vmov	r2, s15
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	601a      	str	r2, [r3, #0]

	printf("\r\nCalculated distance: %d", data->depthValue);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <performDepthMeasurement+0x18c>)
 8001492:	f00c fb7b 	bl	800db8c <iprintf>
	supportVariables[0] = (uint64_t)(depthData.pos);
 8001496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	461c      	mov	r4, r3
 800149c:	4615      	mov	r5, r2
 800149e:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	supportVariables[1] = (uint64_t)(depthData.output1);
 80014a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a4:	17da      	asrs	r2, r3, #31
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	61fa      	str	r2, [r7, #28]
 80014aa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80014ae:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	supportVariables[2] = (uint64_t)(depthData.output2);
 80014b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	617a      	str	r2, [r7, #20]
 80014ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80014be:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	supportVariables[3] = (uint64_t)(depthData.max_value_1);
 80014c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c4:	17da      	asrs	r2, r3, #31
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	60fa      	str	r2, [r7, #12]
 80014ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	supportVariables[4] = (uint64_t)(depthData.min_value_1);
 80014d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014d4:	17da      	asrs	r2, r3, #31
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014de:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
	supportVariables[5] = (uint64_t)(depthData.max_value_2);
 80014e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e4:	17da      	asrs	r2, r3, #31
 80014e6:	469a      	mov	sl, r3
 80014e8:	4693      	mov	fp, r2
 80014ea:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	supportVariables[6] = (uint64_t)(depthData.min_value_2);
 80014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f0:	17da      	asrs	r2, r3, #31
 80014f2:	4698      	mov	r8, r3
 80014f4:	4691      	mov	r9, r2
 80014f6:	e9c7 8920 	strd	r8, r9, [r7, #128]	; 0x80

	//printf("\r\new data: %d, %d, %d, %d, %d, %d, %d", depthData.pos, depthData.output1, depthData.output2, depthData.max_value_1, depthData.min_value_1, depthData.max_value_2, depthData.min_value_2);

	Flash_Write_Data(depthVariablesStartAddr, supportVariables, numberOfDepthVariables);
 80014fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014fe:	2207      	movs	r2, #7
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <performDepthMeasurement+0x17c>)
 8001504:	f7ff fec0 	bl	8001288 <Flash_Write_Data>

}
 8001508:	bf00      	nop
 800150a:	37a0      	adds	r7, #160	; 0xa0
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001512:	bf00      	nop
 8001514:	14f00020 	.word	0x14f00020
 8001518:	0801a000 	.word	0x0801a000
 800151c:	48000400 	.word	0x48000400
 8001520:	420c0000 	.word	0x420c0000
 8001524:	42c80000 	.word	0x42c80000
 8001528:	08012378 	.word	0x08012378

0800152c <performPressureMeasurement>:

void performPressureMeasurement(I2C_HandleTypeDef* handle, struct measurementData* data){
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_SET); //pressure activation pin
 8001536:	2201      	movs	r2, #1
 8001538:	2180      	movs	r1, #128	; 0x80
 800153a:	4843      	ldr	r0, [pc, #268]	; (8001648 <performPressureMeasurement+0x11c>)
 800153c:	f006 f97a 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f003 ffd7 	bl	80054f4 <HAL_Delay>

	lps28dfw_info_t sensorInfo1;
	sensorInfo1.handle = handle;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	613b      	str	r3, [r7, #16]

	if(beginLPS28(&sensorInfo1, LPS28DFW_I2C_ADDRESS_DEFAULT) == LPS28DFW_OK)
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	215c      	movs	r1, #92	; 0x5c
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f987 	bl	8003864 <beginLPS28>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d168      	bne.n	800162e <performPressureMeasurement+0x102>
	{

		lps28dfw_md_t modeConfig =
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <performPressureMeasurement+0x120>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	60fb      	str	r3, [r7, #12]
			.odr = odr_LPS28DFW_4Hz,         // Output data rate
			.avg = avg_LPS28DFW_512_AVG,      // Average filter
			.lpf = lpf_LPS28DFW_LPF_ODR_DIV_9 // Low-pass filter
		};

		setModeConfig(&sensorInfo1, &modeConfig);
 8001562:	f107 020c 	add.w	r2, r7, #12
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f9ce 	bl	800390e <setModeConfig>
		HAL_Delay(100);
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f003 ffbe 	bl	80054f4 <HAL_Delay>

		double runnningValue = 0;
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		for(int i = 0;i<4;i++){
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001588:	e018      	b.n	80015bc <performPressureMeasurement+0x90>
			getSensorData(&sensorInfo1);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fb6a 	bl	8003c68 <getSensorData>
			runnningValue += sensorInfo1.data.pressure.hpa;
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015a4:	f7fe fe72 	bl	800028c <__adddf3>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			HAL_Delay(250);
 80015b0:	20fa      	movs	r0, #250	; 0xfa
 80015b2:	f003 ff9f 	bl	80054f4 <HAL_Delay>
		for(int i = 0;i<4;i++){
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	3301      	adds	r3, #1
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	2b03      	cmp	r3, #3
 80015c0:	dde3      	ble.n	800158a <performPressureMeasurement+0x5e>
		}
		runnningValue = runnningValue/4;
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <performPressureMeasurement+0x124>)
 80015c8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015cc:	f7ff f93e 	bl	800084c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		data->undergroundTemperatureValue = (uint16_t)(sensorInfo1.data.heat.deg_c*100);
 80015d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80015dc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001654 <performPressureMeasurement+0x128>
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e8:	ee17 3a90 	vmov	r3, s15
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	60da      	str	r2, [r3, #12]

		data->waterPressureValue = (uint32_t)(runnningValue*100);
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <performPressureMeasurement+0x12c>)
 80015fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015fe:	f7fe fffb 	bl	80005f8 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff facd 	bl	8000ba8 <__aeabi_d2uiz>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	605a      	str	r2, [r3, #4]

		printf("\r\n Measured pressure: %d", data->waterPressureValue);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4619      	mov	r1, r3
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <performPressureMeasurement+0x130>)
 800161e:	f00c fab5 	bl	800db8c <iprintf>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <performPressureMeasurement+0x11c>)
 8001628:	f006 f904 	bl	8007834 <HAL_GPIO_WritePin>
 800162c:	e002      	b.n	8001634 <performPressureMeasurement+0x108>
	}
	else{

		printf("\r\nCould not connect to pressure sensor");
 800162e:	480c      	ldr	r0, [pc, #48]	; (8001660 <performPressureMeasurement+0x134>)
 8001630:	f00c faac 	bl	800db8c <iprintf>

	}

	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <performPressureMeasurement+0x11c>)
 800163a:	f006 f8fb 	bl	8007834 <HAL_GPIO_WritePin>

}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	48000400 	.word	0x48000400
 800164c:	080123d8 	.word	0x080123d8
 8001650:	40100000 	.word	0x40100000
 8001654:	42c80000 	.word	0x42c80000
 8001658:	40590000 	.word	0x40590000
 800165c:	08012394 	.word	0x08012394
 8001660:	080123b0 	.word	0x080123b0

08001664 <performTemperatureMeasurement>:

void performTemperatureMeasurement(SPI_HandleTypeDef* handle, struct measurementData* data){
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_SET); //temperature activation pin
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	482b      	ldr	r0, [pc, #172]	; (8001720 <performTemperatureMeasurement+0xbc>)
 8001674:	f006 f8de 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001678:	2064      	movs	r0, #100	; 0x64
 800167a:	f003 ff3b 	bl	80054f4 <HAL_Delay>

	configureSensor(handle);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f003 fe66 	bl	8005350 <configureSensor>

	double runnningValue = 0;
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0;i<4;i++){
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e012      	b.n	80016bc <performTemperatureMeasurement+0x58>
		runnningValue += getTemperatureVal(handle);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f003 fe6a 	bl	8005370 <getTemperatureVal>
 800169c:	ec53 2b10 	vmov	r2, r3, d0
 80016a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a4:	f7fe fdf2 	bl	800028c <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
		HAL_Delay(100);
 80016b0:	2064      	movs	r0, #100	; 0x64
 80016b2:	f003 ff1f 	bl	80054f4 <HAL_Delay>
	for(int i = 0;i<4;i++){
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	dde9      	ble.n	8001696 <performTemperatureMeasurement+0x32>
	}
	runnningValue = runnningValue/4;
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <performTemperatureMeasurement+0xc0>)
 80016c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016cc:	f7ff f8be 	bl	800084c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	data->surfaceTemperatureValue = (uint16_t)(runnningValue*100);
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <performTemperatureMeasurement+0xc4>)
 80016de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff fa5b 	bl	8000ba8 <__aeabi_d2uiz>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	609a      	str	r2, [r3, #8]

	printf("\r\nMeasured temperature: %f", getTemperatureVal(handle));
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f003 fe37 	bl	8005370 <getTemperatureVal>
 8001702:	ec53 2b10 	vmov	r2, r3, d0
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <performTemperatureMeasurement+0xc8>)
 8001708:	f00c fa40 	bl	800db8c <iprintf>

	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <performTemperatureMeasurement+0xbc>)
 8001712:	f006 f88f 	bl	8007834 <HAL_GPIO_WritePin>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	48000400 	.word	0x48000400
 8001724:	40100000 	.word	0x40100000
 8001728:	40590000 	.word	0x40590000
 800172c:	080123dc 	.word	0x080123dc

08001730 <checkBattery>:

void checkBattery(ADC_HandleTypeDef* adcHandle1, struct measurementData* data){
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b08b      	sub	sp, #44	; 0x2c
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]

	printf("\r\nChecking battery");
 800173a:	483d      	ldr	r0, [pc, #244]	; (8001830 <checkBattery+0x100>)
 800173c:	f00c fa26 	bl	800db8c <iprintf>

	//HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET); //rf activation pin
	HAL_Delay(100);
 8001740:	2064      	movs	r0, #100	; 0x64
 8001742:	f003 fed7 	bl	80054f4 <HAL_Delay>

	ADC_ChannelConfTypeDef sConfig = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_6;
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <checkBattery+0x104>)
 800175a:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 800175c:	2306      	movs	r3, #6
 800175e:	60fb      	str	r3, [r7, #12]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001764:	237f      	movs	r3, #127	; 0x7f
 8001766:	617b      	str	r3, [r7, #20]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001768:	2304      	movs	r3, #4
 800176a:	61bb      	str	r3, [r7, #24]
	  sConfig.Offset = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
	  if (HAL_ADC_ConfigChannel(adcHandle1, &sConfig) != HAL_OK)
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4619      	mov	r1, r3
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f004 fc58 	bl	800602c <HAL_ADC_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <checkBattery+0x56>
	  {
		Error_Handler();
 8001782:	f001 f917 	bl	80029b4 <Error_Handler>
	  }

	HAL_ADC_Start(adcHandle1);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f004 fa7c 	bl	8005c84 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(adcHandle1, 0xFFFF);
 800178c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f004 fb65 	bl	8005e60 <HAL_ADC_PollForConversion>
	 uint16_t ADC_value = HAL_ADC_GetValue(adcHandle1);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f004 fc3a 	bl	8006010 <HAL_ADC_GetValue>
 800179c:	4603      	mov	r3, r0
 800179e:	84fb      	strh	r3, [r7, #38]	; 0x26
	 float voltage = ((ADC_value /4096.0) * Vref);
 80017a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe febe 	bl	8000524 <__aeabi_i2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <checkBattery+0x108>)
 80017ae:	f7ff f84d 	bl	800084c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	a319      	add	r3, pc, #100	; (adr r3, 8001820 <checkBattery+0xf0>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff1a 	bl	80005f8 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa0c 	bl	8000be8 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	623b      	str	r3, [r7, #32]
	 printf("ADC=%hu, Voltage= %.2f\r\n", ADC_value, voltage);
 80017d4:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80017d6:	6a38      	ldr	r0, [r7, #32]
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4621      	mov	r1, r4
 80017e2:	4816      	ldr	r0, [pc, #88]	; (800183c <checkBattery+0x10c>)
 80017e4:	f00c f9d2 	bl	800db8c <iprintf>
	 HAL_Delay(100);
 80017e8:	2064      	movs	r0, #100	; 0x64
 80017ea:	f003 fe83 	bl	80054f4 <HAL_Delay>
	 /*if the ADC pin detects a higher voltage turn on at second battery terminal*/
	 /*comm pin*/

	 //HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);

	if (voltage > VOLTAGE_THRESHOLD){
 80017ee:	6a38      	ldr	r0, [r7, #32]
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	a30c      	add	r3, pc, #48	; (adr r3, 8001828 <checkBattery+0xf8>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7ff f98d 	bl	8000b18 <__aeabi_dcmpgt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <checkBattery+0xe2>
		 printf("First battery dead");
 8001804:	480e      	ldr	r0, [pc, #56]	; (8001840 <checkBattery+0x110>)
 8001806:	f00c f9c1 	bl	800db8c <iprintf>
		 data->batteryStatus = 0;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	e002      	b.n	8001818 <checkBattery+0xe8>
	}
	 else{
		 printf("first battery ok");
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <checkBattery+0x114>)
 8001814:	f00c f9ba 	bl	800db8c <iprintf>

	if(data->batteryStatus==0){

	}

}
 8001818:	bf00      	nop
 800181a:	372c      	adds	r7, #44	; 0x2c
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	66666666 	.word	0x66666666
 8001824:	400a6666 	.word	0x400a6666
 8001828:	66666666 	.word	0x66666666
 800182c:	40066666 	.word	0x40066666
 8001830:	080123f8 	.word	0x080123f8
 8001834:	19200040 	.word	0x19200040
 8001838:	40b00000 	.word	0x40b00000
 800183c:	0801240c 	.word	0x0801240c
 8001840:	08012428 	.word	0x08012428
 8001844:	0801243c 	.word	0x0801243c

08001848 <setRfListening>:


void setRfListening(struct measurementData* data, struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b0a1      	sub	sp, #132	; 0x84
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET); //rf activation pin
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185a:	488a      	ldr	r0, [pc, #552]	; (8001a84 <setRfListening+0x23c>)
 800185c:	f005 ffea 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001860:	2064      	movs	r0, #100	; 0x64
 8001862:	f003 fe47 	bl	80054f4 <HAL_Delay>

	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 8001866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800186a:	2205      	movs	r2, #5
 800186c:	4619      	mov	r1, r3
 800186e:	4886      	ldr	r0, [pc, #536]	; (8001a88 <setRfListening+0x240>)
 8001870:	f7ff fd72 	bl	8001358 <Flash_Read_Data>

	init_comms(rfData, DEVICE_CHILD, managementBuf[0], managementBuf[3]);
 8001874:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001878:	4611      	mov	r1, r2
 800187a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800187e:	4613      	mov	r3, r2
 8001880:	460a      	mov	r2, r1
 8001882:	2199      	movs	r1, #153	; 0x99
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f002 fa1c 	bl	8003cc2 <init_comms>

	rfData->activeTxMessage[MSG_TO_ID_POS] = managementBuf[1];
 800188a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

	printf("\r\nmeasurement data to send: %d, %d, %d, %d", data->depthValue, data->waterPressureValue, data->surfaceTemperatureValue, data->undergroundTemperatureValue, data->batteryStatus);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6819      	ldr	r1, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6858      	ldr	r0, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689c      	ldr	r4, [r3, #8]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6912      	ldr	r2, [r2, #16]
 80018aa:	9201      	str	r2, [sp, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	4623      	mov	r3, r4
 80018b0:	4602      	mov	r2, r0
 80018b2:	4876      	ldr	r0, [pc, #472]	; (8001a8c <setRfListening+0x244>)
 80018b4:	f00c f96a 	bl	800db8c <iprintf>
	uint8_t encodedDataSize = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t encodedData[20];
	encodeMeasurementData(data, encodedData, &encodedDataSize);
 80018be:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80018c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018c6:	4619      	mov	r1, r3
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff fb95 	bl	8000ff8 <encodeMeasurementData>

	for(int i = 0;i<encodedDataSize;i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	677b      	str	r3, [r7, #116]	; 0x74
 80018d2:	e00e      	b.n	80018f2 <setRfListening+0xaa>

		rfData->activeTxMessage[MSG_BODY_START+i] = encodedData[i];
 80018d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d6:	3306      	adds	r3, #6
 80018d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018de:	440a      	add	r2, r1
 80018e0:	7811      	ldrb	r1, [r2, #0]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	for(int i = 0;i<encodedDataSize;i++){
 80018ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ee:	3301      	adds	r3, #1
 80018f0:	677b      	str	r3, [r7, #116]	; 0x74
 80018f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018f6:	461a      	mov	r2, r3
 80018f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fa:	4293      	cmp	r3, r2
 80018fc:	dbea      	blt.n	80018d4 <setRfListening+0x8c>

	}

	rfData->activeTxMessageSize = encodedDataSize;
 80018fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	int listening = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	673b      	str	r3, [r7, #112]	; 0x70
	int listeningCounter = 100;
 800190c:	2364      	movs	r3, #100	; 0x64
 800190e:	66fb      	str	r3, [r7, #108]	; 0x6c
	while(listening){
 8001910:	e0a9      	b.n	8001a66 <setRfListening+0x21e>

		Comms_Handler(rfData);
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f002 fa20 	bl	8003d58 <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 8001918:	2300      	movs	r3, #0
 800191a:	66bb      	str	r3, [r7, #104]	; 0x68
 800191c:	e08e      	b.n	8001a3c <setRfListening+0x1f4>
			printf("\r\nmessage %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3373      	adds	r3, #115	; 0x73
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001934:	4856      	ldr	r0, [pc, #344]	; (8001a90 <setRfListening+0x248>)
 8001936:	f00c f929 	bl	800db8c <iprintf>

			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_DONE){
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3373      	adds	r3, #115	; 0x73
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b48      	cmp	r3, #72	; 0x48
 800194e:	d164      	bne.n	8001a1a <setRfListening+0x1d2>

				printf("scan done, received time: %d %d %d", rfData->activeRxMessage[i][MSG_BODY_START], rfData->activeRxMessage[i][MSG_BODY_START+1], rfData->activeRxMessage[i][MSG_BODY_START+2]);
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3378      	adds	r3, #120	; 0x78
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3379      	adds	r3, #121	; 0x79
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461c      	mov	r4, r3
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	337a      	adds	r3, #122	; 0x7a
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4622      	mov	r2, r4
 800198c:	4601      	mov	r1, r0
 800198e:	4841      	ldr	r0, [pc, #260]	; (8001a94 <setRfListening+0x24c>)
 8001990:	f00c f8fc 	bl	800db8c <iprintf>

				RTC_TimeTypeDef sTime;

				sTime.Hours = rfData->activeRxMessage[i][MSG_BODY_START];
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	3378      	adds	r3, #120	; 0x78
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	753b      	strb	r3, [r7, #20]
				sTime.Minutes = rfData->activeRxMessage[i][MSG_BODY_START+1];
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	3379      	adds	r3, #121	; 0x79
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	757b      	strb	r3, [r7, #21]
				sTime.Seconds = rfData->activeRxMessage[i][MSG_BODY_START+2];
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	337a      	adds	r3, #122	; 0x7a
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	75bb      	strb	r3, [r7, #22]

				if (HAL_RTC_SetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f107 0114 	add.w	r1, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 fe9e 	bl	800971c <HAL_RTC_SetTime>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <setRfListening+0x1a2>
				{
					//printf("Could not set time");
					Error_Handler();
 80019e6:	f000 ffe5 	bl	80029b4 <Error_Handler>
				}

				HAL_Delay(1000);
 80019ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ee:	f003 fd81 	bl	80054f4 <HAL_Delay>
				Send(rfData->activeRxMessage, rfData->activeRxMessage[i][MSG_SIZE_POS]+MSG_BODY_START);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f103 0072 	add.w	r0, r3, #114	; 0x72
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3377      	adds	r3, #119	; 0x77
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f002 fe2c 	bl	800466c <Send>

				listening = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001a18:	e018      	b.n	8001a4c <setRfListening+0x204>
			}
			if (rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_GIVE_DATA)
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3373      	adds	r3, #115	; 0x73
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b47      	cmp	r3, #71	; 0x47
 8001a2e:	d102      	bne.n	8001a36 <setRfListening+0x1ee>
			{
				Send_Data(rfData);
 8001a30:	68b8      	ldr	r0, [r7, #8]
 8001a32:	f002 fdf0 	bl	8004616 <Send_Data>
		for(int i = 0; i<rfData->messageNum; i++){
 8001a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a38:	3301      	adds	r3, #1
 8001a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001a42:	461a      	mov	r2, r3
 8001a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f6ff af69 	blt.w	800191e <setRfListening+0xd6>
			}

		}

		if(listeningCounter<=0){
 8001a4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dc02      	bgt.n	8001a58 <setRfListening+0x210>

			listening = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	673b      	str	r3, [r7, #112]	; 0x70
 8001a56:	e006      	b.n	8001a66 <setRfListening+0x21e>

		}
		else{
			listeningCounter--;
 8001a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
			HAL_Delay(1000);
 8001a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a62:	f003 fd47 	bl	80054f4 <HAL_Delay>
	while(listening){
 8001a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f47f af52 	bne.w	8001912 <setRfListening+0xca>
		}

	}

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <setRfListening+0x23c>)
 8001a76:	f005 fedd 	bl	8007834 <HAL_GPIO_WritePin>
}
 8001a7a:	bf00      	nop
 8001a7c:	377c      	adds	r7, #124	; 0x7c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd90      	pop	{r4, r7, pc}
 8001a82:	bf00      	nop
 8001a84:	48000400 	.word	0x48000400
 8001a88:	08019000 	.word	0x08019000
 8001a8c:	08012450 	.word	0x08012450
 8001a90:	0801247c 	.word	0x0801247c
 8001a94:	08012494 	.word	0x08012494

08001a98 <powerDownDevices>:

void powerDownDevices(){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET); //depth
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2180      	movs	r1, #128	; 0x80
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <powerDownDevices+0x34>)
 8001aa2:	f005 fec7 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_RESET); //pressure
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	4808      	ldr	r0, [pc, #32]	; (8001acc <powerDownDevices+0x34>)
 8001aac:	f005 fec2 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(spiGPIO, spiGPIOPin, GPIO_PIN_RESET); //temperature
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <powerDownDevices+0x34>)
 8001ab6:	f005 febd 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET); //rf
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <powerDownDevices+0x34>)
 8001ac2:	f005 feb7 	bl	8007834 <HAL_GPIO_WritePin>

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	48000400 	.word	0x48000400

08001ad0 <synchronizationSetup>:


void synchronizationSetup(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b094      	sub	sp, #80	; 0x50
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	//printf("\r\nSynchro Setup");

	RTC_TimeTypeDef sTime;

	uint64_t managementBuf[managementDataNum];
	Flash_Read_Data(managementDataAddr, managementBuf, managementDataNum);
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2205      	movs	r2, #5
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4869      	ldr	r0, [pc, #420]	; (8001c88 <synchronizationSetup+0x1b8>)
 8001ae4:	f7ff fc38 	bl	8001358 <Flash_Read_Data>

	init_comms(rfData, DEVICE_CHILD, managementBuf[0], 0);
 8001ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001aec:	2300      	movs	r3, #0
 8001aee:	2199      	movs	r1, #153	; 0x99
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f002 f8e6 	bl	8003cc2 <init_comms>

	rfData->activeTxMessage[MSG_TO_ID_POS] = managementBuf[1];
 8001af6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	rfData->count = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	725a      	strb	r2, [r3, #9]
	rfData->num_fwds = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	729a      	strb	r2, [r3, #10]

	int listening = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	64fb      	str	r3, [r7, #76]	; 0x4c

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET); //rf activation pin
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b18:	485c      	ldr	r0, [pc, #368]	; (8001c8c <synchronizationSetup+0x1bc>)
 8001b1a:	f005 fe8b 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
 8001b20:	f003 fce8 	bl	80054f4 <HAL_Delay>

	while(listening){
 8001b24:	e09a      	b.n	8001c5c <synchronizationSetup+0x18c>
		printf("\r\nsignaling from id: %d", rfData->myDevice.device_id);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	791b      	ldrb	r3, [r3, #4]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4858      	ldr	r0, [pc, #352]	; (8001c90 <synchronizationSetup+0x1c0>)
 8001b2e:	f00c f82d 	bl	800db8c <iprintf>
		Comms_Handler(rfData);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f002 f910 	bl	8003d58 <Comms_Handler>

		for(int i = 0; i<rfData->messageNum; i++){
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b3c:	e083      	b.n	8001c46 <synchronizationSetup+0x176>
			if(rfData->activeRxMessage[i][MSG_TYPE_POS] == MSG_TYPE_YOUR_THERE)
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3373      	adds	r3, #115	; 0x73
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b45      	cmp	r3, #69	; 0x45
 8001b52:	d167      	bne.n	8001c24 <synchronizationSetup+0x154>
			{
				if(rfData->myDevice.device_id == rfData->activeRxMessage[i][MSG_TO_ID_POS])
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7919      	ldrb	r1, [r3, #4]
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4403      	add	r3, r0
 8001b66:	3374      	adds	r3, #116	; 0x74
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4299      	cmp	r1, r3
 8001b6c:	d15a      	bne.n	8001c24 <synchronizationSetup+0x154>
				{
					rfData->myDevice.device_is_discovered = true;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	71da      	strb	r2, [r3, #7]
					sTime.Hours = rfData->activeRxMessage[i][MSG_BODY_START];
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3378      	adds	r3, #120	; 0x78
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					sTime.Minutes = rfData->activeRxMessage[i][MSG_BODY_START+1];
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3379      	adds	r3, #121	; 0x79
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					sTime.Seconds = rfData->activeRxMessage[i][MSG_BODY_START+2];
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	337a      	adds	r3, #122	; 0x7a
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

					printf("Device discovered, time set to: %d::%d::%d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001bb6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001bc6:	4833      	ldr	r0, [pc, #204]	; (8001c94 <synchronizationSetup+0x1c4>)
 8001bc8:	f00b ffe0 	bl	800db8c <iprintf>

					if (HAL_RTC_SetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f007 fda0 	bl	800971c <HAL_RTC_SetTime>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <synchronizationSetup+0x11c>
					{
						printf("Error setting time");
 8001be2:	482d      	ldr	r0, [pc, #180]	; (8001c98 <synchronizationSetup+0x1c8>)
 8001be4:	f00b ffd2 	bl	800db8c <iprintf>
						Error_Handler();
 8001be8:	f000 fee4 	bl	80029b4 <Error_Handler>
					}

					if(!managementBuf[3]){
 8001bec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	d114      	bne.n	8001c1e <synchronizationSetup+0x14e>
						managementBuf[1] = rfData->activeRxMessage[i][MSG_FROM_ID_POS];
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3375      	adds	r3, #117	; 0x75
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2200      	movs	r2, #0
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	4615      	mov	r5, r2
 8001c0e:	e9c7 4504 	strd	r4, r5, [r7, #16]
						managementBuf[3] = 1; //discovered
 8001c12:	f04f 0201 	mov.w	r2, #1
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 2308 	strd	r2, r3, [r7, #32]

					}

					listening = false;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	64fb      	str	r3, [r7, #76]	; 0x4c
					break;
 8001c22:	e018      	b.n	8001c56 <synchronizationSetup+0x186>
				}

			}
			printf("message %d type: %x", i, rfData->activeRxMessage[i][MSG_TYPE_POS]);
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3373      	adds	r3, #115	; 0x73
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c3a:	4818      	ldr	r0, [pc, #96]	; (8001c9c <synchronizationSetup+0x1cc>)
 8001c3c:	f00b ffa6 	bl	800db8c <iprintf>
		for(int i = 0; i<rfData->messageNum; i++){
 8001c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c42:	3301      	adds	r3, #1
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	4293      	cmp	r3, r2
 8001c52:	f6ff af74 	blt.w	8001b3e <synchronizationSetup+0x6e>
		}
		HAL_Delay(100);
 8001c56:	2064      	movs	r0, #100	; 0x64
 8001c58:	f003 fc4c 	bl	80054f4 <HAL_Delay>
	while(listening){
 8001c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f af61 	bne.w	8001b26 <synchronizationSetup+0x56>
	}

	HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6a:	4808      	ldr	r0, [pc, #32]	; (8001c8c <synchronizationSetup+0x1bc>)
 8001c6c:	f005 fde2 	bl	8007834 <HAL_GPIO_WritePin>

	Flash_Write_Data(managementDataAddr, managementBuf, managementDataNum);
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	2205      	movs	r2, #5
 8001c76:	4619      	mov	r1, r3
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <synchronizationSetup+0x1b8>)
 8001c7a:	f7ff fb05 	bl	8001288 <Flash_Write_Data>

}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08019000 	.word	0x08019000
 8001c8c:	48000400 	.word	0x48000400
 8001c90:	080124b8 	.word	0x080124b8
 8001c94:	080124d0 	.word	0x080124d0
 8001c98:	080124fc 	.word	0x080124fc
 8001c9c:	08012510 	.word	0x08012510

08001ca0 <memorySetup>:



void memorySetup(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b098      	sub	sp, #96	; 0x60
 8001ca4:	af00      	add	r7, sp, #0

	uint64_t setupData[managementDataNum];
	Flash_Read_Data(managementDataAddr, setupData, managementDataNum);
 8001ca6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001caa:	2205      	movs	r2, #5
 8001cac:	4619      	mov	r1, r3
 8001cae:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <memorySetup+0x50>)
 8001cb0:	f7ff fb52 	bl	8001358 <Flash_Read_Data>

	setupData[2] = 1;
 8001cb4:	f04f 0201 	mov.w	r2, #1
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	Flash_Write_Data(managementDataAddr, setupData, managementDataNum);
 8001cc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <memorySetup+0x50>)
 8001cca:	f7ff fadd 	bl	8001288 <Flash_Write_Data>

	//uint64_t supportVariables[numberOfMeasurementVariables];
	//supportVariables[0] = 0;
	//Flash_Write_Data(measurementVariablesStartAddr, supportVariables, 2);

	uint64_t depthVariables[numberOfDepthVariables] = {0,0,0,0,0,0,0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2238      	movs	r2, #56	; 0x38
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00a fff7 	bl	800ccc8 <memset>
	Flash_Write_Data(depthVariablesStartAddr, depthVariables, numberOfDepthVariables);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2207      	movs	r2, #7
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <memorySetup+0x54>)
 8001ce2:	f7ff fad1 	bl	8001288 <Flash_Write_Data>

	//uint64_t supportVariablesRx[2];
	//Flash_Read_Data(measurementVariablesStartAddr, supportVariablesRx, 2);

}
 8001ce6:	bf00      	nop
 8001ce8:	3760      	adds	r7, #96	; 0x60
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	08019000 	.word	0x08019000
 8001cf4:	0801a000 	.word	0x0801a000

08001cf8 <mainSetup>:

int mainSetup(struct rfDataStorage* rfData, struct CommunicationHandles* handles){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]

	if(IDhandling()){
 8001d02:	f000 f833 	bl	8001d6c <IDhandling>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <mainSetup+0x18>
		return 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e020      	b.n	8001d52 <mainSetup+0x5a>
	}

	powerDownDevices();
 8001d10:	f7ff fec2 	bl	8001a98 <powerDownDevices>

	uint64_t setupBit[1];
	Flash_Read_Data(setupAddr, setupBit, 1);
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <mainSetup+0x64>)
 8001d1e:	f7ff fb1b 	bl	8001358 <Flash_Read_Data>

	if(setupBit[0]!=1){
 8001d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d26:	1e51      	subs	r1, r2, #1
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	d011      	beq.n	8001d50 <mainSetup+0x58>

		printf("\r\nMain setup\n");
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <mainSetup+0x68>)
 8001d2e:	f00b ffb3 	bl	800dc98 <puts>

		synchronizationSetup(rfData, handles);
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fecb 	bl	8001ad0 <synchronizationSetup>

		printf("\r\nSynchro Done\n");
 8001d3a:	480a      	ldr	r0, [pc, #40]	; (8001d64 <mainSetup+0x6c>)
 8001d3c:	f00b ffac 	bl	800dc98 <puts>
		memorySetup();
 8001d40:	f7ff ffae 	bl	8001ca0 <memorySetup>

		printf("\r\nSetup Done\n");
 8001d44:	4808      	ldr	r0, [pc, #32]	; (8001d68 <mainSetup+0x70>)
 8001d46:	f00b ffa7 	bl	800dc98 <puts>
		setShutdownMode(handles);
 8001d4a:	6838      	ldr	r0, [r7, #0]
 8001d4c:	f000 f8b4 	bl	8001eb8 <setShutdownMode>
	}
	return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	08019010 	.word	0x08019010
 8001d60:	08012524 	.word	0x08012524
 8001d64:	08012534 	.word	0x08012534
 8001d68:	08012544 	.word	0x08012544

08001d6c <IDhandling>:

int IDhandling(){
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b092      	sub	sp, #72	; 0x48
 8001d70:	af00      	add	r7, sp, #0

	printf("\r\nChecking ID set pin : %d ", HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin));
 8001d72:	2104      	movs	r1, #4
 8001d74:	4843      	ldr	r0, [pc, #268]	; (8001e84 <IDhandling+0x118>)
 8001d76:	f005 fd45 	bl	8007804 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4842      	ldr	r0, [pc, #264]	; (8001e88 <IDhandling+0x11c>)
 8001d80:	f00b ff04 	bl	800db8c <iprintf>

	if(HAL_GPIO_ReadPin(idSetGPIO, idSetGPIOPin) == GPIO_PIN_SET)
 8001d84:	2104      	movs	r1, #4
 8001d86:	483f      	ldr	r0, [pc, #252]	; (8001e84 <IDhandling+0x118>)
 8001d88:	f005 fd3c 	bl	8007804 <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d172      	bne.n	8001e78 <IDhandling+0x10c>
	{
		uint64_t managementBuf[managementDataNum] = {15, 70, 0, 0, 0};
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <IDhandling+0x120>)
 8001d94:	463c      	mov	r4, r7
 8001d96:	461d      	mov	r5, r3
 8001d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da4:	e884 0003 	stmia.w	r4, {r0, r1}
		uint64_t rxBuf[2];
		int buf;

		printf("\r\nSet device ID");
 8001da8:	4839      	ldr	r0, [pc, #228]	; (8001e90 <IDhandling+0x124>)
 8001daa:	f00b feef 	bl	800db8c <iprintf>

		setvbuf( stdin, NULL, _IONBF, 0 );
 8001dae:	4b39      	ldr	r3, [pc, #228]	; (8001e94 <IDhandling+0x128>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6858      	ldr	r0, [r3, #4]
 8001db4:	2300      	movs	r3, #0
 8001db6:	2202      	movs	r2, #2
 8001db8:	2100      	movs	r1, #0
 8001dba:	f00b ff9d 	bl	800dcf8 <setvbuf>
		scanf("%d", &buf);
 8001dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4834      	ldr	r0, [pc, #208]	; (8001e98 <IDhandling+0x12c>)
 8001dc6:	f00b ff7f 	bl	800dcc8 <iscanf>
		printf("\r\nData to write: %ld", (uint32_t)buf);
 8001dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4833      	ldr	r0, [pc, #204]	; (8001e9c <IDhandling+0x130>)
 8001dd0:	f00b fedc 	bl	800db8c <iprintf>
		managementBuf[0] = 15;//buf;
 8001dd4:	f04f 020f 	mov.w	r2, #15
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	e9c7 2300 	strd	r2, r3, [r7]

		printf("\r\nSet mother device ID");
 8001de0:	482f      	ldr	r0, [pc, #188]	; (8001ea0 <IDhandling+0x134>)
 8001de2:	f00b fed3 	bl	800db8c <iprintf>

		scanf("%d", &buf);
 8001de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dea:	4619      	mov	r1, r3
 8001dec:	482a      	ldr	r0, [pc, #168]	; (8001e98 <IDhandling+0x12c>)
 8001dee:	f00b ff6b 	bl	800dcc8 <iscanf>
		printf("\r\nMother Data to write: %ld", (uint32_t)buf);
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	482b      	ldr	r0, [pc, #172]	; (8001ea4 <IDhandling+0x138>)
 8001df8:	f00b fec8 	bl	800db8c <iprintf>
		managementBuf[1] = 70;//;
 8001dfc:	f04f 0246 	mov.w	r2, #70	; 0x46
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9c7 2302 	strd	r2, r3, [r7, #8]

		for(int i = 2;i<managementDataNum;i++){
 8001e08:	2302      	movs	r3, #2
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0c:	e00e      	b.n	8001e2c <IDhandling+0xc0>

			managementBuf[i] = 0;
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	443b      	add	r3, r7
 8001e16:	f1a3 0148 	sub.w	r1, r3, #72	; 0x48
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 2;i<managementDataNum;i++){
 8001e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e28:	3301      	adds	r3, #1
 8001e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	dded      	ble.n	8001e0e <IDhandling+0xa2>

		}

		if(Flash_Write_Data(IDaddressAddr, managementBuf, managementDataNum) == HAL_OK){
 8001e32:	463b      	mov	r3, r7
 8001e34:	2205      	movs	r2, #5
 8001e36:	4619      	mov	r1, r3
 8001e38:	481b      	ldr	r0, [pc, #108]	; (8001ea8 <IDhandling+0x13c>)
 8001e3a:	f7ff fa25 	bl	8001288 <Flash_Write_Data>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <IDhandling+0x102>

			Flash_Read_Data(IDaddressAddr, rxBuf, 2);
 8001e44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4816      	ldr	r0, [pc, #88]	; (8001ea8 <IDhandling+0x13c>)
 8001e4e:	f7ff fa83 	bl	8001358 <Flash_Read_Data>
			printf("\r\nID set to %ld", (uint32_t)managementBuf[0]);
 8001e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e56:	4613      	mov	r3, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4814      	ldr	r0, [pc, #80]	; (8001eac <IDhandling+0x140>)
 8001e5c:	f00b fe96 	bl	800db8c <iprintf>
			printf("\r\nMother ID set to %ld", (uint32_t)managementBuf[1]);
 8001e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e64:	4613      	mov	r3, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	4811      	ldr	r0, [pc, #68]	; (8001eb0 <IDhandling+0x144>)
 8001e6a:	f00b fe8f 	bl	800db8c <iprintf>

		}

		printf("\r\nSetup bit set to zero");
 8001e6e:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <IDhandling+0x148>)
 8001e70:	f00b fe8c 	bl	800db8c <iprintf>

		return 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <IDhandling+0x10e>
	}

	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3748      	adds	r7, #72	; 0x48
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	48000400 	.word	0x48000400
 8001e88:	08012554 	.word	0x08012554
 8001e8c:	08012610 	.word	0x08012610
 8001e90:	08012570 	.word	0x08012570
 8001e94:	20000044 	.word	0x20000044
 8001e98:	08012580 	.word	0x08012580
 8001e9c:	08012584 	.word	0x08012584
 8001ea0:	0801259c 	.word	0x0801259c
 8001ea4:	080125b4 	.word	0x080125b4
 8001ea8:	08019000 	.word	0x08019000
 8001eac:	080125d0 	.word	0x080125d0
 8001eb0:	080125e0 	.word	0x080125e0
 8001eb4:	080125f8 	.word	0x080125f8

08001eb8 <setShutdownMode>:

void setShutdownMode(){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0

	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF1);
	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
	//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WRFBUSY);
	HAL_SuspendTick();
 8001ebc:	f003 fb3e 	bl	800553c <HAL_SuspendTick>
	powerDownDevices();
 8001ec0:	f7ff fdea 	bl	8001a98 <powerDownDevices>
	printf("\r\nEntering Shutdown Mode");
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <setShutdownMode+0x1c>)
 8001ec6:	f00b fe61 	bl	800db8c <iprintf>
	HAL_PWREx_EnterSHUTDOWNMode();
 8001eca:	f006 fac9 	bl	8008460 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	08012638 	.word	0x08012638

08001ed8 <mainOperation>:
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
	HAL_Delay(10);
}

void mainOperation(struct rfDataStorage* rfData, struct CommunicationHandles* handles)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	printf("\r\nMain Operation");
 8001ee2:	4830      	ldr	r0, [pc, #192]	; (8001fa4 <mainOperation+0xcc>)
 8001ee4:	f00b fe52 	bl	800db8c <iprintf>
	struct measurementData data;
	data.depthValue = -46;
 8001ee8:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
	data.waterPressureValue = 65700;
 8001eee:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <mainOperation+0xd0>)
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
	data.surfaceTemperatureValue = -5;
 8001ef2:	f06f 0304 	mvn.w	r3, #4
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
	data.undergroundTemperatureValue = 7;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
	data.batteryStatus = 1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
		printf("SD start error");

	}

	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);*/
	HAL_Delay(10);
 8001f00:	200a      	movs	r0, #10
 8001f02:	f003 faf7 	bl	80054f4 <HAL_Delay>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(handles->RTChandle, &sTime, RTC_FORMAT_BIN);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	f107 0110 	add.w	r1, r7, #16
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f007 fca0 	bl	8009856 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(handles->RTChandle, &sDate, RTC_FORMAT_BIN);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f107 010c 	add.w	r1, r7, #12
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f007 fd7b 	bl	8009a1c <HAL_RTC_GetDate>
	printf("\r\nOperating at %02d::%02d::%02d",  sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001f26:	7c3b      	ldrb	r3, [r7, #16]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	7c7b      	ldrb	r3, [r7, #17]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	7cbb      	ldrb	r3, [r7, #18]
 8001f30:	481e      	ldr	r0, [pc, #120]	; (8001fac <mainOperation+0xd4>)
 8001f32:	f00b fe2b 	bl	800db8c <iprintf>

	performDepthMeasurement(handles->ADChandle1, handles->ADChandle2, &data);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6898      	ldr	r0, [r3, #8]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7ff fa2a 	bl	800139c <performDepthMeasurement>
	performPressureMeasurement(handles->I2Chandle, &data);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff faea 	bl	800152c <performPressureMeasurement>
	performTemperatureMeasurement(handles->SPIhandle, &data);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fb7e 	bl	8001664 <performTemperatureMeasurement>
	checkBattery(handles->ADChandle1, &data);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fbdc 	bl	8001730 <checkBattery>
	checkBattery(handles->ADChandle1, &data);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fbd4 	bl	8001730 <checkBattery>

	//HAL_Delay(4000);
	//addDeviceData(handles, &data);
	setRfListening(&data, rfData, handles);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fc59 	bl	8001848 <setRfListening>

	setShutdownMode();
 8001f96:	f7ff ff8f 	bl	8001eb8 <setShutdownMode>

}
 8001f9a:	bf00      	nop
 8001f9c:	3738      	adds	r7, #56	; 0x38
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	0801272c 	.word	0x0801272c
 8001fa8:	000100a4 	.word	0x000100a4
 8001fac:	08012740 	.word	0x08012740

08001fb0 <pressureTest>:
 *      Author: zurly
 */

#include <UnitTests.h>

void pressureTest(I2C_HandleTypeDef* I2Chandle, uint8_t address){
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	; 0x40
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
		  printf("0x%X", i); // Received an ACK at that address
	  }
	}*/

	lps28dfw_info_t sensorInfo1;
	sensorInfo1.handle = I2Chandle;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	613b      	str	r3, [r7, #16]
	printf("looking for %x", address);
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	483c      	ldr	r0, [pc, #240]	; (80020b8 <pressureTest+0x108>)
 8001fc6:	f00b fde1 	bl	800db8c <iprintf>
	if(beginLPS28(&sensorInfo1, address) != LPS28DFW_OK)
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fc46 	bl	8003864 <beginLPS28>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <pressureTest+0x3e>
	{
		printf("\r\nCannot connect to pressure sensor");
 8001fde:	4837      	ldr	r0, [pc, #220]	; (80020bc <pressureTest+0x10c>)
 8001fe0:	f00b fdd4 	bl	800db8c <iprintf>
		HAL_Delay(1000);
 8001fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fe8:	f003 fa84 	bl	80054f4 <HAL_Delay>
 8001fec:	e060      	b.n	80020b0 <pressureTest+0x100>
		return;
	}
	lps28dfw_md_t modeConfig =
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <pressureTest+0x110>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]
		.odr = odr_LPS28DFW_4Hz,         // Output data rate
		.avg = avg_LPS28DFW_512_AVG,      // Average filter
		.lpf = lpf_LPS28DFW_LPF_ODR_DIV_9 // Low-pass filter
	};

	setModeConfig(&sensorInfo1, &modeConfig);
 8001ff4:	f107 020c 	add.w	r2, r7, #12
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fc85 	bl	800390e <setModeConfig>
	HAL_Delay(100);
 8002004:	2064      	movs	r0, #100	; 0x64
 8002006:	f003 fa75 	bl	80054f4 <HAL_Delay>
	getSensorData(&sensorInfo1);
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4618      	mov	r0, r3
 8002010:	f001 fe2a 	bl	8003c68 <getSensorData>
	double runnningValue = 0;
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	for(int i = 0;i<4;i++){
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
 8002024:	e018      	b.n	8002058 <pressureTest+0xa8>
		getSensorData(&sensorInfo1);
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	4618      	mov	r0, r3
 800202c:	f001 fe1c 	bl	8003c68 <getSensorData>
		runnningValue += sensorInfo1.data.pressure.hpa;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa88 	bl	8000548 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002040:	f7fe f924 	bl	800028c <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		HAL_Delay(250);
 800204c:	20fa      	movs	r0, #250	; 0xfa
 800204e:	f003 fa51 	bl	80054f4 <HAL_Delay>
	for(int i = 0;i<4;i++){
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	3301      	adds	r3, #1
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
 8002058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800205a:	2b03      	cmp	r3, #3
 800205c:	dde3      	ble.n	8002026 <pressureTest+0x76>
	}
	runnningValue = runnningValue/4;
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <pressureTest+0x114>)
 8002064:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002068:	f7fe fbf0 	bl	800084c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	uint32_t temperatureValue = (uint32_t)(sensorInfo1.data.heat.deg_c*100);
 8002074:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002078:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80020c8 <pressureTest+0x118>
 800207c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002084:	ee17 3a90 	vmov	r3, s15
 8002088:	633b      	str	r3, [r7, #48]	; 0x30

	uint32_t pressureValue = (uint32_t)(sensorInfo1.data.pressure.hpa*100);
 800208a:	edd7 7a07 	vldr	s15, [r7, #28]
 800208e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020c8 <pressureTest+0x118>
 8002092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c

	printf("\r\nMeasure pressure: %ld", pressureValue);
 80020a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <pressureTest+0x11c>)
 80020a4:	f00b fd72 	bl	800db8c <iprintf>
	printf("\r\nMeasure temperature: %ld", temperatureValue);
 80020a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020aa:	4809      	ldr	r0, [pc, #36]	; (80020d0 <pressureTest+0x120>)
 80020ac:	f00b fd6e 	bl	800db8c <iprintf>
}
 80020b0:	3740      	adds	r7, #64	; 0x40
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	08012760 	.word	0x08012760
 80020bc:	08012770 	.word	0x08012770
 80020c0:	080127c8 	.word	0x080127c8
 80020c4:	40100000 	.word	0x40100000
 80020c8:	42c80000 	.word	0x42c80000
 80020cc:	08012794 	.word	0x08012794
 80020d0:	080127ac 	.word	0x080127ac

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0f6      	sub	sp, #472	; 0x1d8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	struct CommunicationHandles handles;
	handles.SPIhandle = &hspi2;
 80020da:	4b53      	ldr	r3, [pc, #332]	; (8002228 <main+0x154>)
 80020dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	handles.UARThandle = &hlpuart1;
 80020e0:	4b52      	ldr	r3, [pc, #328]	; (800222c <main+0x158>)
 80020e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	handles.ADChandle1 = &hadc1;
 80020e6:	4b52      	ldr	r3, [pc, #328]	; (8002230 <main+0x15c>)
 80020e8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	handles.ADChandle2 = &hadc2;
 80020ec:	4b51      	ldr	r3, [pc, #324]	; (8002234 <main+0x160>)
 80020ee:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	handles.I2Chandle = &hi2c1;
 80020f2:	4b51      	ldr	r3, [pc, #324]	; (8002238 <main+0x164>)
 80020f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	handles.RTChandle = &hrtc;
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <main+0x168>)
 80020fa:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020fe:	f003 f984 	bl	800540a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002102:	f000 f8a9 	bl	8002258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002106:	f000 fb8f 	bl	8002828 <MX_GPIO_Init>
  MX_RTC_Init();
 800210a:	f000 fa8b 	bl	8002624 <MX_RTC_Init>
  MX_I2C1_Init();
 800210e:	f000 f9d9 	bl	80024c4 <MX_I2C1_Init>
  MX_RNG_Init();
 8002112:	f000 fa73 	bl	80025fc <MX_RNG_Init>
  MX_LPUART1_UART_Init();
 8002116:	f000 fa15 	bl	8002544 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800211a:	f000 fb47 	bl	80027ac <MX_SPI2_Init>
  MX_FATFS_Init();
 800211e:	f00a fcdd 	bl	800cadc <MX_FATFS_Init>
  MX_USART3_UART_Init();
 8002122:	f000 fa3b 	bl	800259c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002126:	f000 f8f3 	bl	8002310 <MX_ADC1_Init>
  MX_ADC2_Init();
 800212a:	f000 f967 	bl	80023fc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 800212e:	4844      	ldr	r0, [pc, #272]	; (8002240 <main+0x16c>)
 8002130:	f000 fc46 	bl	80029c0 <RetargetInit>

  HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8002134:	2214      	movs	r2, #20
 8002136:	4943      	ldr	r1, [pc, #268]	; (8002244 <main+0x170>)
 8002138:	483c      	ldr	r0, [pc, #240]	; (800222c <main+0x158>)
 800213a:	f009 f833 	bl	800b1a4 <HAL_UART_Receive_IT>

  //HAL_Delay(100);
  struct rfDataStorage rfData;
  rfData.RXFIFO = &RXFIFO;
 800213e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002142:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <main+0x174>)
 8002148:	601a      	str	r2, [r3, #0]
  if(mainSetup(&rfData, &handles)){
 800214a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fdcf 	bl	8001cf8 <mainSetup>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <main+0x9c>
  	  mainOperation(&rfData, &handles);
 8002160:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff feb4 	bl	8001ed8 <mainOperation>
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2140      	movs	r1, #64	; 0x40
 8002174:	4835      	ldr	r0, [pc, #212]	; (800224c <main+0x178>)
 8002176:	f005 fb5d 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	4833      	ldr	r0, [pc, #204]	; (800224c <main+0x178>)
 8002180:	f005 fb58 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218a:	4830      	ldr	r0, [pc, #192]	; (800224c <main+0x178>)
 800218c:	f005 fb52 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002196:	482d      	ldr	r0, [pc, #180]	; (800224c <main+0x178>)
 8002198:	f005 fb4c 	bl	8007834 <HAL_GPIO_WritePin>
  //depth test
  struct DepthData depthData;
  depthData.pos = 0;
 800219c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
  depthData.output1 = 0;
 80021a8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021ac:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  depthData.output2 = 0;
 80021b4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021b8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  depthData.max_value_1 = 0;
 80021c0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
  depthData.min_value_1 = 0;
 80021cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021d0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  depthData.max_value_2 = 0;
 80021d8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021dc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  depthData.min_value_2 = 0;
 80021e4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
	  //HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_SET);
	  //HAL_Delay(100);
	  //rfTest(&hlpuart1);
	  //HAL_GPIO_WritePin(uartGPIO, uartGPIOPin, GPIO_PIN_RESET);

	  HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	4816      	ldr	r0, [pc, #88]	; (8002250 <main+0x17c>)
 80021f6:	f005 fb1d 	bl	8007834 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f003 f97a 	bl	80054f4 <HAL_Delay>
	  pressureTest(&hi2c1, LPS28DFW_I2C_ADDRESS_DEFAULT);
 8002200:	215c      	movs	r1, #92	; 0x5c
 8002202:	480d      	ldr	r0, [pc, #52]	; (8002238 <main+0x164>)
 8002204:	f7ff fed4 	bl	8001fb0 <pressureTest>
	  pressureTest(&hi2c1, LPS28DFW_I2C_ADDRESS_SECONDARY);
 8002208:	215d      	movs	r1, #93	; 0x5d
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <main+0x164>)
 800220c:	f7ff fed0 	bl	8001fb0 <pressureTest>
	  HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	480e      	ldr	r0, [pc, #56]	; (8002250 <main+0x17c>)
 8002216:	f005 fb0d 	bl	8007834 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_SET);
	  //HAL_Delay(100);
	  //batteryTest(&hadc1);
	  //HAL_GPIO_WritePin(adcGPIO, adcGPIOPin, GPIO_PIN_RESET);

	  printf("\r\nLoop");
 800221a:	480e      	ldr	r0, [pc, #56]	; (8002254 <main+0x180>)
 800221c:	f00b fcb6 	bl	800db8c <iprintf>

	  HAL_Delay(100);
 8002220:	2064      	movs	r0, #100	; 0x64
 8002222:	f003 f967 	bl	80054f4 <HAL_Delay>
	  HAL_GPIO_WritePin(i2cGPIO, i2cGPIOPin, GPIO_PIN_SET);
 8002226:	e7e3      	b.n	80021f0 <main+0x11c>
 8002228:	200004a4 	.word	0x200004a4
 800222c:	20000360 	.word	0x20000360
 8002230:	20000244 	.word	0x20000244
 8002234:	200002a8 	.word	0x200002a8
 8002238:	2000030c 	.word	0x2000030c
 800223c:	20000478 	.word	0x20000478
 8002240:	200003e4 	.word	0x200003e4
 8002244:	2000076c 	.word	0x2000076c
 8002248:	20000508 	.word	0x20000508
 800224c:	48000800 	.word	0x48000800
 8002250:	48000400 	.word	0x48000400
 8002254:	0801295c 	.word	0x0801295c

08002258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	2244      	movs	r2, #68	; 0x44
 8002264:	2100      	movs	r1, #0
 8002266:	4618      	mov	r0, r3
 8002268:	f00a fd2e 	bl	800ccc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800226c:	463b      	mov	r3, r7
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800227a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800227e:	f006 f899 	bl	80083b4 <HAL_PWREx_ControlVoltageScaling>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002288:	f000 fb94 	bl	80029b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800228c:	f006 f874 	bl	8008378 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <SystemClock_Config+0xb4>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a1d      	ldr	r2, [pc, #116]	; (800230c <SystemClock_Config+0xb4>)
 8002298:	f023 0318 	bic.w	r3, r3, #24
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80022a0:	2316      	movs	r3, #22
 80022a2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022a4:	2301      	movs	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022b2:	2301      	movs	r3, #1
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022ba:	2360      	movs	r3, #96	; 0x60
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022be:	2300      	movs	r3, #0
 80022c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4618      	mov	r0, r3
 80022c8:	f006 f8e4 	bl	8008494 <HAL_RCC_OscConfig>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80022d2:	f000 fb6f 	bl	80029b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d6:	230f      	movs	r3, #15
 80022d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022da:	2301      	movs	r3, #1
 80022dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f006 fd32 	bl	8008d58 <HAL_RCC_ClockConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022fa:	f000 fb5b 	bl	80029b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022fe:	f007 f8d5 	bl	80094ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8002302:	bf00      	nop
 8002304:	3758      	adds	r7, #88	; 0x58
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000

08002310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002334:	4a2f      	ldr	r2, [pc, #188]	; (80023f4 <MX_ADC1_Init+0xe4>)
 8002336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002352:	2204      	movs	r2, #4
 8002354:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002356:	4b26      	ldr	r3, [pc, #152]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002358:	2200      	movs	r2, #0
 800235a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800235e:	2200      	movs	r2, #0
 8002360:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002364:	2201      	movs	r2, #1
 8002366:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002372:	2200      	movs	r2, #0
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002378:	2200      	movs	r2, #0
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002386:	2200      	movs	r2, #0
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <MX_ADC1_Init+0xe0>)
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002392:	4817      	ldr	r0, [pc, #92]	; (80023f0 <MX_ADC1_Init+0xe0>)
 8002394:	f003 fb26 	bl	80059e4 <HAL_ADC_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800239e:	f000 fb09 	bl	80029b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023a6:	f107 031c 	add.w	r3, r7, #28
 80023aa:	4619      	mov	r1, r3
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <MX_ADC1_Init+0xe0>)
 80023ae:	f004 fc01 	bl	8006bb4 <HAL_ADCEx_MultiModeConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80023b8:	f000 fafc 	bl	80029b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_ADC1_Init+0xe8>)
 80023be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023c0:	2306      	movs	r3, #6
 80023c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023c8:	237f      	movs	r3, #127	; 0x7f
 80023ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023cc:	2304      	movs	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MX_ADC1_Init+0xe0>)
 80023da:	f003 fe27 	bl	800602c <HAL_ADC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80023e4:	f000 fae6 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000244 	.word	0x20000244
 80023f4:	50040000 	.word	0x50040000
 80023f8:	14f00020 	.word	0x14f00020

080023fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002402:	463b      	mov	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
 8002410:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002414:	4a29      	ldr	r2, [pc, #164]	; (80024bc <MX_ADC2_Init+0xc0>)
 8002416:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002432:	2204      	movs	r2, #4
 8002434:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002438:	2200      	movs	r2, #0
 800243a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800243e:	2200      	movs	r2, #0
 8002440:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002444:	2201      	movs	r2, #1
 8002446:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002452:	2200      	movs	r2, #0
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002458:	2200      	movs	r2, #0
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800245c:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002466:	2200      	movs	r2, #0
 8002468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <MX_ADC2_Init+0xbc>)
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002472:	4811      	ldr	r0, [pc, #68]	; (80024b8 <MX_ADC2_Init+0xbc>)
 8002474:	f003 fab6 	bl	80059e4 <HAL_ADC_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800247e:	f000 fa99 	bl	80029b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002482:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <MX_ADC2_Init+0xc4>)
 8002484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002486:	2306      	movs	r3, #6
 8002488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800248a:	2301      	movs	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800248e:	237f      	movs	r3, #127	; 0x7f
 8002490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002492:	2304      	movs	r3, #4
 8002494:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800249a:	463b      	mov	r3, r7
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <MX_ADC2_Init+0xbc>)
 80024a0:	f003 fdc4 	bl	800602c <HAL_ADC_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80024aa:	f000 fa83 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200002a8 	.word	0x200002a8
 80024bc:	50040100 	.word	0x50040100
 80024c0:	08600004 	.word	0x08600004

080024c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_I2C1_Init+0x74>)
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <MX_I2C1_Init+0x78>)
 80024cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_I2C1_Init+0x74>)
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <MX_I2C1_Init+0x7c>)
 80024d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_I2C1_Init+0x74>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <MX_I2C1_Init+0x74>)
 80024dc:	2201      	movs	r2, #1
 80024de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_I2C1_Init+0x74>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <MX_I2C1_Init+0x74>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <MX_I2C1_Init+0x74>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <MX_I2C1_Init+0x74>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f8:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <MX_I2C1_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024fe:	480e      	ldr	r0, [pc, #56]	; (8002538 <MX_I2C1_Init+0x74>)
 8002500:	f005 f9b0 	bl	8007864 <HAL_I2C_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800250a:	f000 fa53 	bl	80029b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800250e:	2100      	movs	r1, #0
 8002510:	4809      	ldr	r0, [pc, #36]	; (8002538 <MX_I2C1_Init+0x74>)
 8002512:	f005 fe99 	bl	8008248 <HAL_I2CEx_ConfigAnalogFilter>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800251c:	f000 fa4a 	bl	80029b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002520:	2100      	movs	r1, #0
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_I2C1_Init+0x74>)
 8002524:	f005 fedb 	bl	80082de <HAL_I2CEx_ConfigDigitalFilter>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800252e:	f000 fa41 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	2000030c 	.word	0x2000030c
 800253c:	40005400 	.word	0x40005400
 8002540:	0010061a 	.word	0x0010061a

08002544 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <MX_LPUART1_UART_Init+0x54>)
 800254c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002550:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002554:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002576:	2200      	movs	r2, #0
 8002578:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 800257c:	2200      	movs	r2, #0
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <MX_LPUART1_UART_Init+0x50>)
 8002582:	f008 fbed 	bl	800ad60 <HAL_UART_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800258c:	f000 fa12 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20000360 	.word	0x20000360
 8002598:	40008000 	.word	0x40008000

0800259c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <MX_USART3_UART_Init+0x5c>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_USART3_UART_Init+0x58>)
 80025e0:	f008 fbbe 	bl	800ad60 <HAL_UART_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025ea:	f000 f9e3 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200003e4 	.word	0x200003e4
 80025f8:	40004800 	.word	0x40004800

080025fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_RNG_Init+0x20>)
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <MX_RNG_Init+0x24>)
 8002604:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_RNG_Init+0x20>)
 8002608:	f006 ff60 	bl	80094cc <HAL_RNG_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002612:	f000 f9cf 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000468 	.word	0x20000468
 8002620:	50060800 	.word	0x50060800

08002624 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b092      	sub	sp, #72	; 0x48
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800262a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	60da      	str	r2, [r3, #12]
 8002638:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800263a:	2300      	movs	r3, #0
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	222c      	movs	r2, #44	; 0x2c
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f00a fb3f 	bl	800ccc8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800264a:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <MX_RTC_Init+0x17c>)
 800264c:	4a55      	ldr	r2, [pc, #340]	; (80027a4 <MX_RTC_Init+0x180>)
 800264e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002650:	4b53      	ldr	r3, [pc, #332]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002656:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002658:	227f      	movs	r2, #127	; 0x7f
 800265a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <MX_RTC_Init+0x17c>)
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002662:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002668:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <MX_RTC_Init+0x17c>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800266e:	4b4c      	ldr	r3, [pc, #304]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002670:	2200      	movs	r2, #0
 8002672:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002674:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002676:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800267a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800267c:	4b48      	ldr	r3, [pc, #288]	; (80027a0 <MX_RTC_Init+0x17c>)
 800267e:	2200      	movs	r2, #0
 8002680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002682:	4847      	ldr	r0, [pc, #284]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002684:	f006 ffc8 	bl	8009618 <HAL_RTC_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800268e:	f000 f991 	bl	80029b4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BKUP_DEFINE_CODE)
 8002692:	2100      	movs	r1, #0
 8002694:	4842      	ldr	r0, [pc, #264]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002696:	f007 fc35 	bl	8009f04 <HAL_RTCEx_BKUPRead>
 800269a:	4603      	mov	r3, r0
 800269c:	f240 3227 	movw	r2, #807	; 0x327
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d037      	beq.n	8002714 <MX_RTC_Init+0xf0>
  	// Clear Backup registor : recover to current RTC information

  	// Set to Time/Date from current Time/Date

  	// Write a data in ad RTC Backup data register
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BKUP_DEFINE_CODE);
 80026a4:	f240 3227 	movw	r2, #807	; 0x327
 80026a8:	2100      	movs	r1, #0
 80026aa:	483d      	ldr	r0, [pc, #244]	; (80027a0 <MX_RTC_Init+0x17c>)
 80026ac:	f007 fc0a 	bl	8009ec4 <HAL_RTCEx_BKUPWrite>

  	sTime.Hours = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	  sTime.Minutes = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	  sTime.Seconds = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
  	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	647b      	str	r3, [r7, #68]	; 0x44
  	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80026ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026ce:	2200      	movs	r2, #0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4833      	ldr	r0, [pc, #204]	; (80027a0 <MX_RTC_Init+0x17c>)
 80026d4:	f007 f822 	bl	800971c <HAL_RTC_SetTime>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_RTC_Init+0xbe>
  	  {
  		Error_Handler();
 80026de:	f000 f969 	bl	80029b4 <Error_Handler>
  	  }
  	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  	  sDate.Month = RTC_MONTH_JANUARY;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  	  sDate.Date = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  	  sDate.Year = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80026fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026fe:	2200      	movs	r2, #0
 8002700:	4619      	mov	r1, r3
 8002702:	4827      	ldr	r0, [pc, #156]	; (80027a0 <MX_RTC_Init+0x17c>)
 8002704:	f007 f903 	bl	800990e <HAL_RTC_SetDate>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <MX_RTC_Init+0x10c>
  	  {
  		Error_Handler();
 800270e:	f000 f951 	bl	80029b4 <Error_Handler>
 8002712:	e00d      	b.n	8002730 <MX_RTC_Init+0x10c>
  	  }

    } else
    {
  	// Only read time and date
  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002718:	2200      	movs	r2, #0
 800271a:	4619      	mov	r1, r3
 800271c:	4820      	ldr	r0, [pc, #128]	; (80027a0 <MX_RTC_Init+0x17c>)
 800271e:	f007 f89a 	bl	8009856 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002726:	2200      	movs	r2, #0
 8002728:	4619      	mov	r1, r3
 800272a:	481d      	ldr	r0, [pc, #116]	; (80027a0 <MX_RTC_Init+0x17c>)
 800272c:	f007 f976 	bl	8009a1c <HAL_RTC_GetDate>
  /** Initialize RTC and set the Time and Date
  */

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <MX_RTC_Init+0x184>)
 800274a:	61bb      	str	r3, [r7, #24]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800275c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	4619      	mov	r1, r3
 8002768:	480d      	ldr	r0, [pc, #52]	; (80027a0 <MX_RTC_Init+0x17c>)
 800276a:	f007 f9a5 	bl	8009ab8 <HAL_RTC_SetAlarm_IT>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 8002774:	f000 f91e 	bl	80029b4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Seconds = 30;
 8002778:	231e      	movs	r3, #30
 800277a:	71bb      	strb	r3, [r7, #6]
  sAlarm.Alarm = RTC_ALARM_B;
 800277c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_RTC_Init+0x17c>)
 800278a:	f007 f995 	bl	8009ab8 <HAL_RTC_SetAlarm_IT>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_RTC_Init+0x174>
  {
    Error_Handler();
 8002794:	f000 f90e 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3748      	adds	r7, #72	; 0x48
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000478 	.word	0x20000478
 80027a4:	40002800 	.word	0x40002800
 80027a8:	80808000 	.word	0x80808000

080027ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MX_SPI2_Init+0x74>)
 80027b2:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <MX_SPI2_Init+0x78>)
 80027b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <MX_SPI2_Init+0x74>)
 80027b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <MX_SPI2_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <MX_SPI2_Init+0x74>)
 80027c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <MX_SPI2_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <MX_SPI2_Init+0x74>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <MX_SPI2_Init+0x74>)
 80027da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <MX_SPI2_Init+0x74>)
 80027e2:	2210      	movs	r2, #16
 80027e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <MX_SPI2_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <MX_SPI2_Init+0x74>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <MX_SPI2_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <MX_SPI2_Init+0x74>)
 80027fa:	2207      	movs	r2, #7
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <MX_SPI2_Init+0x74>)
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <MX_SPI2_Init+0x74>)
 8002806:	2208      	movs	r2, #8
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <MX_SPI2_Init+0x74>)
 800280c:	f007 fb97 	bl	8009f3e <HAL_SPI_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002816:	f000 f8cd 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200004a4 	.word	0x200004a4
 8002824:	40003800 	.word	0x40003800

08002828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283e:	4b3f      	ldr	r3, [pc, #252]	; (800293c <MX_GPIO_Init+0x114>)
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4a3e      	ldr	r2, [pc, #248]	; (800293c <MX_GPIO_Init+0x114>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284a:	4b3c      	ldr	r3, [pc, #240]	; (800293c <MX_GPIO_Init+0x114>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <MX_GPIO_Init+0x114>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4a38      	ldr	r2, [pc, #224]	; (800293c <MX_GPIO_Init+0x114>)
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <MX_GPIO_Init+0x114>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <MX_GPIO_Init+0x114>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a32      	ldr	r2, [pc, #200]	; (800293c <MX_GPIO_Init+0x114>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <MX_GPIO_Init+0x114>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <MX_GPIO_Init+0x114>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a2c      	ldr	r2, [pc, #176]	; (800293c <MX_GPIO_Init+0x114>)
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <MX_GPIO_Init+0x114>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a6:	f004 ffc5 	bl	8007834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6
 80028aa:	2200      	movs	r2, #0
 80028ac:	f241 31e1 	movw	r1, #5089	; 0x13e1
 80028b0:	4823      	ldr	r0, [pc, #140]	; (8002940 <MX_GPIO_Init+0x118>)
 80028b2:	f004 ffbf 	bl	8007834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80028bc:	4821      	ldr	r0, [pc, #132]	; (8002944 <MX_GPIO_Init+0x11c>)
 80028be:	f004 ffb9 	bl	8007834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028dc:	f004 fe20 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_5|GPIO_PIN_6
 80028e0:	f241 33e1 	movw	r3, #5089	; 0x13e1
 80028e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4811      	ldr	r0, [pc, #68]	; (8002940 <MX_GPIO_Init+0x118>)
 80028fa:	f004 fe11 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80028fe:	2306      	movs	r3, #6
 8002900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	4619      	mov	r1, r3
 8002910:	480b      	ldr	r0, [pc, #44]	; (8002940 <MX_GPIO_Init+0x118>)
 8002912:	f004 fe05 	bl	8007520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002916:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800291a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291c:	2301      	movs	r3, #1
 800291e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4619      	mov	r1, r3
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_GPIO_Init+0x11c>)
 8002930:	f004 fdf6 	bl	8007520 <HAL_GPIO_Init>

}
 8002934:	bf00      	nop
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	48000400 	.word	0x48000400
 8002944:	48000800 	.word	0x48000800

08002948 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	//printf("\r\nreceived uart message");
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e012      	b.n	800297c <HAL_UART_RxCpltCallback+0x34>
	{
			printf("\r\nreceived uart message: %x", UART2_rxBuffer[i]);
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4811      	ldr	r0, [pc, #68]	; (80029a8 <HAL_UART_RxCpltCallback+0x60>)
 8002962:	f00b f913 	bl	800db8c <iprintf>
			enqueue(&RXFIFO, UART2_rxBuffer[i]);
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	480e      	ldr	r0, [pc, #56]	; (80029ac <HAL_UART_RxCpltCallback+0x64>)
 8002972:	f001 ff0f 	bl	8004794 <enqueue>
	for (int i = 0; i < MSG_SIZE_TRANSFER; i++)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3301      	adds	r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b13      	cmp	r3, #19
 8002980:	dde9      	ble.n	8002956 <HAL_UART_RxCpltCallback+0xe>
	}
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8002982:	2214      	movs	r2, #20
 8002984:	4907      	ldr	r1, [pc, #28]	; (80029a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <HAL_UART_RxCpltCallback+0x68>)
 8002988:	f008 fc0c 	bl	800b1a4 <HAL_UART_Receive_IT>
	HAL_UART_Abort_IT(&hlpuart1);
 800298c:	4808      	ldr	r0, [pc, #32]	; (80029b0 <HAL_UART_RxCpltCallback+0x68>)
 800298e:	f008 fc5f 	bl	800b250 <HAL_UART_Abort_IT>
	HAL_UART_Receive_IT(&hlpuart1, UART2_rxBuffer, MSG_SIZE_TRANSFER);
 8002992:	2214      	movs	r2, #20
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_UART_RxCpltCallback+0x5c>)
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <HAL_UART_RxCpltCallback+0x68>)
 8002998:	f008 fc04 	bl	800b1a4 <HAL_UART_Receive_IT>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000076c 	.word	0x2000076c
 80029a8:	08012964 	.word	0x08012964
 80029ac:	20000508 	.word	0x20000508
 80029b0:	20000360 	.word	0x20000360

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029bc:	e7fe      	b.n	80029bc <Error_Handler+0x8>
	...

080029c0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <RetargetInit+0x28>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <RetargetInit+0x2c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6898      	ldr	r0, [r3, #8]
 80029d4:	2300      	movs	r3, #0
 80029d6:	2202      	movs	r2, #2
 80029d8:	2100      	movs	r1, #0
 80029da:	f00b f98d 	bl	800dcf8 <setvbuf>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000780 	.word	0x20000780
 80029ec:	20000044 	.word	0x20000044

080029f0 <_isatty>:

int _isatty(int fd) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	db04      	blt.n	8002a08 <_isatty+0x18>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	dc01      	bgt.n	8002a08 <_isatty+0x18>
    return 1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e005      	b.n	8002a14 <_isatty+0x24>

  errno = EBADF;
 8002a08:	f00a f92c 	bl	800cc64 <__errno>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2209      	movs	r2, #9
 8002a10:	601a      	str	r2, [r3, #0]
  return 0;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <_write>:

int _write(int fd, char* ptr, int len) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d002      	beq.n	8002a34 <_write+0x18>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d111      	bne.n	8002a58 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <_write+0x54>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	f008 f9db 	bl	800adfc <HAL_UART_Transmit>
 8002a46:	4603      	mov	r3, r0
 8002a48:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002a4a:	7dfb      	ldrb	r3, [r7, #23]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <_write+0x38>
      return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	e008      	b.n	8002a66 <_write+0x4a>
    else
      return EIO;
 8002a54:	2305      	movs	r3, #5
 8002a56:	e006      	b.n	8002a66 <_write+0x4a>
  }
  errno = EBADF;
 8002a58:	f00a f904 	bl	800cc64 <__errno>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2209      	movs	r2, #9
 8002a60:	601a      	str	r2, [r3, #0]
  return -1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000780 	.word	0x20000780

08002a74 <_close>:

int _close(int fd) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db04      	blt.n	8002a8c <_close+0x18>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	dc01      	bgt.n	8002a8c <_close+0x18>
    return 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e006      	b.n	8002a9a <_close+0x26>

  errno = EBADF;
 8002a8c:	f00a f8ea 	bl	800cc64 <__errno>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2209      	movs	r2, #9
 8002a94:	601a      	str	r2, [r3, #0]
  return -1;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002aae:	f00a f8d9 	bl	800cc64 <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2209      	movs	r2, #9
 8002ab6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_read>:

int _read(int fd, char* ptr, int len) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d110      	bne.n	8002af8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <_read+0x4c>)
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	2201      	movs	r2, #1
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	f008 fa1f 	bl	800af24 <HAL_UART_Receive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <_read+0x30>
      return 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e008      	b.n	8002b06 <_read+0x42>
    else
      return EIO;
 8002af4:	2305      	movs	r3, #5
 8002af6:	e006      	b.n	8002b06 <_read+0x42>
  }
  errno = EBADF;
 8002af8:	f00a f8b4 	bl	800cc64 <__errno>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2209      	movs	r2, #9
 8002b00:	601a      	str	r2, [r3, #0]
  return -1;
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000780 	.word	0x20000780

08002b14 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db08      	blt.n	8002b36 <_fstat+0x22>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	dc05      	bgt.n	8002b36 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b30:	605a      	str	r2, [r3, #4]
    return 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e005      	b.n	8002b42 <_fstat+0x2e>
  }

  errno = EBADF;
 8002b36:	f00a f895 	bl	800cc64 <__errno>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2209      	movs	r2, #9
 8002b3e:	601a      	str	r2, [r3, #0]
  return 0;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b52:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <HAL_MspInit+0x44>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_MspInit+0x44>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_MspInit+0x44>)
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_MspInit+0x44>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_MspInit+0x44>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	6593      	str	r3, [r2, #88]	; 0x58
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <HAL_MspInit+0x44>)
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_ADC_MspInit+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d12e      	bne.n	8002c14 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002bbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002bc8:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd4:	4b2c      	ldr	r3, [pc, #176]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002bfc:	230b      	movs	r3, #11
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0e:	f004 fc87 	bl	8007520 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002c12:	e031      	b.n	8002c78 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <HAL_ADC_MspInit+0xf8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12c      	bne.n	8002c78 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3301      	adds	r3, #1
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002c26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002c28:	4b16      	ldr	r3, [pc, #88]	; (8002c84 <HAL_ADC_MspInit+0xf0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10b      	bne.n	8002c48 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_ADC_MspInit+0xf4>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002c64:	230b      	movs	r3, #11
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c6c:	f107 031c 	add.w	r3, r7, #28
 8002c70:	4619      	mov	r1, r3
 8002c72:	4807      	ldr	r0, [pc, #28]	; (8002c90 <HAL_ADC_MspInit+0xfc>)
 8002c74:	f004 fc54 	bl	8007520 <HAL_GPIO_Init>
}
 8002c78:	bf00      	nop
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	50040000 	.word	0x50040000
 8002c84:	20000784 	.word	0x20000784
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	50040100 	.word	0x50040100
 8002c90:	48000800 	.word	0x48000800

08002c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b096      	sub	sp, #88	; 0x58
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cac:	f107 0310 	add.w	r3, r7, #16
 8002cb0:	2234      	movs	r2, #52	; 0x34
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f00a f807 	bl	800ccc8 <memset>
  if(hi2c->Instance==I2C1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	; (8002d3c <HAL_I2C_MspInit+0xa8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d137      	bne.n	8002d34 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cc4:	2340      	movs	r3, #64	; 0x40
 8002cc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f006 fa65 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002cdc:	f7ff fe6a 	bl	80029b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cfe:	2312      	movs	r3, #18
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d0a:	2304      	movs	r3, #4
 8002d0c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d12:	4619      	mov	r1, r3
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f004 fc02 	bl	8007520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d26:	6593      	str	r3, [r2, #88]	; 0x58
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_I2C_MspInit+0xac>)
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	3758      	adds	r7, #88	; 0x58
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40005400 	.word	0x40005400
 8002d40:	40021000 	.word	0x40021000

08002d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b09a      	sub	sp, #104	; 0x68
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d5c:	f107 0320 	add.w	r3, r7, #32
 8002d60:	2234      	movs	r2, #52	; 0x34
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f009 ffaf 	bl	800ccc8 <memset>
  if(huart->Instance==LPUART1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a4f      	ldr	r2, [pc, #316]	; (8002eac <HAL_UART_MspInit+0x168>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d13f      	bne.n	8002df4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d74:	2320      	movs	r3, #32
 8002d76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d7c:	f107 0320 	add.w	r3, r7, #32
 8002d80:	4618      	mov	r0, r3
 8002d82:	f006 fa0d 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d8c:	f7ff fe12 	bl	80029b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d94:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002d9c:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da8:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dc0:	230c      	movs	r3, #12
 8002dc2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dde:	f004 fb9f 	bl	8007520 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2100      	movs	r1, #0
 8002de6:	2046      	movs	r0, #70	; 0x46
 8002de8:	f004 f863 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002dec:	2046      	movs	r0, #70	; 0x46
 8002dee:	f004 f87c 	bl	8006eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002df2:	e057      	b.n	8002ea4 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <HAL_UART_MspInit+0x170>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d152      	bne.n	8002ea4 <HAL_UART_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e02:	2300      	movs	r3, #0
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e06:	f107 0320 	add.w	r3, r7, #32
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f006 f9c8 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002e16:	f7ff fdcd 	bl	80029b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	4a24      	ldr	r2, [pc, #144]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e24:	6593      	str	r3, [r2, #88]	; 0x58
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e32:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	4a18      	ldr	r2, [pc, #96]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <HAL_UART_MspInit+0x16c>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e62:	2310      	movs	r3, #16
 8002e64:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e72:	2307      	movs	r3, #7
 8002e74:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	480e      	ldr	r0, [pc, #56]	; (8002eb8 <HAL_UART_MspInit+0x174>)
 8002e7e:	f004 fb4f 	bl	8007520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e86:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e94:	2307      	movs	r3, #7
 8002e96:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4807      	ldr	r0, [pc, #28]	; (8002ebc <HAL_UART_MspInit+0x178>)
 8002ea0:	f004 fb3e 	bl	8007520 <HAL_GPIO_Init>
}
 8002ea4:	bf00      	nop
 8002ea6:	3768      	adds	r7, #104	; 0x68
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40008000 	.word	0x40008000
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40004800 	.word	0x40004800
 8002eb8:	48000800 	.word	0x48000800
 8002ebc:	48000400 	.word	0x48000400

08002ec0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	2234      	movs	r2, #52	; 0x34
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f009 fef9 	bl	800ccc8 <memset>
  if(hrng->Instance==RNG)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_RNG_MspInit+0x60>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d11b      	bne.n	8002f18 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002ee0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ee4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8002ee6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002eea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f006 f955 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002efc:	f7ff fd5a 	bl	80029b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RNG_MspInit+0x64>)
 8002f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_RNG_MspInit+0x64>)
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RNG_MspInit+0x64>)
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	3740      	adds	r7, #64	; 0x40
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	50060800 	.word	0x50060800
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b090      	sub	sp, #64	; 0x40
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	2234      	movs	r2, #52	; 0x34
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f009 fec5 	bl	800ccc8 <memset>
  if(hrtc->Instance==RTC)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_RTC_MspInit+0x68>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d11f      	bne.n	8002f88 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f006 f921 	bl	80091a0 <HAL_RCCEx_PeriphCLKConfig>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002f64:	f7ff fd26 	bl	80029b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RTC_MspInit+0x6c>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RTC_MspInit+0x6c>)
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	2029      	movs	r0, #41	; 0x29
 8002f7e:	f003 ff98 	bl	8006eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002f82:	2029      	movs	r0, #41	; 0x29
 8002f84:	f003 ffb1 	bl	8006eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f88:	bf00      	nop
 8002f8a:	3740      	adds	r7, #64	; 0x40
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40002800 	.word	0x40002800
 8002f94:	40021000 	.word	0x40021000

08002f98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_SPI_MspInit+0x7c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d128      	bne.n	800300c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fba:	4b17      	ldr	r3, [pc, #92]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbe:	4a16      	ldr	r2, [pc, #88]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fd8:	f043 0302 	orr.w	r3, r3, #2
 8002fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_SPI_MspInit+0x80>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4619      	mov	r1, r3
 8003006:	4805      	ldr	r0, [pc, #20]	; (800301c <HAL_SPI_MspInit+0x84>)
 8003008:	f004 fa8a 	bl	8007520 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800300c:	bf00      	nop
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40003800 	.word	0x40003800
 8003018:	40021000 	.word	0x40021000
 800301c:	48000400 	.word	0x48000400

08003020 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
//extern uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <SDTimer_Handler+0x40>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <SDTimer_Handler+0x1c>
    Timer1--;
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <SDTimer_Handler+0x40>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <SDTimer_Handler+0x40>)
 800303a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <SDTimer_Handler+0x44>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <SDTimer_Handler+0x34>
    Timer2--;
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <SDTimer_Handler+0x44>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SDTimer_Handler+0x44>)
 8003052:	701a      	strb	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000789 	.word	0x20000789
 8003064:	2000078a 	.word	0x2000078a

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800306c:	e7fe      	b.n	800306c <NMI_Handler+0x4>

0800306e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <HardFault_Handler+0x4>

08003074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <MemManage_Handler+0x4>

0800307a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <BusFault_Handler+0x4>

08003080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <UsageFault_Handler+0x4>

08003086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  FatFsCnt++;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <SysTick_Handler+0x30>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <SysTick_Handler+0x30>)
 80030c0:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80030c2:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <SysTick_Handler+0x30>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d904      	bls.n	80030d6 <SysTick_Handler+0x26>
  {
	FatFsCnt = 0;
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <SysTick_Handler+0x30>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
	SDTimer_Handler();
 80030d2:	f7ff ffa5 	bl	8003020 <SDTimer_Handler>
  /*if(Timer1 > 0)
		Timer1--;
	if(Timer2 > 0)
		Timer2--;*/
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d6:	f002 f9ed 	bl	80054b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000788 	.word	0x20000788

080030e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <RTC_Alarm_IRQHandler+0x10>)
 80030ea:	f006 fdd5 	bl	8009c98 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000478 	.word	0x20000478

080030f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <LPUART1_IRQHandler+0x10>)
 80030fe:	f008 f9cf 	bl	800b4a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000360 	.word	0x20000360

0800310c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <_sbrk+0x5c>)
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <_sbrk+0x60>)
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <_sbrk+0x64>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x64>)
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <_sbrk+0x68>)
 800312c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <_sbrk+0x64>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	429a      	cmp	r2, r3
 800313a:	d207      	bcs.n	800314c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800313c:	f009 fd92 	bl	800cc64 <__errno>
 8003140:	4603      	mov	r3, r0
 8003142:	220c      	movs	r2, #12
 8003144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	e009      	b.n	8003160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <_sbrk+0x64>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003152:	4b07      	ldr	r3, [pc, #28]	; (8003170 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	4a05      	ldr	r2, [pc, #20]	; (8003170 <_sbrk+0x64>)
 800315c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000a000 	.word	0x2000a000
 800316c:	00000400 	.word	0x00000400
 8003170:	2000078c 	.word	0x2000078c
 8003174:	200007c0 	.word	0x200007c0

08003178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <SystemInit+0x20>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <SystemInit+0x20>)
 8003184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	e000ed00 	.word	0xe000ed00

0800319c <calculateDistance>:
 */

#include "Depth/DepthMeasuring.h"


void calculateDistance(ADC_HandleTypeDef* adcHandle1, ADC_HandleTypeDef* adcHandle2, struct DepthData* depthData){
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b08c      	sub	sp, #48	; 0x30
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]

	int outPrev1 = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
	int outPrev2 = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
	float div1 = 0;
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
	float div2 = 0;
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    HAL_ADC_Start(adcHandle1);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f002 fd61 	bl	8005c84 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(adcHandle1, HAL_MAX_DELAY);
 80031c2:	f04f 31ff 	mov.w	r1, #4294967295
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f002 fe4a 	bl	8005e60 <HAL_ADC_PollForConversion>

	float raw_value1 = (float)HAL_ADC_GetValue(adcHandle1);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f002 ff1f 	bl	8006010 <HAL_ADC_GetValue>
 80031d2:	ee07 0a90 	vmov	s15, r0
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	edc7 7a05 	vstr	s15, [r7, #20]
    HAL_ADC_Stop(adcHandle1);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f002 fe0a 	bl	8005df8 <HAL_ADC_Stop>

	HAL_ADC_Start(adcHandle2);
 80031e4:	68b8      	ldr	r0, [r7, #8]
 80031e6:	f002 fd4d 	bl	8005c84 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(adcHandle2, HAL_MAX_DELAY);
 80031ea:	f04f 31ff 	mov.w	r1, #4294967295
 80031ee:	68b8      	ldr	r0, [r7, #8]
 80031f0:	f002 fe36 	bl	8005e60 <HAL_ADC_PollForConversion>
    float raw_value2 = (float)HAL_ADC_GetValue(adcHandle2);
 80031f4:	68b8      	ldr	r0, [r7, #8]
 80031f6:	f002 ff0b 	bl	8006010 <HAL_ADC_GetValue>
 80031fa:	ee07 0a90 	vmov	s15, r0
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	edc7 7a04 	vstr	s15, [r7, #16]
    HAL_ADC_Stop(adcHandle2);
 8003206:	68b8      	ldr	r0, [r7, #8]
 8003208:	f002 fdf6 	bl	8005df8 <HAL_ADC_Stop>

    printf("\r\nRaw values: %f, %f", raw_value1, raw_value2);
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7fd f99b 	bl	8000548 <__aeabi_f2d>
 8003212:	4604      	mov	r4, r0
 8003214:	460d      	mov	r5, r1
 8003216:	6938      	ldr	r0, [r7, #16]
 8003218:	f7fd f996 	bl	8000548 <__aeabi_f2d>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	e9cd 2300 	strd	r2, r3, [sp]
 8003224:	4622      	mov	r2, r4
 8003226:	462b      	mov	r3, r5
 8003228:	4893      	ldr	r0, [pc, #588]	; (8003478 <calculateDistance+0x2dc>)
 800322a:	f00a fcaf 	bl	800db8c <iprintf>

    if (raw_value1 > depthData->max_value_1 ) depthData->max_value_1 = raw_value1 ;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323a:	ed97 7a05 	vldr	s14, [r7, #20]
 800323e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	dd07      	ble.n	8003258 <calculateDistance+0xbc>
 8003248:	edd7 7a05 	vldr	s15, [r7, #20]
 800324c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003250:	ee17 2a90 	vmov	r2, s15
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]
    if (raw_value2 > depthData->max_value_2 ) depthData->max_value_2 = raw_value2 ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003264:	ed97 7a04 	vldr	s14, [r7, #16]
 8003268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	dd07      	ble.n	8003282 <calculateDistance+0xe6>
 8003272:	edd7 7a04 	vldr	s15, [r7, #16]
 8003276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327a:	ee17 2a90 	vmov	r2, s15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	615a      	str	r2, [r3, #20]
    if (raw_value1 < depthData->min_value_1 ) depthData->min_value_1 = raw_value1 ;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800328e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d507      	bpl.n	80032ac <calculateDistance+0x110>
 800329c:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032a4:	ee17 2a90 	vmov	r2, s15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	611a      	str	r2, [r3, #16]
    if (raw_value2 < depthData->min_value_2 ) depthData->min_value_2 = raw_value2 ;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	ee07 3a90 	vmov	s15, r3
 80032b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d507      	bpl.n	80032d6 <calculateDistance+0x13a>
 80032c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ce:	ee17 2a90 	vmov	r2, s15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]

    div1 = depthData->max_value_1 / 29;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	4a68      	ldr	r2, [pc, #416]	; (800347c <calculateDistance+0x2e0>)
 80032dc:	fb82 1203 	smull	r1, r2, r2, r3
 80032e0:	441a      	add	r2, r3
 80032e2:	1112      	asrs	r2, r2, #4
 80032e4:	17db      	asrs	r3, r3, #31
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	ee07 3a90 	vmov	s15, r3
 80032ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f0:	edc7 7a07 	vstr	s15, [r7, #28]
    div2 = depthData->max_value_2 / 29;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4a60      	ldr	r2, [pc, #384]	; (800347c <calculateDistance+0x2e0>)
 80032fa:	fb82 1203 	smull	r1, r2, r2, r3
 80032fe:	441a      	add	r2, r3
 8003300:	1112      	asrs	r2, r2, #4
 8003302:	17db      	asrs	r3, r3, #31
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330e:	edc7 7a06 	vstr	s15, [r7, #24]
    outPrev1 = depthData->output1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    outPrev2 = depthData->output2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	623b      	str	r3, [r7, #32]
    depthData->output1 = (int) raw_value1 / div1;
 800331e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003326:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800332a:	ed97 7a07 	vldr	s14, [r7, #28]
 800332e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003336:	ee17 2a90 	vmov	r2, s15
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	605a      	str	r2, [r3, #4]
	depthData->output2 = (int) raw_value2 / div2;
 800333e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800334a:	ed97 7a06 	vldr	s14, [r7, #24]
 800334e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003356:	ee17 2a90 	vmov	r2, s15
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	609a      	str	r2, [r3, #8]

    if (depthData->output1 == outPrev1 && depthData->output2 == outPrev2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	429a      	cmp	r2, r3
 8003366:	d105      	bne.n	8003374 <calculateDistance+0x1d8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	429a      	cmp	r2, r3
 8003370:	f000 80b1 	beq.w	80034d6 <calculateDistance+0x33a>
	{
    	return;
	}
    if ( depthData->output2 > depthData->output1 && depthData->output2 < 29 && depthData->output1 < 2){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	429a      	cmp	r2, r3
 800337e:	dd25      	ble.n	80033cc <calculateDistance+0x230>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b1c      	cmp	r3, #28
 8003386:	dc21      	bgt.n	80033cc <calculateDistance+0x230>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	dc1d      	bgt.n	80033cc <calculateDistance+0x230>

		if (depthData->output2 > outPrev2) depthData->pos = depthData->pos + (depthData->output2 - outPrev2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	429a      	cmp	r2, r3
 8003398:	da08      	bge.n	80033ac <calculateDistance+0x210>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6899      	ldr	r1, [r3, #8]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	1acb      	subs	r3, r1, r3
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]
		if (depthData->output2 < outPrev2) depthData->pos = depthData->pos - (outPrev2 - depthData->output2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	6a3a      	ldr	r2, [r7, #32]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	f340 8091 	ble.w	80034da <calculateDistance+0x33e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	6a39      	ldr	r1, [r7, #32]
 80033c2:	1acb      	subs	r3, r1, r3
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	601a      	str	r2, [r3, #0]
		return;
 80033ca:	e086      	b.n	80034da <calculateDistance+0x33e>
	}
    if (depthData->output2 > depthData->output1 && depthData->output1 > 1 && depthData->output2 > 18 )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	dd24      	ble.n	8003422 <calculateDistance+0x286>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	dd20      	ble.n	8003422 <calculateDistance+0x286>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	dd1c      	ble.n	8003422 <calculateDistance+0x286>
	{

		if (depthData->output1 > outPrev1 ) depthData->pos = depthData->pos + (depthData->output1 - outPrev1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ee:	429a      	cmp	r2, r3
 80033f0:	da08      	bge.n	8003404 <calculateDistance+0x268>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	1acb      	subs	r3, r1, r3
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
		if (depthData->output1 < outPrev1 ) depthData->pos = depthData->pos - (outPrev1 - depthData->output1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	429a      	cmp	r2, r3
 800340c:	dd67      	ble.n	80034de <calculateDistance+0x342>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003418:	1acb      	subs	r3, r1, r3
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	601a      	str	r2, [r3, #0]
		return;
 8003420:	e05d      	b.n	80034de <calculateDistance+0x342>
	}
    if (depthData->output1 > depthData->output2 && depthData->output2 > 1 && depthData->output1 > 25)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	dd28      	ble.n	8003480 <calculateDistance+0x2e4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	dd24      	ble.n	8003480 <calculateDistance+0x2e4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b19      	cmp	r3, #25
 800343c:	dd20      	ble.n	8003480 <calculateDistance+0x2e4>
	{

		if (depthData->output2 > outPrev2) depthData->pos = depthData->pos - (depthData->output2 - outPrev2);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	da08      	bge.n	800345a <calculateDistance+0x2be>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	1acb      	subs	r3, r1, r3
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
		if (depthData->output2 < outPrev2) depthData->pos = depthData->pos + (outPrev2 - depthData->output2);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	429a      	cmp	r2, r3
 8003462:	dd3e      	ble.n	80034e2 <calculateDistance+0x346>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	1acb      	subs	r3, r1, r3
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
		return;
 8003476:	e034      	b.n	80034e2 <calculateDistance+0x346>
 8003478:	08012980 	.word	0x08012980
 800347c:	8d3dcb09 	.word	0x8d3dcb09
	}
    if (depthData->output1 > depthData->output2 && depthData->output1 < 29 && depthData->output2 < 2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	dd2c      	ble.n	80034e6 <calculateDistance+0x34a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b1c      	cmp	r3, #28
 8003492:	dc28      	bgt.n	80034e6 <calculateDistance+0x34a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	dc24      	bgt.n	80034e6 <calculateDistance+0x34a>
	{

		if (depthData->output1 > outPrev1) depthData->pos = depthData->pos - (depthData->output1 - outPrev1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	429a      	cmp	r2, r3
 80034a4:	da08      	bge.n	80034b8 <calculateDistance+0x31c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1acb      	subs	r3, r1, r3
 80034b2:	1ad2      	subs	r2, r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]
		if (depthData->output1 < outPrev1) depthData->pos = depthData->pos + (outPrev1 - depthData->output1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	429a      	cmp	r2, r3
 80034c0:	dd13      	ble.n	80034ea <calculateDistance+0x34e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034cc:	1acb      	subs	r3, r1, r3
 80034ce:	441a      	add	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
		return;
 80034d4:	e009      	b.n	80034ea <calculateDistance+0x34e>
    	return;
 80034d6:	bf00      	nop
 80034d8:	e008      	b.n	80034ec <calculateDistance+0x350>
		return;
 80034da:	bf00      	nop
 80034dc:	e006      	b.n	80034ec <calculateDistance+0x350>
		return;
 80034de:	bf00      	nop
 80034e0:	e004      	b.n	80034ec <calculateDistance+0x350>
		return;
 80034e2:	bf00      	nop
 80034e4:	e002      	b.n	80034ec <calculateDistance+0x350>
	}

    return;
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <calculateDistance+0x350>
		return;
 80034ea:	bf00      	nop
}
 80034ec:	3728      	adds	r7, #40	; 0x28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bdb0      	pop	{r4, r5, r7, pc}
 80034f2:	bf00      	nop

080034f4 <bytecpy>:
 */

#include "../Inc/Pressure/PressureSensing.h"

static void bytecpy(uint8_t *target, uint8_t *source)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
    if ((target != NULL) && (source != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <bytecpy+0x1e>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <bytecpy+0x1e>
    {
        *target = *source;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	701a      	strb	r2, [r3, #0]
    }
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <lps28dfw_read_reg>:

int32_t lps28dfw_read_reg(I2C_HandleTypeDef* handle, uint8_t wantedAddress, uint8_t reg, uint8_t *data,
                          uint16_t len)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b08c      	sub	sp, #48	; 0x30
 8003522:	af02      	add	r7, sp, #8
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	72fb      	strb	r3, [r7, #11]
 800352c:	4613      	mov	r3, r2
 800352e:	72bb      	strb	r3, [r7, #10]
	//printf("\r\nreading reg");
	HAL_StatusTypeDef ret;
	uint8_t transmitBuf[12];
	// Make sure the number of bytes is statusid
	if(len == 0)
 8003530:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <lps28dfw_read_reg+0x1e>
	{
		return LPS28DFW_E_COM_FAIL;
 8003536:	f06f 0301 	mvn.w	r3, #1
 800353a:	e045      	b.n	80035c8 <lps28dfw_read_reg+0xaa>
	}
	uint8_t address = wantedAddress << 1;
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	// Jump to desired register address
	transmitBuf[0] = reg;
 8003544:	7abb      	ldrb	r3, [r7, #10]
 8003546:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(handle, address, transmitBuf, 1, 1000);
 8003548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800354c:	b299      	uxth	r1, r3
 800354e:	f107 0214 	add.w	r2, r7, #20
 8003552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2301      	movs	r3, #1
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f004 fa12 	bl	8007984 <HAL_I2C_Master_Transmit>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	if ( ret != HAL_OK ) {
 8003566:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <lps28dfw_read_reg+0x56>
		//printf("\r\nHAL read transmit error");
		return LPS28DFW_E_COM_FAIL;
 800356e:	f06f 0301 	mvn.w	r3, #1
 8003572:	e029      	b.n	80035c8 <lps28dfw_read_reg+0xaa>
	}
	else{
		ret = HAL_I2C_Master_Receive(handle, address, transmitBuf, len, HAL_MAX_DELAY);
 8003574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003578:	b299      	uxth	r1, r3
 800357a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800357c:	f107 0214 	add.w	r2, r7, #20
 8003580:	f04f 30ff 	mov.w	r0, #4294967295
 8003584:	9000      	str	r0, [sp, #0]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f004 faf0 	bl	8007b6c <HAL_I2C_Master_Receive>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		if ( ret != HAL_OK ) {
 8003592:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <lps28dfw_read_reg+0x82>
			//printf("\r\nHAL read receive error");
			return LPS28DFW_E_COM_FAIL;
 800359a:	f06f 0301 	mvn.w	r3, #1
 800359e:	e013      	b.n	80035c8 <lps28dfw_read_reg+0xaa>
		}
		else{

			for(int i = 0;i<len;i++){
 80035a0:	2300      	movs	r3, #0
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
 80035a4:	e00b      	b.n	80035be <lps28dfw_read_reg+0xa0>

				data[i] = transmitBuf[i];
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	f107 0114 	add.w	r1, r7, #20
 80035b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b2:	440a      	add	r2, r1
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i<len;i++){
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	3301      	adds	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
 80035be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	429a      	cmp	r2, r3
 80035c4:	dbef      	blt.n	80035a6 <lps28dfw_read_reg+0x88>

			}

		}
	}
	return LPS28DFW_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <lps28dfw_write_reg>:

int32_t lps28dfw_write_reg(I2C_HandleTypeDef* handle, uint8_t wantedAddress, uint8_t reg, uint8_t *data,
                           uint16_t len)
{
 80035d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035d4:	b08b      	sub	sp, #44	; 0x2c
 80035d6:	af02      	add	r7, sp, #8
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	72fb      	strb	r3, [r7, #11]
 80035e0:	4613      	mov	r3, r2
 80035e2:	72bb      	strb	r3, [r7, #10]
 80035e4:	466b      	mov	r3, sp
 80035e6:	461e      	mov	r6, r3
	HAL_StatusTypeDef ret;
	uint8_t transmitBuf[len+1];
 80035e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035ec:	1c59      	adds	r1, r3, #1
 80035ee:	1e4b      	subs	r3, r1, #1
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	460a      	mov	r2, r1
 80035f4:	2300      	movs	r3, #0
 80035f6:	4690      	mov	r8, r2
 80035f8:	4699      	mov	r9, r3
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800360a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360e:	460a      	mov	r2, r1
 8003610:	2300      	movs	r3, #0
 8003612:	4614      	mov	r4, r2
 8003614:	461d      	mov	r5, r3
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	00eb      	lsls	r3, r5, #3
 8003620:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003624:	00e2      	lsls	r2, r4, #3
 8003626:	460b      	mov	r3, r1
 8003628:	3307      	adds	r3, #7
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	ebad 0d03 	sub.w	sp, sp, r3
 8003632:	ab02      	add	r3, sp, #8
 8003634:	3300      	adds	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
	// Make sure the number of bytes is status id
	if(len == 0)
 8003638:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <lps28dfw_write_reg+0x76>
	{
		return LPS28DFW_E_COM_FAIL;
 8003640:	f06f 0301 	mvn.w	r3, #1
 8003644:	e030      	b.n	80036a8 <lps28dfw_write_reg+0xd8>
	}

	uint8_t address = wantedAddress << 1;
 8003646:	7afb      	ldrb	r3, [r7, #11]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	74fb      	strb	r3, [r7, #19]
	transmitBuf[0] = reg;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	7aba      	ldrb	r2, [r7, #10]
 8003650:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<=len;i++){
 8003652:	2301      	movs	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
 8003656:	e00c      	b.n	8003672 <lps28dfw_write_reg+0xa2>
		transmitBuf[i] = data[i-1];
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3b01      	subs	r3, #1
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	7819      	ldrb	r1, [r3, #0]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	460a      	mov	r2, r1
 800366a:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i<=len;i++){
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3301      	adds	r3, #1
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	429a      	cmp	r2, r3
 800367a:	dded      	ble.n	8003658 <lps28dfw_write_reg+0x88>
	}
	ret = HAL_I2C_Master_Transmit(handle, address, transmitBuf, len+1, 1000);
 800367c:	7cfb      	ldrb	r3, [r7, #19]
 800367e:	b299      	uxth	r1, r3
 8003680:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003684:	3301      	adds	r3, #1
 8003686:	b29b      	uxth	r3, r3
 8003688:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800368c:	9200      	str	r2, [sp, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f004 f977 	bl	8007984 <HAL_I2C_Master_Transmit>
 8003696:	4603      	mov	r3, r0
 8003698:	74bb      	strb	r3, [r7, #18]
	if ( ret != HAL_OK ) {
 800369a:	7cbb      	ldrb	r3, [r7, #18]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <lps28dfw_write_reg+0xd6>
		return LPS28DFW_E_COM_FAIL;
 80036a0:	f06f 0301 	mvn.w	r3, #1
 80036a4:	e000      	b.n	80036a8 <lps28dfw_write_reg+0xd8>
	}

	return LPS28DFW_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	46b5      	mov	sp, r6
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3724      	adds	r7, #36	; 0x24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080036b4 <lps28dfw_from_fs1260_to_hPa>:

//conversions

float lps28dfw_from_fs1260_to_hPa(int32_t lsb)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    return ((float)lsb / 1048576.0f);   /* 4096.0f * 256 */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80036e0 <lps28dfw_from_fs1260_to_hPa+0x2c>
 80036ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80036d2:	eeb0 0a67 	vmov.f32	s0, s15
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	49800000 	.word	0x49800000

080036e4 <lps28dfw_from_fs4000_to_hPa>:

float lps28dfw_from_fs4000_to_hPa(int32_t lsb)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
    return ((float)lsb /  524288.0f);   /* 2048.0f * 256 */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	ee07 3a90 	vmov	s15, r3
 80036f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003710 <lps28dfw_from_fs4000_to_hPa+0x2c>
 80036fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036fe:	eef0 7a66 	vmov.f32	s15, s13
}
 8003702:	eeb0 0a67 	vmov.f32	s0, s15
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	49000000 	.word	0x49000000

08003714 <lps28dfw_from_lsb_to_celsius>:

float lps28dfw_from_lsb_to_celsius(int16_t lsb)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	80fb      	strh	r3, [r7, #6]
    return ((float)lsb / 100.0f);
 800371e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003744 <lps28dfw_from_lsb_to_celsius+0x30>
 800372e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003732:	eef0 7a66 	vmov.f32	s15, s13
}
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	42c80000 	.word	0x42c80000

08003748 <initLPS28>:

/// @brief Enables the BDU and IF_ADD_INC bits in the control registers
/// @return Error code. 0 means success, negative means failure
int32_t initLPS28(lps28dfw_info_t* sensorData, uint8_t status)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    lps28dfw_ctrl_reg3_t ctrl_reg3;
    uint8_t reg[2];
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, reg, 2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	7919      	ldrb	r1, [r3, #4]
 800375c:	f107 0308 	add.w	r3, r7, #8
 8003760:	2202      	movs	r2, #2
 8003762:	9200      	str	r2, [sp, #0]
 8003764:	2211      	movs	r2, #17
 8003766:	f7ff feda 	bl	800351e <lps28dfw_read_reg>
 800376a:	6178      	str	r0, [r7, #20]
    if (ret == 0)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d172      	bne.n	8003858 <initLPS28+0x110>
    {
        bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8003772:	f107 0208 	add.w	r2, r7, #8
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff feb9 	bl	80034f4 <bytecpy>
        bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	f107 030c 	add.w	r3, r7, #12
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff feb0 	bl	80034f4 <bytecpy>

        switch (status)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d016      	beq.n	80037c8 <initLPS28+0x80>
 800379a:	2b02      	cmp	r3, #2
 800379c:	dc4b      	bgt.n	8003836 <initLPS28+0xee>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d023      	beq.n	80037ea <initLPS28+0xa2>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d147      	bne.n	8003836 <initLPS28+0xee>
        {
        case LPS28DFW_BOOT:
            ctrl_reg2.boot = PROPERTY_ENABLE;
 80037a6:	7c3b      	ldrb	r3, [r7, #16]
 80037a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ac:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7919      	ldrb	r1, [r3, #4]
 80037b6:	f107 0310 	add.w	r3, r7, #16
 80037ba:	2201      	movs	r2, #1
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	2211      	movs	r2, #17
 80037c0:	f7ff ff06 	bl	80035d0 <lps28dfw_write_reg>
 80037c4:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 80037c6:	e048      	b.n	800385a <initLPS28+0x112>
        case LPS28DFW_RESET:
            ctrl_reg2.swreset = PROPERTY_ENABLE;
 80037c8:	7c3b      	ldrb	r3, [r7, #16]
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7919      	ldrb	r1, [r3, #4]
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	2201      	movs	r2, #1
 80037de:	9200      	str	r2, [sp, #0]
 80037e0:	2211      	movs	r2, #17
 80037e2:	f7ff fef5 	bl	80035d0 <lps28dfw_write_reg>
 80037e6:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 80037e8:	e037      	b.n	800385a <initLPS28+0x112>
        case LPS28DFW_DRV_RDY:
            ctrl_reg2.bdu = PROPERTY_ENABLE;
 80037ea:	7c3b      	ldrb	r3, [r7, #16]
 80037ec:	f043 0308 	orr.w	r3, r3, #8
 80037f0:	743b      	strb	r3, [r7, #16]
            ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 80037f2:	7b3b      	ldrb	r3, [r7, #12]
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	733b      	strb	r3, [r7, #12]
            bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 80037fa:	f107 0210 	add.w	r2, r7, #16
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fe75 	bl	80034f4 <bytecpy>
            bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 800380a:	f107 020c 	add.w	r2, r7, #12
 800380e:	f107 0308 	add.w	r3, r7, #8
 8003812:	3301      	adds	r3, #1
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fe6c 	bl	80034f4 <bytecpy>
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, reg, 2);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	7919      	ldrb	r1, [r3, #4]
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	2202      	movs	r2, #2
 800382a:	9200      	str	r2, [sp, #0]
 800382c:	2211      	movs	r2, #17
 800382e:	f7ff fecf 	bl	80035d0 <lps28dfw_write_reg>
 8003832:	6178      	str	r0, [r7, #20]
            break;
 8003834:	e011      	b.n	800385a <initLPS28+0x112>
        default:
            ctrl_reg2.swreset = PROPERTY_ENABLE;
 8003836:	7c3b      	ldrb	r3, [r7, #16]
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	743b      	strb	r3, [r7, #16]
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7919      	ldrb	r1, [r3, #4]
 8003846:	f107 0310 	add.w	r3, r7, #16
 800384a:	2201      	movs	r2, #1
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	2211      	movs	r2, #17
 8003850:	f7ff febe 	bl	80035d0 <lps28dfw_write_reg>
 8003854:	6178      	str	r0, [r7, #20]
                                     (uint8_t *)&ctrl_reg2, 1);
            break;
 8003856:	e000      	b.n	800385a <initLPS28+0x112>
        }

    }
 8003858:	bf00      	nop
    return ret;
 800385a:	697b      	ldr	r3, [r7, #20]

}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <beginLPS28>:
/// @brief Begin communication with the sensor over I2C
/// @param address I2C address of sensor
/// @param wirePort I2C port to use for communication, defaults to Wire
/// @return Error code. 0 means success, negative means failure
int32_t beginLPS28(lps28dfw_info_t* sensorData, uint8_t address)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	70fb      	strb	r3, [r7, #3]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

    // Check whether the sensor is actually connected
    uint8_t chipID;
    err = lps28dfw_read_reg(sensorData->handle, address, LPS28DFW_WHOAMI_ADDR, &chipID, 1);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	f107 030b 	add.w	r3, r7, #11
 800387c:	78f9      	ldrb	r1, [r7, #3]
 800387e:	2201      	movs	r2, #1
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	220f      	movs	r2, #15
 8003884:	f7ff fe4b 	bl	800351e <lps28dfw_read_reg>
 8003888:	60f8      	str	r0, [r7, #12]
    if(err != LPS28DFW_OK)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <beginLPS28+0x30>
    {
    	//printf("\r\nID read error");
        return err;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	e016      	b.n	80038c2 <beginLPS28+0x5e>
    }
    else{
    	//printf("\r\nRetrieved ID: %d", chipID);
    }
    if(chipID != LPS28DFW_WHOAMI)
 8003894:	7afb      	ldrb	r3, [r7, #11]
 8003896:	2bb4      	cmp	r3, #180	; 0xb4
 8003898:	d002      	beq.n	80038a0 <beginLPS28+0x3c>
    {
        return LPS28DFW_E_NOT_CONNECTED;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	e010      	b.n	80038c2 <beginLPS28+0x5e>
    }
    sensorData->i2cAddress = address;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	711a      	strb	r2, [r3, #4]
    // Sensor is connected, send soft reset to clear any provious configuratio
    err = resetLPS28(sensorData);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f80f 	bl	80038ca <resetLPS28>
 80038ac:	60f8      	str	r0, [r7, #12]
    if(err != LPS28DFW_OK)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <beginLPS28+0x54>
    {
        return err;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	e004      	b.n	80038c2 <beginLPS28+0x5e>
    }

    // Send init command
    return initLPS28(sensorData, LPS28DFW_DRV_RDY);
 80038b8:	2100      	movs	r1, #0
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff44 	bl	8003748 <initLPS28>
 80038c0:	4603      	mov	r3, r0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <resetLPS28>:
}

/// @brief Tells the sensor to reset itself
/// @return Error code. 0 means success, negative means failure
int32_t resetLPS28(lps28dfw_info_t* sensorData)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]

    // Send reset command
    err = initLPS28(sensorData, LPS28DFW_RESET);
 80038d6:	2102      	movs	r1, #2
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff35 	bl	8003748 <initLPS28>
 80038de:	60f8      	str	r0, [r7, #12]

    lps28dfw_stat_t status;
    do
    {
        err = getStatus(sensorData, &status);
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f891 	bl	8003a0e <getStatus>
 80038ec:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <resetLPS28+0x2e>
        {
            return err;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	e006      	b.n	8003906 <resetLPS28+0x3c>
        }
    }
    while(status.sw_reset);
 80038f8:	7a3b      	ldrb	r3, [r7, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ed      	bne.n	80038e0 <resetLPS28+0x16>

    return LPS28DFW_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <setModeConfig>:

/// @brief Sets operational parameters of the sensor, such as range and ODR
/// @param config Struct of configuration parameters, see lps28dfw_md_t
/// @return Error code. 0 means success, negative means failure
int32_t setModeConfig(lps28dfw_info_t* sensorData, lps28dfw_md_t* config)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b088      	sub	sp, #32
 8003912:	af02      	add	r7, sp, #8
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

    lps28dfw_ctrl_reg1_t ctrl_reg1;
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    uint8_t reg[2];

    err = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG1, reg, 2);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7919      	ldrb	r1, [r3, #4]
 8003924:	f107 0308 	add.w	r3, r7, #8
 8003928:	2202      	movs	r2, #2
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	2210      	movs	r2, #16
 800392e:	f7ff fdf6 	bl	800351e <lps28dfw_read_reg>
 8003932:	6178      	str	r0, [r7, #20]
    if(err != LPS28DFW_OK)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <setModeConfig+0x30>
    {
        return err;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	e063      	b.n	8003a06 <setModeConfig+0xf8>
    }
    if (err == 0)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d155      	bne.n	80039f0 <setModeConfig+0xe2>
    {
        bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8003944:	f107 0208 	add.w	r2, r7, #8
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fdd0 	bl	80034f4 <bytecpy>
        bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8003954:	f107 0308 	add.w	r3, r7, #8
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fdc7 	bl	80034f4 <bytecpy>

        ctrl_reg1.odr = (uint8_t)config->odr;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	b2da      	uxtb	r2, r3
 8003970:	7c3b      	ldrb	r3, [r7, #16]
 8003972:	f362 03c6 	bfi	r3, r2, #3, #4
 8003976:	743b      	strb	r3, [r7, #16]
        ctrl_reg1.avg = (uint8_t)config->avg;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	789b      	ldrb	r3, [r3, #2]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	b2da      	uxtb	r2, r3
 8003982:	7c3b      	ldrb	r3, [r7, #16]
 8003984:	f362 0302 	bfi	r3, r2, #0, #3
 8003988:	743b      	strb	r3, [r7, #16]
        ctrl_reg2.en_lpfp = ((uint8_t)config->lpf & 0x01U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	78db      	ldrb	r3, [r3, #3]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	7b3b      	ldrb	r3, [r7, #12]
 8003996:	f362 1304 	bfi	r3, r2, #4, #1
 800399a:	733b      	strb	r3, [r7, #12]
        ctrl_reg2.lfpf_cfg = ((uint8_t)config->lpf & 0x02U) >> 2;
 800399c:	7b3b      	ldrb	r3, [r7, #12]
 800399e:	f36f 1345 	bfc	r3, #5, #1
 80039a2:	733b      	strb	r3, [r7, #12]
        ctrl_reg2.fs_mode = (uint8_t)config->fs;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	7b3b      	ldrb	r3, [r7, #12]
 80039b0:	f362 1386 	bfi	r3, r2, #6, #1
 80039b4:	733b      	strb	r3, [r7, #12]

        bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 80039b6:	f107 0210 	add.w	r2, r7, #16
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fd97 	bl	80034f4 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 80039c6:	f107 020c 	add.w	r2, r7, #12
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	3301      	adds	r3, #1
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fd8e 	bl	80034f4 <bytecpy>

        err = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG1, reg, 2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7919      	ldrb	r1, [r3, #4]
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	2202      	movs	r2, #2
 80039e6:	9200      	str	r2, [sp, #0]
 80039e8:	2210      	movs	r2, #16
 80039ea:	f7ff fdf1 	bl	80035d0 <lps28dfw_write_reg>
 80039ee:	6178      	str	r0, [r7, #20]
    }

    if(err != LPS28DFW_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <setModeConfig+0xec>
    {
        return err;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	e005      	b.n	8003a06 <setModeConfig+0xf8>
    }

    // Config set correctly, save config for use later
    memcpy(&(sensorData->modeConfig), config, sizeof(lps28dfw_md_t));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3305      	adds	r3, #5
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	601a      	str	r2, [r3, #0]

    return LPS28DFW_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <getStatus>:

/// @brief Gets sensor status bits, such as data ready, overrun, etc.
/// @param status Struct of status bits, see lps28dfw_stat_t
/// @return Error code. 0 means success, negative means failure
int32_t getStatus(lps28dfw_info_t* sensorData, lps28dfw_stat_t* stat)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08a      	sub	sp, #40	; 0x28
 8003a12:	af02      	add	r7, sp, #8
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
    lps28dfw_int_source_t int_source;
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    lps28dfw_status_t status;
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7919      	ldrb	r1, [r3, #4]
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	2201      	movs	r2, #1
 8003a26:	9200      	str	r2, [sp, #0]
 8003a28:	2211      	movs	r2, #17
 8003a2a:	f7ff fd78 	bl	800351e <lps28dfw_read_reg>
 8003a2e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2, 1);
    if (ret == 0)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <getStatus+0x40>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_INT_SOURCE, (uint8_t *)&int_source, 1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7919      	ldrb	r1, [r3, #4]
 8003a3e:	f107 0314 	add.w	r3, r7, #20
 8003a42:	2201      	movs	r2, #1
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	f7ff fd69 	bl	800351e <lps28dfw_read_reg>
 8003a4c:	61f8      	str	r0, [r7, #28]
    }
    if (ret == 0)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <getStatus+0x5e>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_STATUS, (uint8_t *)&status, 1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7919      	ldrb	r1, [r3, #4]
 8003a5c:	f107 030c 	add.w	r3, r7, #12
 8003a60:	2201      	movs	r2, #1
 8003a62:	9200      	str	r2, [sp, #0]
 8003a64:	2227      	movs	r2, #39	; 0x27
 8003a66:	f7ff fd5a 	bl	800351e <lps28dfw_read_reg>
 8003a6a:	61f8      	str	r0, [r7, #28]
    }
    if (ret == 0)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <getStatus+0x7c>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_INTERRUPT_CFG,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7919      	ldrb	r1, [r3, #4]
 8003a7a:	f107 0318 	add.w	r3, r7, #24
 8003a7e:	2201      	movs	r2, #1
 8003a80:	9200      	str	r2, [sp, #0]
 8003a82:	220b      	movs	r2, #11
 8003a84:	f7ff fd4b 	bl	800351e <lps28dfw_read_reg>
 8003a88:	61f8      	str	r0, [r7, #28]
                                (uint8_t *)&interrupt_cfg, 1);
    }
    stat->sw_reset  = ctrl_reg2.swreset;
 8003a8a:	7c3b      	ldrb	r3, [r7, #16]
 8003a8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003a90:	b2d9      	uxtb	r1, r3
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	7813      	ldrb	r3, [r2, #0]
 8003a96:	f361 0300 	bfi	r3, r1, #0, #1
 8003a9a:	7013      	strb	r3, [r2, #0]
    stat->boot      = int_source.boot_on;
 8003a9c:	7d3b      	ldrb	r3, [r7, #20]
 8003a9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	7813      	ldrb	r3, [r2, #0]
 8003aa8:	f361 0341 	bfi	r3, r1, #1, #1
 8003aac:	7013      	strb	r3, [r2, #0]
    stat->drdy_pres = status.p_da;
 8003aae:	7b3b      	ldrb	r3, [r7, #12]
 8003ab0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ab4:	b2d9      	uxtb	r1, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	7813      	ldrb	r3, [r2, #0]
 8003aba:	f361 0382 	bfi	r3, r1, #2, #1
 8003abe:	7013      	strb	r3, [r2, #0]
    stat->drdy_temp = status.t_da;
 8003ac0:	7b3b      	ldrb	r3, [r7, #12]
 8003ac2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ac6:	b2d9      	uxtb	r1, r3
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	7813      	ldrb	r3, [r2, #0]
 8003acc:	f361 03c3 	bfi	r3, r1, #3, #1
 8003ad0:	7013      	strb	r3, [r2, #0]
    stat->ovr_pres  = status.p_or;
 8003ad2:	7b3b      	ldrb	r3, [r7, #12]
 8003ad4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003ad8:	b2d9      	uxtb	r1, r3
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	7813      	ldrb	r3, [r2, #0]
 8003ade:	f361 1304 	bfi	r3, r1, #4, #1
 8003ae2:	7013      	strb	r3, [r2, #0]
    stat->ovr_temp  = status.t_or;
 8003ae4:	7b3b      	ldrb	r3, [r7, #12]
 8003ae6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003aea:	b2d9      	uxtb	r1, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	7813      	ldrb	r3, [r2, #0]
 8003af0:	f361 1345 	bfi	r3, r1, #5, #1
 8003af4:	7013      	strb	r3, [r2, #0]
    stat->end_meas  = ~ctrl_reg2.oneshot;
 8003af6:	7c3b      	ldrb	r3, [r7, #16]
 8003af8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2d9      	uxtb	r1, r3
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	7813      	ldrb	r3, [r2, #0]
 8003b0c:	f361 1386 	bfi	r3, r1, #6, #1
 8003b10:	7013      	strb	r3, [r2, #0]
    stat->ref_done = ~interrupt_cfg.autozero;
 8003b12:	7e3b      	ldrb	r3, [r7, #24]
 8003b14:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	b2d9      	uxtb	r1, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	7813      	ldrb	r3, [r2, #0]
 8003b28:	f361 13c7 	bfi	r3, r1, #7, #1
 8003b2c:	7013      	strb	r3, [r2, #0]

    return ret;
 8003b2e:	69fb      	ldr	r3, [r7, #28]

}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <lps28dfw_trigger_sw>:

int32_t lps28dfw_trigger_sw(lps28dfw_info_t* sensorData)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
    lps28dfw_ctrl_reg2_t ctrl_reg2;
    int32_t ret = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

    if (sensorData->modeConfig.odr == odr_LPS28DFW_ONE_SHOT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	799b      	ldrb	r3, [r3, #6]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11e      	bne.n	8003b8a <lps28dfw_trigger_sw+0x52>
    {
        ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	7919      	ldrb	r1, [r3, #4]
 8003b54:	f107 0308 	add.w	r3, r7, #8
 8003b58:	2201      	movs	r2, #1
 8003b5a:	9200      	str	r2, [sp, #0]
 8003b5c:	2211      	movs	r2, #17
 8003b5e:	f7ff fcde 	bl	800351e <lps28dfw_read_reg>
 8003b62:	60f8      	str	r0, [r7, #12]
        ctrl_reg2.oneshot = PROPERTY_ENABLE;
 8003b64:	7a3b      	ldrb	r3, [r7, #8]
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	723b      	strb	r3, [r7, #8]
        if (ret == 0)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <lps28dfw_trigger_sw+0x52>
        {
            ret = lps28dfw_write_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7919      	ldrb	r1, [r3, #4]
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	2201      	movs	r2, #1
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	2211      	movs	r2, #17
 8003b84:	f7ff fd24 	bl	80035d0 <lps28dfw_write_reg>
 8003b88:	60f8      	str	r0, [r7, #12]
        }
    }
    return ret;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <lps28dfw_data_get>:

int32_t lps28dfw_data_get(lps28dfw_info_t* sensorData)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
    uint8_t buff[5];
    int32_t ret;

    ret = lps28dfw_read_reg(sensorData->handle, sensorData->i2cAddress, LPS28DFW_PRESS_OUT_XL, buff, 5);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7919      	ldrb	r1, [r3, #4]
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	2205      	movs	r2, #5
 8003baa:	9200      	str	r2, [sp, #0]
 8003bac:	2228      	movs	r2, #40	; 0x28
 8003bae:	f7ff fcb6 	bl	800351e <lps28dfw_read_reg>
 8003bb2:	6178      	str	r0, [r7, #20]

    /* pressure conversion */
    sensorData->data.pressure.raw = (int32_t)buff[2];
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = (sensorData->data.pressure.raw * 256) + (int32_t) buff[1];
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	7b7a      	ldrb	r2, [r7, #13]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = (sensorData->data.pressure.raw * 256) + (int32_t) buff[0];
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	7b3a      	ldrb	r2, [r7, #12]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]
    sensorData->data.pressure.raw = sensorData->data.pressure.raw * 256;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	611a      	str	r2, [r3, #16]

    switch (sensorData->modeConfig.fs)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	795b      	ldrb	r3, [r3, #5]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <lps28dfw_data_get+0x5c>
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d00b      	beq.n	8003c06 <lps28dfw_data_get+0x72>
 8003bee:	e015      	b.n	8003c1c <lps28dfw_data_get+0x88>
    {
    case fs_LPS28DFW_1260hPa:
        sensorData->data.pressure.hpa = lps28dfw_from_fs1260_to_hPa(sensorData->data.pressure.raw);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fd5d 	bl	80036b4 <lps28dfw_from_fs1260_to_hPa>
 8003bfa:	eef0 7a40 	vmov.f32	s15, s0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	edc3 7a03 	vstr	s15, [r3, #12]
        break;
 8003c04:	e00f      	b.n	8003c26 <lps28dfw_data_get+0x92>
    case fs_LPS28DFW_4000hPa:
        sensorData->data.pressure.hpa = lps28dfw_from_fs4000_to_hPa(sensorData->data.pressure.raw);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fd6a 	bl	80036e4 <lps28dfw_from_fs4000_to_hPa>
 8003c10:	eef0 7a40 	vmov.f32	s15, s0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	edc3 7a03 	vstr	s15, [r3, #12]
        break;
 8003c1a:	e004      	b.n	8003c26 <lps28dfw_data_get+0x92>
    default:
        sensorData->data.pressure.hpa = 0.0f;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]
        break;
 8003c24:	bf00      	nop
    }

    /* temperature conversion */
    sensorData->data.heat.raw = (int16_t)buff[4];
 8003c26:	7c3b      	ldrb	r3, [r7, #16]
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	831a      	strh	r2, [r3, #24]
    sensorData->data.heat.raw = (sensorData->data.heat.raw * 256) + (int16_t) buff[3];
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b21a      	sxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	831a      	strh	r2, [r3, #24]
    sensorData->data.heat.deg_c = lps28dfw_from_lsb_to_celsius(sensorData->data.heat.raw);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fd60 	bl	8003714 <lps28dfw_from_lsb_to_celsius>
 8003c54:	eef0 7a40 	vmov.f32	s15, s0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	edc3 7a05 	vstr	s15, [r3, #20]

    return ret;
 8003c5e:	697b      	ldr	r3, [r7, #20]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <getSensorData>:

/// @brief Gets pressure data from the sensor. This must be called to update
/// the data struct
/// @return Error code. 0 means success, negative means failure
int32_t getSensorData(lps28dfw_info_t* sensorData)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
    // Variable to track errors returned by API calls
    int32_t err = LPS28DFW_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
    //printf("\r\nTest1:");
    // Check whether we're in one-shot mode
    if(sensorData->modeConfig.odr == odr_LPS28DFW_ONE_SHOT)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	799b      	ldrb	r3, [r3, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <getSensorData+0x26>
    {
        // We're in one-shot mode, trigger a measurement
        err = lps28dfw_trigger_sw(sensorData);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff5b 	bl	8003b38 <lps28dfw_trigger_sw>
 8003c82:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <getSensorData+0x26>
        {
            return err;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	e015      	b.n	8003cba <getSensorData+0x52>
    //printf("\r\nTest2:");
    // Wait for measurement to finish
    lps28dfw_stat_t status;
    do
    {
        err = getStatus(sensorData, &status);
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff feba 	bl	8003a0e <getStatus>
 8003c9a:	60f8      	str	r0, [r7, #12]
        if(err != LPS28DFW_OK)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <getSensorData+0x3e>
        {
            return err;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	e009      	b.n	8003cba <getSensorData+0x52>
        }
    }
    while(!status.end_meas);
 8003ca6:	7a3b      	ldrb	r3, [r7, #8]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0ed      	beq.n	8003c8e <getSensorData+0x26>
    //printf("\r\nTest3:");
    // Grab latest measurement
    return lps28dfw_data_get(sensorData);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff6e 	bl	8003b94 <lps28dfw_data_get>
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <init_comms>:

//uint8_t devices;
//device rfData->myDevice;

void init_comms(struct rfDataStorage* rfData, uint8_t deviceType, int id, int discovered)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	72fb      	strb	r3, [r7, #11]

	create_queue(rfData->RXFIFO);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fd22 	bl	8004720 <create_queue>
	rfData->myDevice.device_id = id;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	711a      	strb	r2, [r3, #4]
	rfData->myDevice.device_type = deviceType;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	7afa      	ldrb	r2, [r7, #11]
 8003ce8:	715a      	strb	r2, [r3, #5]
	rfData->myDevice.device_is_discovered = discovered;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	71da      	strb	r2, [r3, #7]

	rfData->count = 0;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	725a      	strb	r2, [r3, #9]
	rfData->num_fwds = 0;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	729a      	strb	r2, [r3, #10]

	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e01d      	b.n	8003d48 <init_comms+0x86>

		rfData->FWDFIFO[i].from_id = 0;
 8003d0c:	68f9      	ldr	r1, [r7, #12]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	330b      	adds	r3, #11
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].to_id = 0;
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[i].type = 0;
 8003d30:	68f9      	ldr	r1, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	330d      	adds	r3, #13
 8003d3e:	2200      	movs	r2, #0
 8003d40:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<MAX_NUM_FWDS;i++){
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b13      	cmp	r3, #19
 8003d4c:	ddde      	ble.n	8003d0c <init_comms+0x4a>

	}

}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <Comms_Handler>:

void Comms_Handler(struct rfDataStorage* rfData)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	if (rfData->myDevice.device_type == DEVICE_CHILD)					//Child Handler
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	795b      	ldrb	r3, [r3, #5]
 8003d64:	2b99      	cmp	r3, #153	; 0x99
 8003d66:	f040 8163 	bne.w	8004030 <Comms_Handler+0x2d8>
	{
		uint8_t data = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	73bb      	strb	r3, [r7, #14]
		rfData->messageNum = 0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8003d76:	e143      	b.n	8004000 <Comms_Handler+0x2a8>
		{
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fd3b 	bl	80047f8 <dequeue>
 8003d82:	4603      	mov	r3, r0
 8003d84:	73bb      	strb	r3, [r7, #14]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8003d86:	7bbb      	ldrb	r3, [r7, #14]
 8003d88:	2bfe      	cmp	r3, #254	; 0xfe
 8003d8a:	f040 8139 	bne.w	8004000 <Comms_Handler+0x2a8>
			{
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003d94:	4619      	mov	r1, r3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	3372      	adds	r3, #114	; 0x72
 8003da4:	22fe      	movs	r2, #254	; 0xfe
 8003da6:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fd23 	bl	80047f8 <dequeue>
 8003db2:	4603      	mov	r3, r0
 8003db4:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	3373      	adds	r3, #115	; 0x73
 8003dcc:	7bba      	ldrb	r2, [r7, #14]
 8003dce:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fd0f 	bl	80047f8 <dequeue>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003de4:	4619      	mov	r1, r3
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	3374      	adds	r3, #116	; 0x74
 8003df4:	7bba      	ldrb	r2, [r7, #14]
 8003df6:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fcfb 	bl	80047f8 <dequeue>
 8003e02:	4603      	mov	r3, r0
 8003e04:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	3375      	adds	r3, #117	; 0x75
 8003e1c:	7bba      	ldrb	r2, [r7, #14]
 8003e1e:	701a      	strb	r2, [r3, #0]

				data = dequeue(rfData->RXFIFO);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fce7 	bl	80047f8 <dequeue>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003e34:	4619      	mov	r1, r3
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	3376      	adds	r3, #118	; 0x76
 8003e44:	7bba      	ldrb	r2, [r7, #14]
 8003e46:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 fcd3 	bl	80047f8 <dequeue>
 8003e52:	4603      	mov	r3, r0
 8003e54:	73bb      	strb	r3, [r7, #14]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	3377      	adds	r3, #119	; 0x77
 8003e6c:	7bba      	ldrb	r2, [r7, #14]
 8003e6e:	701a      	strb	r2, [r3, #0]

				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
 8003e74:	e019      	b.n	8003eaa <Comms_Handler+0x152>
				{
					data = dequeue(rfData->RXFIFO);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fcbc 	bl	80047f8 <dequeue>
 8003e80:	4603      	mov	r3, r0
 8003e82:	73bb      	strb	r3, [r7, #14]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1d9a      	adds	r2, r3, #6
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4603      	mov	r3, r0
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4403      	add	r3, r0
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3372      	adds	r3, #114	; 0x72
 8003ea0:	7bba      	ldrb	r2, [r7, #14]
 8003ea2:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3377      	adds	r3, #119	; 0x77
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	dbd5      	blt.n	8003e76 <Comms_Handler+0x11e>

				}
				printf("\r\nID comparison: %d %d", rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS], rfData->myDevice.device_id);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	3374      	adds	r3, #116	; 0x74
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	791b      	ldrb	r3, [r3, #4]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	48b0      	ldr	r0, [pc, #704]	; (80041ac <Comms_Handler+0x454>)
 8003eec:	f009 fe4e 	bl	800db8c <iprintf>

				if (rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] != rfData->myDevice.device_id)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	3374      	adds	r3, #116	; 0x74
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d002      	beq.n	8003f16 <Comms_Handler+0x1be>
				{
						Message_Forwarder(rfData);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f9e5 	bl	80042e0 <Message_Forwarder>
				}

				int newMessage = 1;
 8003f16:	2301      	movs	r3, #1
 8003f18:	623b      	str	r3, [r7, #32]
				if(rfData->messageNum>0){
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d062      	beq.n	8003fea <Comms_Handler+0x292>
					for(int i = 1;i<=rfData->messageNum;i++){
 8003f24:	2301      	movs	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	e058      	b.n	8003fdc <Comms_Handler+0x284>
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003f30:	4619      	mov	r1, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3373      	adds	r3, #115	; 0x73
 8003f40:	7819      	ldrb	r1, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003f48:	461a      	mov	r2, r3
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4403      	add	r3, r0
 8003f5a:	3373      	adds	r3, #115	; 0x73
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d139      	bne.n	8003fd6 <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003f68:	4619      	mov	r1, r3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	3375      	adds	r3, #117	; 0x75
 8003f78:	7819      	ldrb	r1, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003f80:	461a      	mov	r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4403      	add	r3, r0
 8003f92:	3375      	adds	r3, #117	; 0x75
 8003f94:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 8003f96:	4299      	cmp	r1, r3
 8003f98:	d11d      	bne.n	8003fd6 <Comms_Handler+0x27e>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	3374      	adds	r3, #116	; 0x74
 8003fb0:	7819      	ldrb	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003fb8:	461a      	mov	r2, r3
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4403      	add	r3, r0
 8003fca:	3374      	adds	r3, #116	; 0x74
 8003fcc:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	d101      	bne.n	8003fd6 <Comms_Handler+0x27e>
								newMessage = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
					for(int i = 1;i<=rfData->messageNum;i++){
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	dd9f      	ble.n	8003f2a <Comms_Handler+0x1d2>
							}
					}
				}
				if(newMessage){
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <Comms_Handler+0x2a8>

					rfData->messageNum++;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbb3 	bl	8004770 <is_empty>
 800400a:	4603      	mov	r3, r0
 800400c:	f083 0301 	eor.w	r3, r3, #1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f47f aeb0 	bne.w	8003d78 <Comms_Handler+0x20>

				}
			}
		}

		if(rfData->myDevice.device_is_discovered == false)			//if not discovered and theres no rfData->activeMessages
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	79db      	ldrb	r3, [r3, #7]
 800401c:	f083 0301 	eor.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 813b 	beq.w	800429e <Comms_Handler+0x546>
		{
			//Im_Here(rfData);
			Discovery_Handler(rfData);						//go to discovery handler
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f93d 	bl	80042a8 <Discovery_Handler>
			}
		}

	}

}
 800402e:	e136      	b.n	800429e <Comms_Handler+0x546>
	else if (rfData->myDevice.device_type == DEVICE_PARENT)			//Parent Handler
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	795b      	ldrb	r3, [r3, #5]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8132 	bne.w	800429e <Comms_Handler+0x546>
		rfData->messageNum = 0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004042:	e120      	b.n	8004286 <Comms_Handler+0x52e>
			data = dequeue(rfData->RXFIFO);					//read from FIFO
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fbd5 	bl	80047f8 <dequeue>
 800404e:	4603      	mov	r3, r0
 8004050:	73fb      	strb	r3, [r7, #15]
			if (data == MSG_PREAMBLE)					//is beginning of a rfData->activeMessage?
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2bfe      	cmp	r3, #254	; 0xfe
 8004056:	f040 8116 	bne.w	8004286 <Comms_Handler+0x52e>
				rfData->activeRxMessage[rfData->messageNum][MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004060:	4619      	mov	r1, r3
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	3372      	adds	r3, #114	; 0x72
 8004070:	22fe      	movs	r2, #254	; 0xfe
 8004072:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fbbd 	bl	80047f8 <dequeue>
 800407e:	4603      	mov	r3, r0
 8004080:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] = data;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004088:	4619      	mov	r1, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	3373      	adds	r3, #115	; 0x73
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fba9 	bl	80047f8 <dequeue>
 80040a6:	4603      	mov	r3, r0
 80040a8:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] = data;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80040b0:	4619      	mov	r1, r3
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	3374      	adds	r3, #116	; 0x74
 80040c0:	7bfa      	ldrb	r2, [r7, #15]
 80040c2:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fb95 	bl	80047f8 <dequeue>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] = data;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80040d8:	4619      	mov	r1, r3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3375      	adds	r3, #117	; 0x75
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fb81 	bl	80047f8 <dequeue>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS] = data;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004100:	4619      	mov	r1, r3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	3376      	adds	r3, #118	; 0x76
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
				data = dequeue(rfData->RXFIFO);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb6d 	bl	80047f8 <dequeue>
 800411e:	4603      	mov	r3, r0
 8004120:	73fb      	strb	r3, [r7, #15]
				rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS] = data;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004128:	4619      	mov	r1, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	3377      	adds	r3, #119	; 0x77
 8004138:	7bfa      	ldrb	r2, [r7, #15]
 800413a:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e019      	b.n	8004176 <Comms_Handler+0x41e>
					data = dequeue(rfData->RXFIFO);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fb56 	bl	80047f8 <dequeue>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]
					rfData->activeRxMessage[rfData->messageNum][MSG_BODY_START+i] = data;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004156:	4618      	mov	r0, r3
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	1d9a      	adds	r2, r3, #6
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4603      	mov	r3, r0
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4403      	add	r3, r0
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	4413      	add	r3, r2
 800416a:	3372      	adds	r3, #114	; 0x72
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i<rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS];i++)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	3301      	adds	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800417c:	4619      	mov	r1, r3
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	3377      	adds	r3, #119	; 0x77
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4293      	cmp	r3, r2
 8004194:	dbd5      	blt.n	8004142 <Comms_Handler+0x3ea>
				int newMessage = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
				if(rfData->messageNum>0){
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d065      	beq.n	8004270 <Comms_Handler+0x518>
					for(int i = 1;i<=rfData->messageNum;i++){
 80041a4:	2301      	movs	r3, #1
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e05b      	b.n	8004262 <Comms_Handler+0x50a>
 80041aa:	bf00      	nop
 80041ac:	08012998 	.word	0x08012998
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80041b6:	4619      	mov	r1, r3
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	460b      	mov	r3, r1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3373      	adds	r3, #115	; 0x73
 80041c6:	7819      	ldrb	r1, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80041ce:	461a      	mov	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4403      	add	r3, r0
 80041e0:	3373      	adds	r3, #115	; 0x73
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4299      	cmp	r1, r3
 80041e6:	d139      	bne.n	800425c <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80041ee:	4619      	mov	r1, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	460b      	mov	r3, r1
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	3375      	adds	r3, #117	; 0x75
 80041fe:	7819      	ldrb	r1, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004206:	461a      	mov	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4403      	add	r3, r0
 8004218:	3375      	adds	r3, #117	; 0x75
 800421a:	781b      	ldrb	r3, [r3, #0]
						if(rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TYPE_POS]&&
 800421c:	4299      	cmp	r1, r3
 800421e:	d11d      	bne.n	800425c <Comms_Handler+0x504>
							rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_TO_ID_POS]){
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004226:	4619      	mov	r1, r3
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	3374      	adds	r3, #116	; 0x74
 8004236:	7819      	ldrb	r1, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800423e:	461a      	mov	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4403      	add	r3, r0
 8004250:	3374      	adds	r3, #116	; 0x74
 8004252:	781b      	ldrb	r3, [r3, #0]
							rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->activeRxMessage[rfData->messageNum-i][MSG_FROM_ID_POS]&&
 8004254:	4299      	cmp	r1, r3
 8004256:	d101      	bne.n	800425c <Comms_Handler+0x504>
								newMessage = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
					for(int i = 1;i<=rfData->messageNum;i++){
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3301      	adds	r3, #1
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004268:	461a      	mov	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4293      	cmp	r3, r2
 800426e:	dd9f      	ble.n	80041b0 <Comms_Handler+0x458>
				if(newMessage){
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <Comms_Handler+0x52e>
					rfData->messageNum++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800427c:	3301      	adds	r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
		while((is_empty(rfData->RXFIFO)) == false)					//until the FIFO is empty
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fa70 	bl	8004770 <is_empty>
 8004290:	4603      	mov	r3, r0
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f aed3 	bne.w	8004044 <Comms_Handler+0x2ec>
}
 800429e:	bf00      	nop
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop

080042a8 <Discovery_Handler>:

void Discovery_Handler(struct rfDataStorage* rfData)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	HAL_Delay(200);
 80042b0:	20c8      	movs	r0, #200	; 0xc8
 80042b2:	f001 f91f 	bl	80054f4 <HAL_Delay>
	if(rfData->count == 0)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7a5b      	ldrb	r3, [r3, #9]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <Discovery_Handler+0x24>
	{
		Im_Here(rfData);								//send i'm here rfData->activeMessage
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f97a 	bl	80045b8 <Im_Here>
		rfData->count = 5;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2205      	movs	r2, #5
 80042c8:	725a      	strb	r2, [r3, #9]
	else
	{
		rfData->count--;
	}

}
 80042ca:	e005      	b.n	80042d8 <Discovery_Handler+0x30>
		rfData->count--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7a5b      	ldrb	r3, [r3, #9]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	725a      	strb	r2, [r3, #9]
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <Message_Forwarder>:
	}

}

void Message_Forwarder(struct rfDataStorage* rfData)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	//printf("\r\nForwarding message, fwds: %d", rfData->num_fwds);
	if( (rfData->num_fwds == 0) && (rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS) )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7a9b      	ldrb	r3, [r3, #10]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f040 8084 	bne.w	80043fa <Message_Forwarder+0x11a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	33c2      	adds	r3, #194	; 0xc2
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d87f      	bhi.n	80043fa <Message_Forwarder+0x11a>
	{
		rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004300:	461a      	mov	r2, r3
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3376      	adds	r3, #118	; 0x76
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	b2d8      	uxtb	r0, r3
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	3376      	adds	r3, #118	; 0x76
 8004324:	4602      	mov	r2, r0
 8004326:	701a      	strb	r2, [r3, #0]
		Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800432e:	461a      	mov	r2, r3
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	3370      	adds	r3, #112	; 0x70
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	1c98      	adds	r0, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004346:	4619      	mov	r1, r3
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	3377      	adds	r3, #119	; 0x77
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	3306      	adds	r3, #6
 800435a:	b2db      	uxtb	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	f000 f985 	bl	800466c <Send>
		rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004368:	4618      	mov	r0, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7a9b      	ldrb	r3, [r3, #10]
 800436e:	4619      	mov	r1, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	4603      	mov	r3, r0
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4403      	add	r3, r0
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	3375      	adds	r3, #117	; 0x75
 800437e:	7818      	ldrb	r0, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	440b      	add	r3, r1
 8004388:	4413      	add	r3, r2
 800438a:	330b      	adds	r3, #11
 800438c:	4602      	mov	r2, r0
 800438e:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004396:	4618      	mov	r0, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	7a9b      	ldrb	r3, [r3, #10]
 800439c:	4619      	mov	r1, r3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4603      	mov	r3, r0
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	3374      	adds	r3, #116	; 0x74
 80043ac:	7818      	ldrb	r0, [r3, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	440b      	add	r3, r1
 80043b6:	4413      	add	r3, r2
 80043b8:	330c      	adds	r3, #12
 80043ba:	4602      	mov	r2, r0
 80043bc:	701a      	strb	r2, [r3, #0]
		rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80043c4:	4618      	mov	r0, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	7a9b      	ldrb	r3, [r3, #10]
 80043ca:	4619      	mov	r1, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	4603      	mov	r3, r0
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4403      	add	r3, r0
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	3373      	adds	r3, #115	; 0x73
 80043da:	7818      	ldrb	r0, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	440b      	add	r3, r1
 80043e4:	4413      	add	r3, r2
 80043e6:	330d      	adds	r3, #13
 80043e8:	4602      	mov	r2, r0
 80043ea:	701a      	strb	r2, [r3, #0]
		rfData->num_fwds++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7a9b      	ldrb	r3, [r3, #10]
 80043f0:	3301      	adds	r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	729a      	strb	r2, [r3, #10]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
		}

	}
	//printf("Forwarding done");
}
 80043f8:	e0da      	b.n	80045b0 <Message_Forwarder+0x2d0>
	else if ( rfData->activeRxMessage[MSG_NUM_HOPS_POS] < MAX_HOPS )
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	33c2      	adds	r3, #194	; 0xc2
 80043fe:	2b04      	cmp	r3, #4
 8004400:	f200 80d6 	bhi.w	80045b0 <Message_Forwarder+0x2d0>
		int dupe = false;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rfData->num_fwds; i++)
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	e047      	b.n	800449e <Message_Forwarder+0x1be>
			if ( rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS] == rfData->FWDFIFO[i].from_id )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004414:	4619      	mov	r1, r3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	3375      	adds	r3, #117	; 0x75
 8004424:	7819      	ldrb	r1, [r3, #0]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	4403      	add	r3, r0
 8004432:	330b      	adds	r3, #11
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	4299      	cmp	r1, r3
 8004438:	d12e      	bne.n	8004498 <Message_Forwarder+0x1b8>
				if ( rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS] == rfData->FWDFIFO[i].to_id )
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004440:	4619      	mov	r1, r3
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3374      	adds	r3, #116	; 0x74
 8004450:	7819      	ldrb	r1, [r3, #0]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4413      	add	r3, r2
 800445c:	4403      	add	r3, r0
 800445e:	330c      	adds	r3, #12
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	4299      	cmp	r1, r3
 8004464:	d118      	bne.n	8004498 <Message_Forwarder+0x1b8>
					if ( rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS] == rfData->FWDFIFO[i].type )
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800446c:	4619      	mov	r1, r3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3373      	adds	r3, #115	; 0x73
 800447c:	7819      	ldrb	r1, [r3, #0]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	4403      	add	r3, r0
 800448a:	330d      	adds	r3, #13
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	4299      	cmp	r1, r3
 8004490:	d102      	bne.n	8004498 <Message_Forwarder+0x1b8>
						dupe = true;
 8004492:	2301      	movs	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
						break;
 8004496:	e008      	b.n	80044aa <Message_Forwarder+0x1ca>
		for (int i = 0; i < rfData->num_fwds; i++)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	3301      	adds	r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7a9b      	ldrb	r3, [r3, #10]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4293      	cmp	r3, r2
 80044a8:	dbb1      	blt.n	800440e <Message_Forwarder+0x12e>
		if (dupe == false)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d17f      	bne.n	80045b0 <Message_Forwarder+0x2d0>
			if ( rfData->num_fwds == MAX_NUM_FWDS ){rfData->num_fwds = 0;}
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7a9b      	ldrb	r3, [r3, #10]
 80044b4:	2b14      	cmp	r3, #20
 80044b6:	d102      	bne.n	80044be <Message_Forwarder+0x1de>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	729a      	strb	r2, [r3, #10]
			rfData->FWDFIFO[rfData->num_fwds].from_id = rfData->activeRxMessage[rfData->messageNum][MSG_FROM_ID_POS];
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80044c4:	4618      	mov	r0, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7a9b      	ldrb	r3, [r3, #10]
 80044ca:	4619      	mov	r1, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4603      	mov	r3, r0
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4403      	add	r3, r0
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	3375      	adds	r3, #117	; 0x75
 80044da:	7818      	ldrb	r0, [r3, #0]
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	440b      	add	r3, r1
 80044e4:	4413      	add	r3, r2
 80044e6:	330b      	adds	r3, #11
 80044e8:	4602      	mov	r2, r0
 80044ea:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].to_id = rfData->activeRxMessage[rfData->messageNum][MSG_TO_ID_POS];
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80044f2:	4618      	mov	r0, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7a9b      	ldrb	r3, [r3, #10]
 80044f8:	4619      	mov	r1, r3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4603      	mov	r3, r0
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4403      	add	r3, r0
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	3374      	adds	r3, #116	; 0x74
 8004508:	7818      	ldrb	r0, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	440b      	add	r3, r1
 8004512:	4413      	add	r3, r2
 8004514:	330c      	adds	r3, #12
 8004516:	4602      	mov	r2, r0
 8004518:	701a      	strb	r2, [r3, #0]
			rfData->FWDFIFO[rfData->num_fwds].type = rfData->activeRxMessage[rfData->messageNum][MSG_TYPE_POS];
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004520:	4618      	mov	r0, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	7a9b      	ldrb	r3, [r3, #10]
 8004526:	4619      	mov	r1, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4603      	mov	r3, r0
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4403      	add	r3, r0
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	3373      	adds	r3, #115	; 0x73
 8004536:	7818      	ldrb	r0, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	440b      	add	r3, r1
 8004540:	4413      	add	r3, r2
 8004542:	330d      	adds	r3, #13
 8004544:	4602      	mov	r2, r0
 8004546:	701a      	strb	r2, [r3, #0]
			rfData->activeRxMessage[rfData->messageNum][MSG_NUM_HOPS_POS]++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800454e:	461a      	mov	r2, r3
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	3376      	adds	r3, #118	; 0x76
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	b2d8      	uxtb	r0, r3
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3376      	adds	r3, #118	; 0x76
 8004572:	4602      	mov	r2, r0
 8004574:	701a      	strb	r2, [r3, #0]
			Send(rfData->activeRxMessage[rfData->messageNum], rfData->activeRxMessage[rfData->messageNum][MSG_SIZE_POS]+MSG_BODY_START);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800457c:	461a      	mov	r2, r3
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	3370      	adds	r3, #112	; 0x70
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	1c98      	adds	r0, r3, #2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004594:	4619      	mov	r1, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	3377      	adds	r3, #119	; 0x77
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	3306      	adds	r3, #6
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	4619      	mov	r1, r3
 80045ac:	f000 f85e 	bl	800466c <Send>
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <Im_Here>:

void Im_Here(struct rfDataStorage* rfData)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	22fe      	movs	r2, #254	; 0xfe
 80045c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_IM_HERE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2243      	movs	r2, #67	; 0x43
 80045cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	791a      	ldrb	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessageSize = 0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	//printf("\r\nsending from device: %d->%d", rfData->myDevice.device_id, rfData->activeTxMessage[MSG_FROM_ID_POS]);

	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004602:	3306      	adds	r3, #6
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f000 f82f 	bl	800466c <Send>

}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <Send_Data>:

void Send_Data(struct rfDataStorage* rfData)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
	//printf("\r\nsending data");
	rfData->activeTxMessage[MSG_PREAMBLE_POS] = MSG_PREAMBLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	22fe      	movs	r2, #254	; 0xfe
 8004622:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rfData->activeTxMessage[MSG_TYPE_POS] = MSG_TYPE_SEND_DATA;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2246      	movs	r2, #70	; 0x46
 800462a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	rfData->activeTxMessage[MSG_FROM_ID_POS] = rfData->myDevice.device_id;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	791a      	ldrb	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	rfData->activeTxMessage[MSG_NUM_HOPS_POS] = 0;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	rfData->activeTxMessage[MSG_SIZE_POS] = rfData->activeTxMessageSize;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Send(rfData->activeTxMessage, rfData->activeTxMessageSize+MSG_BODY_START);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004658:	3306      	adds	r3, #6
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f000 f804 	bl	800466c <Send>

}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <Send>:


void Send(uint8_t message[], uint8_t size)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
	//printf("Send comamnd");
	uint8_t fullMessage[MSG_SIZE_TRANSFER];

	for(int i = 0;i<size;i++){
 8004678:	2300      	movs	r3, #0
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	e00c      	b.n	8004698 <Send+0x2c>
		fullMessage[i] = message[i];
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	f107 020c 	add.w	r2, r7, #12
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	4413      	add	r3, r2
 800468e:	460a      	mov	r2, r1
 8004690:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<size;i++){
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	3301      	adds	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	429a      	cmp	r2, r3
 800469e:	dbee      	blt.n	800467e <Send+0x12>
	}
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	623b      	str	r3, [r7, #32]
 80046a4:	e008      	b.n	80046b8 <Send+0x4c>
		fullMessage[i] = 0;
 80046a6:	f107 020c 	add.w	r2, r7, #12
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	4413      	add	r3, r2
 80046ae:	2200      	movs	r2, #0
 80046b0:	701a      	strb	r2, [r3, #0]
	for(int i = size;i<MSG_SIZE_TRANSFER;i++){
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	3301      	adds	r3, #1
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b13      	cmp	r3, #19
 80046bc:	ddf3      	ble.n	80046a6 <Send+0x3a>
	/*for(int i = 0 ;i<MSG_SIZE_TRANSFER;i++){

		printf("\r\nsending rf: %x", fullMessage[i]);

	}*/
	random_delay();
 80046be:	f000 f811 	bl	80046e4 <random_delay>
	HAL_UART_Transmit_IT(&hlpuart1, fullMessage, MSG_SIZE_TRANSFER);
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2214      	movs	r2, #20
 80046c8:	4619      	mov	r1, r3
 80046ca:	4805      	ldr	r0, [pc, #20]	; (80046e0 <Send+0x74>)
 80046cc:	f006 fcfc 	bl	800b0c8 <HAL_UART_Transmit_IT>
	HAL_Delay(20);
 80046d0:	2014      	movs	r0, #20
 80046d2:	f000 ff0f 	bl	80054f4 <HAL_Delay>

}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000360 	.word	0x20000360

080046e4 <random_delay>:

void random_delay()	//delays between 0 - 9999 (ms)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
	uint32_t randomNumber;
	HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber);
 80046ea:	463b      	mov	r3, r7
 80046ec:	4619      	mov	r1, r3
 80046ee:	480a      	ldr	r0, [pc, #40]	; (8004718 <random_delay+0x34>)
 80046f0:	f004 ff43 	bl	800957a <HAL_RNG_GenerateRandomNumber>
	uint32_t delay = randomNumber % 1000;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4a09      	ldr	r2, [pc, #36]	; (800471c <random_delay+0x38>)
 80046f8:	fba2 1203 	umull	r1, r2, r2, r3
 80046fc:	0992      	lsrs	r2, r2, #6
 80046fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004702:	fb01 f202 	mul.w	r2, r1, r2
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fef2 	bl	80054f4 <HAL_Delay>
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000468 	.word	0x20000468
 800471c:	10624dd3 	.word	0x10624dd3

08004720 <create_queue>:

void create_queue(struct Queue* queue) {
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  queue->head = 0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
  queue->tail = 0;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
  queue->size = 0;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <is_full>:

void destroy_queue(struct Queue* queue) {
  free(queue);
}

bool is_full(struct Queue* queue) {
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return (queue->size == MAX_SIZE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800475a:	2b96      	cmp	r3, #150	; 0x96
 800475c:	bf0c      	ite	eq
 800475e:	2301      	moveq	r3, #1
 8004760:	2300      	movne	r3, #0
 8004762:	b2db      	uxtb	r3, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <is_empty>:

bool is_empty(struct Queue* queue) {
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return (queue->size == 0);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <enqueue>:

void enqueue(struct Queue* queue, uint8_t value) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  if (is_full(queue)) {
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffd3 	bl	800474c <is_full>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11f      	bne.n	80047ec <enqueue+0x58>
    //printf("Queue is full\n");
    return;
  }
  queue->data[queue->tail] = value;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 225c 	ldr.w	r2, [r3, #604]	; 0x25c
 80047b2:	78f9      	ldrb	r1, [r7, #3]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  queue->tail = (queue->tail + 1) % MAX_SIZE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80047c0:	1c5a      	adds	r2, r3, #1
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <enqueue+0x60>)
 80047c4:	fb83 1302 	smull	r1, r3, r3, r2
 80047c8:	1119      	asrs	r1, r3, #4
 80047ca:	17d3      	asrs	r3, r2, #31
 80047cc:	1acb      	subs	r3, r1, r3
 80047ce:	2196      	movs	r1, #150	; 0x96
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  queue->size++;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
 80047ea:	e000      	b.n	80047ee <enqueue+0x5a>
    return;
 80047ec:	bf00      	nop
}
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	1b4e81b5 	.word	0x1b4e81b5

080047f8 <dequeue>:

int dequeue(struct Queue* queue) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if (is_empty(queue)) {
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ffb5 	bl	8004770 <is_empty>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d002      	beq.n	8004812 <dequeue+0x1a>
    //printf("Queue is empty\n");
    return -1;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	e01f      	b.n	8004852 <dequeue+0x5a>
  }
  int value = queue->data[queue->head];
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481e:	60fb      	str	r3, [r7, #12]
  queue->head = (queue->head + 1) % MAX_SIZE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <dequeue+0x64>)
 800482a:	fb83 1302 	smull	r1, r3, r3, r2
 800482e:	1119      	asrs	r1, r3, #4
 8004830:	17d3      	asrs	r3, r2, #31
 8004832:	1acb      	subs	r3, r1, r3
 8004834:	2196      	movs	r1, #150	; 0x96
 8004836:	fb01 f303 	mul.w	r3, r1, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
  queue->size--;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
  return value;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	1b4e81b5 	.word	0x1b4e81b5

08004860 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004864:	2200      	movs	r2, #0
 8004866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800486a:	4804      	ldr	r0, [pc, #16]	; (800487c <SELECT+0x1c>)
 800486c:	f002 ffe2 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004870:	2001      	movs	r0, #1
 8004872:	f000 fe3f 	bl	80054f4 <HAL_Delay>
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	48000400 	.word	0x48000400

08004880 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004884:	2201      	movs	r2, #1
 8004886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800488a:	4804      	ldr	r0, [pc, #16]	; (800489c <DESELECT+0x1c>)
 800488c:	f002 ffd2 	bl	8007834 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004890:	2001      	movs	r0, #1
 8004892:	f000 fe2f 	bl	80054f4 <HAL_Delay>
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	48000400 	.word	0x48000400

080048a0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80048aa:	bf00      	nop
 80048ac:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <SPI_TxByte+0x30>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d1f8      	bne.n	80048ac <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80048ba:	1df9      	adds	r1, r7, #7
 80048bc:	2364      	movs	r3, #100	; 0x64
 80048be:	2201      	movs	r2, #1
 80048c0:	4803      	ldr	r0, [pc, #12]	; (80048d0 <SPI_TxByte+0x30>)
 80048c2:	f005 fbdf 	bl	800a084 <HAL_SPI_Transmit>
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200004a4 	.word	0x200004a4

080048d4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80048e0:	bf00      	nop
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <SPI_TxBuffer+0x30>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d1f8      	bne.n	80048e2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80048f0:	887a      	ldrh	r2, [r7, #2]
 80048f2:	2364      	movs	r3, #100	; 0x64
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4803      	ldr	r0, [pc, #12]	; (8004904 <SPI_TxBuffer+0x30>)
 80048f8:	f005 fbc4 	bl	800a084 <HAL_SPI_Transmit>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	200004a4 	.word	0x200004a4

08004908 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800490e:	23ff      	movs	r3, #255	; 0xff
 8004910:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8004912:	bf00      	nop
 8004914:	4b09      	ldr	r3, [pc, #36]	; (800493c <SPI_RxByte+0x34>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d1f8      	bne.n	8004914 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004922:	1dba      	adds	r2, r7, #6
 8004924:	1df9      	adds	r1, r7, #7
 8004926:	2364      	movs	r3, #100	; 0x64
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	2301      	movs	r3, #1
 800492c:	4803      	ldr	r0, [pc, #12]	; (800493c <SPI_RxByte+0x34>)
 800492e:	f005 fe47 	bl	800a5c0 <HAL_SPI_TransmitReceive>

	return data;
 8004932:	79bb      	ldrb	r3, [r7, #6]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	200004a4 	.word	0x200004a4

08004940 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8004948:	f7ff ffde 	bl	8004908 <SPI_RxByte>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	701a      	strb	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004962:	4b0a      	ldr	r3, [pc, #40]	; (800498c <SD_ReadyWait+0x30>)
 8004964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004968:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800496a:	f7ff ffcd 	bl	8004908 <SPI_RxByte>
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	2bff      	cmp	r3, #255	; 0xff
 8004976:	d004      	beq.n	8004982 <SD_ReadyWait+0x26>
 8004978:	4b04      	ldr	r3, [pc, #16]	; (800498c <SD_ReadyWait+0x30>)
 800497a:	881b      	ldrh	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f3      	bne.n	800496a <SD_ReadyWait+0xe>

	return res;
 8004982:	79fb      	ldrb	r3, [r7, #7]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	2000078a 	.word	0x2000078a

08004990 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8004996:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800499a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800499c:	f7ff ff70 	bl	8004880 <DESELECT>
	for(int i = 0; i < 10; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
 80049a4:	e005      	b.n	80049b2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80049a6:	20ff      	movs	r0, #255	; 0xff
 80049a8:	f7ff ff7a 	bl	80048a0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60bb      	str	r3, [r7, #8]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	ddf6      	ble.n	80049a6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80049b8:	f7ff ff52 	bl	8004860 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80049bc:	2340      	movs	r3, #64	; 0x40
 80049be:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80049d0:	2395      	movs	r3, #149	; 0x95
 80049d2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80049d4:	463b      	mov	r3, r7
 80049d6:	2106      	movs	r1, #6
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff7b 	bl	80048d4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80049de:	e002      	b.n	80049e6 <SD_PowerOn+0x56>
	{
		cnt--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80049e6:	f7ff ff8f 	bl	8004908 <SPI_RxByte>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d002      	beq.n	80049f6 <SD_PowerOn+0x66>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1f4      	bne.n	80049e0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80049f6:	f7ff ff43 	bl	8004880 <DESELECT>
	SPI_TxByte(0XFF);
 80049fa:	20ff      	movs	r0, #255	; 0xff
 80049fc:	f7ff ff50 	bl	80048a0 <SPI_TxByte>

	PowerFlag = 1;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <SD_PowerOn+0x80>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000791 	.word	0x20000791

08004a14 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <SD_PowerOff+0x14>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	20000791 	.word	0x20000791

08004a2c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <SD_CheckPower+0x14>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000791 	.word	0x20000791

08004a44 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <SD_RxDataBlock+0x5c>)
 8004a50:	22c8      	movs	r2, #200	; 0xc8
 8004a52:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004a54:	f7ff ff58 	bl	8004908 <SPI_RxByte>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2bff      	cmp	r3, #255	; 0xff
 8004a60:	d104      	bne.n	8004a6c <SD_RxDataBlock+0x28>
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <SD_RxDataBlock+0x5c>)
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f3      	bne.n	8004a54 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8004a70:	d001      	beq.n	8004a76 <SD_RxDataBlock+0x32>
 8004a72:	2300      	movs	r3, #0
 8004a74:	e00f      	b.n	8004a96 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff ff5f 	bl	8004940 <SPI_RxBytePtr>
	} while(len--);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	603a      	str	r2, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1f4      	bne.n	8004a76 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8004a8c:	f7ff ff3c 	bl	8004908 <SPI_RxByte>
	SPI_RxByte();
 8004a90:	f7ff ff3a 	bl	8004908 <SPI_RxByte>

	return TRUE;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000789 	.word	0x20000789

08004aa4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004ab4:	f7ff ff52 	bl	800495c <SD_ReadyWait>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2bff      	cmp	r3, #255	; 0xff
 8004abc:	d001      	beq.n	8004ac2 <SD_TxDataBlock+0x1e>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e02f      	b.n	8004b22 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff feeb 	bl	80048a0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	2bfd      	cmp	r3, #253	; 0xfd
 8004ace:	d020      	beq.n	8004b12 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff fefd 	bl	80048d4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8004ada:	f7ff ff15 	bl	8004908 <SPI_RxByte>
		SPI_RxByte();
 8004ade:	f7ff ff13 	bl	8004908 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8004ae2:	e00b      	b.n	8004afc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8004ae4:	f7ff ff10 	bl	8004908 <SPI_RxByte>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	f003 031f 	and.w	r3, r3, #31
 8004af2:	2b05      	cmp	r3, #5
 8004af4:	d006      	beq.n	8004b04 <SD_TxDataBlock+0x60>
			i++;
 8004af6:	7bbb      	ldrb	r3, [r7, #14]
 8004af8:	3301      	adds	r3, #1
 8004afa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8004afc:	7bbb      	ldrb	r3, [r7, #14]
 8004afe:	2b40      	cmp	r3, #64	; 0x40
 8004b00:	d9f0      	bls.n	8004ae4 <SD_TxDataBlock+0x40>
 8004b02:	e000      	b.n	8004b06 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8004b04:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8004b06:	bf00      	nop
 8004b08:	f7ff fefe 	bl	8004908 <SPI_RxByte>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0fa      	beq.n	8004b08 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d101      	bne.n	8004b20 <SD_TxDataBlock+0x7c>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <SD_TxDataBlock+0x7e>

	return FALSE;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	6039      	str	r1, [r7, #0]
 8004b34:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004b36:	f7ff ff11 	bl	800495c <SD_ReadyWait>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2bff      	cmp	r3, #255	; 0xff
 8004b3e:	d001      	beq.n	8004b44 <SD_SendCmd+0x1a>
 8004b40:	23ff      	movs	r3, #255	; 0xff
 8004b42:	e042      	b.n	8004bca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7ff feaa 	bl	80048a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fea4 	bl	80048a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fe9e 	bl	80048a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	0a1b      	lsrs	r3, r3, #8
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fe98 	bl	80048a0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff fe93 	bl	80048a0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d102      	bne.n	8004b86 <SD_SendCmd+0x5c>
 8004b80:	2395      	movs	r3, #149	; 0x95
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e007      	b.n	8004b96 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2b48      	cmp	r3, #72	; 0x48
 8004b8a:	d102      	bne.n	8004b92 <SD_SendCmd+0x68>
 8004b8c:	2387      	movs	r3, #135	; 0x87
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e001      	b.n	8004b96 <SD_SendCmd+0x6c>
	else crc = 1;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff fe81 	bl	80048a0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	2b4c      	cmp	r3, #76	; 0x4c
 8004ba2:	d101      	bne.n	8004ba8 <SD_SendCmd+0x7e>
 8004ba4:	f7ff feb0 	bl	8004908 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8004ba8:	230a      	movs	r3, #10
 8004baa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004bac:	f7ff feac 	bl	8004908 <SPI_RxByte>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004bb4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	da05      	bge.n	8004bc8 <SD_SendCmd+0x9e>
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	73bb      	strb	r3, [r7, #14]
 8004bc2:	7bbb      	ldrb	r3, [r7, #14]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f1      	bne.n	8004bac <SD_SendCmd+0x82>

	return res;
 8004bc8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	4603      	mov	r3, r0
 8004bdc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];
	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <SD_disk_initialize+0x14>
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d6      	b.n	8004d96 <SD_disk_initialize+0x1c2>
	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8004be8:	4b6d      	ldr	r3, [pc, #436]	; (8004da0 <SD_disk_initialize+0x1cc>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <SD_disk_initialize+0x2a>
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	; (8004da0 <SD_disk_initialize+0x1cc>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e0cb      	b.n	8004d96 <SD_disk_initialize+0x1c2>
	/* power on */
	SD_PowerOn();
 8004bfe:	f7ff fec7 	bl	8004990 <SD_PowerOn>
	/* slave select */
	SELECT();
 8004c02:	f7ff fe2d 	bl	8004860 <SELECT>
	/* check disk type */
	type = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73bb      	strb	r3, [r7, #14]
	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	2040      	movs	r0, #64	; 0x40
 8004c0e:	f7ff ff8c 	bl	8004b2a <SD_SendCmd>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	f040 80a6 	bne.w	8004d66 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8004c1a:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <SD_disk_initialize+0x1d0>)
 8004c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c20:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004c22:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c26:	2048      	movs	r0, #72	; 0x48
 8004c28:	f7ff ff7f 	bl	8004b2a <SD_SendCmd>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d158      	bne.n	8004ce4 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	73fb      	strb	r3, [r7, #15]
 8004c36:	e00c      	b.n	8004c52 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8004c38:	7bfc      	ldrb	r4, [r7, #15]
 8004c3a:	f7ff fe65 	bl	8004908 <SPI_RxByte>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	f104 0310 	add.w	r3, r4, #16
 8004c46:	443b      	add	r3, r7
 8004c48:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d9ef      	bls.n	8004c38 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004c58:	7abb      	ldrb	r3, [r7, #10]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	f040 8083 	bne.w	8004d66 <SD_disk_initialize+0x192>
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	2baa      	cmp	r3, #170	; 0xaa
 8004c64:	d17f      	bne.n	8004d66 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004c66:	2100      	movs	r1, #0
 8004c68:	2077      	movs	r0, #119	; 0x77
 8004c6a:	f7ff ff5e 	bl	8004b2a <SD_SendCmd>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d807      	bhi.n	8004c84 <SD_disk_initialize+0xb0>
 8004c74:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c78:	2069      	movs	r0, #105	; 0x69
 8004c7a:	f7ff ff56 	bl	8004b2a <SD_SendCmd>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004c84:	4b47      	ldr	r3, [pc, #284]	; (8004da4 <SD_disk_initialize+0x1d0>)
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1eb      	bne.n	8004c66 <SD_disk_initialize+0x92>
 8004c8e:	e000      	b.n	8004c92 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004c90:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004c92:	4b44      	ldr	r3, [pc, #272]	; (8004da4 <SD_disk_initialize+0x1d0>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d064      	beq.n	8004d66 <SD_disk_initialize+0x192>
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	207a      	movs	r0, #122	; 0x7a
 8004ca0:	f7ff ff43 	bl	8004b2a <SD_SendCmd>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d15d      	bne.n	8004d66 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]
 8004cae:	e00c      	b.n	8004cca <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004cb0:	7bfc      	ldrb	r4, [r7, #15]
 8004cb2:	f7ff fe29 	bl	8004908 <SPI_RxByte>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f104 0310 	add.w	r3, r4, #16
 8004cbe:	443b      	add	r3, r7
 8004cc0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d9ef      	bls.n	8004cb0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004cd0:	7a3b      	ldrb	r3, [r7, #8]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <SD_disk_initialize+0x10a>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	e000      	b.n	8004ce0 <SD_disk_initialize+0x10c>
 8004cde:	2304      	movs	r3, #4
 8004ce0:	73bb      	strb	r3, [r7, #14]
 8004ce2:	e040      	b.n	8004d66 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2077      	movs	r0, #119	; 0x77
 8004ce8:	f7ff ff1f 	bl	8004b2a <SD_SendCmd>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d808      	bhi.n	8004d04 <SD_disk_initialize+0x130>
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2069      	movs	r0, #105	; 0x69
 8004cf6:	f7ff ff18 	bl	8004b2a <SD_SendCmd>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d801      	bhi.n	8004d04 <SD_disk_initialize+0x130>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e000      	b.n	8004d06 <SD_disk_initialize+0x132>
 8004d04:	2301      	movs	r3, #1
 8004d06:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d10e      	bne.n	8004d2c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2077      	movs	r0, #119	; 0x77
 8004d12:	f7ff ff0a 	bl	8004b2a <SD_SendCmd>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d80e      	bhi.n	8004d3a <SD_disk_initialize+0x166>
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2069      	movs	r0, #105	; 0x69
 8004d20:	f7ff ff03 	bl	8004b2a <SD_SendCmd>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <SD_disk_initialize+0x166>
 8004d2a:	e00d      	b.n	8004d48 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	2041      	movs	r0, #65	; 0x41
 8004d30:	f7ff fefb 	bl	8004b2a <SD_SendCmd>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8004d3a:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <SD_disk_initialize+0x1d0>)
 8004d3c:	881b      	ldrh	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e1      	bne.n	8004d08 <SD_disk_initialize+0x134>
 8004d44:	e000      	b.n	8004d48 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004d46:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <SD_disk_initialize+0x1d0>)
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <SD_disk_initialize+0x18e>
 8004d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d56:	2050      	movs	r0, #80	; 0x50
 8004d58:	f7ff fee7 	bl	8004b2a <SD_SendCmd>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <SD_disk_initialize+0x192>
 8004d62:	2300      	movs	r3, #0
 8004d64:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <SD_disk_initialize+0x1d4>)
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004d6c:	f7ff fd88 	bl	8004880 <DESELECT>
	SPI_RxByte();
 8004d70:	f7ff fdca 	bl	8004908 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004d74:	7bbb      	ldrb	r3, [r7, #14]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <SD_disk_initialize+0x1cc>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f023 0301 	bic.w	r3, r3, #1
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <SD_disk_initialize+0x1cc>)
 8004d88:	701a      	strb	r2, [r3, #0]
 8004d8a:	e001      	b.n	8004d90 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004d8c:	f7ff fe42 	bl	8004a14 <SD_PowerOff>
	}

	return Stat;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <SD_disk_initialize+0x1cc>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd90      	pop	{r4, r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000004 	.word	0x20000004
 8004da4:	20000789 	.word	0x20000789
 8004da8:	20000790 	.word	0x20000790

08004dac <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <SD_disk_status+0x14>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e002      	b.n	8004dc6 <SD_disk_status+0x1a>
	return Stat;
 8004dc0:	4b04      	ldr	r3, [pc, #16]	; (8004dd4 <SD_disk_status+0x28>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <SD_disk_read+0x1c>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <SD_disk_read+0x20>
 8004df4:	2304      	movs	r3, #4
 8004df6:	e051      	b.n	8004e9c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <SD_disk_read+0xcc>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <SD_disk_read+0x32>
 8004e06:	2303      	movs	r3, #3
 8004e08:	e048      	b.n	8004e9c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004e0a:	4b27      	ldr	r3, [pc, #156]	; (8004ea8 <SD_disk_read+0xd0>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 0304 	and.w	r3, r3, #4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <SD_disk_read+0x44>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	025b      	lsls	r3, r3, #9
 8004e1a:	607b      	str	r3, [r7, #4]

	SELECT();
 8004e1c:	f7ff fd20 	bl	8004860 <SELECT>

	if (count == 1)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d111      	bne.n	8004e4a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	2051      	movs	r0, #81	; 0x51
 8004e2a:	f7ff fe7e 	bl	8004b2a <SD_SendCmd>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d129      	bne.n	8004e88 <SD_disk_read+0xb0>
 8004e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e38:	68b8      	ldr	r0, [r7, #8]
 8004e3a:	f7ff fe03 	bl	8004a44 <SD_RxDataBlock>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d021      	beq.n	8004e88 <SD_disk_read+0xb0>
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	e01e      	b.n	8004e88 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	2052      	movs	r0, #82	; 0x52
 8004e4e:	f7ff fe6c 	bl	8004b2a <SD_SendCmd>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d117      	bne.n	8004e88 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e5c:	68b8      	ldr	r0, [r7, #8]
 8004e5e:	f7ff fdf1 	bl	8004a44 <SD_RxDataBlock>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <SD_disk_read+0xa6>
				buff += 512;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004e6e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	603b      	str	r3, [r7, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ed      	bne.n	8004e58 <SD_disk_read+0x80>
 8004e7c:	e000      	b.n	8004e80 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004e7e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004e80:	2100      	movs	r1, #0
 8004e82:	204c      	movs	r0, #76	; 0x4c
 8004e84:	f7ff fe51 	bl	8004b2a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004e88:	f7ff fcfa 	bl	8004880 <DESELECT>
	SPI_RxByte();
 8004e8c:	f7ff fd3c 	bl	8004908 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000004 	.word	0x20000004
 8004ea8:	20000790 	.word	0x20000790

08004eac <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4603      	mov	r3, r0
 8004eba:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <SD_disk_write+0x1c>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <SD_disk_write+0x20>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	e06b      	b.n	8004fa4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004ecc:	4b37      	ldr	r3, [pc, #220]	; (8004fac <SD_disk_write+0x100>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <SD_disk_write+0x32>
 8004eda:	2303      	movs	r3, #3
 8004edc:	e062      	b.n	8004fa4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004ede:	4b33      	ldr	r3, [pc, #204]	; (8004fac <SD_disk_write+0x100>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <SD_disk_write+0x44>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e059      	b.n	8004fa4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004ef0:	4b2f      	ldr	r3, [pc, #188]	; (8004fb0 <SD_disk_write+0x104>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <SD_disk_write+0x56>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	025b      	lsls	r3, r3, #9
 8004f00:	607b      	str	r3, [r7, #4]

	SELECT();
 8004f02:	f7ff fcad 	bl	8004860 <SELECT>

	if (count == 1)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d110      	bne.n	8004f2e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	2058      	movs	r0, #88	; 0x58
 8004f10:	f7ff fe0b 	bl	8004b2a <SD_SendCmd>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d13a      	bne.n	8004f90 <SD_disk_write+0xe4>
 8004f1a:	21fe      	movs	r1, #254	; 0xfe
 8004f1c:	68b8      	ldr	r0, [r7, #8]
 8004f1e:	f7ff fdc1 	bl	8004aa4 <SD_TxDataBlock>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d033      	beq.n	8004f90 <SD_disk_write+0xe4>
			count = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	e030      	b.n	8004f90 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004f2e:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <SD_disk_write+0x104>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2077      	movs	r0, #119	; 0x77
 8004f3e:	f7ff fdf4 	bl	8004b2a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	2057      	movs	r0, #87	; 0x57
 8004f46:	f7ff fdf0 	bl	8004b2a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	2059      	movs	r0, #89	; 0x59
 8004f4e:	f7ff fdec 	bl	8004b2a <SD_SendCmd>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11b      	bne.n	8004f90 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004f58:	21fc      	movs	r1, #252	; 0xfc
 8004f5a:	68b8      	ldr	r0, [r7, #8]
 8004f5c:	f7ff fda2 	bl	8004aa4 <SD_TxDataBlock>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <SD_disk_write+0xd0>
				buff += 512;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f6c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ee      	bne.n	8004f58 <SD_disk_write+0xac>
 8004f7a:	e000      	b.n	8004f7e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004f7c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004f7e:	21fd      	movs	r1, #253	; 0xfd
 8004f80:	2000      	movs	r0, #0
 8004f82:	f7ff fd8f 	bl	8004aa4 <SD_TxDataBlock>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <SD_disk_write+0xe4>
			{
				count = 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004f90:	f7ff fc76 	bl	8004880 <DESELECT>
	SPI_RxByte();
 8004f94:	f7ff fcb8 	bl	8004908 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000004 	.word	0x20000004
 8004fb0:	20000790 	.word	0x20000790

08004fb4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b08b      	sub	sp, #44	; 0x2c
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	603a      	str	r2, [r7, #0]
 8004fbe:	71fb      	strb	r3, [r7, #7]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <SD_disk_ioctl+0x1e>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e115      	b.n	80051fe <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d124      	bne.n	8005028 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d012      	beq.n	800500c <SD_disk_ioctl+0x58>
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	dc1a      	bgt.n	8005020 <SD_disk_ioctl+0x6c>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <SD_disk_ioctl+0x40>
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d006      	beq.n	8005000 <SD_disk_ioctl+0x4c>
 8004ff2:	e015      	b.n	8005020 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004ff4:	f7ff fd0e 	bl	8004a14 <SD_PowerOff>
			res = RES_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004ffe:	e0fc      	b.n	80051fa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8005000:	f7ff fcc6 	bl	8004990 <SD_PowerOn>
			res = RES_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800500a:	e0f6      	b.n	80051fa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	1c5c      	adds	r4, r3, #1
 8005010:	f7ff fd0c 	bl	8004a2c <SD_CheckPower>
 8005014:	4603      	mov	r3, r0
 8005016:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800501e:	e0ec      	b.n	80051fa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005026:	e0e8      	b.n	80051fa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005028:	4b77      	ldr	r3, [pc, #476]	; (8005208 <SD_disk_ioctl+0x254>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <SD_disk_ioctl+0x86>
 8005036:	2303      	movs	r3, #3
 8005038:	e0e1      	b.n	80051fe <SD_disk_ioctl+0x24a>

		SELECT();
 800503a:	f7ff fc11 	bl	8004860 <SELECT>

		switch (ctrl)
 800503e:	79bb      	ldrb	r3, [r7, #6]
 8005040:	2b0d      	cmp	r3, #13
 8005042:	f200 80cb 	bhi.w	80051dc <SD_disk_ioctl+0x228>
 8005046:	a201      	add	r2, pc, #4	; (adr r2, 800504c <SD_disk_ioctl+0x98>)
 8005048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504c:	08005147 	.word	0x08005147
 8005050:	08005085 	.word	0x08005085
 8005054:	08005137 	.word	0x08005137
 8005058:	080051dd 	.word	0x080051dd
 800505c:	080051dd 	.word	0x080051dd
 8005060:	080051dd 	.word	0x080051dd
 8005064:	080051dd 	.word	0x080051dd
 8005068:	080051dd 	.word	0x080051dd
 800506c:	080051dd 	.word	0x080051dd
 8005070:	080051dd 	.word	0x080051dd
 8005074:	080051dd 	.word	0x080051dd
 8005078:	08005159 	.word	0x08005159
 800507c:	0800517d 	.word	0x0800517d
 8005080:	080051a1 	.word	0x080051a1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8005084:	2100      	movs	r1, #0
 8005086:	2049      	movs	r0, #73	; 0x49
 8005088:	f7ff fd4f 	bl	8004b2a <SD_SendCmd>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 80a8 	bne.w	80051e4 <SD_disk_ioctl+0x230>
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	2110      	movs	r1, #16
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fcd2 	bl	8004a44 <SD_RxDataBlock>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 809e 	beq.w	80051e4 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80050a8:	7b3b      	ldrb	r3, [r7, #12]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80050b2:	7d7b      	ldrb	r3, [r7, #21]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	7d3b      	ldrb	r3, [r7, #20]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	b29b      	uxth	r3, r3
 80050be:	4413      	add	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80050c6:	8bfb      	ldrh	r3, [r7, #30]
 80050c8:	029a      	lsls	r2, r3, #10
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e02e      	b.n	800512e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80050d0:	7c7b      	ldrb	r3, [r7, #17]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	7dbb      	ldrb	r3, [r7, #22]
 80050da:	09db      	lsrs	r3, r3, #7
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	4413      	add	r3, r2
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	7d7b      	ldrb	r3, [r7, #21]
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f003 0306 	and.w	r3, r3, #6
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	4413      	add	r3, r2
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	3302      	adds	r3, #2
 80050f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80050f8:	7d3b      	ldrb	r3, [r7, #20]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	b29a      	uxth	r2, r3
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	b29b      	uxth	r3, r3
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	b29b      	uxth	r3, r3
 8005108:	4413      	add	r3, r2
 800510a:	b29a      	uxth	r2, r3
 800510c:	7cbb      	ldrb	r3, [r7, #18]
 800510e:	029b      	lsls	r3, r3, #10
 8005110:	b29b      	uxth	r3, r3
 8005112:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005116:	b29b      	uxth	r3, r3
 8005118:	4413      	add	r3, r2
 800511a:	b29b      	uxth	r3, r3
 800511c:	3301      	adds	r3, #1
 800511e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8005120:	8bfa      	ldrh	r2, [r7, #30]
 8005122:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005126:	3b09      	subs	r3, #9
 8005128:	409a      	lsls	r2, r3
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8005134:	e056      	b.n	80051e4 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005144:	e055      	b.n	80051f2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8005146:	f7ff fc09 	bl	800495c <SD_ReadyWait>
 800514a:	4603      	mov	r3, r0
 800514c:	2bff      	cmp	r3, #255	; 0xff
 800514e:	d14b      	bne.n	80051e8 <SD_disk_ioctl+0x234>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8005156:	e047      	b.n	80051e8 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8005158:	2100      	movs	r1, #0
 800515a:	2049      	movs	r0, #73	; 0x49
 800515c:	f7ff fce5 	bl	8004b2a <SD_SendCmd>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d142      	bne.n	80051ec <SD_disk_ioctl+0x238>
 8005166:	2110      	movs	r1, #16
 8005168:	6a38      	ldr	r0, [r7, #32]
 800516a:	f7ff fc6b 	bl	8004a44 <SD_RxDataBlock>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d03b      	beq.n	80051ec <SD_disk_ioctl+0x238>
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800517a:	e037      	b.n	80051ec <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800517c:	2100      	movs	r1, #0
 800517e:	204a      	movs	r0, #74	; 0x4a
 8005180:	f7ff fcd3 	bl	8004b2a <SD_SendCmd>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d132      	bne.n	80051f0 <SD_disk_ioctl+0x23c>
 800518a:	2110      	movs	r1, #16
 800518c:	6a38      	ldr	r0, [r7, #32]
 800518e:	f7ff fc59 	bl	8004a44 <SD_RxDataBlock>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d02b      	beq.n	80051f0 <SD_disk_ioctl+0x23c>
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800519e:	e027      	b.n	80051f0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80051a0:	2100      	movs	r1, #0
 80051a2:	207a      	movs	r0, #122	; 0x7a
 80051a4:	f7ff fcc1 	bl	8004b2a <SD_SendCmd>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051b4:	e00b      	b.n	80051ce <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80051b6:	6a3c      	ldr	r4, [r7, #32]
 80051b8:	1c63      	adds	r3, r4, #1
 80051ba:	623b      	str	r3, [r7, #32]
 80051bc:	f7ff fba4 	bl	8004908 <SPI_RxByte>
 80051c0:	4603      	mov	r3, r0
 80051c2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80051c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051c8:	3301      	adds	r3, #1
 80051ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80051ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d9ef      	bls.n	80051b6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051e2:	e006      	b.n	80051f2 <SD_disk_ioctl+0x23e>
			break;
 80051e4:	bf00      	nop
 80051e6:	e004      	b.n	80051f2 <SD_disk_ioctl+0x23e>
			break;
 80051e8:	bf00      	nop
 80051ea:	e002      	b.n	80051f2 <SD_disk_ioctl+0x23e>
			break;
 80051ec:	bf00      	nop
 80051ee:	e000      	b.n	80051f2 <SD_disk_ioctl+0x23e>
			break;
 80051f0:	bf00      	nop
		}

		DESELECT();
 80051f2:	f7ff fb45 	bl	8004880 <DESELECT>
		SPI_RxByte();
 80051f6:	f7ff fb87 	bl	8004908 <SPI_RxByte>
	}

	return res;
 80051fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051fe:	4618      	mov	r0, r3
 8005200:	372c      	adds	r7, #44	; 0x2c
 8005202:	46bd      	mov	sp, r7
 8005204:	bd90      	pop	{r4, r7, pc}
 8005206:	bf00      	nop
 8005208:	20000004 	.word	0x20000004

0800520c <sendSPI>:
 *      Author: Admin
 */

#include <Temperature/TemperatureSensing.h>

void sendSPI(SPI_HandleTypeDef* handle, uint8_t controlVal, uint8_t registerAddr, uint8_t messageHigh, uint8_t messageLow){
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	4603      	mov	r3, r0
 800521c:	70fb      	strb	r3, [r7, #3]
 800521e:	460b      	mov	r3, r1
 8005220:	70bb      	strb	r3, [r7, #2]
 8005222:	4613      	mov	r3, r2
 8005224:	707b      	strb	r3, [r7, #1]

  uint8_t spi_buf1[2];
  uint8_t spi_buf2[2];

  // Bytes to write to EEPROM
  spi_buf1[0] = registerAddr;
 8005226:	78bb      	ldrb	r3, [r7, #2]
 8005228:	733b      	strb	r3, [r7, #12]
  spi_buf1[1] = registerAddr;
 800522a:	78bb      	ldrb	r3, [r7, #2]
 800522c:	737b      	strb	r3, [r7, #13]
  spi_buf2[0] = messageHigh;
 800522e:	787b      	ldrb	r3, [r7, #1]
 8005230:	723b      	strb	r3, [r7, #8]
  spi_buf2[1] = messageLow;
 8005232:	7e3b      	ldrb	r3, [r7, #24]
 8005234:	727b      	strb	r3, [r7, #9]

  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_RESET);
 8005236:	2200      	movs	r2, #0
 8005238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800523c:	4816      	ldr	r0, [pc, #88]	; (8005298 <sendSPI+0x8c>)
 800523e:	f002 faf9 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005242:	2032      	movs	r0, #50	; 0x32
 8005244:	f000 f956 	bl	80054f4 <HAL_Delay>
  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf1, 2, 100) != HAL_OK){
 8005248:	f107 010c 	add.w	r1, r7, #12
 800524c:	2364      	movs	r3, #100	; 0x64
 800524e:	2202      	movs	r2, #2
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f004 ff17 	bl	800a084 <HAL_SPI_Transmit>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <sendSPI+0x56>

	  printf("SPI transmit1 error");
 800525c:	480f      	ldr	r0, [pc, #60]	; (800529c <sendSPI+0x90>)
 800525e:	f008 fc95 	bl	800db8c <iprintf>

  }

  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf2, 2, 100) != HAL_OK){
 8005262:	f107 0108 	add.w	r1, r7, #8
 8005266:	2364      	movs	r3, #100	; 0x64
 8005268:	2202      	movs	r2, #2
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f004 ff0a 	bl	800a084 <HAL_SPI_Transmit>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <sendSPI+0x70>

	  printf("SPI transmit2 error");
 8005276:	480a      	ldr	r0, [pc, #40]	; (80052a0 <sendSPI+0x94>)
 8005278:	f008 fc88 	bl	800db8c <iprintf>

  }
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_SET);
 800527c:	2201      	movs	r2, #1
 800527e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005282:	4805      	ldr	r0, [pc, #20]	; (8005298 <sendSPI+0x8c>)
 8005284:	f002 fad6 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8005288:	2032      	movs	r0, #50	; 0x32
 800528a:	f000 f933 	bl	80054f4 <HAL_Delay>

}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	48000400 	.word	0x48000400
 800529c:	080129b0 	.word	0x080129b0
 80052a0:	080129c4 	.word	0x080129c4

080052a4 <getSPI>:

int getSPI(SPI_HandleTypeDef* handle, uint8_t controlVal, uint8_t registerAddr){
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
 80052b0:	4613      	mov	r3, r2
 80052b2:	70bb      	strb	r3, [r7, #2]

  uint8_t spi_buf[2];
  uint8_t spi_recv_buf[2];
  uint16_t receivedHighByte = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	82fb      	strh	r3, [r7, #22]
  uint16_t receivedLowByte = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	82bb      	strh	r3, [r7, #20]
  uint16_t receivedData = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	827b      	strh	r3, [r7, #18]

  spi_buf[0] = controlVal;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	743b      	strb	r3, [r7, #16]
  spi_buf[1] = registerAddr;
 80052c4:	78bb      	ldrb	r3, [r7, #2]
 80052c6:	747b      	strb	r3, [r7, #17]
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_RESET);
 80052c8:	2200      	movs	r2, #0
 80052ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052ce:	481d      	ldr	r0, [pc, #116]	; (8005344 <getSPI+0xa0>)
 80052d0:	f002 fab0 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80052d4:	2032      	movs	r0, #50	; 0x32
 80052d6:	f000 f90d 	bl	80054f4 <HAL_Delay>
  if (HAL_SPI_Transmit(handle, (uint8_t *)spi_buf, 2, 100) != HAL_OK){
 80052da:	f107 0110 	add.w	r1, r7, #16
 80052de:	2364      	movs	r3, #100	; 0x64
 80052e0:	2202      	movs	r2, #2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f004 fece 	bl	800a084 <HAL_SPI_Transmit>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <getSPI+0x50>

	  printf("SPI transmitReceive error");
 80052ee:	4816      	ldr	r0, [pc, #88]	; (8005348 <getSPI+0xa4>)
 80052f0:	f008 fc4c 	bl	800db8c <iprintf>

  }
  if (HAL_SPI_Receive(handle, (uint8_t *)spi_recv_buf, 2, 100) != HAL_OK){
 80052f4:	f107 010c 	add.w	r1, r7, #12
 80052f8:	2364      	movs	r3, #100	; 0x64
 80052fa:	2202      	movs	r2, #2
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f005 f82f 	bl	800a360 <HAL_SPI_Receive>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <getSPI+0x6a>

	  printf("SPI receive error");
 8005308:	4810      	ldr	r0, [pc, #64]	; (800534c <getSPI+0xa8>)
 800530a:	f008 fc3f 	bl	800db8c <iprintf>

  }
  HAL_GPIO_WritePin(TPSPI_CSGP, TPSPI_CSPin, GPIO_PIN_SET);
 800530e:	2201      	movs	r2, #1
 8005310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005314:	480b      	ldr	r0, [pc, #44]	; (8005344 <getSPI+0xa0>)
 8005316:	f002 fa8d 	bl	8007834 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800531a:	2032      	movs	r0, #50	; 0x32
 800531c:	f000 f8ea 	bl	80054f4 <HAL_Delay>

  receivedHighByte = spi_recv_buf[0];
 8005320:	7b3b      	ldrb	r3, [r7, #12]
 8005322:	82fb      	strh	r3, [r7, #22]
  receivedLowByte = spi_recv_buf[1];
 8005324:	7b7b      	ldrb	r3, [r7, #13]
 8005326:	82bb      	strh	r3, [r7, #20]

  receivedData = (receivedHighByte<<8)|receivedLowByte;
 8005328:	8afb      	ldrh	r3, [r7, #22]
 800532a:	021b      	lsls	r3, r3, #8
 800532c:	b21a      	sxth	r2, r3
 800532e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	b21b      	sxth	r3, r3
 8005336:	827b      	strh	r3, [r7, #18]

  return receivedData;
 8005338:	8a7b      	ldrh	r3, [r7, #18]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	48000400 	.word	0x48000400
 8005348:	080129d8 	.word	0x080129d8
 800534c:	080129f4 	.word	0x080129f4

08005350 <configureSensor>:

void configureSensor(SPI_HandleTypeDef* handle){
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]

  sendSPI(handle, TPwriteMask, TPconfigurationAddr, TPdefaultConfigHigh, TPdefaultConfigLow);
 8005358:	23a6      	movs	r3, #166	; 0xa6
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2300      	movs	r3, #0
 800535e:	2203      	movs	r2, #3
 8005360:	2100      	movs	r1, #0
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff ff52 	bl	800520c <sendSPI>

}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <getTemperatureVal>:

	return getSPI(handle, TPreadMask, TPuniqueID1Addr);

}

double getTemperatureVal(SPI_HandleTypeDef* handle){
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  int receivedValue = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	60fb      	str	r3, [r7, #12]

  receivedValue = getSPI(handle, TPreadMask, TPtemperatureResultAddr);
 800537c:	2200      	movs	r2, #0
 800537e:	2101      	movs	r1, #1
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ff8f 	bl	80052a4 <getSPI>
 8005386:	60f8      	str	r0, [r7, #12]

  receivedValue = receivedValue >> 2;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	109b      	asrs	r3, r3, #2
 800538c:	60fb      	str	r3, [r7, #12]

  return (double)receivedValue*temperatureSensetivity;
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7fb f8c8 	bl	8000524 <__aeabi_i2d>
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <getTemperatureVal+0x44>)
 800539a:	f7fb f92d 	bl	80005f8 <__aeabi_dmul>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80053a6:	eeb0 0a47 	vmov.f32	s0, s14
 80053aa:	eef0 0a67 	vmov.f32	s1, s15
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	3fa00000 	.word	0x3fa00000

080053b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80053b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80053bc:	f7fd fedc 	bl	8003178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053c0:	480c      	ldr	r0, [pc, #48]	; (80053f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80053c2:	490d      	ldr	r1, [pc, #52]	; (80053f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <LoopForever+0xe>)
  movs r3, #0
 80053c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053c8:	e002      	b.n	80053d0 <LoopCopyDataInit>

080053ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ce:	3304      	adds	r3, #4

080053d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053d4:	d3f9      	bcc.n	80053ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053d8:	4c0a      	ldr	r4, [pc, #40]	; (8005404 <LoopForever+0x16>)
  movs r3, #0
 80053da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053dc:	e001      	b.n	80053e2 <LoopFillZerobss>

080053de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053e0:	3204      	adds	r2, #4

080053e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053e4:	d3fb      	bcc.n	80053de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053e6:	f007 fc43 	bl	800cc70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053ea:	f7fc fe73 	bl	80020d4 <main>

080053ee <LoopForever>:

LoopForever:
    b LoopForever
 80053ee:	e7fe      	b.n	80053ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80053f0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80053f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053f8:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80053fc:	08012f2c 	.word	0x08012f2c
  ldr r2, =_sbss
 8005400:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8005404:	200007bc 	.word	0x200007bc

08005408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005408:	e7fe      	b.n	8005408 <ADC1_2_IRQHandler>

0800540a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005414:	2003      	movs	r0, #3
 8005416:	f001 fd41 	bl	8006e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800541a:	200f      	movs	r0, #15
 800541c:	f000 f80e 	bl	800543c <HAL_InitTick>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	71fb      	strb	r3, [r7, #7]
 800542a:	e001      	b.n	8005430 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800542c:	f7fd fb8e 	bl	8002b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005430:	79fb      	ldrb	r3, [r7, #7]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005448:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <HAL_InitTick+0x6c>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d023      	beq.n	8005498 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005450:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_InitTick+0x70>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_InitTick+0x6c>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	4619      	mov	r1, r3
 800545a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800545e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fd4d 	bl	8006f06 <HAL_SYSTICK_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b0f      	cmp	r3, #15
 8005476:	d809      	bhi.n	800548c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005478:	2200      	movs	r2, #0
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	f001 fd17 	bl	8006eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <HAL_InitTick+0x74>)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e007      	b.n	800549c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
 8005490:	e004      	b.n	800549c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
 8005496:	e001      	b.n	800549c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	20000000 	.word	0x20000000
 80054b0:	20000008 	.word	0x20000008

080054b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_IncTick+0x20>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_IncTick+0x24>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4413      	add	r3, r2
 80054c4:	4a04      	ldr	r2, [pc, #16]	; (80054d8 <HAL_IncTick+0x24>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	20000794 	.word	0x20000794

080054dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return uwTick;
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <HAL_GetTick+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000794 	.word	0x20000794

080054f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054fc:	f7ff ffee 	bl	80054dc <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d005      	beq.n	800551a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_Delay+0x44>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800551a:	bf00      	nop
 800551c:	f7ff ffde 	bl	80054dc <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	429a      	cmp	r2, r3
 800552a:	d8f7      	bhi.n	800551c <HAL_Delay+0x28>
  {
  }
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	2000000c 	.word	0x2000000c

0800553c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_SuspendTick+0x1c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a04      	ldr	r2, [pc, #16]	; (8005558 <HAL_SuspendTick+0x1c>)
 8005546:	f023 0302 	bic.w	r3, r3, #2
 800554a:	6013      	str	r3, [r2, #0]
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	e000e010 	.word	0xe000e010

0800555c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	431a      	orrs	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3360      	adds	r3, #96	; 0x60
 80055d6:	461a      	mov	r2, r3
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b08      	ldr	r3, [pc, #32]	; (8005608 <LL_ADC_SetOffset+0x44>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80055fc:	bf00      	nop
 80055fe:	371c      	adds	r7, #28
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	03fff000 	.word	0x03fff000

0800560c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3360      	adds	r3, #96	; 0x60
 800561a:	461a      	mov	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3360      	adds	r3, #96	; 0x60
 8005648:	461a      	mov	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	431a      	orrs	r2, r3
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005662:	bf00      	nop
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	615a      	str	r2, [r3, #20]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3330      	adds	r3, #48	; 0x30
 80056ca:	461a      	mov	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	4413      	add	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f003 031f 	and.w	r3, r3, #31
 80056e4:	211f      	movs	r1, #31
 80056e6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	401a      	ands	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	0e9b      	lsrs	r3, r3, #26
 80056f2:	f003 011f 	and.w	r1, r3, #31
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005700:	431a      	orrs	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005712:	b480      	push	{r7}
 8005714:	b087      	sub	sp, #28
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	3314      	adds	r3, #20
 8005722:	461a      	mov	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	0e5b      	lsrs	r3, r3, #25
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	4413      	add	r3, r2
 8005730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	0d1b      	lsrs	r3, r3, #20
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2107      	movs	r1, #7
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	401a      	ands	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	0d1b      	lsrs	r3, r3, #20
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	fa01 f303 	lsl.w	r3, r1, r3
 8005756:	431a      	orrs	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005780:	43db      	mvns	r3, r3
 8005782:	401a      	ands	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f003 0318 	and.w	r3, r3, #24
 800578a:	4908      	ldr	r1, [pc, #32]	; (80057ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800578c:	40d9      	lsrs	r1, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	400b      	ands	r3, r1
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	431a      	orrs	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800579e:	bf00      	nop
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	0007ffff 	.word	0x0007ffff

080057b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 031f 	and.w	r3, r3, #31
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80057f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6093      	str	r3, [r2, #8]
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005820:	d101      	bne.n	8005826 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005844:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005848:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005870:	d101      	bne.n	8005876 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005894:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005898:	f043 0201 	orr.w	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <LL_ADC_IsEnabled+0x18>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <LL_ADC_IsEnabled+0x1a>
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d101      	bne.n	8005912 <LL_ADC_IsDisableOngoing+0x18>
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <LL_ADC_IsDisableOngoing+0x1a>
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005930:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005958:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800595c:	f043 0210 	orr.w	r2, r3, #16
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d101      	bne.n	8005988 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d101      	bne.n	80059d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e131      	b.n	8005c62 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d109      	bne.n	8005a20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fd f8c1 	bl	8002b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fef1 	bl	800580c <LL_ADC_IsDeepPowerDownEnabled>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff fed7 	bl	80057e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff ff0c 	bl	800585c <LL_ADC_IsInternalRegulatorEnabled>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d115      	bne.n	8005a76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff fef0 	bl	8005834 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a54:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_ADC_Init+0x288>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	099b      	lsrs	r3, r3, #6
 8005a5a:	4a85      	ldr	r2, [pc, #532]	; (8005c70 <HAL_ADC_Init+0x28c>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	3301      	adds	r3, #1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a68:	e002      	b.n	8005a70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f9      	bne.n	8005a6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff feee 	bl	800585c <LL_ADC_IsInternalRegulatorEnabled>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f043 0210 	orr.w	r2, r3, #16
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff ff62 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 8005aac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 80ca 	bne.w	8005c50 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 80c6 	bne.w	8005c50 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005acc:	f043 0202 	orr.w	r2, r3, #2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fefb 	bl	80058d4 <LL_ADC_IsEnabled>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d110      	bne.n	8005b06 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ae4:	4863      	ldr	r0, [pc, #396]	; (8005c74 <HAL_ADC_Init+0x290>)
 8005ae6:	f7ff fef5 	bl	80058d4 <LL_ADC_IsEnabled>
 8005aea:	4604      	mov	r4, r0
 8005aec:	4862      	ldr	r0, [pc, #392]	; (8005c78 <HAL_ADC_Init+0x294>)
 8005aee:	f7ff fef1 	bl	80058d4 <LL_ADC_IsEnabled>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4323      	orrs	r3, r4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4619      	mov	r1, r3
 8005b00:	485e      	ldr	r0, [pc, #376]	; (8005c7c <HAL_ADC_Init+0x298>)
 8005b02:	f7ff fd2b 	bl	800555c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7e5b      	ldrb	r3, [r3, #25]
 8005b0a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b10:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005b16:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005b1c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b24:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b26:	4313      	orrs	r3, r2
 8005b28:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d106      	bne.n	8005b42 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	045b      	lsls	r3, r3, #17
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d009      	beq.n	8005b5e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	4b46      	ldr	r3, [pc, #280]	; (8005c80 <HAL_ADC_Init+0x29c>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	69b9      	ldr	r1, [r7, #24]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fefa 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 8005b7c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff ff1b 	bl	80059be <LL_ADC_INJ_IsConversionOngoing>
 8005b88:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d13d      	bne.n	8005c0c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13a      	bne.n	8005c0c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b9a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ba2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d118      	bne.n	8005bfc <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bd4:	f023 0304 	bic.w	r3, r3, #4
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005be0:	4311      	orrs	r1, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005be6:	4311      	orrs	r1, r2
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bec:	430a      	orrs	r2, r1
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	611a      	str	r2, [r3, #16]
 8005bfa:	e007      	b.n	8005c0c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0201 	bic.w	r2, r2, #1
 8005c0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10c      	bne.n	8005c2e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	f023 010f 	bic.w	r1, r3, #15
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c2c:	e007      	b.n	8005c3e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 020f 	bic.w	r2, r2, #15
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	f043 0201 	orr.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54
 8005c4e:	e007      	b.n	8005c60 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f043 0210 	orr.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c60:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	053e2d63 	.word	0x053e2d63
 8005c74:	50040000 	.word	0x50040000
 8005c78:	50040100 	.word	0x50040100
 8005c7c:	50040300 	.word	0x50040300
 8005c80:	fff0c007 	.word	0xfff0c007

08005c84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c8c:	4857      	ldr	r0, [pc, #348]	; (8005dec <HAL_ADC_Start+0x168>)
 8005c8e:	f7ff fd8f 	bl	80057b0 <LL_ADC_GetMultimode>
 8005c92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff fe69 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 809c 	bne.w	8005dde <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_ADC_Start+0x30>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e097      	b.n	8005de4 <HAL_ADC_Start+0x160>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fe6d 	bl	800699c <ADC_Enable>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 8083 	bne.w	8005dd4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a42      	ldr	r2, [pc, #264]	; (8005df0 <HAL_ADC_Start+0x16c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d002      	beq.n	8005cf2 <HAL_ADC_Start+0x6e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	e000      	b.n	8005cf4 <HAL_ADC_Start+0x70>
 8005cf2:	4b40      	ldr	r3, [pc, #256]	; (8005df4 <HAL_ADC_Start+0x170>)
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d002      	beq.n	8005d02 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d1a:	d106      	bne.n	8005d2a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	f023 0206 	bic.w	r2, r3, #6
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	659a      	str	r2, [r3, #88]	; 0x58
 8005d28:	e002      	b.n	8005d30 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	221c      	movs	r2, #28
 8005d36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <HAL_ADC_Start+0x16c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d002      	beq.n	8005d50 <HAL_ADC_Start+0xcc>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	e000      	b.n	8005d52 <HAL_ADC_Start+0xce>
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <HAL_ADC_Start+0x170>)
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6812      	ldr	r2, [r2, #0]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d008      	beq.n	8005d6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d002      	beq.n	8005d6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b09      	cmp	r3, #9
 8005d6a:	d114      	bne.n	8005d96 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fdc6 	bl	8005920 <LL_ADC_REG_StartConversion>
 8005d94:	e025      	b.n	8005de2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <HAL_ADC_Start+0x16c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d002      	beq.n	8005db2 <HAL_ADC_Start+0x12e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	e000      	b.n	8005db4 <HAL_ADC_Start+0x130>
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <HAL_ADC_Start+0x170>)
 8005db4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00f      	beq.n	8005de2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
 8005dd2:	e006      	b.n	8005de2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005ddc:	e001      	b.n	8005de2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
 8005de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	50040300 	.word	0x50040300
 8005df0:	50040100 	.word	0x50040100
 8005df4:	50040000 	.word	0x50040000

08005df8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d101      	bne.n	8005e0e <HAL_ADC_Stop+0x16>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e023      	b.n	8005e56 <HAL_ADC_Stop+0x5e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005e16:	2103      	movs	r1, #3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd03 	bl	8006824 <ADC_ConversionStop>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d111      	bne.n	8005e4c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fe3d 	bl	8006aa8 <ADC_Disable>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	f043 0201 	orr.w	r2, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e6a:	4866      	ldr	r0, [pc, #408]	; (8006004 <HAL_ADC_PollForConversion+0x1a4>)
 8005e6c:	f7ff fca0 	bl	80057b0 <LL_ADC_GetMultimode>
 8005e70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d102      	bne.n	8005e80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	e02a      	b.n	8005ed6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b05      	cmp	r3, #5
 8005e8a:	d002      	beq.n	8005e92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2b09      	cmp	r3, #9
 8005e90:	d111      	bne.n	8005eb6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	f043 0220 	orr.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0a4      	b.n	8005ffa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005eb0:	2304      	movs	r3, #4
 8005eb2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005eb4:	e00f      	b.n	8005ed6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005eb6:	4853      	ldr	r0, [pc, #332]	; (8006004 <HAL_ADC_PollForConversion+0x1a4>)
 8005eb8:	f7ff fc88 	bl	80057cc <LL_ADC_GetMultiDMATransfer>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f043 0220 	orr.w	r2, r3, #32
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e093      	b.n	8005ffa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005ed6:	f7ff fb01 	bl	80054dc <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005edc:	e021      	b.n	8005f22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d01d      	beq.n	8005f22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ee6:	f7ff faf9 	bl	80054dc <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d302      	bcc.n	8005efc <HAL_ADC_PollForConversion+0x9c>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d112      	bne.n	8005f22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	f043 0204 	orr.w	r2, r3, #4
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e06b      	b.n	8005ffa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0d6      	beq.n	8005ede <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fba7 	bl	8005694 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d01c      	beq.n	8005f86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7e5b      	ldrb	r3, [r3, #25]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d118      	bne.n	8005f86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d111      	bne.n	8005f86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <HAL_ADC_PollForConversion+0x1a8>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d002      	beq.n	8005f96 <HAL_ADC_PollForConversion+0x136>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	e000      	b.n	8005f98 <HAL_ADC_PollForConversion+0x138>
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_ADC_PollForConversion+0x1ac>)
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6812      	ldr	r2, [r2, #0]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d008      	beq.n	8005fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	d002      	beq.n	8005fb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d104      	bne.n	8005fbc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	e00c      	b.n	8005fd6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a11      	ldr	r2, [pc, #68]	; (8006008 <HAL_ADC_PollForConversion+0x1a8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d002      	beq.n	8005fcc <HAL_ADC_PollForConversion+0x16c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	e000      	b.n	8005fce <HAL_ADC_PollForConversion+0x16e>
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <HAL_ADC_PollForConversion+0x1ac>)
 8005fce:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d104      	bne.n	8005fe6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	e008      	b.n	8005ff8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d103      	bne.n	8005ff8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	220c      	movs	r2, #12
 8005ff6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	50040300 	.word	0x50040300
 8006008:	50040100 	.word	0x50040100
 800600c:	50040000 	.word	0x50040000

08006010 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0b6      	sub	sp, #216	; 0xd8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006046:	2b01      	cmp	r3, #1
 8006048:	d101      	bne.n	800604e <HAL_ADC_ConfigChannel+0x22>
 800604a:	2302      	movs	r3, #2
 800604c:	e3d5      	b.n	80067fa <HAL_ADC_ConfigChannel+0x7ce>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fc88 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 83ba 	bne.w	80067dc <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d824      	bhi.n	80060ba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	3b02      	subs	r3, #2
 8006076:	2b03      	cmp	r3, #3
 8006078:	d81b      	bhi.n	80060b2 <HAL_ADC_ConfigChannel+0x86>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_ADC_ConfigChannel+0x54>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006091 	.word	0x08006091
 8006084:	08006099 	.word	0x08006099
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	220c      	movs	r2, #12
 8006094:	605a      	str	r2, [r3, #4]
          break;
 8006096:	e011      	b.n	80060bc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2212      	movs	r2, #18
 800609c:	605a      	str	r2, [r3, #4]
          break;
 800609e:	e00d      	b.n	80060bc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2218      	movs	r2, #24
 80060a4:	605a      	str	r2, [r3, #4]
          break;
 80060a6:	e009      	b.n	80060bc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ae:	605a      	str	r2, [r3, #4]
          break;
 80060b0:	e004      	b.n	80060bc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2206      	movs	r2, #6
 80060b6:	605a      	str	r2, [r3, #4]
          break;
 80060b8:	e000      	b.n	80060bc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80060ba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	f7ff faf6 	bl	80056ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fc4c 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 80060d8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fc6c 	bl	80059be <LL_ADC_INJ_IsConversionOngoing>
 80060e6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 81c1 	bne.w	8006476 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 81bc 	bne.w	8006476 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006106:	d10f      	bne.n	8006128 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2200      	movs	r2, #0
 8006112:	4619      	mov	r1, r3
 8006114:	f7ff fafd 	bl	8005712 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff faa4 	bl	800566e <LL_ADC_SetSamplingTimeCommonConfig>
 8006126:	e00e      	b.n	8006146 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6819      	ldr	r1, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	461a      	mov	r2, r3
 8006136:	f7ff faec 	bl	8005712 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fa94 	bl	800566e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	08db      	lsrs	r3, r3, #3
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b04      	cmp	r3, #4
 8006166:	d00a      	beq.n	800617e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	6919      	ldr	r1, [r3, #16]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006178:	f7ff fa24 	bl	80055c4 <LL_ADC_SetOffset>
 800617c:	e17b      	b.n	8006476 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fa41 	bl	800560c <LL_ADC_GetOffsetChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10a      	bne.n	80061aa <HAL_ADC_ConfigChannel+0x17e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fa36 	bl	800560c <LL_ADC_GetOffsetChannel>
 80061a0:	4603      	mov	r3, r0
 80061a2:	0e9b      	lsrs	r3, r3, #26
 80061a4:	f003 021f 	and.w	r2, r3, #31
 80061a8:	e01e      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x1bc>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fa2b 	bl	800560c <LL_ADC_GetOffsetChannel>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061c0:	fa93 f3a3 	rbit	r3, r3
 80061c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80061d8:	2320      	movs	r3, #32
 80061da:	e004      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80061dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061e0:	fab3 f383 	clz	r3, r3
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d105      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x1d4>
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	0e9b      	lsrs	r3, r3, #26
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	e018      	b.n	8006232 <HAL_ADC_ConfigChannel+0x206>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800620c:	fa93 f3a3 	rbit	r3, r3
 8006210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800621c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8006224:	2320      	movs	r3, #32
 8006226:	e004      	b.n	8006232 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8006228:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800622c:	fab3 f383 	clz	r3, r3
 8006230:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006232:	429a      	cmp	r2, r3
 8006234:	d106      	bne.n	8006244 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff f9fa 	bl	8005638 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2101      	movs	r1, #1
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f9de 	bl	800560c <LL_ADC_GetOffsetChannel>
 8006250:	4603      	mov	r3, r0
 8006252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x244>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2101      	movs	r1, #1
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff f9d3 	bl	800560c <LL_ADC_GetOffsetChannel>
 8006266:	4603      	mov	r3, r0
 8006268:	0e9b      	lsrs	r3, r3, #26
 800626a:	f003 021f 	and.w	r2, r3, #31
 800626e:	e01e      	b.n	80062ae <HAL_ADC_ConfigChannel+0x282>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2101      	movs	r1, #1
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff f9c8 	bl	800560c <LL_ADC_GetOffsetChannel>
 800627c:	4603      	mov	r3, r0
 800627e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006286:	fa93 f3a3 	rbit	r3, r3
 800628a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800628e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800629e:	2320      	movs	r3, #32
 80062a0:	e004      	b.n	80062ac <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80062a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d105      	bne.n	80062c6 <HAL_ADC_ConfigChannel+0x29a>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	0e9b      	lsrs	r3, r3, #26
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	e018      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x2cc>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80062da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80062e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80062ea:	2320      	movs	r3, #32
 80062ec:	e004      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80062ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062f2:	fab3 f383 	clz	r3, r3
 80062f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d106      	bne.n	800630a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2200      	movs	r2, #0
 8006302:	2101      	movs	r1, #1
 8006304:	4618      	mov	r0, r3
 8006306:	f7ff f997 	bl	8005638 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff f97b 	bl	800560c <LL_ADC_GetOffsetChannel>
 8006316:	4603      	mov	r3, r0
 8006318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x30a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2102      	movs	r1, #2
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f970 	bl	800560c <LL_ADC_GetOffsetChannel>
 800632c:	4603      	mov	r3, r0
 800632e:	0e9b      	lsrs	r3, r3, #26
 8006330:	f003 021f 	and.w	r2, r3, #31
 8006334:	e01e      	b.n	8006374 <HAL_ADC_ConfigChannel+0x348>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2102      	movs	r1, #2
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f965 	bl	800560c <LL_ADC_GetOffsetChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800634c:	fa93 f3a3 	rbit	r3, r3
 8006350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800635c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8006364:	2320      	movs	r3, #32
 8006366:	e004      	b.n	8006372 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8006368:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800636c:	fab3 f383 	clz	r3, r3
 8006370:	b2db      	uxtb	r3, r3
 8006372:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637c:	2b00      	cmp	r3, #0
 800637e:	d105      	bne.n	800638c <HAL_ADC_ConfigChannel+0x360>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	0e9b      	lsrs	r3, r3, #26
 8006386:	f003 031f 	and.w	r3, r3, #31
 800638a:	e016      	b.n	80063ba <HAL_ADC_ConfigChannel+0x38e>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800639e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80063ac:	2320      	movs	r3, #32
 80063ae:	e004      	b.n	80063ba <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80063b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b4:	fab3 f383 	clz	r3, r3
 80063b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d106      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	2102      	movs	r1, #2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f936 	bl	8005638 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2103      	movs	r1, #3
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff f91a 	bl	800560c <LL_ADC_GetOffsetChannel>
 80063d8:	4603      	mov	r3, r0
 80063da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <HAL_ADC_ConfigChannel+0x3cc>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2103      	movs	r1, #3
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff f90f 	bl	800560c <LL_ADC_GetOffsetChannel>
 80063ee:	4603      	mov	r3, r0
 80063f0:	0e9b      	lsrs	r3, r3, #26
 80063f2:	f003 021f 	and.w	r2, r3, #31
 80063f6:	e017      	b.n	8006428 <HAL_ADC_ConfigChannel+0x3fc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2103      	movs	r1, #3
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff f904 	bl	800560c <LL_ADC_GetOffsetChannel>
 8006404:	4603      	mov	r3, r0
 8006406:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006412:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006414:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800641a:	2320      	movs	r3, #32
 800641c:	e003      	b.n	8006426 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800641e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006420:	fab3 f383 	clz	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006430:	2b00      	cmp	r3, #0
 8006432:	d105      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x414>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0e9b      	lsrs	r3, r3, #26
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	e011      	b.n	8006464 <HAL_ADC_ConfigChannel+0x438>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006448:	fa93 f3a3 	rbit	r3, r3
 800644c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800644e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006450:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e003      	b.n	8006464 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800645c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645e:	fab3 f383 	clz	r3, r3
 8006462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006464:	429a      	cmp	r2, r3
 8006466:	d106      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2200      	movs	r2, #0
 800646e:	2103      	movs	r1, #3
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff f8e1 	bl	8005638 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fa2a 	bl	80058d4 <LL_ADC_IsEnabled>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 8140 	bne.w	8006708 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	461a      	mov	r2, r3
 8006496:	f7ff f967 	bl	8005768 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	4a8f      	ldr	r2, [pc, #572]	; (80066dc <HAL_ADC_ConfigChannel+0x6b0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	f040 8131 	bne.w	8006708 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x4a2>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	0e9b      	lsrs	r3, r3, #26
 80064bc:	3301      	adds	r3, #1
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b09      	cmp	r3, #9
 80064c4:	bf94      	ite	ls
 80064c6:	2301      	movls	r3, #1
 80064c8:	2300      	movhi	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e019      	b.n	8006502 <HAL_ADC_ConfigChannel+0x4d6>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80064dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064de:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80064e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80064e6:	2320      	movs	r3, #32
 80064e8:	e003      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80064ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	3301      	adds	r3, #1
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	2b09      	cmp	r3, #9
 80064fa:	bf94      	ite	ls
 80064fc:	2301      	movls	r3, #1
 80064fe:	2300      	movhi	r3, #0
 8006500:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006502:	2b00      	cmp	r3, #0
 8006504:	d079      	beq.n	80065fa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800650e:	2b00      	cmp	r3, #0
 8006510:	d107      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x4f6>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	0e9b      	lsrs	r3, r3, #26
 8006518:	3301      	adds	r3, #1
 800651a:	069b      	lsls	r3, r3, #26
 800651c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006520:	e015      	b.n	800654e <HAL_ADC_ConfigChannel+0x522>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652a:	fa93 f3a3 	rbit	r3, r3
 800652e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006532:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800653a:	2320      	movs	r3, #32
 800653c:	e003      	b.n	8006546 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800653e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006540:	fab3 f383 	clz	r3, r3
 8006544:	b2db      	uxtb	r3, r3
 8006546:	3301      	adds	r3, #1
 8006548:	069b      	lsls	r3, r3, #26
 800654a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_ADC_ConfigChannel+0x542>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	0e9b      	lsrs	r3, r3, #26
 8006560:	3301      	adds	r3, #1
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	e017      	b.n	800659e <HAL_ADC_ConfigChannel+0x572>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006576:	fa93 f3a3 	rbit	r3, r3
 800657a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800657c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8006586:	2320      	movs	r3, #32
 8006588:	e003      	b.n	8006592 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800658a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	b2db      	uxtb	r3, r3
 8006592:	3301      	adds	r3, #1
 8006594:	f003 031f 	and.w	r3, r3, #31
 8006598:	2101      	movs	r1, #1
 800659a:	fa01 f303 	lsl.w	r3, r1, r3
 800659e:	ea42 0103 	orr.w	r1, r2, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x598>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	0e9b      	lsrs	r3, r3, #26
 80065b4:	3301      	adds	r3, #1
 80065b6:	f003 021f 	and.w	r2, r3, #31
 80065ba:	4613      	mov	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	4413      	add	r3, r2
 80065c0:	051b      	lsls	r3, r3, #20
 80065c2:	e018      	b.n	80065f6 <HAL_ADC_ConfigChannel+0x5ca>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	fa93 f3a3 	rbit	r3, r3
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80065dc:	2320      	movs	r3, #32
 80065de:	e003      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	fab3 f383 	clz	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	f003 021f 	and.w	r2, r3, #31
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065f6:	430b      	orrs	r3, r1
 80065f8:	e081      	b.n	80066fe <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <HAL_ADC_ConfigChannel+0x5ea>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	0e9b      	lsrs	r3, r3, #26
 800660c:	3301      	adds	r3, #1
 800660e:	069b      	lsls	r3, r3, #26
 8006610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006614:	e015      	b.n	8006642 <HAL_ADC_ConfigChannel+0x616>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	fa93 f3a3 	rbit	r3, r3
 8006622:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800662e:	2320      	movs	r3, #32
 8006630:	e003      	b.n	800663a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	fab3 f383 	clz	r3, r3
 8006638:	b2db      	uxtb	r3, r3
 800663a:	3301      	adds	r3, #1
 800663c:	069b      	lsls	r3, r3, #26
 800663e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664a:	2b00      	cmp	r3, #0
 800664c:	d109      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x636>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	0e9b      	lsrs	r3, r3, #26
 8006654:	3301      	adds	r3, #1
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2101      	movs	r1, #1
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	e017      	b.n	8006692 <HAL_ADC_ConfigChannel+0x666>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	fa93 f3a3 	rbit	r3, r3
 800666e:	61fb      	str	r3, [r7, #28]
  return result;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800667a:	2320      	movs	r3, #32
 800667c:	e003      	b.n	8006686 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	fab3 f383 	clz	r3, r3
 8006684:	b2db      	uxtb	r3, r3
 8006686:	3301      	adds	r3, #1
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	ea42 0103 	orr.w	r1, r2, r3
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10d      	bne.n	80066be <HAL_ADC_ConfigChannel+0x692>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	0e9b      	lsrs	r3, r3, #26
 80066a8:	3301      	adds	r3, #1
 80066aa:	f003 021f 	and.w	r2, r3, #31
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	3b1e      	subs	r3, #30
 80066b6:	051b      	lsls	r3, r3, #20
 80066b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066bc:	e01e      	b.n	80066fc <HAL_ADC_ConfigChannel+0x6d0>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	fa93 f3a3 	rbit	r3, r3
 80066ca:	613b      	str	r3, [r7, #16]
  return result;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80066d6:	2320      	movs	r3, #32
 80066d8:	e006      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x6bc>
 80066da:	bf00      	nop
 80066dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	fab3 f383 	clz	r3, r3
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	3301      	adds	r3, #1
 80066ea:	f003 021f 	and.w	r2, r3, #31
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	3b1e      	subs	r3, #30
 80066f6:	051b      	lsls	r3, r3, #20
 80066f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066fc:	430b      	orrs	r3, r1
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	4619      	mov	r1, r3
 8006704:	f7ff f805 	bl	8005712 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b3d      	ldr	r3, [pc, #244]	; (8006804 <HAL_ADC_ConfigChannel+0x7d8>)
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d06c      	beq.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006714:	483c      	ldr	r0, [pc, #240]	; (8006808 <HAL_ADC_ConfigChannel+0x7dc>)
 8006716:	f7fe ff47 	bl	80055a8 <LL_ADC_GetCommonPathInternalCh>
 800671a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a3a      	ldr	r2, [pc, #232]	; (800680c <HAL_ADC_ConfigChannel+0x7e0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d127      	bne.n	8006778 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800672c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d121      	bne.n	8006778 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a35      	ldr	r2, [pc, #212]	; (8006810 <HAL_ADC_ConfigChannel+0x7e4>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d157      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800673e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006742:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006746:	4619      	mov	r1, r3
 8006748:	482f      	ldr	r0, [pc, #188]	; (8006808 <HAL_ADC_ConfigChannel+0x7dc>)
 800674a:	f7fe ff1a 	bl	8005582 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800674e:	4b31      	ldr	r3, [pc, #196]	; (8006814 <HAL_ADC_ConfigChannel+0x7e8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	099b      	lsrs	r3, r3, #6
 8006754:	4a30      	ldr	r2, [pc, #192]	; (8006818 <HAL_ADC_ConfigChannel+0x7ec>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	099b      	lsrs	r3, r3, #6
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	4613      	mov	r3, r2
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006768:	e002      	b.n	8006770 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b01      	subs	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f9      	bne.n	800676a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006776:	e03a      	b.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a27      	ldr	r2, [pc, #156]	; (800681c <HAL_ADC_ConfigChannel+0x7f0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d113      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x77e>
 8006782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10d      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_ADC_ConfigChannel+0x7e4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d12a      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006798:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800679c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067a0:	4619      	mov	r1, r3
 80067a2:	4819      	ldr	r0, [pc, #100]	; (8006808 <HAL_ADC_ConfigChannel+0x7dc>)
 80067a4:	f7fe feed 	bl	8005582 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067a8:	e021      	b.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1c      	ldr	r2, [pc, #112]	; (8006820 <HAL_ADC_ConfigChannel+0x7f4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d11c      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d116      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <HAL_ADC_ConfigChannel+0x7e4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d111      	bne.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80067d2:	4619      	mov	r1, r3
 80067d4:	480c      	ldr	r0, [pc, #48]	; (8006808 <HAL_ADC_ConfigChannel+0x7dc>)
 80067d6:	f7fe fed4 	bl	8005582 <LL_ADC_SetCommonPathInternalCh>
 80067da:	e008      	b.n	80067ee <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	f043 0220 	orr.w	r2, r3, #32
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	37d8      	adds	r7, #216	; 0xd8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	80080000 	.word	0x80080000
 8006808:	50040300 	.word	0x50040300
 800680c:	c7520000 	.word	0xc7520000
 8006810:	50040000 	.word	0x50040000
 8006814:	20000000 	.word	0x20000000
 8006818:	053e2d63 	.word	0x053e2d63
 800681c:	cb840000 	.word	0xcb840000
 8006820:	80000001 	.word	0x80000001

08006824 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800682e:	2300      	movs	r3, #0
 8006830:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f898 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 8006840:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f8b9 	bl	80059be <LL_ADC_INJ_IsConversionOngoing>
 800684c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8098 	beq.w	800698c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02a      	beq.n	80068c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	7e5b      	ldrb	r3, [r3, #25]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d126      	bne.n	80068c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7e1b      	ldrb	r3, [r3, #24]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d122      	bne.n	80068c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800687a:	2301      	movs	r3, #1
 800687c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800687e:	e014      	b.n	80068aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4a45      	ldr	r2, [pc, #276]	; (8006998 <ADC_ConversionStop+0x174>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d90d      	bls.n	80068a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	f043 0210 	orr.w	r2, r3, #16
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006898:	f043 0201 	orr.w	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e074      	b.n	800698e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d1e3      	bne.n	8006880 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2240      	movs	r2, #64	; 0x40
 80068be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d014      	beq.n	80068f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff f850 	bl	8005970 <LL_ADC_REG_IsConversionOngoing>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff f80d 	bl	80058fa <LL_ADC_IsDisableOngoing>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff f82c 	bl	8005948 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d014      	beq.n	8006920 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7ff f85f 	bl	80059be <LL_ADC_INJ_IsConversionOngoing>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f7fe fff5 	bl	80058fa <LL_ADC_IsDisableOngoing>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff f83b 	bl	8005996 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d005      	beq.n	8006932 <ADC_ConversionStop+0x10e>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d105      	bne.n	8006938 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800692c:	230c      	movs	r3, #12
 800692e:	617b      	str	r3, [r7, #20]
        break;
 8006930:	e005      	b.n	800693e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006932:	2308      	movs	r3, #8
 8006934:	617b      	str	r3, [r7, #20]
        break;
 8006936:	e002      	b.n	800693e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006938:	2304      	movs	r3, #4
 800693a:	617b      	str	r3, [r7, #20]
        break;
 800693c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800693e:	f7fe fdcd 	bl	80054dc <HAL_GetTick>
 8006942:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006944:	e01b      	b.n	800697e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006946:	f7fe fdc9 	bl	80054dc <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b05      	cmp	r3, #5
 8006952:	d914      	bls.n	800697e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00d      	beq.n	800697e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	f043 0210 	orr.w	r2, r3, #16
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006972:	f043 0201 	orr.w	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e007      	b.n	800698e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4013      	ands	r3, r2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1dc      	bne.n	8006946 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	a33fffff 	.word	0xa33fffff

0800699c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe ff91 	bl	80058d4 <LL_ADC_IsEnabled>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d169      	bne.n	8006a8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <ADC_Enable+0xfc>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ca:	f043 0210 	orr.w	r2, r3, #16
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d6:	f043 0201 	orr.w	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e055      	b.n	8006a8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe ff4c 	bl	8005884 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80069ec:	482b      	ldr	r0, [pc, #172]	; (8006a9c <ADC_Enable+0x100>)
 80069ee:	f7fe fddb 	bl	80055a8 <LL_ADC_GetCommonPathInternalCh>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d013      	beq.n	8006a24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <ADC_Enable+0x104>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	099b      	lsrs	r3, r3, #6
 8006a02:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <ADC_Enable+0x108>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	099b      	lsrs	r3, r3, #6
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006a16:	e002      	b.n	8006a1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f9      	bne.n	8006a18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a24:	f7fe fd5a 	bl	80054dc <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a2a:	e028      	b.n	8006a7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe ff4f 	bl	80058d4 <LL_ADC_IsEnabled>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe ff1f 	bl	8005884 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a46:	f7fe fd49 	bl	80054dc <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d914      	bls.n	8006a7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d00d      	beq.n	8006a7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f043 0210 	orr.w	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	f043 0201 	orr.w	r2, r3, #1
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e007      	b.n	8006a8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d1cf      	bne.n	8006a2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	8000003f 	.word	0x8000003f
 8006a9c:	50040300 	.word	0x50040300
 8006aa0:	20000000 	.word	0x20000000
 8006aa4:	053e2d63 	.word	0x053e2d63

08006aa8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fe ff20 	bl	80058fa <LL_ADC_IsDisableOngoing>
 8006aba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe ff07 	bl	80058d4 <LL_ADC_IsEnabled>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d047      	beq.n	8006b5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d144      	bne.n	8006b5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 030d 	and.w	r3, r3, #13
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d10c      	bne.n	8006afa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fee1 	bl	80058ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2203      	movs	r2, #3
 8006af0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006af2:	f7fe fcf3 	bl	80054dc <HAL_GetTick>
 8006af6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006af8:	e029      	b.n	8006b4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f043 0210 	orr.w	r2, r3, #16
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e023      	b.n	8006b5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b16:	f7fe fce1 	bl	80054dc <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d914      	bls.n	8006b4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b36:	f043 0210 	orr.w	r2, r3, #16
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e007      	b.n	8006b5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1dc      	bne.n	8006b16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <LL_ADC_IsEnabled>:
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <LL_ADC_IsEnabled+0x18>
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e000      	b.n	8006b80 <LL_ADC_IsEnabled+0x1a>
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <LL_ADC_REG_IsConversionOngoing>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d101      	bne.n	8006ba4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006bb4:	b590      	push	{r4, r7, lr}
 8006bb6:	b09f      	sub	sp, #124	; 0x7c
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e089      	b.n	8006ce6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006bde:	2300      	movs	r3, #0
 8006be0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d102      	bne.n	8006bf2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006bec:	4b41      	ldr	r3, [pc, #260]	; (8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006bee:	60bb      	str	r3, [r7, #8]
 8006bf0:	e001      	b.n	8006bf6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10b      	bne.n	8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e068      	b.n	8006ce6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ffb8 	bl	8006b8c <LL_ADC_REG_IsConversionOngoing>
 8006c1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ffb2 	bl	8006b8c <LL_ADC_REG_IsConversionOngoing>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d14a      	bne.n	8006cc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d147      	bne.n	8006cc4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c34:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006c36:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d027      	beq.n	8006c90 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6859      	ldr	r1, [r3, #4]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c52:	035b      	lsls	r3, r3, #13
 8006c54:	430b      	orrs	r3, r1
 8006c56:	431a      	orrs	r2, r3
 8006c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c5c:	4824      	ldr	r0, [pc, #144]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c5e:	f7ff ff82 	bl	8006b66 <LL_ADC_IsEnabled>
 8006c62:	4604      	mov	r4, r0
 8006c64:	4823      	ldr	r0, [pc, #140]	; (8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006c66:	f7ff ff7e 	bl	8006b66 <LL_ADC_IsEnabled>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4323      	orrs	r3, r4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d132      	bne.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c7a:	f023 030f 	bic.w	r3, r3, #15
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	6811      	ldr	r1, [r2, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	6892      	ldr	r2, [r2, #8]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c8e:	e023      	b.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c9c:	4814      	ldr	r0, [pc, #80]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c9e:	f7ff ff62 	bl	8006b66 <LL_ADC_IsEnabled>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4813      	ldr	r0, [pc, #76]	; (8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006ca6:	f7ff ff5e 	bl	8006b66 <LL_ADC_IsEnabled>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4323      	orrs	r3, r4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d112      	bne.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006cba:	f023 030f 	bic.w	r3, r3, #15
 8006cbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cc2:	e009      	b.n	8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8006cd6:	e000      	b.n	8006cda <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006ce2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	377c      	adds	r7, #124	; 0x7c
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd90      	pop	{r4, r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	50040000 	.word	0x50040000
 8006cf4:	50040100 	.word	0x50040100
 8006cf8:	50040300 	.word	0x50040300

08006cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <__NVIC_SetPriorityGrouping+0x44>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d2e:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <__NVIC_SetPriorityGrouping+0x44>)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	60d3      	str	r3, [r2, #12]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	e000ed00 	.word	0xe000ed00

08006d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <__NVIC_GetPriorityGrouping+0x18>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 0307 	and.w	r3, r3, #7
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	db0b      	blt.n	8006d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	f003 021f 	and.w	r2, r3, #31
 8006d78:	4907      	ldr	r1, [pc, #28]	; (8006d98 <__NVIC_EnableIRQ+0x38>)
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	2001      	movs	r0, #1
 8006d82:	fa00 f202 	lsl.w	r2, r0, r2
 8006d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	e000e100 	.word	0xe000e100

08006d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	db0a      	blt.n	8006dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	490c      	ldr	r1, [pc, #48]	; (8006de8 <__NVIC_SetPriority+0x4c>)
 8006db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dba:	0112      	lsls	r2, r2, #4
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006dc4:	e00a      	b.n	8006ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4908      	ldr	r1, [pc, #32]	; (8006dec <__NVIC_SetPriority+0x50>)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	3b04      	subs	r3, #4
 8006dd4:	0112      	lsls	r2, r2, #4
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	440b      	add	r3, r1
 8006dda:	761a      	strb	r2, [r3, #24]
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	e000e100 	.word	0xe000e100
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	; 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f1c3 0307 	rsb	r3, r3, #7
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	bf28      	it	cs
 8006e0e:	2304      	movcs	r3, #4
 8006e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	3304      	adds	r3, #4
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d902      	bls.n	8006e20 <NVIC_EncodePriority+0x30>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	3b03      	subs	r3, #3
 8006e1e:	e000      	b.n	8006e22 <NVIC_EncodePriority+0x32>
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43da      	mvns	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	401a      	ands	r2, r3
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e38:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e42:	43d9      	mvns	r1, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e48:	4313      	orrs	r3, r2
         );
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3724      	adds	r7, #36	; 0x24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e68:	d301      	bcc.n	8006e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e00f      	b.n	8006e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e6e:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <SysTick_Config+0x40>)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e76:	210f      	movs	r1, #15
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	f7ff ff8e 	bl	8006d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <SysTick_Config+0x40>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e86:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <SysTick_Config+0x40>)
 8006e88:	2207      	movs	r2, #7
 8006e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	e000e010 	.word	0xe000e010

08006e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff ff29 	bl	8006cfc <__NVIC_SetPriorityGrouping>
}
 8006eaa:	bf00      	nop
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ec4:	f7ff ff3e 	bl	8006d44 <__NVIC_GetPriorityGrouping>
 8006ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	6978      	ldr	r0, [r7, #20]
 8006ed0:	f7ff ff8e 	bl	8006df0 <NVIC_EncodePriority>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eda:	4611      	mov	r1, r2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff ff5d 	bl	8006d9c <__NVIC_SetPriority>
}
 8006ee2:	bf00      	nop
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ff31 	bl	8006d60 <__NVIC_EnableIRQ>
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7ff ffa2 	bl	8006e58 <SysTick_Config>
 8006f14:	4603      	mov	r3, r0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d008      	beq.n	8006f48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e022      	b.n	8006f8e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 020e 	bic.w	r2, r2, #14
 8006f56:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0201 	bic.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6c:	f003 021c 	and.w	r2, r3, #28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f202 	lsl.w	r2, r1, r2
 8006f7a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d005      	beq.n	8006fbe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
 8006fbc:	e029      	b.n	8007012 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 020e 	bic.w	r2, r2, #14
 8006fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0201 	bic.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	f003 021c 	and.w	r2, r3, #28
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2101      	movs	r1, #1
 8006fec:	fa01 f202 	lsl.w	r2, r1, r2
 8006ff0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
    }
  }
  return status;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800702e:	4b2f      	ldr	r3, [pc, #188]	; (80070ec <HAL_FLASH_Program+0xd0>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_FLASH_Program+0x1e>
 8007036:	2302      	movs	r3, #2
 8007038:	e053      	b.n	80070e2 <HAL_FLASH_Program+0xc6>
 800703a:	4b2c      	ldr	r3, [pc, #176]	; (80070ec <HAL_FLASH_Program+0xd0>)
 800703c:	2201      	movs	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007040:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007044:	f000 f894 	bl	8007170 <FLASH_WaitForLastOperation>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d143      	bne.n	80070da <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <HAL_FLASH_Program+0xd0>)
 8007054:	2200      	movs	r2, #0
 8007056:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007058:	4b25      	ldr	r3, [pc, #148]	; (80070f0 <HAL_FLASH_Program+0xd4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007060:	2b00      	cmp	r3, #0
 8007062:	d009      	beq.n	8007078 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007064:	4b22      	ldr	r3, [pc, #136]	; (80070f0 <HAL_FLASH_Program+0xd4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <HAL_FLASH_Program+0xd4>)
 800706a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800706e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007070:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <HAL_FLASH_Program+0xd0>)
 8007072:	2202      	movs	r2, #2
 8007074:	771a      	strb	r2, [r3, #28]
 8007076:	e002      	b.n	800707e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <HAL_FLASH_Program+0xd0>)
 800707a:	2200      	movs	r2, #0
 800707c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007088:	68b8      	ldr	r0, [r7, #8]
 800708a:	f000 f8c9 	bl	8007220 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800708e:	2301      	movs	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e010      	b.n	80070b6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d002      	beq.n	80070a0 <HAL_FLASH_Program+0x84>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d10a      	bne.n	80070b6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	68b8      	ldr	r0, [r7, #8]
 80070a6:	f000 f8e1 	bl	800726c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d102      	bne.n	80070b6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80070b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070b4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80070ba:	f000 f859 	bl	8007170 <FLASH_WaitForLastOperation>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_FLASH_Program+0xd4>)
 80070ca:	695a      	ldr	r2, [r3, #20]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <HAL_FLASH_Program+0xd4>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80070d6:	f000 f9d9 	bl	800748c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <HAL_FLASH_Program+0xd0>)
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]

  return status;
 80070e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3718      	adds	r7, #24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000010 	.word	0x20000010
 80070f0:	40022000 	.word	0x40022000

080070f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <HAL_FLASH_Unlock+0x38>)
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	da0b      	bge.n	800711e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <HAL_FLASH_Unlock+0x38>)
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <HAL_FLASH_Unlock+0x3c>)
 800710a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <HAL_FLASH_Unlock+0x38>)
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <HAL_FLASH_Unlock+0x40>)
 8007110:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <HAL_FLASH_Unlock+0x38>)
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da01      	bge.n	800711e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800711e:	79fb      	ldrb	r3, [r7, #7]
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	40022000 	.word	0x40022000
 8007130:	45670123 	.word	0x45670123
 8007134:	cdef89ab 	.word	0xcdef89ab

08007138 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_FLASH_Lock+0x1c>)
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	4a04      	ldr	r2, [pc, #16]	; (8007154 <HAL_FLASH_Lock+0x1c>)
 8007142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007146:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40022000 	.word	0x40022000

08007158 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800715c:	4b03      	ldr	r3, [pc, #12]	; (800716c <HAL_FLASH_GetError+0x14>)
 800715e:	685b      	ldr	r3, [r3, #4]
}
 8007160:	4618      	mov	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000010 	.word	0x20000010

08007170 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007178:	f7fe f9b0 	bl	80054dc <HAL_GetTick>
 800717c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800717e:	e00d      	b.n	800719c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d009      	beq.n	800719c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8007188:	f7fe f9a8 	bl	80054dc <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d801      	bhi.n	800719c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e036      	b.n	800720a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800719c:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1eb      	bne.n	8007180 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80071a8:	4b1a      	ldr	r3, [pc, #104]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <FLASH_WaitForLastOperation+0xa8>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d01e      	beq.n	80071f6 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <FLASH_WaitForLastOperation+0xac>)
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4313      	orrs	r3, r2
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <FLASH_WaitForLastOperation+0xac>)
 80071c2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <FLASH_WaitForLastOperation+0x6e>
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071d8:	490e      	ldr	r1, [pc, #56]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	618b      	str	r3, [r1, #24]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <FLASH_WaitForLastOperation+0x82>
 80071e8:	4a0a      	ldr	r2, [pc, #40]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80071f0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e009      	b.n	800720a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007202:	4b04      	ldr	r3, [pc, #16]	; (8007214 <FLASH_WaitForLastOperation+0xa4>)
 8007204:	2201      	movs	r2, #1
 8007206:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40022000 	.word	0x40022000
 8007218:	0002c3fa 	.word	0x0002c3fa
 800721c:	20000010 	.word	0x20000010

08007220 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <FLASH_Program_DoubleWord+0x48>)
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <FLASH_Program_DoubleWord+0x48>)
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800723e:	f3bf 8f6f 	isb	sy
}
 8007242:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8007244:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	000a      	movs	r2, r1
 8007252:	2300      	movs	r3, #0
 8007254:	68f9      	ldr	r1, [r7, #12]
 8007256:	3104      	adds	r1, #4
 8007258:	4613      	mov	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40022000 	.word	0x40022000

0800726c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007276:	2340      	movs	r3, #64	; 0x40
 8007278:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <FLASH_Program_Fast+0x68>)
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <FLASH_Program_Fast+0x68>)
 8007288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800728c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	60fb      	str	r3, [r7, #12]
  return(result);
 8007294:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007298:	b672      	cpsid	i
}
 800729a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	3304      	adds	r3, #4
 80072a8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	3304      	adds	r3, #4
 80072ae:	617b      	str	r3, [r7, #20]
    row_index--;
 80072b0:	7ffb      	ldrb	r3, [r7, #31]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80072b6:	7ffb      	ldrb	r3, [r7, #31]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1ef      	bne.n	800729c <FLASH_Program_Fast+0x30>
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f383 8810 	msr	PRIMASK, r3
}
 80072c6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80072c8:	bf00      	nop
 80072ca:	3724      	adds	r7, #36	; 0x24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40022000 	.word	0x40022000

080072d8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072e2:	4b47      	ldr	r3, [pc, #284]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d101      	bne.n	80072ee <HAL_FLASHEx_Erase+0x16>
 80072ea:	2302      	movs	r3, #2
 80072ec:	e083      	b.n	80073f6 <HAL_FLASHEx_Erase+0x11e>
 80072ee:	4b44      	ldr	r3, [pc, #272]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072f8:	f7ff ff3a 	bl	8007170 <FLASH_WaitForLastOperation>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d173      	bne.n	80073ee <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007306:	4b3e      	ldr	r3, [pc, #248]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800730c:	4b3d      	ldr	r3, [pc, #244]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007318:	4b3a      	ldr	r3, [pc, #232]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007324:	4b37      	ldr	r3, [pc, #220]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a36      	ldr	r2, [pc, #216]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 800732a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800732e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007330:	4b33      	ldr	r3, [pc, #204]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 8007332:	2203      	movs	r2, #3
 8007334:	771a      	strb	r2, [r3, #28]
 8007336:	e016      	b.n	8007366 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 800733a:	2201      	movs	r2, #1
 800733c:	771a      	strb	r2, [r3, #28]
 800733e:	e012      	b.n	8007366 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007340:	4b30      	ldr	r3, [pc, #192]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	2b00      	cmp	r3, #0
 800734a:	d009      	beq.n	8007360 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 8007352:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007356:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 800735a:	2202      	movs	r2, #2
 800735c:	771a      	strb	r2, [r3, #28]
 800735e:	e002      	b.n	8007366 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007360:	4b27      	ldr	r3, [pc, #156]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 8007362:	2200      	movs	r2, #0
 8007364:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d111      	bne.n	8007392 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f848 	bl	8007408 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007378:	f24c 3050 	movw	r0, #50000	; 0xc350
 800737c:	f7ff fef8 	bl	8007170 <FLASH_WaitForLastOperation>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	4a1e      	ldr	r2, [pc, #120]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 800738a:	f023 0304 	bic.w	r3, r3, #4
 800738e:	6153      	str	r3, [r2, #20]
 8007390:	e02b      	b.n	80073ea <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	e01b      	b.n	80073da <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	68b8      	ldr	r0, [r7, #8]
 80073aa:	f000 f84b 	bl	8007444 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80073ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80073b2:	f7ff fedd 	bl	8007170 <FLASH_WaitForLastOperation>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <HAL_FLASHEx_Erase+0x12c>)
 80073c0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80073c4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	601a      	str	r2, [r3, #0]
          break;
 80073d2:	e00a      	b.n	80073ea <HAL_FLASHEx_Erase+0x112>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3301      	adds	r3, #1
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d3db      	bcc.n	80073a2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80073ea:	f000 f84f 	bl	800748c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <HAL_FLASHEx_Erase+0x128>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]

  return status;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000010 	.word	0x20000010
 8007404:	40022000 	.word	0x40022000

08007408 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <FLASH_MassErase+0x38>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <FLASH_MassErase+0x38>)
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007426:	4b06      	ldr	r3, [pc, #24]	; (8007440 <FLASH_MassErase+0x38>)
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	4a05      	ldr	r2, [pc, #20]	; (8007440 <FLASH_MassErase+0x38>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007430:	6153      	str	r3, [r2, #20]
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40022000 	.word	0x40022000

08007444 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <FLASH_PageErase+0x44>)
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800745e:	490a      	ldr	r1, [pc, #40]	; (8007488 <FLASH_PageErase+0x44>)
 8007460:	4313      	orrs	r3, r2
 8007462:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007464:	4b08      	ldr	r3, [pc, #32]	; (8007488 <FLASH_PageErase+0x44>)
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	4a07      	ldr	r2, [pc, #28]	; (8007488 <FLASH_PageErase+0x44>)
 800746a:	f043 0302 	orr.w	r3, r3, #2
 800746e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <FLASH_PageErase+0x44>)
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	4a04      	ldr	r2, [pc, #16]	; (8007488 <FLASH_PageErase+0x44>)
 8007476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800747a:	6153      	str	r3, [r2, #20]
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40022000 	.word	0x40022000

0800748c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <FLASH_FlushCaches+0x8c>)
 8007494:	7f1b      	ldrb	r3, [r3, #28]
 8007496:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007498:	79fb      	ldrb	r3, [r7, #7]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d002      	beq.n	80074a4 <FLASH_FlushCaches+0x18>
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	2b03      	cmp	r3, #3
 80074a2:	d117      	bne.n	80074d4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80074a4:	4b1d      	ldr	r3, [pc, #116]	; (800751c <FLASH_FlushCaches+0x90>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a1c      	ldr	r2, [pc, #112]	; (800751c <FLASH_FlushCaches+0x90>)
 80074aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80074b0:	4b1a      	ldr	r3, [pc, #104]	; (800751c <FLASH_FlushCaches+0x90>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a19      	ldr	r2, [pc, #100]	; (800751c <FLASH_FlushCaches+0x90>)
 80074b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <FLASH_FlushCaches+0x90>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a16      	ldr	r2, [pc, #88]	; (800751c <FLASH_FlushCaches+0x90>)
 80074c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80074c8:	4b14      	ldr	r3, [pc, #80]	; (800751c <FLASH_FlushCaches+0x90>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a13      	ldr	r2, [pc, #76]	; (800751c <FLASH_FlushCaches+0x90>)
 80074ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d002      	beq.n	80074e0 <FLASH_FlushCaches+0x54>
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d111      	bne.n	8007504 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80074e0:	4b0e      	ldr	r3, [pc, #56]	; (800751c <FLASH_FlushCaches+0x90>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0d      	ldr	r2, [pc, #52]	; (800751c <FLASH_FlushCaches+0x90>)
 80074e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4b0b      	ldr	r3, [pc, #44]	; (800751c <FLASH_FlushCaches+0x90>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a0a      	ldr	r2, [pc, #40]	; (800751c <FLASH_FlushCaches+0x90>)
 80074f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80074f8:	4b08      	ldr	r3, [pc, #32]	; (800751c <FLASH_FlushCaches+0x90>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <FLASH_FlushCaches+0x90>)
 80074fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007502:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <FLASH_FlushCaches+0x8c>)
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000010 	.word	0x20000010
 800751c:	40022000 	.word	0x40022000

08007520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800752e:	e14e      	b.n	80077ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	2101      	movs	r1, #1
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	fa01 f303 	lsl.w	r3, r1, r3
 800753c:	4013      	ands	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8140 	beq.w	80077c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 0303 	and.w	r3, r3, #3
 8007550:	2b01      	cmp	r3, #1
 8007552:	d005      	beq.n	8007560 <HAL_GPIO_Init+0x40>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d130      	bne.n	80075c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	2203      	movs	r2, #3
 800756c:	fa02 f303 	lsl.w	r3, r2, r3
 8007570:	43db      	mvns	r3, r3
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4013      	ands	r3, r2
 8007576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	fa02 f303 	lsl.w	r3, r2, r3
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007596:	2201      	movs	r2, #1
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	43db      	mvns	r3, r3
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4013      	ands	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	091b      	lsrs	r3, r3, #4
 80075ac:	f003 0201 	and.w	r2, r3, #1
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	fa02 f303 	lsl.w	r3, r2, r3
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d017      	beq.n	80075fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	2203      	movs	r2, #3
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	43db      	mvns	r3, r3
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	4013      	ands	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	005b      	lsls	r3, r3, #1
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d123      	bne.n	8007652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	08da      	lsrs	r2, r3, #3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3208      	adds	r2, #8
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f003 0307 	and.w	r3, r3, #7
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	220f      	movs	r2, #15
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43db      	mvns	r3, r3
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4013      	ands	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	08da      	lsrs	r2, r3, #3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3208      	adds	r2, #8
 800764c:	6939      	ldr	r1, [r7, #16]
 800764e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	2203      	movs	r2, #3
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	43db      	mvns	r3, r3
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4013      	ands	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f003 0203 	and.w	r2, r3, #3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 809a 	beq.w	80077c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007694:	4b55      	ldr	r3, [pc, #340]	; (80077ec <HAL_GPIO_Init+0x2cc>)
 8007696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007698:	4a54      	ldr	r2, [pc, #336]	; (80077ec <HAL_GPIO_Init+0x2cc>)
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	6613      	str	r3, [r2, #96]	; 0x60
 80076a0:	4b52      	ldr	r3, [pc, #328]	; (80077ec <HAL_GPIO_Init+0x2cc>)
 80076a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80076ac:	4a50      	ldr	r2, [pc, #320]	; (80077f0 <HAL_GPIO_Init+0x2d0>)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	089b      	lsrs	r3, r3, #2
 80076b2:	3302      	adds	r3, #2
 80076b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	220f      	movs	r2, #15
 80076c4:	fa02 f303 	lsl.w	r3, r2, r3
 80076c8:	43db      	mvns	r3, r3
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4013      	ands	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80076d6:	d013      	beq.n	8007700 <HAL_GPIO_Init+0x1e0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a46      	ldr	r2, [pc, #280]	; (80077f4 <HAL_GPIO_Init+0x2d4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00d      	beq.n	80076fc <HAL_GPIO_Init+0x1dc>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a45      	ldr	r2, [pc, #276]	; (80077f8 <HAL_GPIO_Init+0x2d8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d007      	beq.n	80076f8 <HAL_GPIO_Init+0x1d8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a44      	ldr	r2, [pc, #272]	; (80077fc <HAL_GPIO_Init+0x2dc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d101      	bne.n	80076f4 <HAL_GPIO_Init+0x1d4>
 80076f0:	2303      	movs	r3, #3
 80076f2:	e006      	b.n	8007702 <HAL_GPIO_Init+0x1e2>
 80076f4:	2307      	movs	r3, #7
 80076f6:	e004      	b.n	8007702 <HAL_GPIO_Init+0x1e2>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e002      	b.n	8007702 <HAL_GPIO_Init+0x1e2>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_GPIO_Init+0x1e2>
 8007700:	2300      	movs	r3, #0
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	f002 0203 	and.w	r2, r2, #3
 8007708:	0092      	lsls	r2, r2, #2
 800770a:	4093      	lsls	r3, r2
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007712:	4937      	ldr	r1, [pc, #220]	; (80077f0 <HAL_GPIO_Init+0x2d0>)
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	3302      	adds	r3, #2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007720:	4b37      	ldr	r3, [pc, #220]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	43db      	mvns	r3, r3
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4013      	ands	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007744:	4a2e      	ldr	r2, [pc, #184]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800774a:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	43db      	mvns	r3, r3
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4013      	ands	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800776e:	4a24      	ldr	r2, [pc, #144]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007774:	4b22      	ldr	r3, [pc, #136]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	43db      	mvns	r3, r3
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	4013      	ands	r3, r2
 8007782:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007798:	4a19      	ldr	r2, [pc, #100]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800779e:	4b18      	ldr	r3, [pc, #96]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	43db      	mvns	r3, r3
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4013      	ands	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80077c2:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <HAL_GPIO_Init+0x2e0>)
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	3301      	adds	r3, #1
 80077cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f47f aea9 	bne.w	8007530 <HAL_GPIO_Init+0x10>
  }
}
 80077de:	bf00      	nop
 80077e0:	bf00      	nop
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40021000 	.word	0x40021000
 80077f0:	40010000 	.word	0x40010000
 80077f4:	48000400 	.word	0x48000400
 80077f8:	48000800 	.word	0x48000800
 80077fc:	48000c00 	.word	0x48000c00
 8007800:	40010400 	.word	0x40010400

08007804 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691a      	ldr	r2, [r3, #16]
 8007814:	887b      	ldrh	r3, [r7, #2]
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800781c:	2301      	movs	r3, #1
 800781e:	73fb      	strb	r3, [r7, #15]
 8007820:	e001      	b.n	8007826 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	807b      	strh	r3, [r7, #2]
 8007840:	4613      	mov	r3, r2
 8007842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007844:	787b      	ldrb	r3, [r7, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800784a:	887a      	ldrh	r2, [r7, #2]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007850:	e002      	b.n	8007858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e081      	b.n	800797a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fb fa02 	bl	8002c94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2224      	movs	r2, #36	; 0x24
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d107      	bne.n	80078de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689a      	ldr	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	e006      	b.n	80078ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80078ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d104      	bne.n	80078fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800790c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69d9      	ldr	r1, [r3, #28]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a1a      	ldr	r2, [r3, #32]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0201 	orr.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	461a      	mov	r2, r3
 8007990:	460b      	mov	r3, r1
 8007992:	817b      	strh	r3, [r7, #10]
 8007994:	4613      	mov	r3, r2
 8007996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	f040 80da 	bne.w	8007b5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d101      	bne.n	80079b4 <HAL_I2C_Master_Transmit+0x30>
 80079b0:	2302      	movs	r3, #2
 80079b2:	e0d3      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079bc:	f7fd fd8e 	bl	80054dc <HAL_GetTick>
 80079c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	2319      	movs	r3, #25
 80079c8:	2201      	movs	r2, #1
 80079ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f9e6 	bl	8007da0 <I2C_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0be      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2221      	movs	r2, #33	; 0x21
 80079e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2210      	movs	r2, #16
 80079ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	893a      	ldrh	r2, [r7, #8]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2bff      	cmp	r3, #255	; 0xff
 8007a0e:	d90e      	bls.n	8007a2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	22ff      	movs	r2, #255	; 0xff
 8007a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	8979      	ldrh	r1, [r7, #10]
 8007a1e:	4b51      	ldr	r3, [pc, #324]	; (8007b64 <HAL_I2C_Master_Transmit+0x1e0>)
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fbdc 	bl	80081e4 <I2C_TransferConfig>
 8007a2c:	e06c      	b.n	8007b08 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	8979      	ldrh	r1, [r7, #10]
 8007a40:	4b48      	ldr	r3, [pc, #288]	; (8007b64 <HAL_I2C_Master_Transmit+0x1e0>)
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fbcb 	bl	80081e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007a4e:	e05b      	b.n	8007b08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	6a39      	ldr	r1, [r7, #32]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f9e3 	bl	8007e20 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e07b      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	781a      	ldrb	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d034      	beq.n	8007b08 <HAL_I2C_Master_Transmit+0x184>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d130      	bne.n	8007b08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f975 	bl	8007da0 <I2C_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e04d      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2bff      	cmp	r3, #255	; 0xff
 8007ac8:	d90e      	bls.n	8007ae8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	22ff      	movs	r2, #255	; 0xff
 8007ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	8979      	ldrh	r1, [r7, #10]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fb7f 	bl	80081e4 <I2C_TransferConfig>
 8007ae6:	e00f      	b.n	8007b08 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	8979      	ldrh	r1, [r7, #10]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fb6e 	bl	80081e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d19e      	bne.n	8007a50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	6a39      	ldr	r1, [r7, #32]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f9c2 	bl	8007ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e01a      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6859      	ldr	r1, [r3, #4]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_I2C_Master_Transmit+0x1e4>)
 8007b3a:	400b      	ands	r3, r1
 8007b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e000      	b.n	8007b5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007b5a:	2302      	movs	r3, #2
  }
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	80002000 	.word	0x80002000
 8007b68:	fe00e800 	.word	0xfe00e800

08007b6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b088      	sub	sp, #32
 8007b70:	af02      	add	r7, sp, #8
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	461a      	mov	r2, r3
 8007b78:	460b      	mov	r3, r1
 8007b7a:	817b      	strh	r3, [r7, #10]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b20      	cmp	r3, #32
 8007b8a:	f040 80db 	bne.w	8007d44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_I2C_Master_Receive+0x30>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e0d4      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ba4:	f7fd fc9a 	bl	80054dc <HAL_GetTick>
 8007ba8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	2319      	movs	r3, #25
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 f8f2 	bl	8007da0 <I2C_WaitOnFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e0bf      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2222      	movs	r2, #34	; 0x22
 8007bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2210      	movs	r2, #16
 8007bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	893a      	ldrh	r2, [r7, #8]
 8007be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2bff      	cmp	r3, #255	; 0xff
 8007bf6:	d90e      	bls.n	8007c16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	22ff      	movs	r2, #255	; 0xff
 8007bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	8979      	ldrh	r1, [r7, #10]
 8007c06:	4b52      	ldr	r3, [pc, #328]	; (8007d50 <HAL_I2C_Master_Receive+0x1e4>)
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 fae8 	bl	80081e4 <I2C_TransferConfig>
 8007c14:	e06d      	b.n	8007cf2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	8979      	ldrh	r1, [r7, #10]
 8007c28:	4b49      	ldr	r3, [pc, #292]	; (8007d50 <HAL_I2C_Master_Receive+0x1e4>)
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 fad7 	bl	80081e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007c36:	e05c      	b.n	8007cf2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	6a39      	ldr	r1, [r7, #32]
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 f96b 	bl	8007f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e07c      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	b2d2      	uxtb	r2, r2
 8007c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d034      	beq.n	8007cf2 <HAL_I2C_Master_Receive+0x186>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d130      	bne.n	8007cf2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2180      	movs	r1, #128	; 0x80
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f880 	bl	8007da0 <I2C_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e04d      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2bff      	cmp	r3, #255	; 0xff
 8007cb2:	d90e      	bls.n	8007cd2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	22ff      	movs	r2, #255	; 0xff
 8007cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	8979      	ldrh	r1, [r7, #10]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fa8a 	bl	80081e4 <I2C_TransferConfig>
 8007cd0:	e00f      	b.n	8007cf2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	8979      	ldrh	r1, [r7, #10]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa79 	bl	80081e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d19d      	bne.n	8007c38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	6a39      	ldr	r1, [r7, #32]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 f8cd 	bl	8007ea0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e01a      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2220      	movs	r2, #32
 8007d16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6859      	ldr	r1, [r3, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <HAL_I2C_Master_Receive+0x1e8>)
 8007d24:	400b      	ands	r3, r1
 8007d26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e000      	b.n	8007d46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007d44:	2302      	movs	r3, #2
  }
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	80002400 	.word	0x80002400
 8007d54:	fe00e800 	.word	0xfe00e800

08007d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d103      	bne.n	8007d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d007      	beq.n	8007d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	619a      	str	r2, [r3, #24]
  }
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007db0:	e022      	b.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db8:	d01e      	beq.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dba:	f7fd fb8f 	bl	80054dc <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d302      	bcc.n	8007dd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d113      	bne.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd4:	f043 0220 	orr.w	r2, r3, #32
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e00f      	b.n	8007e18 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699a      	ldr	r2, [r3, #24]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	4013      	ands	r3, r2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	bf0c      	ite	eq
 8007e08:	2301      	moveq	r3, #1
 8007e0a:	2300      	movne	r3, #0
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d0cd      	beq.n	8007db2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e2c:	e02c      	b.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	68b9      	ldr	r1, [r7, #8]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 f8ea 	bl	800800c <I2C_IsErrorOccurred>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e02a      	b.n	8007e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d01e      	beq.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e4a:	f7fd fb47 	bl	80054dc <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d302      	bcc.n	8007e60 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d113      	bne.n	8007e88 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	f043 0220 	orr.w	r2, r3, #32
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e007      	b.n	8007e98 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d1cb      	bne.n	8007e2e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eac:	e028      	b.n	8007f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 f8aa 	bl	800800c <I2C_IsErrorOccurred>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e026      	b.n	8007f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec2:	f7fd fb0b 	bl	80054dc <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d302      	bcc.n	8007ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d113      	bne.n	8007f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007edc:	f043 0220 	orr.w	r2, r3, #32
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e007      	b.n	8007f10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d1cf      	bne.n	8007eae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f24:	e064      	b.n	8007ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	68b9      	ldr	r1, [r7, #8]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f86e 	bl	800800c <I2C_IsErrorOccurred>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e062      	b.n	8008000 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d138      	bne.n	8007fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	d105      	bne.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e04e      	b.n	8008000 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f003 0310 	and.w	r3, r3, #16
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d107      	bne.n	8007f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2210      	movs	r2, #16
 8007f76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8007f7e:	e002      	b.n	8007f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6859      	ldr	r1, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b1b      	ldr	r3, [pc, #108]	; (8008008 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007f9a:	400b      	ands	r3, r1
 8007f9c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e022      	b.n	8008000 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fba:	f7fd fa8f 	bl	80054dc <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d302      	bcc.n	8007fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd4:	f043 0220 	orr.w	r2, r3, #32
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e007      	b.n	8008000 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d193      	bne.n	8007f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	fe00e800 	.word	0xfe00e800

0800800c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b08a      	sub	sp, #40	; 0x28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d075      	beq.n	8008124 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2210      	movs	r2, #16
 800803e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008040:	e056      	b.n	80080f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d052      	beq.n	80080f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fd fa47 	bl	80054dc <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <I2C_IsErrorOccurred+0x54>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d147      	bne.n	80080f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008072:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800807e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008082:	d12e      	bne.n	80080e2 <I2C_IsErrorOccurred+0xd6>
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800808a:	d02a      	beq.n	80080e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800808c:	7cfb      	ldrb	r3, [r7, #19]
 800808e:	2b20      	cmp	r3, #32
 8008090:	d027      	beq.n	80080e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80080a2:	f7fd fa1b 	bl	80054dc <HAL_GetTick>
 80080a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080a8:	e01b      	b.n	80080e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80080aa:	f7fd fa17 	bl	80054dc <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b19      	cmp	r3, #25
 80080b6:	d914      	bls.n	80080e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f003 0320 	and.w	r3, r3, #32
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d1dc      	bne.n	80080aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d003      	beq.n	8008106 <I2C_IsErrorOccurred+0xfa>
 80080fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008102:	2b00      	cmp	r3, #0
 8008104:	d09d      	beq.n	8008042 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800810a:	2b00      	cmp	r3, #0
 800810c:	d103      	bne.n	8008116 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2220      	movs	r2, #32
 8008114:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f043 0301 	orr.w	r3, r3, #1
 800813c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008146:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00b      	beq.n	8008170 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008158:	6a3b      	ldr	r3, [r7, #32]
 800815a:	f043 0308 	orr.w	r3, r3, #8
 800815e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008168:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f043 0302 	orr.w	r3, r3, #2
 8008180:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800818a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008196:	2b00      	cmp	r3, #0
 8008198:	d01c      	beq.n	80081d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fddc 	bl	8007d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6859      	ldr	r1, [r3, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <I2C_IsErrorOccurred+0x1d4>)
 80081ac:	400b      	ands	r3, r1
 80081ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	431a      	orrs	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80081d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3728      	adds	r7, #40	; 0x28
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	fe00e800 	.word	0xfe00e800

080081e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	607b      	str	r3, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	817b      	strh	r3, [r7, #10]
 80081f2:	4613      	mov	r3, r2
 80081f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80081f6:	897b      	ldrh	r3, [r7, #10]
 80081f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80081fc:	7a7b      	ldrb	r3, [r7, #9]
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008204:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	4313      	orrs	r3, r2
 800820e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008212:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	0d5b      	lsrs	r3, r3, #21
 800821e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <I2C_TransferConfig+0x60>)
 8008224:	430b      	orrs	r3, r1
 8008226:	43db      	mvns	r3, r3
 8008228:	ea02 0103 	and.w	r1, r2, r3
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	03ff63ff 	.word	0x03ff63ff

08008248 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b20      	cmp	r3, #32
 800825c:	d138      	bne.n	80082d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008268:	2302      	movs	r3, #2
 800826a:	e032      	b.n	80082d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800829a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6819      	ldr	r1, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0201 	orr.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d139      	bne.n	8008368 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082fe:	2302      	movs	r3, #2
 8008300:	e033      	b.n	800836a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	; 0x24
 800830e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0201 	bic.w	r2, r2, #1
 8008320:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008330:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	4313      	orrs	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0201 	orr.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e000      	b.n	800836a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
  }
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a04      	ldr	r2, [pc, #16]	; (8008394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008386:	6013      	str	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40007000 	.word	0x40007000

08008398 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40007000 	.word	0x40007000

080083b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c2:	d130      	bne.n	8008426 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80083c4:	4b23      	ldr	r3, [pc, #140]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083d0:	d038      	beq.n	8008444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80083d2:	4b20      	ldr	r3, [pc, #128]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083da:	4a1e      	ldr	r2, [pc, #120]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80083e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80083e2:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2232      	movs	r2, #50	; 0x32
 80083e8:	fb02 f303 	mul.w	r3, r2, r3
 80083ec:	4a1b      	ldr	r2, [pc, #108]	; (800845c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	0c9b      	lsrs	r3, r3, #18
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083f8:	e002      	b.n	8008400 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008400:	4b14      	ldr	r3, [pc, #80]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800840c:	d102      	bne.n	8008414 <HAL_PWREx_ControlVoltageScaling+0x60>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1f2      	bne.n	80083fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800841c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008420:	d110      	bne.n	8008444 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e00f      	b.n	8008446 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008426:	4b0b      	ldr	r3, [pc, #44]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800842e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008432:	d007      	beq.n	8008444 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008434:	4b07      	ldr	r3, [pc, #28]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800843c:	4a05      	ldr	r2, [pc, #20]	; (8008454 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800843e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008442:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40007000 	.word	0x40007000
 8008458:	20000000 	.word	0x20000000
 800845c:	431bde83 	.word	0x431bde83

08008460 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f023 0307 	bic.w	r3, r3, #7
 800846c:	4a07      	ldr	r2, [pc, #28]	; (800848c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800846e:	f043 0304 	orr.w	r3, r3, #4
 8008472:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	4a05      	ldr	r2, [pc, #20]	; (8008490 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800847a:	f043 0304 	orr.w	r3, r3, #4
 800847e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8008480:	bf30      	wfi
}
 8008482:	bf00      	nop
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	40007000 	.word	0x40007000
 8008490:	e000ed00 	.word	0xe000ed00

08008494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	; 0x28
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	f000 bc4f 	b.w	8008d46 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084a8:	4b97      	ldr	r3, [pc, #604]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 030c 	and.w	r3, r3, #12
 80084b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084b2:	4b95      	ldr	r3, [pc, #596]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80084b4:	68db      	ldr	r3, [r3, #12]
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80e6 	beq.w	8008696 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80084ca:	6a3b      	ldr	r3, [r7, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_RCC_OscConfig+0x4c>
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	2b0c      	cmp	r3, #12
 80084d4:	f040 808d 	bne.w	80085f2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	f040 8089 	bne.w	80085f2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084e0:	4b89      	ldr	r3, [pc, #548]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d006      	beq.n	80084fa <HAL_RCC_OscConfig+0x66>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	f000 bc26 	b.w	8008d46 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fe:	4b82      	ldr	r3, [pc, #520]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0308 	and.w	r3, r3, #8
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <HAL_RCC_OscConfig+0x80>
 800850a:	4b7f      	ldr	r3, [pc, #508]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008512:	e005      	b.n	8008520 <HAL_RCC_OscConfig+0x8c>
 8008514:	4b7c      	ldr	r3, [pc, #496]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800851a:	091b      	lsrs	r3, r3, #4
 800851c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008520:	4293      	cmp	r3, r2
 8008522:	d224      	bcs.n	800856e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fdd9 	bl	80090e0 <RCC_SetFlashLatencyFromMSIRange>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d002      	beq.n	800853a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f000 bc06 	b.w	8008d46 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800853a:	4b73      	ldr	r3, [pc, #460]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a72      	ldr	r2, [pc, #456]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008540:	f043 0308 	orr.w	r3, r3, #8
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	4b70      	ldr	r3, [pc, #448]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	496d      	ldr	r1, [pc, #436]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008554:	4313      	orrs	r3, r2
 8008556:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008558:	4b6b      	ldr	r3, [pc, #428]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	4968      	ldr	r1, [pc, #416]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008568:	4313      	orrs	r3, r2
 800856a:	604b      	str	r3, [r1, #4]
 800856c:	e025      	b.n	80085ba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800856e:	4b66      	ldr	r3, [pc, #408]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a65      	ldr	r2, [pc, #404]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008574:	f043 0308 	orr.w	r3, r3, #8
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	4b63      	ldr	r3, [pc, #396]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	4960      	ldr	r1, [pc, #384]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008588:	4313      	orrs	r3, r2
 800858a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800858c:	4b5e      	ldr	r3, [pc, #376]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a1b      	ldr	r3, [r3, #32]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	495b      	ldr	r1, [pc, #364]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800859c:	4313      	orrs	r3, r2
 800859e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fd98 	bl	80090e0 <RCC_SetFlashLatencyFromMSIRange>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e3c5      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80085ba:	f000 fccd 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b51      	ldr	r3, [pc, #324]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	091b      	lsrs	r3, r3, #4
 80085c6:	f003 030f 	and.w	r3, r3, #15
 80085ca:	4950      	ldr	r1, [pc, #320]	; (800870c <HAL_RCC_OscConfig+0x278>)
 80085cc:	5ccb      	ldrb	r3, [r1, r3]
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	fa22 f303 	lsr.w	r3, r2, r3
 80085d6:	4a4e      	ldr	r2, [pc, #312]	; (8008710 <HAL_RCC_OscConfig+0x27c>)
 80085d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80085da:	4b4e      	ldr	r3, [pc, #312]	; (8008714 <HAL_RCC_OscConfig+0x280>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fc ff2c 	bl	800543c <HAL_InitTick>
 80085e4:	4603      	mov	r3, r0
 80085e6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d052      	beq.n	8008694 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	e3a9      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d032      	beq.n	8008660 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80085fa:	4b43      	ldr	r3, [pc, #268]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a42      	ldr	r2, [pc, #264]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008606:	f7fc ff69 	bl	80054dc <HAL_GetTick>
 800860a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800860c:	e008      	b.n	8008620 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800860e:	f7fc ff65 	bl	80054dc <HAL_GetTick>
 8008612:	4602      	mov	r2, r0
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	1ad3      	subs	r3, r2, r3
 8008618:	2b02      	cmp	r3, #2
 800861a:	d901      	bls.n	8008620 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e392      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008620:	4b39      	ldr	r3, [pc, #228]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0302 	and.w	r3, r3, #2
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0f0      	beq.n	800860e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800862c:	4b36      	ldr	r3, [pc, #216]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a35      	ldr	r2, [pc, #212]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008632:	f043 0308 	orr.w	r3, r3, #8
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	4b33      	ldr	r3, [pc, #204]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	4930      	ldr	r1, [pc, #192]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800864a:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	492b      	ldr	r1, [pc, #172]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 800865a:	4313      	orrs	r3, r2
 800865c:	604b      	str	r3, [r1, #4]
 800865e:	e01a      	b.n	8008696 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008660:	4b29      	ldr	r3, [pc, #164]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a28      	ldr	r2, [pc, #160]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008666:	f023 0301 	bic.w	r3, r3, #1
 800866a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800866c:	f7fc ff36 	bl	80054dc <HAL_GetTick>
 8008670:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008674:	f7fc ff32 	bl	80054dc <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b02      	cmp	r3, #2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e35f      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008686:	4b20      	ldr	r3, [pc, #128]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0302 	and.w	r3, r3, #2
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x1e0>
 8008692:	e000      	b.n	8008696 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008694:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d073      	beq.n	800878a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d005      	beq.n	80086b4 <HAL_RCC_OscConfig+0x220>
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	2b0c      	cmp	r3, #12
 80086ac:	d10e      	bne.n	80086cc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10b      	bne.n	80086cc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086b4:	4b14      	ldr	r3, [pc, #80]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d063      	beq.n	8008788 <HAL_RCC_OscConfig+0x2f4>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d15f      	bne.n	8008788 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e33c      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d4:	d106      	bne.n	80086e4 <HAL_RCC_OscConfig+0x250>
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a0b      	ldr	r2, [pc, #44]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e025      	b.n	8008730 <HAL_RCC_OscConfig+0x29c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086ec:	d114      	bne.n	8008718 <HAL_RCC_OscConfig+0x284>
 80086ee:	4b06      	ldr	r3, [pc, #24]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a05      	ldr	r2, [pc, #20]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	4b03      	ldr	r3, [pc, #12]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a02      	ldr	r2, [pc, #8]	; (8008708 <HAL_RCC_OscConfig+0x274>)
 8008700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e013      	b.n	8008730 <HAL_RCC_OscConfig+0x29c>
 8008708:	40021000 	.word	0x40021000
 800870c:	08012a14 	.word	0x08012a14
 8008710:	20000000 	.word	0x20000000
 8008714:	20000008 	.word	0x20000008
 8008718:	4b8f      	ldr	r3, [pc, #572]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a8e      	ldr	r2, [pc, #568]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800871e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	4b8c      	ldr	r3, [pc, #560]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a8b      	ldr	r2, [pc, #556]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800872a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800872e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d013      	beq.n	8008760 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008738:	f7fc fed0 	bl	80054dc <HAL_GetTick>
 800873c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008740:	f7fc fecc 	bl	80054dc <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b64      	cmp	r3, #100	; 0x64
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e2f9      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008752:	4b81      	ldr	r3, [pc, #516]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <HAL_RCC_OscConfig+0x2ac>
 800875e:	e014      	b.n	800878a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fc febc 	bl	80054dc <HAL_GetTick>
 8008764:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008768:	f7fc feb8 	bl	80054dc <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b64      	cmp	r3, #100	; 0x64
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e2e5      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800877a:	4b77      	ldr	r3, [pc, #476]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x2d4>
 8008786:	e000      	b.n	800878a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d060      	beq.n	8008858 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008796:	6a3b      	ldr	r3, [r7, #32]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d005      	beq.n	80087a8 <HAL_RCC_OscConfig+0x314>
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	2b0c      	cmp	r3, #12
 80087a0:	d119      	bne.n	80087d6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d116      	bne.n	80087d6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087a8:	4b6b      	ldr	r3, [pc, #428]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <HAL_RCC_OscConfig+0x32c>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e2c2      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087c0:	4b65      	ldr	r3, [pc, #404]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	4962      	ldr	r1, [pc, #392]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087d4:	e040      	b.n	8008858 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d023      	beq.n	8008826 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087de:	4b5e      	ldr	r3, [pc, #376]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a5d      	ldr	r2, [pc, #372]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80087e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ea:	f7fc fe77 	bl	80054dc <HAL_GetTick>
 80087ee:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087f0:	e008      	b.n	8008804 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087f2:	f7fc fe73 	bl	80054dc <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e2a0      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008804:	4b54      	ldr	r3, [pc, #336]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0f0      	beq.n	80087f2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008810:	4b51      	ldr	r3, [pc, #324]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	494e      	ldr	r1, [pc, #312]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	604b      	str	r3, [r1, #4]
 8008824:	e018      	b.n	8008858 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008826:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a4b      	ldr	r2, [pc, #300]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800882c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008832:	f7fc fe53 	bl	80054dc <HAL_GetTick>
 8008836:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008838:	e008      	b.n	800884c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800883a:	f7fc fe4f 	bl	80054dc <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d901      	bls.n	800884c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e27c      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800884c:	4b42      	ldr	r3, [pc, #264]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008854:	2b00      	cmp	r3, #0
 8008856:	d1f0      	bne.n	800883a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8082 	beq.w	800896a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d05f      	beq.n	800892e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800886e:	4b3a      	ldr	r3, [pc, #232]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008874:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f003 0310 	and.w	r3, r3, #16
 8008880:	429a      	cmp	r2, r3
 8008882:	d037      	beq.n	80088f4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e254      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01b      	beq.n	80088de <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80088a6:	4b2c      	ldr	r3, [pc, #176]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ac:	4a2a      	ldr	r2, [pc, #168]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088b6:	f7fc fe11 	bl	80054dc <HAL_GetTick>
 80088ba:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088be:	f7fc fe0d 	bl	80054dc <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b11      	cmp	r3, #17
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e23a      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80088d0:	4b21      	ldr	r3, [pc, #132]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ef      	bne.n	80088be <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80088de:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e4:	f023 0210 	bic.w	r2, r3, #16
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	491a      	ldr	r1, [pc, #104]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088f4:	4b18      	ldr	r3, [pc, #96]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fa:	4a17      	ldr	r2, [pc, #92]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 80088fc:	f043 0301 	orr.w	r3, r3, #1
 8008900:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008904:	f7fc fdea 	bl	80054dc <HAL_GetTick>
 8008908:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800890c:	f7fc fde6 	bl	80054dc <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b11      	cmp	r3, #17
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e213      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800891e:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008924:	f003 0302 	and.w	r3, r3, #2
 8008928:	2b00      	cmp	r3, #0
 800892a:	d0ef      	beq.n	800890c <HAL_RCC_OscConfig+0x478>
 800892c:	e01d      	b.n	800896a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800892e:	4b0a      	ldr	r3, [pc, #40]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008934:	4a08      	ldr	r2, [pc, #32]	; (8008958 <HAL_RCC_OscConfig+0x4c4>)
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800893e:	f7fc fdcd 	bl	80054dc <HAL_GetTick>
 8008942:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008944:	e00a      	b.n	800895c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008946:	f7fc fdc9 	bl	80054dc <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	2b11      	cmp	r3, #17
 8008952:	d903      	bls.n	800895c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8008954:	2303      	movs	r3, #3
 8008956:	e1f6      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
 8008958:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800895c:	4ba9      	ldr	r3, [pc, #676]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 800895e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1ed      	bne.n	8008946 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0304 	and.w	r3, r3, #4
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 80bd 	beq.w	8008af2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800897e:	4ba1      	ldr	r3, [pc, #644]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10e      	bne.n	80089a8 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800898a:	4b9e      	ldr	r3, [pc, #632]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 800898c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898e:	4a9d      	ldr	r2, [pc, #628]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008994:	6593      	str	r3, [r2, #88]	; 0x58
 8008996:	4b9b      	ldr	r3, [pc, #620]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089a8:	4b97      	ldr	r3, [pc, #604]	; (8008c08 <HAL_RCC_OscConfig+0x774>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d118      	bne.n	80089e6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089b4:	4b94      	ldr	r3, [pc, #592]	; (8008c08 <HAL_RCC_OscConfig+0x774>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a93      	ldr	r2, [pc, #588]	; (8008c08 <HAL_RCC_OscConfig+0x774>)
 80089ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089c0:	f7fc fd8c 	bl	80054dc <HAL_GetTick>
 80089c4:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089c8:	f7fc fd88 	bl	80054dc <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e1b5      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089da:	4b8b      	ldr	r3, [pc, #556]	; (8008c08 <HAL_RCC_OscConfig+0x774>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d0f0      	beq.n	80089c8 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d02c      	beq.n	8008a4c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80089f2:	4b84      	ldr	r3, [pc, #528]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a04:	497f      	ldr	r1, [pc, #508]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d010      	beq.n	8008a3a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008a18:	4b7a      	ldr	r3, [pc, #488]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1e:	4a79      	ldr	r2, [pc, #484]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a20:	f043 0304 	orr.w	r3, r3, #4
 8008a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008a28:	4b76      	ldr	r3, [pc, #472]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	4a75      	ldr	r2, [pc, #468]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a30:	f043 0301 	orr.w	r3, r3, #1
 8008a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a38:	e018      	b.n	8008a6c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008a3a:	4b72      	ldr	r3, [pc, #456]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a40:	4a70      	ldr	r2, [pc, #448]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a42:	f043 0301 	orr.w	r3, r3, #1
 8008a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a4a:	e00f      	b.n	8008a6c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008a4c:	4b6d      	ldr	r3, [pc, #436]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a52:	4a6c      	ldr	r2, [pc, #432]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008a5c:	4b69      	ldr	r3, [pc, #420]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	4a68      	ldr	r2, [pc, #416]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a64:	f023 0304 	bic.w	r3, r3, #4
 8008a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d016      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a74:	f7fc fd32 	bl	80054dc <HAL_GetTick>
 8008a78:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a7c:	f7fc fd2e 	bl	80054dc <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d901      	bls.n	8008a92 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e159      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a92:	4b5c      	ldr	r3, [pc, #368]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a98:	f003 0302 	and.w	r3, r3, #2
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0ed      	beq.n	8008a7c <HAL_RCC_OscConfig+0x5e8>
 8008aa0:	e01d      	b.n	8008ade <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7fc fd1b 	bl	80054dc <HAL_GetTick>
 8008aa6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008aa8:	e00a      	b.n	8008ac0 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aaa:	f7fc fd17 	bl	80054dc <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d901      	bls.n	8008ac0 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	e142      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ac0:	4b50      	ldr	r3, [pc, #320]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1ed      	bne.n	8008aaa <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8008ace:	4b4d      	ldr	r3, [pc, #308]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad4:	4a4b      	ldr	r2, [pc, #300]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d105      	bne.n	8008af2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ae6:	4b47      	ldr	r3, [pc, #284]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aea:	4a46      	ldr	r2, [pc, #280]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008af0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d03c      	beq.n	8008b78 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01c      	beq.n	8008b40 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b06:	4b3f      	ldr	r3, [pc, #252]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b0c:	4a3d      	ldr	r2, [pc, #244]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b16:	f7fc fce1 	bl	80054dc <HAL_GetTick>
 8008b1a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b1c:	e008      	b.n	8008b30 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b1e:	f7fc fcdd 	bl	80054dc <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d901      	bls.n	8008b30 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e10a      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008b30:	4b34      	ldr	r3, [pc, #208]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0ef      	beq.n	8008b1e <HAL_RCC_OscConfig+0x68a>
 8008b3e:	e01b      	b.n	8008b78 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b40:	4b30      	ldr	r3, [pc, #192]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b46:	4a2f      	ldr	r2, [pc, #188]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b48:	f023 0301 	bic.w	r3, r3, #1
 8008b4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b50:	f7fc fcc4 	bl	80054dc <HAL_GetTick>
 8008b54:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b58:	f7fc fcc0 	bl	80054dc <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e0ed      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008b6a:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1ef      	bne.n	8008b58 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80e1 	beq.w	8008d44 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	f040 80b5 	bne.w	8008cf6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f003 0203 	and.w	r2, r3, #3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d124      	bne.n	8008bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008baa:	3b01      	subs	r3, #1
 8008bac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d11b      	bne.n	8008bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d113      	bne.n	8008bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bcc:	085b      	lsrs	r3, r3, #1
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d109      	bne.n	8008bea <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	085b      	lsrs	r3, r3, #1
 8008be2:	3b01      	subs	r3, #1
 8008be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d05f      	beq.n	8008caa <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	d05a      	beq.n	8008ca6 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008bf0:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a03      	ldr	r2, [pc, #12]	; (8008c04 <HAL_RCC_OscConfig+0x770>)
 8008bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008bfc:	f7fc fc6e 	bl	80054dc <HAL_GetTick>
 8008c00:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c02:	e00c      	b.n	8008c1e <HAL_RCC_OscConfig+0x78a>
 8008c04:	40021000 	.word	0x40021000
 8008c08:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c0c:	f7fc fc66 	bl	80054dc <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d901      	bls.n	8008c1e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	e093      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c1e:	4b4c      	ldr	r3, [pc, #304]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1f0      	bne.n	8008c0c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c2a:	4b49      	ldr	r3, [pc, #292]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	4b49      	ldr	r3, [pc, #292]	; (8008d54 <HAL_RCC_OscConfig+0x8c0>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c3a:	3a01      	subs	r2, #1
 8008c3c:	0112      	lsls	r2, r2, #4
 8008c3e:	4311      	orrs	r1, r2
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c44:	0212      	lsls	r2, r2, #8
 8008c46:	4311      	orrs	r1, r2
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008c4c:	0852      	lsrs	r2, r2, #1
 8008c4e:	3a01      	subs	r2, #1
 8008c50:	0552      	lsls	r2, r2, #21
 8008c52:	4311      	orrs	r1, r2
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008c58:	0852      	lsrs	r2, r2, #1
 8008c5a:	3a01      	subs	r2, #1
 8008c5c:	0652      	lsls	r2, r2, #25
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	493b      	ldr	r1, [pc, #236]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c66:	4b3a      	ldr	r3, [pc, #232]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a39      	ldr	r2, [pc, #228]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c70:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c72:	4b37      	ldr	r3, [pc, #220]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4a36      	ldr	r2, [pc, #216]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c7c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c7e:	f7fc fc2d 	bl	80054dc <HAL_GetTick>
 8008c82:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c84:	e008      	b.n	8008c98 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c86:	f7fc fc29 	bl	80054dc <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d901      	bls.n	8008c98 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e056      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c98:	4b2d      	ldr	r3, [pc, #180]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d0f0      	beq.n	8008c86 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008ca4:	e04e      	b.n	8008d44 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e04d      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008caa:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d146      	bne.n	8008d44 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008cb6:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a25      	ldr	r2, [pc, #148]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cc0:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cc2:	4b23      	ldr	r3, [pc, #140]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	4a22      	ldr	r2, [pc, #136]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ccc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cce:	f7fc fc05 	bl	80054dc <HAL_GetTick>
 8008cd2:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd6:	f7fc fc01 	bl	80054dc <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e02e      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce8:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x842>
 8008cf4:	e026      	b.n	8008d44 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	2b0c      	cmp	r3, #12
 8008cfa:	d021      	beq.n	8008d40 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cfc:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fc fbe8 	bl	80054dc <HAL_GetTick>
 8008d0c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d10:	f7fc fbe4 	bl	80054dc <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e011      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d22:	4b0b      	ldr	r3, [pc, #44]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8008d2e:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <HAL_RCC_OscConfig+0x8bc>)
 8008d34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	60d3      	str	r3, [r2, #12]
 8008d3e:	e001      	b.n	8008d44 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e000      	b.n	8008d46 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3728      	adds	r7, #40	; 0x28
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40021000 	.word	0x40021000
 8008d54:	f99f808c 	.word	0xf99f808c

08008d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e0e7      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d6c:	4b75      	ldr	r3, [pc, #468]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0307 	and.w	r3, r3, #7
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d910      	bls.n	8008d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d7a:	4b72      	ldr	r3, [pc, #456]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f023 0207 	bic.w	r2, r3, #7
 8008d82:	4970      	ldr	r1, [pc, #448]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8a:	4b6e      	ldr	r3, [pc, #440]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0307 	and.w	r3, r3, #7
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d001      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e0cf      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d010      	beq.n	8008dca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	4b66      	ldr	r3, [pc, #408]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d908      	bls.n	8008dca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008db8:	4b63      	ldr	r3, [pc, #396]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	4960      	ldr	r1, [pc, #384]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d04c      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d107      	bne.n	8008dee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dde:	4b5a      	ldr	r3, [pc, #360]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d121      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e0a6      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d107      	bne.n	8008e06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008df6:	4b54      	ldr	r3, [pc, #336]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d115      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e09a      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d107      	bne.n	8008e1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008e0e:	4b4e      	ldr	r3, [pc, #312]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d109      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e08e      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e1e:	4b4a      	ldr	r3, [pc, #296]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e086      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e2e:	4b46      	ldr	r3, [pc, #280]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f023 0203 	bic.w	r2, r3, #3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4943      	ldr	r1, [pc, #268]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e40:	f7fc fb4c 	bl	80054dc <HAL_GetTick>
 8008e44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e46:	e00a      	b.n	8008e5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e48:	f7fc fb48 	bl	80054dc <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d901      	bls.n	8008e5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e06e      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e5e:	4b3a      	ldr	r3, [pc, #232]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f003 020c 	and.w	r2, r3, #12
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d1eb      	bne.n	8008e48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0302 	and.w	r3, r3, #2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	4b31      	ldr	r3, [pc, #196]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d208      	bcs.n	8008e9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e8c:	4b2e      	ldr	r3, [pc, #184]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	492b      	ldr	r1, [pc, #172]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e9e:	4b29      	ldr	r3, [pc, #164]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d210      	bcs.n	8008ece <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eac:	4b25      	ldr	r3, [pc, #148]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f023 0207 	bic.w	r2, r3, #7
 8008eb4:	4923      	ldr	r1, [pc, #140]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ebc:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <HAL_RCC_ClockConfig+0x1ec>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d001      	beq.n	8008ece <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e036      	b.n	8008f3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0304 	and.w	r3, r3, #4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eda:	4b1b      	ldr	r3, [pc, #108]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	4918      	ldr	r1, [pc, #96]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d009      	beq.n	8008f0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ef8:	4b13      	ldr	r3, [pc, #76]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	00db      	lsls	r3, r3, #3
 8008f06:	4910      	ldr	r1, [pc, #64]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f0c:	f000 f824 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 8008f10:	4602      	mov	r2, r0
 8008f12:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <HAL_RCC_ClockConfig+0x1f0>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	091b      	lsrs	r3, r3, #4
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	490b      	ldr	r1, [pc, #44]	; (8008f4c <HAL_RCC_ClockConfig+0x1f4>)
 8008f1e:	5ccb      	ldrb	r3, [r1, r3]
 8008f20:	f003 031f 	and.w	r3, r3, #31
 8008f24:	fa22 f303 	lsr.w	r3, r2, r3
 8008f28:	4a09      	ldr	r2, [pc, #36]	; (8008f50 <HAL_RCC_ClockConfig+0x1f8>)
 8008f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008f2c:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_RCC_ClockConfig+0x1fc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fc fa83 	bl	800543c <HAL_InitTick>
 8008f36:	4603      	mov	r3, r0
 8008f38:	72fb      	strb	r3, [r7, #11]

  return status;
 8008f3a:	7afb      	ldrb	r3, [r7, #11]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	40022000 	.word	0x40022000
 8008f48:	40021000 	.word	0x40021000
 8008f4c:	08012a14 	.word	0x08012a14
 8008f50:	20000000 	.word	0x20000000
 8008f54:	20000008 	.word	0x20000008

08008f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	61fb      	str	r3, [r7, #28]
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f66:	4b3e      	ldr	r3, [pc, #248]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 030c 	and.w	r3, r3, #12
 8008f6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f70:	4b3b      	ldr	r3, [pc, #236]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <HAL_RCC_GetSysClockFreq+0x34>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b0c      	cmp	r3, #12
 8008f84:	d121      	bne.n	8008fca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d11e      	bne.n	8008fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008f8c:	4b34      	ldr	r3, [pc, #208]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d107      	bne.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008f98:	4b31      	ldr	r3, [pc, #196]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	f003 030f 	and.w	r3, r3, #15
 8008fa4:	61fb      	str	r3, [r7, #28]
 8008fa6:	e005      	b.n	8008fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008fa8:	4b2d      	ldr	r3, [pc, #180]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	091b      	lsrs	r3, r3, #4
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008fb4:	4a2b      	ldr	r2, [pc, #172]	; (8009064 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10d      	bne.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008fc8:	e00a      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d102      	bne.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008fd0:	4b25      	ldr	r3, [pc, #148]	; (8009068 <HAL_RCC_GetSysClockFreq+0x110>)
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	e004      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d101      	bne.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <HAL_RCC_GetSysClockFreq+0x114>)
 8008fde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b0c      	cmp	r3, #12
 8008fe4:	d134      	bne.n	8009050 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fe6:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d003      	beq.n	8008ffe <HAL_RCC_GetSysClockFreq+0xa6>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d003      	beq.n	8009004 <HAL_RCC_GetSysClockFreq+0xac>
 8008ffc:	e005      	b.n	800900a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <HAL_RCC_GetSysClockFreq+0x110>)
 8009000:	617b      	str	r3, [r7, #20]
      break;
 8009002:	e005      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009004:	4b19      	ldr	r3, [pc, #100]	; (800906c <HAL_RCC_GetSysClockFreq+0x114>)
 8009006:	617b      	str	r3, [r7, #20]
      break;
 8009008:	e002      	b.n	8009010 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	617b      	str	r3, [r7, #20]
      break;
 800900e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009010:	4b13      	ldr	r3, [pc, #76]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	091b      	lsrs	r3, r3, #4
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	3301      	adds	r3, #1
 800901c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800901e:	4b10      	ldr	r3, [pc, #64]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	fb03 f202 	mul.w	r2, r3, r2
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	fbb2 f3f3 	udiv	r3, r2, r3
 8009034:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009036:	4b0a      	ldr	r3, [pc, #40]	; (8009060 <HAL_RCC_GetSysClockFreq+0x108>)
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	0e5b      	lsrs	r3, r3, #25
 800903c:	f003 0303 	and.w	r3, r3, #3
 8009040:	3301      	adds	r3, #1
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009050:	69bb      	ldr	r3, [r7, #24]
}
 8009052:	4618      	mov	r0, r3
 8009054:	3724      	adds	r7, #36	; 0x24
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40021000 	.word	0x40021000
 8009064:	08012a2c 	.word	0x08012a2c
 8009068:	00f42400 	.word	0x00f42400
 800906c:	007a1200 	.word	0x007a1200

08009070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009074:	4b03      	ldr	r3, [pc, #12]	; (8009084 <HAL_RCC_GetHCLKFreq+0x14>)
 8009076:	681b      	ldr	r3, [r3, #0]
}
 8009078:	4618      	mov	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	20000000 	.word	0x20000000

08009088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800908c:	f7ff fff0 	bl	8009070 <HAL_RCC_GetHCLKFreq>
 8009090:	4602      	mov	r2, r0
 8009092:	4b06      	ldr	r3, [pc, #24]	; (80090ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	0a1b      	lsrs	r3, r3, #8
 8009098:	f003 0307 	and.w	r3, r3, #7
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800909e:	5ccb      	ldrb	r3, [r1, r3]
 80090a0:	f003 031f 	and.w	r3, r3, #31
 80090a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40021000 	.word	0x40021000
 80090b0:	08012a24 	.word	0x08012a24

080090b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80090b8:	f7ff ffda 	bl	8009070 <HAL_RCC_GetHCLKFreq>
 80090bc:	4602      	mov	r2, r0
 80090be:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	0adb      	lsrs	r3, r3, #11
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	4904      	ldr	r1, [pc, #16]	; (80090dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80090ca:	5ccb      	ldrb	r3, [r1, r3]
 80090cc:	f003 031f 	and.w	r3, r3, #31
 80090d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	40021000 	.word	0x40021000
 80090dc:	08012a24 	.word	0x08012a24

080090e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80090ec:	4b2a      	ldr	r3, [pc, #168]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80090ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80090f8:	f7ff f94e 	bl	8008398 <HAL_PWREx_GetVoltageRange>
 80090fc:	6178      	str	r0, [r7, #20]
 80090fe:	e014      	b.n	800912a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009100:	4b25      	ldr	r3, [pc, #148]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	4a24      	ldr	r2, [pc, #144]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910a:	6593      	str	r3, [r2, #88]	; 0x58
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800910e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009118:	f7ff f93e 	bl	8008398 <HAL_PWREx_GetVoltageRange>
 800911c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800911e:	4b1e      	ldr	r3, [pc, #120]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009122:	4a1d      	ldr	r2, [pc, #116]	; (8009198 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009128:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009130:	d10b      	bne.n	800914a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d919      	bls.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2ba0      	cmp	r3, #160	; 0xa0
 800913c:	d902      	bls.n	8009144 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800913e:	2302      	movs	r3, #2
 8009140:	613b      	str	r3, [r7, #16]
 8009142:	e013      	b.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009144:	2301      	movs	r3, #1
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	e010      	b.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b80      	cmp	r3, #128	; 0x80
 800914e:	d902      	bls.n	8009156 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009150:	2303      	movs	r3, #3
 8009152:	613b      	str	r3, [r7, #16]
 8009154:	e00a      	b.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b80      	cmp	r3, #128	; 0x80
 800915a:	d102      	bne.n	8009162 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800915c:	2302      	movs	r3, #2
 800915e:	613b      	str	r3, [r7, #16]
 8009160:	e004      	b.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b70      	cmp	r3, #112	; 0x70
 8009166:	d101      	bne.n	800916c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009168:	2301      	movs	r3, #1
 800916a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f023 0207 	bic.w	r2, r3, #7
 8009174:	4909      	ldr	r1, [pc, #36]	; (800919c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800917c:	4b07      	ldr	r3, [pc, #28]	; (800919c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	429a      	cmp	r2, r3
 8009188:	d001      	beq.n	800918e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e000      	b.n	8009190 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	40021000 	.word	0x40021000
 800919c:	40022000 	.word	0x40022000

080091a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091a8:	2300      	movs	r3, #0
 80091aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091ac:	2300      	movs	r3, #0
 80091ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 809e 	beq.w	80092fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091be:	2300      	movs	r3, #0
 80091c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091c2:	4b46      	ldr	r3, [pc, #280]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80091c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80091d2:	2300      	movs	r3, #0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00d      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091d8:	4b40      	ldr	r3, [pc, #256]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091dc:	4a3f      	ldr	r2, [pc, #252]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80091de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e2:	6593      	str	r3, [r2, #88]	; 0x58
 80091e4:	4b3d      	ldr	r3, [pc, #244]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ec:	60bb      	str	r3, [r7, #8]
 80091ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091f0:	2301      	movs	r3, #1
 80091f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091f4:	4b3a      	ldr	r3, [pc, #232]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a39      	ldr	r2, [pc, #228]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80091fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009200:	f7fc f96c 	bl	80054dc <HAL_GetTick>
 8009204:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009206:	e009      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009208:	f7fc f968 	bl	80054dc <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b02      	cmp	r3, #2
 8009214:	d902      	bls.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	74fb      	strb	r3, [r7, #19]
        break;
 800921a:	e005      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800921c:	4b30      	ldr	r3, [pc, #192]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0ef      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8009228:	7cfb      	ldrb	r3, [r7, #19]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d15a      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800922e:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009234:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009238:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01e      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	429a      	cmp	r2, r3
 8009248:	d019      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	4a1f      	ldr	r2, [pc, #124]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800925e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800926e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009276:	4a19      	ldr	r2, [pc, #100]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d016      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009288:	f7fc f928 	bl	80054dc <HAL_GetTick>
 800928c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800928e:	e00b      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009290:	f7fc f924 	bl	80054dc <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	4293      	cmp	r3, r2
 80092a0:	d902      	bls.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	74fb      	strb	r3, [r7, #19]
            break;
 80092a6:	e006      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0ec      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	4904      	ldr	r1, [pc, #16]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80092d2:	e009      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092d4:	7cfb      	ldrb	r3, [r7, #19]
 80092d6:	74bb      	strb	r3, [r7, #18]
 80092d8:	e006      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80092da:	bf00      	nop
 80092dc:	40021000 	.word	0x40021000
 80092e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	7cfb      	ldrb	r3, [r7, #19]
 80092e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092e8:	7c7b      	ldrb	r3, [r7, #17]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d105      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092ee:	4b6e      	ldr	r3, [pc, #440]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80092f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f2:	4a6d      	ldr	r2, [pc, #436]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80092f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00a      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009306:	4b68      	ldr	r3, [pc, #416]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930c:	f023 0203 	bic.w	r2, r3, #3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	4964      	ldr	r1, [pc, #400]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009328:	4b5f      	ldr	r3, [pc, #380]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800932a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932e:	f023 020c 	bic.w	r2, r3, #12
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	495c      	ldr	r1, [pc, #368]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00a      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800934a:	4b57      	ldr	r3, [pc, #348]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800934c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009350:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	4953      	ldr	r1, [pc, #332]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800935a:	4313      	orrs	r3, r2
 800935c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00a      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800936c:	4b4e      	ldr	r3, [pc, #312]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800936e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009372:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	494b      	ldr	r1, [pc, #300]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00a      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800938e:	4b46      	ldr	r3, [pc, #280]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	4942      	ldr	r1, [pc, #264]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093b0:	4b3d      	ldr	r3, [pc, #244]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	493a      	ldr	r1, [pc, #232]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00a      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80093d2:	4b35      	ldr	r3, [pc, #212]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80093d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	4931      	ldr	r1, [pc, #196]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80093f4:	4b2c      	ldr	r3, [pc, #176]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	4929      	ldr	r1, [pc, #164]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009416:	4b24      	ldr	r3, [pc, #144]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	4920      	ldr	r1, [pc, #128]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009426:	4313      	orrs	r3, r2
 8009428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d015      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009438:	4b1b      	ldr	r3, [pc, #108]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800943a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009446:	4918      	ldr	r1, [pc, #96]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009448:	4313      	orrs	r3, r2
 800944a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009456:	d105      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009458:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	4a12      	ldr	r2, [pc, #72]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800945e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009462:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d015      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009470:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	490a      	ldr	r1, [pc, #40]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009480:	4313      	orrs	r3, r2
 8009482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800948e:	d105      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009490:	4b05      	ldr	r3, [pc, #20]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	4a04      	ldr	r2, [pc, #16]	; (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8009496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800949a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800949c:	7cbb      	ldrb	r3, [r7, #18]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	40021000 	.word	0x40021000

080094ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80094ac:	b480      	push	{r7}
 80094ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80094b6:	f043 0304 	orr.w	r3, r3, #4
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	40021000 	.word	0x40021000

080094cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e049      	b.n	8009572 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	795b      	ldrb	r3, [r3, #5]
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 fce6 	bl	8002ec0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0204 	orr.w	r2, r2, #4
 8009508:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009514:	2b40      	cmp	r3, #64	; 0x40
 8009516:	d104      	bne.n	8009522 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2204      	movs	r2, #4
 800951c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e027      	b.n	8009572 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8009522:	f7fb ffdb 	bl	80054dc <HAL_GetTick>
 8009526:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009528:	e015      	b.n	8009556 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800952a:	f7fb ffd7 	bl	80054dc <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d90e      	bls.n	8009556 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f003 0304 	and.w	r3, r3, #4
 8009542:	2b04      	cmp	r3, #4
 8009544:	d107      	bne.n	8009556 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2204      	movs	r2, #4
 800954a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e00d      	b.n	8009572 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b04      	cmp	r3, #4
 8009562:	d0e2      	beq.n	800952a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	791b      	ldrb	r3, [r3, #4]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d101      	bne.n	8009594 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009590:	2302      	movs	r3, #2
 8009592:	e03d      	b.n	8009610 <HAL_RNG_GenerateRandomNumber+0x96>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	795b      	ldrb	r3, [r3, #5]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d12c      	bne.n	80095fe <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095aa:	f7fb ff97 	bl	80054dc <HAL_GetTick>
 80095ae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80095b0:	e011      	b.n	80095d6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80095b2:	f7fb ff93 	bl	80054dc <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d90a      	bls.n	80095d6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e01c      	b.n	8009610 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d1e6      	bne.n	80095b2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	715a      	strb	r2, [r3, #5]
 80095fc:	e004      	b.n	8009608 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2204      	movs	r2, #4
 8009602:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	711a      	strb	r2, [r3, #4]

  return status;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d073      	beq.n	8009712 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f9 fc72 	bl	8002f28 <HAL_RTC_MspInit>
    }
#endif /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800964a:	605a      	str	r2, [r3, #4]
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	22ca      	movs	r2, #202	; 0xca
 800965a:	625a      	str	r2, [r3, #36]	; 0x24
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2253      	movs	r2, #83	; 0x53
 8009662:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb75 	bl	8009d54 <RTC_EnterInitMode>
 800966a:	4603      	mov	r3, r0
 800966c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d14e      	bne.n	8009712 <HAL_RTC_Init+0xfa>
    {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009686:	6193      	str	r3, [r2, #24]
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6999      	ldr	r1, [r3, #24]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	431a      	orrs	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	431a      	orrs	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6912      	ldr	r2, [r2, #16]
 80096ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6919      	ldr	r1, [r3, #16]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	041a      	lsls	r2, r3, #16
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fb7b 	bl	8009dc0 <RTC_ExitInitMode>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11e      	bne.n	8009712 <HAL_RTC_Init+0xfa>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 80096e2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6999      	ldr	r1, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	22ff      	movs	r2, #255	; 0xff
 8009708:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      }
    }
  }

  return status;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_RTC_SetTime+0x1a>
 8009732:	2302      	movs	r3, #2
 8009734:	e08b      	b.n	800984e <HAL_RTC_SetTime+0x132>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	22ca      	movs	r2, #202	; 0xca
 800974c:	625a      	str	r2, [r3, #36]	; 0x24
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2253      	movs	r2, #83	; 0x53
 8009754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 fafc 	bl	8009d54 <RTC_EnterInitMode>
 800975c:	4603      	mov	r3, r0
 800975e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009760:	7cfb      	ldrb	r3, [r7, #19]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d163      	bne.n	800982e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d126      	bne.n	80097ba <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d102      	bne.n	8009780 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	2200      	movs	r2, #0
 800977e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 fb59 	bl	8009e3c <RTC_ByteToBcd2>
 800978a:	4603      	mov	r3, r0
 800978c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fb52 	bl	8009e3c <RTC_ByteToBcd2>
 8009798:	4603      	mov	r3, r0
 800979a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800979c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	789b      	ldrb	r3, [r3, #2]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fb4a 	bl	8009e3c <RTC_ByteToBcd2>
 80097a8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097aa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	78db      	ldrb	r3, [r3, #3]
 80097b2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e018      	b.n	80097ec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d102      	bne.n	80097ce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097da:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097e0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	78db      	ldrb	r3, [r3, #3]
 80097e6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80097f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80097fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699a      	ldr	r2, [r3, #24]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800980a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6999      	ldr	r1, [r3, #24]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	431a      	orrs	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 facb 	bl	8009dc0 <RTC_ExitInitMode>
 800982a:	4603      	mov	r3, r0
 800982c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	22ff      	movs	r2, #255	; 0xff
 8009834:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009836:	7cfb      	ldrb	r3, [r7, #19]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 800984c:	7cfb      	ldrb	r3, [r7, #19]
}
 800984e:	4618      	mov	r0, r3
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	bd90      	pop	{r4, r7, pc}

08009856 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009884:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009888:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009894:	b2da      	uxtb	r2, r3
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b2:	b2da      	uxtb	r2, r3
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	0d9b      	lsrs	r3, r3, #22
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d11a      	bne.n	8009904 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fad2 	bl	8009e7c <RTC_Bcd2ToByte>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	785b      	ldrb	r3, [r3, #1]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 fac9 	bl	8009e7c <RTC_Bcd2ToByte>
 80098ea:	4603      	mov	r3, r0
 80098ec:	461a      	mov	r2, r3
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	789b      	ldrb	r3, [r3, #2]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f000 fac0 	bl	8009e7c <RTC_Bcd2ToByte>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800990e:	b590      	push	{r4, r7, lr}
 8009910:	b087      	sub	sp, #28
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_RTC_SetDate+0x1a>
 8009924:	2302      	movs	r3, #2
 8009926:	e075      	b.n	8009a14 <HAL_RTC_SetDate+0x106>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2202      	movs	r2, #2
 8009934:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10e      	bne.n	800995c <HAL_RTC_SetDate+0x4e>
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	f003 0310 	and.w	r3, r3, #16
 8009946:	2b00      	cmp	r3, #0
 8009948:	d008      	beq.n	800995c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	785b      	ldrb	r3, [r3, #1]
 800994e:	f023 0310 	bic.w	r3, r3, #16
 8009952:	b2db      	uxtb	r3, r3
 8009954:	330a      	adds	r3, #10
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d11c      	bne.n	800999c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	78db      	ldrb	r3, [r3, #3]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fa68 	bl	8009e3c <RTC_ByteToBcd2>
 800996c:	4603      	mov	r3, r0
 800996e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	785b      	ldrb	r3, [r3, #1]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fa61 	bl	8009e3c <RTC_ByteToBcd2>
 800997a:	4603      	mov	r3, r0
 800997c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800997e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	789b      	ldrb	r3, [r3, #2]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fa59 	bl	8009e3c <RTC_ByteToBcd2>
 800998a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800998c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	e00e      	b.n	80099ba <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	78db      	ldrb	r3, [r3, #3]
 80099a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80099a8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80099ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80099b6:	4313      	orrs	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	22ca      	movs	r2, #202	; 0xca
 80099c0:	625a      	str	r2, [r3, #36]	; 0x24
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2253      	movs	r2, #83	; 0x53
 80099c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 f9c2 	bl	8009d54 <RTC_EnterInitMode>
 80099d0:	4603      	mov	r3, r0
 80099d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80099d4:	7cfb      	ldrb	r3, [r7, #19]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80099e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80099e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 f9e8 	bl	8009dc0 <RTC_ExitInitMode>
 80099f0:	4603      	mov	r3, r0
 80099f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	22ff      	movs	r2, #255	; 0xff
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80099fc:	7cfb      	ldrb	r3, [r7, #19]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return status;
 8009a12:	7cfb      	ldrb	r3, [r7, #19]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	371c      	adds	r7, #28
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd90      	pop	{r4, r7, pc}

08009a1c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b086      	sub	sp, #24
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009a36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	0c1b      	lsrs	r3, r3, #16
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	0a1b      	lsrs	r3, r3, #8
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	f003 031f 	and.w	r3, r3, #31
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	0b5b      	lsrs	r3, r3, #13
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d11a      	bne.n	8009aac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	78db      	ldrb	r3, [r3, #3]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f9fe 	bl	8009e7c <RTC_Bcd2ToByte>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f9f5 	bl	8009e7c <RTC_Bcd2ToByte>
 8009a92:	4603      	mov	r3, r0
 8009a94:	461a      	mov	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	789b      	ldrb	r3, [r3, #2]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f000 f9ec 	bl	8009e7c <RTC_Bcd2ToByte>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009ab8:	b590      	push	{r4, r7, lr}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d101      	bne.n	8009ad2 <HAL_RTC_SetAlarm_IT+0x1a>
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e0db      	b.n	8009c8a <HAL_RTC_SetAlarm_IT+0x1d2>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2202      	movs	r2, #2
 8009ade:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  if (Format == RTC_FORMAT_BIN)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d137      	bne.n	8009b58 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2200      	movs	r2, #0
 8009afa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f99b 	bl	8009e3c <RTC_ByteToBcd2>
 8009b06:	4603      	mov	r3, r0
 8009b08:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f994 	bl	8009e3c <RTC_ByteToBcd2>
 8009b14:	4603      	mov	r3, r0
 8009b16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b18:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	789b      	ldrb	r3, [r3, #2]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f98c 	bl	8009e3c <RTC_ByteToBcd2>
 8009b24:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b26:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009b30:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f97e 	bl	8009e3c <RTC_ByteToBcd2>
 8009b40:	4603      	mov	r3, r0
 8009b42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009b44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009b4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b52:	4313      	orrs	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	e023      	b.n	8009ba0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b78:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	78db      	ldrb	r3, [r3, #3]
 8009b84:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009b86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009b90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009b96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	69db      	ldr	r3, [r3, #28]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	22ca      	movs	r2, #202	; 0xca
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2253      	movs	r2, #83	; 0x53
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bc4:	d124      	bne.n	8009c10 <HAL_RTC_SetAlarm_IT+0x158>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	699a      	ldr	r2, [r3, #24]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bfc:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c0c:	619a      	str	r2, [r3, #24]
 8009c0e:	e023      	b.n	8009c58 <HAL_RTC_SetAlarm_IT+0x1a0>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009c1e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2202      	movs	r2, #2
 8009c26:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c46:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	699a      	ldr	r2, [r3, #24]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c56:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009c58:	4b0e      	ldr	r3, [pc, #56]	; (8009c94 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a0d      	ldr	r2, [pc, #52]	; (8009c94 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8009c5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c62:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009c64:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	4a0a      	ldr	r2, [pc, #40]	; (8009c94 <HAL_RTC_SetAlarm_IT+0x1dc>)
 8009c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c6e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd90      	pop	{r4, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	40010400 	.word	0x40010400

08009c98 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <HAL_RTC_AlarmIRQHandler+0x58>)
 8009ca2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009ca6:	615a      	str	r2, [r3, #20]

#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Get interrupt status */
  uint32_t tmp = hrtc->Instance->MISR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cae:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0u)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d006      	beq.n	8009cc8 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRAF;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f816 	bl	8009cf4 <HAL_RTC_AlarmAEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0u)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d006      	beq.n	8009ce0 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Clear the AlarmB interrupt pending bit */
    hrtc->Instance->SCR = RTC_SCR_CALRBF;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f8e8 	bl	8009eb0 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40010400 	.word	0x40010400

08009cf4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009d1e:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
#endif

  tickstart = HAL_GetTick();
 8009d20:	f7fb fbdc 	bl	80054dc <HAL_GetTick>
 8009d24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009d26:	e009      	b.n	8009d3c <HAL_RTC_WaitForSynchro+0x34>
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d28:	f7fb fbd8 	bl	80054dc <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d36:	d901      	bls.n	8009d3c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e007      	b.n	8009d4c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f003 0320 	and.w	r3, r3, #32
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0ee      	beq.n	8009d28 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d123      	bne.n	8009db6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d7e:	f7fb fbad 	bl	80054dc <HAL_GetTick>
 8009d82:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009d84:	e00d      	b.n	8009da2 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d86:	f7fb fba9 	bl	80054dc <HAL_GetTick>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	1ad3      	subs	r3, r2, r3
 8009d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d94:	d905      	bls.n	8009da2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <RTC_EnterInitMode+0x62>
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d1e7      	bne.n	8009d86 <RTC_EnterInitMode+0x32>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009dcc:	4b1a      	ldr	r3, [pc, #104]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4a19      	ldr	r2, [pc, #100]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd6:	60d3      	str	r3, [r2, #12]
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009dd8:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f003 0320 	and.w	r3, r3, #32
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10c      	bne.n	8009dfe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ff8f 	bl	8009d08 <HAL_RTC_WaitForSynchro>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01e      	beq.n	8009e2e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2203      	movs	r2, #3
 8009df4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	73fb      	strb	r3, [r7, #15]
 8009dfc:	e017      	b.n	8009e2e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	4a0d      	ldr	r2, [pc, #52]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009e04:	f023 0320 	bic.w	r3, r3, #32
 8009e08:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7ff ff7c 	bl	8009d08 <HAL_RTC_WaitForSynchro>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2203      	movs	r2, #3
 8009e1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      status = HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009e22:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <RTC_ExitInitMode+0x78>)
 8009e28:	f043 0320 	orr.w	r3, r3, #32
 8009e2c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40002800 	.word	0x40002800

08009e3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	4603      	mov	r3, r0
 8009e44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009e4a:	79fb      	ldrb	r3, [r7, #7]
 8009e4c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009e4e:	e005      	b.n	8009e5c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	3301      	adds	r3, #1
 8009e54:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009e56:	7afb      	ldrb	r3, [r7, #11]
 8009e58:	3b0a      	subs	r3, #10
 8009e5a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	2b09      	cmp	r3, #9
 8009e60:	d8f6      	bhi.n	8009e50 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	7afb      	ldrb	r3, [r7, #11]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	b2db      	uxtb	r3, r3
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	091b      	lsrs	r3, r3, #4
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	0092      	lsls	r2, r2, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	b2db      	uxtb	r3, r3
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  uint32_t __IO tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009ee4:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	009a      	lsls	r2, r3, #2
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	4413      	add	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6013      	str	r3, [r2, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (tamp->BKP0R);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009f22:	60bb      	str	r3, [r7, #8]
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	681b      	ldr	r3, [r3, #0]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr

08009f3e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e095      	b.n	800a07c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f60:	d009      	beq.n	8009f76 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	61da      	str	r2, [r3, #28]
 8009f68:	e005      	b.n	8009f76 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d106      	bne.n	8009f96 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7f9 f801 	bl	8002f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fb6:	d902      	bls.n	8009fbe <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e002      	b.n	8009fc4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fc2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009fcc:	d007      	beq.n	8009fde <HAL_SPI_Init+0xa0>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009fd6:	d002      	beq.n	8009fde <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fee:	431a      	orrs	r2, r3
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	431a      	orrs	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a00c:	431a      	orrs	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a020:	ea42 0103 	orr.w	r1, r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a028:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	430a      	orrs	r2, r1
 800a032:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	0c1b      	lsrs	r3, r3, #16
 800a03a:	f003 0204 	and.w	r2, r3, #4
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	f003 0310 	and.w	r3, r3, #16
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a05a:	ea42 0103 	orr.w	r1, r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	430a      	orrs	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <HAL_SPI_Transmit+0x22>
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e158      	b.n	800a358 <HAL_SPI_Transmit+0x2d4>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0ae:	f7fb fa15 	bl	80054dc <HAL_GetTick>
 800a0b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d002      	beq.n	800a0ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a0c8:	e13d      	b.n	800a346 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <HAL_SPI_Transmit+0x52>
 800a0d0:	88fb      	ldrh	r3, [r7, #6]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a0da:	e134      	b.n	800a346 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	88fa      	ldrh	r2, [r7, #6]
 800a0f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a126:	d10f      	bne.n	800a148 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a136:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a146:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a152:	2b40      	cmp	r3, #64	; 0x40
 800a154:	d007      	beq.n	800a166 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a16e:	d94b      	bls.n	800a208 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <HAL_SPI_Transmit+0xfa>
 800a178:	8afb      	ldrh	r3, [r7, #22]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d13e      	bne.n	800a1fc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a182:	881a      	ldrh	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18e:	1c9a      	adds	r2, r3, #2
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a1a2:	e02b      	b.n	800a1fc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d112      	bne.n	800a1d8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	881a      	ldrh	r2, [r3, #0]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c2:	1c9a      	adds	r2, r3, #2
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	3b01      	subs	r3, #1
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a1d6:	e011      	b.n	800a1fc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1d8:	f7fb f980 	bl	80054dc <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d803      	bhi.n	800a1f0 <HAL_SPI_Transmit+0x16c>
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ee:	d102      	bne.n	800a1f6 <HAL_SPI_Transmit+0x172>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d102      	bne.n	800a1fc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a1fa:	e0a4      	b.n	800a346 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a200:	b29b      	uxth	r3, r3
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1ce      	bne.n	800a1a4 <HAL_SPI_Transmit+0x120>
 800a206:	e07c      	b.n	800a302 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_SPI_Transmit+0x192>
 800a210:	8afb      	ldrh	r3, [r7, #22]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d170      	bne.n	800a2f8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d912      	bls.n	800a246 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a224:	881a      	ldrh	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a230:	1c9a      	adds	r2, r3, #2
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	3b02      	subs	r3, #2
 800a23e:	b29a      	uxth	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a244:	e058      	b.n	800a2f8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	330c      	adds	r3, #12
 800a250:	7812      	ldrb	r2, [r2, #0]
 800a252:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a262:	b29b      	uxth	r3, r3
 800a264:	3b01      	subs	r3, #1
 800a266:	b29a      	uxth	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a26c:	e044      	b.n	800a2f8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d12b      	bne.n	800a2d4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b01      	cmp	r3, #1
 800a284:	d912      	bls.n	800a2ac <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28a:	881a      	ldrh	r2, [r3, #0]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	1c9a      	adds	r2, r3, #2
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	3b02      	subs	r3, #2
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2aa:	e025      	b.n	800a2f8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a2d2:	e011      	b.n	800a2f8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2d4:	f7fb f902 	bl	80054dc <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d803      	bhi.n	800a2ec <HAL_SPI_Transmit+0x268>
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ea:	d102      	bne.n	800a2f2 <HAL_SPI_Transmit+0x26e>
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d102      	bne.n	800a2f8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2f6:	e026      	b.n	800a346 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1b5      	bne.n	800a26e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fce4 	bl	800acd4 <SPI_EndRxTxTransaction>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2220      	movs	r2, #32
 800a316:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a320:	2300      	movs	r3, #0
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	613b      	str	r3, [r7, #16]
 800a334:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e000      	b.n	800a346 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800a344:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a356:	7ffb      	ldrb	r3, [r7, #31]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	603b      	str	r3, [r7, #0]
 800a36c:	4613      	mov	r3, r2
 800a36e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a37c:	d112      	bne.n	800a3a4 <HAL_SPI_Receive+0x44>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10e      	bne.n	800a3a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2204      	movs	r2, #4
 800a38a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a38e:	88fa      	ldrh	r2, [r7, #6]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	4613      	mov	r3, r2
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f910 	bl	800a5c0 <HAL_SPI_TransmitReceive>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	e109      	b.n	800a5b8 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <HAL_SPI_Receive+0x52>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e102      	b.n	800a5b8 <HAL_SPI_Receive+0x258>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3ba:	f7fb f88f 	bl	80054dc <HAL_GetTick>
 800a3be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d002      	beq.n	800a3d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3d0:	e0e9      	b.n	800a5a6 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <HAL_SPI_Receive+0x7e>
 800a3d8:	88fb      	ldrh	r3, [r7, #6]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3e2:	e0e0      	b.n	800a5a6 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2204      	movs	r2, #4
 800a3e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	88fa      	ldrh	r2, [r7, #6]
 800a404:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a42e:	d908      	bls.n	800a442 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	685a      	ldr	r2, [r3, #4]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a43e:	605a      	str	r2, [r3, #4]
 800a440:	e007      	b.n	800a452 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a450:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a45a:	d10f      	bne.n	800a47c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a46a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a47a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a486:	2b40      	cmp	r3, #64	; 0x40
 800a488:	d007      	beq.n	800a49a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a498:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4a2:	d867      	bhi.n	800a574 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a4a4:	e030      	b.n	800a508 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d117      	bne.n	800a4e4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f103 020c 	add.w	r2, r3, #12
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ca:	1c5a      	adds	r2, r3, #1
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a4e2:	e011      	b.n	800a508 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4e4:	f7fa fffa 	bl	80054dc <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d803      	bhi.n	800a4fc <HAL_SPI_Receive+0x19c>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fa:	d102      	bne.n	800a502 <HAL_SPI_Receive+0x1a2>
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800a502:	2303      	movs	r3, #3
 800a504:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a506:	e04e      	b.n	800a5a6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a50e:	b29b      	uxth	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d1c8      	bne.n	800a4a6 <HAL_SPI_Receive+0x146>
 800a514:	e034      	b.n	800a580 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b01      	cmp	r3, #1
 800a522:	d115      	bne.n	800a550 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	b292      	uxth	r2, r2
 800a530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a542:	b29b      	uxth	r3, r3
 800a544:	3b01      	subs	r3, #1
 800a546:	b29a      	uxth	r2, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a54e:	e011      	b.n	800a574 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a550:	f7fa ffc4 	bl	80054dc <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d803      	bhi.n	800a568 <HAL_SPI_Receive+0x208>
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a566:	d102      	bne.n	800a56e <HAL_SPI_Receive+0x20e>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d102      	bne.n	800a574 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a572:	e018      	b.n	800a5a6 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1ca      	bne.n	800a516 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fb4d 	bl	800ac24 <SPI_EndRxTransaction>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2220      	movs	r2, #32
 800a594:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d002      	beq.n	800a5a4 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	75fb      	strb	r3, [r7, #23]
 800a5a2:	e000      	b.n	800a5a6 <HAL_SPI_Receive+0x246>
  }

error :
 800a5a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_SPI_TransmitReceive+0x26>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e1fb      	b.n	800a9de <HAL_SPI_TransmitReceive+0x41e>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5ee:	f7fa ff75 	bl	80054dc <HAL_GetTick>
 800a5f2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5fa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a602:	887b      	ldrh	r3, [r7, #2]
 800a604:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a606:	887b      	ldrh	r3, [r7, #2]
 800a608:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a60a:	7efb      	ldrb	r3, [r7, #27]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d00e      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x6e>
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a616:	d106      	bne.n	800a626 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <HAL_SPI_TransmitReceive+0x66>
 800a620:	7efb      	ldrb	r3, [r7, #27]
 800a622:	2b04      	cmp	r3, #4
 800a624:	d003      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a626:	2302      	movs	r3, #2
 800a628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a62c:	e1cd      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x80>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x80>
 800a63a:	887b      	ldrh	r3, [r7, #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800a646:	e1c0      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b04      	cmp	r3, #4
 800a652:	d003      	beq.n	800a65c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2205      	movs	r2, #5
 800a658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	887a      	ldrh	r2, [r7, #2]
 800a66c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	887a      	ldrh	r2, [r7, #2]
 800a674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	887a      	ldrh	r2, [r7, #2]
 800a682:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	887a      	ldrh	r2, [r7, #2]
 800a688:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a69e:	d802      	bhi.n	800a6a6 <HAL_SPI_TransmitReceive+0xe6>
 800a6a0:	8a3b      	ldrh	r3, [r7, #16]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d908      	bls.n	800a6b8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a6b4:	605a      	str	r2, [r3, #4]
 800a6b6:	e007      	b.n	800a6c8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a6c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d2:	2b40      	cmp	r3, #64	; 0x40
 800a6d4:	d007      	beq.n	800a6e6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6ee:	d97c      	bls.n	800a7ea <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <HAL_SPI_TransmitReceive+0x13e>
 800a6f8:	8a7b      	ldrh	r3, [r7, #18]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d169      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a702:	881a      	ldrh	r2, [r3, #0]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	1c9a      	adds	r2, r3, #2
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a718:	b29b      	uxth	r3, r3
 800a71a:	3b01      	subs	r3, #1
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a722:	e056      	b.n	800a7d2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d11b      	bne.n	800a76a <HAL_SPI_TransmitReceive+0x1aa>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a736:	b29b      	uxth	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d016      	beq.n	800a76a <HAL_SPI_TransmitReceive+0x1aa>
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d113      	bne.n	800a76a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a746:	881a      	ldrh	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a752:	1c9a      	adds	r2, r3, #2
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b01      	cmp	r3, #1
 800a776:	d11c      	bne.n	800a7b2 <HAL_SPI_TransmitReceive+0x1f2>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a77e:	b29b      	uxth	r3, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d016      	beq.n	800a7b2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a78e:	b292      	uxth	r2, r2
 800a790:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a796:	1c9a      	adds	r2, r3, #2
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a7b2:	f7fa fe93 	bl	80054dc <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	69fb      	ldr	r3, [r7, #28]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d807      	bhi.n	800a7d2 <HAL_SPI_TransmitReceive+0x212>
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c8:	d003      	beq.n	800a7d2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a7d0:	e0fb      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1a3      	bne.n	800a724 <HAL_SPI_TransmitReceive+0x164>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d19d      	bne.n	800a724 <HAL_SPI_TransmitReceive+0x164>
 800a7e8:	e0df      	b.n	800a9aa <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_SPI_TransmitReceive+0x23a>
 800a7f2:	8a7b      	ldrh	r3, [r7, #18]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	f040 80cb 	bne.w	800a990 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	2b01      	cmp	r3, #1
 800a802:	d912      	bls.n	800a82a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a808:	881a      	ldrh	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	1c9a      	adds	r2, r3, #2
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b02      	subs	r3, #2
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a828:	e0b2      	b.n	800a990 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	330c      	adds	r3, #12
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a850:	e09e      	b.n	800a990 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d134      	bne.n	800a8ca <HAL_SPI_TransmitReceive+0x30a>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a864:	b29b      	uxth	r3, r3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d02f      	beq.n	800a8ca <HAL_SPI_TransmitReceive+0x30a>
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d12c      	bne.n	800a8ca <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a874:	b29b      	uxth	r3, r3
 800a876:	2b01      	cmp	r3, #1
 800a878:	d912      	bls.n	800a8a0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87e:	881a      	ldrh	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88a:	1c9a      	adds	r2, r3, #2
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a894:	b29b      	uxth	r3, r3
 800a896:	3b02      	subs	r3, #2
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a89e:	e012      	b.n	800a8c6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	330c      	adds	r3, #12
 800a8aa:	7812      	ldrb	r2, [r2, #0]
 800a8ac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b2:	1c5a      	adds	r2, r3, #1
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d148      	bne.n	800a96a <HAL_SPI_TransmitReceive+0x3aa>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d042      	beq.n	800a96a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d923      	bls.n	800a938 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	b292      	uxth	r2, r2
 800a8fc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a90e:	b29b      	uxth	r3, r3
 800a910:	3b02      	subs	r3, #2
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a920:	b29b      	uxth	r3, r3
 800a922:	2b01      	cmp	r3, #1
 800a924:	d81f      	bhi.n	800a966 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a934:	605a      	str	r2, [r3, #4]
 800a936:	e016      	b.n	800a966 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f103 020c 	add.w	r2, r3, #12
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a944:	7812      	ldrb	r2, [r2, #0]
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	3b01      	subs	r3, #1
 800a95e:	b29a      	uxth	r2, r3
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a966:	2301      	movs	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a96a:	f7fa fdb7 	bl	80054dc <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a976:	429a      	cmp	r2, r3
 800a978:	d803      	bhi.n	800a982 <HAL_SPI_TransmitReceive+0x3c2>
 800a97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d102      	bne.n	800a988 <HAL_SPI_TransmitReceive+0x3c8>
 800a982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a984:	2b00      	cmp	r3, #0
 800a986:	d103      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800a988:	2303      	movs	r3, #3
 800a98a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800a98e:	e01c      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a994:	b29b      	uxth	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	f47f af5b 	bne.w	800a852 <HAL_SPI_TransmitReceive+0x292>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f47f af54 	bne.w	800a852 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 f990 	bl	800acd4 <SPI_EndRxTxTransaction>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d006      	beq.n	800a9c8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	661a      	str	r2, [r3, #96]	; 0x60
 800a9c6:	e000      	b.n	800a9ca <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800a9c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a9da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9f8:	f7fa fd70 	bl	80054dc <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa00:	1a9b      	subs	r3, r3, r2
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	4413      	add	r3, r2
 800aa06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aa08:	f7fa fd68 	bl	80054dc <HAL_GetTick>
 800aa0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aa0e:	4b39      	ldr	r3, [pc, #228]	; (800aaf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	015b      	lsls	r3, r3, #5
 800aa14:	0d1b      	lsrs	r3, r3, #20
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	fb02 f303 	mul.w	r3, r2, r3
 800aa1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa1e:	e054      	b.n	800aaca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa26:	d050      	beq.n	800aaca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa28:	f7fa fd58 	bl	80054dc <HAL_GetTick>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	69fa      	ldr	r2, [r7, #28]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d902      	bls.n	800aa3e <SPI_WaitFlagStateUntilTimeout+0x56>
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d13d      	bne.n	800aaba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa56:	d111      	bne.n	800aa7c <SPI_WaitFlagStateUntilTimeout+0x94>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa60:	d004      	beq.n	800aa6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa6a:	d107      	bne.n	800aa7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa84:	d10f      	bne.n	800aaa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e017      	b.n	800aaea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	689a      	ldr	r2, [r3, #8]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	4013      	ands	r3, r2
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	bf0c      	ite	eq
 800aada:	2301      	moveq	r3, #1
 800aadc:	2300      	movne	r3, #0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d19b      	bne.n	800aa20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aae8:	2300      	movs	r3, #0
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000000 	.word	0x20000000

0800aaf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08a      	sub	sp, #40	; 0x28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ab0a:	f7fa fce7 	bl	80054dc <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	1a9b      	subs	r3, r3, r2
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	4413      	add	r3, r2
 800ab18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ab1a:	f7fa fcdf 	bl	80054dc <HAL_GetTick>
 800ab1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	330c      	adds	r3, #12
 800ab26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ab28:	4b3d      	ldr	r3, [pc, #244]	; (800ac20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	00da      	lsls	r2, r3, #3
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	0d1b      	lsrs	r3, r3, #20
 800ab38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3a:	fb02 f303 	mul.w	r3, r2, r3
 800ab3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ab40:	e060      	b.n	800ac04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab48:	d107      	bne.n	800ab5a <SPI_WaitFifoStateUntilTimeout+0x62>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d104      	bne.n	800ab5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ab58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab60:	d050      	beq.n	800ac04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab62:	f7fa fcbb 	bl	80054dc <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d902      	bls.n	800ab78 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d13d      	bne.n	800abf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab90:	d111      	bne.n	800abb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab9a:	d004      	beq.n	800aba6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba4:	d107      	bne.n	800abb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abbe:	d10f      	bne.n	800abe0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e010      	b.n	800ac16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d196      	bne.n	800ab42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3728      	adds	r7, #40	; 0x28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000000 	.word	0x20000000

0800ac24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af02      	add	r7, sp, #8
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac38:	d111      	bne.n	800ac5e <SPI_EndRxTransaction+0x3a>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac42:	d004      	beq.n	800ac4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac4c:	d107      	bne.n	800ac5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac5c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2200      	movs	r2, #0
 800ac66:	2180      	movs	r1, #128	; 0x80
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7ff febd 	bl	800a9e8 <SPI_WaitFlagStateUntilTimeout>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d007      	beq.n	800ac84 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac78:	f043 0220 	orr.w	r2, r3, #32
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e023      	b.n	800accc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac8c:	d11d      	bne.n	800acca <SPI_EndRxTransaction+0xa6>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac96:	d004      	beq.n	800aca2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aca0:	d113      	bne.n	800acca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f7ff ff22 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e000      	b.n	800accc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f7ff ff03 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d007      	beq.n	800ad08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acfc:	f043 0220 	orr.w	r2, r3, #32
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e027      	b.n	800ad58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f7ff fe68 	bl	800a9e8 <SPI_WaitFlagStateUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d007      	beq.n	800ad2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad22:	f043 0220 	orr.w	r2, r3, #32
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e014      	b.n	800ad58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fedc 	bl	800aaf8 <SPI_WaitFifoStateUntilTimeout>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad4a:	f043 0220 	orr.w	r2, r3, #32
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e000      	b.n	800ad58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e040      	b.n	800adf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7f7 ffde 	bl	8002d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2224      	movs	r2, #36	; 0x24
 800ad8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 0201 	bic.w	r2, r2, #1
 800ad9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fe8a 	bl	800bab8 <UART_SetConfig>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d101      	bne.n	800adae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e022      	b.n	800adf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d002      	beq.n	800adbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 f8d8 	bl	800bf6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f042 0201 	orr.w	r2, r2, #1
 800adea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f001 f95f 	bl	800c0b0 <UART_CheckIdleState>
 800adf2:	4603      	mov	r3, r0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	; 0x28
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	603b      	str	r3, [r7, #0]
 800ae08:	4613      	mov	r3, r2
 800ae0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae10:	2b20      	cmp	r3, #32
 800ae12:	f040 8082 	bne.w	800af1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d002      	beq.n	800ae22 <HAL_UART_Transmit+0x26>
 800ae1c:	88fb      	ldrh	r3, [r7, #6]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e07a      	b.n	800af1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d101      	bne.n	800ae34 <HAL_UART_Transmit+0x38>
 800ae30:	2302      	movs	r3, #2
 800ae32:	e073      	b.n	800af1c <HAL_UART_Transmit+0x120>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2221      	movs	r2, #33	; 0x21
 800ae48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae4a:	f7fa fb47 	bl	80054dc <HAL_GetTick>
 800ae4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	88fa      	ldrh	r2, [r7, #6]
 800ae54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	88fa      	ldrh	r2, [r7, #6]
 800ae5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae68:	d108      	bne.n	800ae7c <HAL_UART_Transmit+0x80>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d104      	bne.n	800ae7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	e003      	b.n	800ae84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae80:	2300      	movs	r3, #0
 800ae82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ae8c:	e02d      	b.n	800aeea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2200      	movs	r2, #0
 800ae96:	2180      	movs	r1, #128	; 0x80
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f001 f952 	bl	800c142 <UART_WaitOnFlagUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e039      	b.n	800af1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10b      	bne.n	800aec6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	881a      	ldrh	r2, [r3, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aeba:	b292      	uxth	r2, r2
 800aebc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	3302      	adds	r3, #2
 800aec2:	61bb      	str	r3, [r7, #24]
 800aec4:	e008      	b.n	800aed8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	781a      	ldrb	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	b292      	uxth	r2, r2
 800aed0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	3301      	adds	r3, #1
 800aed6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aede:	b29b      	uxth	r3, r3
 800aee0:	3b01      	subs	r3, #1
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1cb      	bne.n	800ae8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	2200      	movs	r2, #0
 800aefe:	2140      	movs	r1, #64	; 0x40
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f001 f91e 	bl	800c142 <UART_WaitOnFlagUntilTimeout>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e005      	b.n	800af1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2220      	movs	r2, #32
 800af14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e000      	b.n	800af1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800af1a:	2302      	movs	r3, #2
  }
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af02      	add	r7, sp, #8
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	4613      	mov	r3, r2
 800af32:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af38:	2b20      	cmp	r3, #32
 800af3a:	f040 80bf 	bne.w	800b0bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d002      	beq.n	800af4a <HAL_UART_Receive+0x26>
 800af44:	88fb      	ldrh	r3, [r7, #6]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e0b7      	b.n	800b0be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800af54:	2b01      	cmp	r3, #1
 800af56:	d101      	bne.n	800af5c <HAL_UART_Receive+0x38>
 800af58:	2302      	movs	r3, #2
 800af5a:	e0b0      	b.n	800b0be <HAL_UART_Receive+0x19a>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2201      	movs	r2, #1
 800af60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2222      	movs	r2, #34	; 0x22
 800af70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af78:	f7fa fab0 	bl	80054dc <HAL_GetTick>
 800af7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	88fa      	ldrh	r2, [r7, #6]
 800af82:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	88fa      	ldrh	r2, [r7, #6]
 800af8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af96:	d10e      	bne.n	800afb6 <HAL_UART_Receive+0x92>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <HAL_UART_Receive+0x88>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800afa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afaa:	e02d      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	22ff      	movs	r2, #255	; 0xff
 800afb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afb4:	e028      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10d      	bne.n	800afda <HAL_UART_Receive+0xb6>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d104      	bne.n	800afd0 <HAL_UART_Receive+0xac>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	22ff      	movs	r2, #255	; 0xff
 800afca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afce:	e01b      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	227f      	movs	r2, #127	; 0x7f
 800afd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800afd8:	e016      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe2:	d10d      	bne.n	800b000 <HAL_UART_Receive+0xdc>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d104      	bne.n	800aff6 <HAL_UART_Receive+0xd2>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	227f      	movs	r2, #127	; 0x7f
 800aff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aff4:	e008      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	223f      	movs	r2, #63	; 0x3f
 800affa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800affe:	e003      	b.n	800b008 <HAL_UART_Receive+0xe4>
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b00e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b018:	d108      	bne.n	800b02c <HAL_UART_Receive+0x108>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d104      	bne.n	800b02c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	61bb      	str	r3, [r7, #24]
 800b02a:	e003      	b.n	800b034 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b030:	2300      	movs	r3, #0
 800b032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b03c:	e033      	b.n	800b0a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2200      	movs	r2, #0
 800b046:	2120      	movs	r1, #32
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f001 f87a 	bl	800c142 <UART_WaitOnFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e032      	b.n	800b0be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10c      	bne.n	800b078 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b064:	b29a      	uxth	r2, r3
 800b066:	8a7b      	ldrh	r3, [r7, #18]
 800b068:	4013      	ands	r3, r2
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	3302      	adds	r3, #2
 800b074:	61bb      	str	r3, [r7, #24]
 800b076:	e00d      	b.n	800b094 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b07e:	b29b      	uxth	r3, r3
 800b080:	b2da      	uxtb	r2, r3
 800b082:	8a7b      	ldrh	r3, [r7, #18]
 800b084:	b2db      	uxtb	r3, r3
 800b086:	4013      	ands	r3, r2
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	3301      	adds	r3, #1
 800b092:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	3b01      	subs	r3, #1
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1c5      	bne.n	800b03e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e000      	b.n	800b0be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800b0bc:	2302      	movs	r3, #2
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b08b      	sub	sp, #44	; 0x2c
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0da:	2b20      	cmp	r3, #32
 800b0dc:	d156      	bne.n	800b18c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <HAL_UART_Transmit_IT+0x22>
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e04f      	b.n	800b18e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_UART_Transmit_IT+0x34>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e048      	b.n	800b18e <HAL_UART_Transmit_IT+0xc6>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	88fa      	ldrh	r2, [r7, #6]
 800b10e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	88fa      	ldrh	r2, [r7, #6]
 800b116:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2221      	movs	r2, #33	; 0x21
 800b12c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b136:	d107      	bne.n	800b148 <HAL_UART_Transmit_IT+0x80>
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d103      	bne.n	800b148 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	4a16      	ldr	r2, [pc, #88]	; (800b19c <HAL_UART_Transmit_IT+0xd4>)
 800b144:	669a      	str	r2, [r3, #104]	; 0x68
 800b146:	e002      	b.n	800b14e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4a15      	ldr	r2, [pc, #84]	; (800b1a0 <HAL_UART_Transmit_IT+0xd8>)
 800b14c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	e853 3f00 	ldrex	r3, [r3]
 800b162:	613b      	str	r3, [r7, #16]
   return(result);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	623b      	str	r3, [r7, #32]
 800b176:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	69f9      	ldr	r1, [r7, #28]
 800b17a:	6a3a      	ldr	r2, [r7, #32]
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	61bb      	str	r3, [r7, #24]
   return(result);
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e6      	bne.n	800b156 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	e000      	b.n	800b18e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b18c:	2302      	movs	r3, #2
  }
}
 800b18e:	4618      	mov	r0, r3
 800b190:	372c      	adds	r7, #44	; 0x2c
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	0800c6f3 	.word	0x0800c6f3
 800b1a0:	0800c63b 	.word	0x0800c63b

0800b1a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08a      	sub	sp, #40	; 0x28
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d142      	bne.n	800b240 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <HAL_UART_Receive_IT+0x22>
 800b1c0:	88fb      	ldrh	r3, [r7, #6]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e03b      	b.n	800b242 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d101      	bne.n	800b1d8 <HAL_UART_Receive_IT+0x34>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e034      	b.n	800b242 <HAL_UART_Receive_IT+0x9e>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a18      	ldr	r2, [pc, #96]	; (800b24c <HAL_UART_Receive_IT+0xa8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d01f      	beq.n	800b230 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d018      	beq.n	800b230 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	e853 3f00 	ldrex	r3, [r3]
 800b20a:	613b      	str	r3, [r7, #16]
   return(result);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	461a      	mov	r2, r3
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	623b      	str	r3, [r7, #32]
 800b21e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b220:	69f9      	ldr	r1, [r7, #28]
 800b222:	6a3a      	ldr	r2, [r7, #32]
 800b224:	e841 2300 	strex	r3, r2, [r1]
 800b228:	61bb      	str	r3, [r7, #24]
   return(result);
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1e6      	bne.n	800b1fe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b230:	88fb      	ldrh	r3, [r7, #6]
 800b232:	461a      	mov	r2, r3
 800b234:	68b9      	ldr	r1, [r7, #8]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f001 f848 	bl	800c2cc <UART_Start_Receive_IT>
 800b23c:	4603      	mov	r3, r0
 800b23e:	e000      	b.n	800b242 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b240:	2302      	movs	r3, #2
  }
}
 800b242:	4618      	mov	r0, r3
 800b244:	3728      	adds	r7, #40	; 0x28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	40008000 	.word	0x40008000

0800b250 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b0a2      	sub	sp, #136	; 0x88
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800b258:	2301      	movs	r3, #1
 800b25a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b266:	e853 3f00 	ldrex	r3, [r3]
 800b26a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b26c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b26e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800b272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	461a      	mov	r2, r3
 800b27c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b280:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b282:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b284:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b286:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b288:	e841 2300 	strex	r3, r2, [r1]
 800b28c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b28e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1e4      	bne.n	800b25e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3308      	adds	r3, #8
 800b29a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a6:	f023 0301 	bic.w	r3, r3, #1
 800b2aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b2b4:	65ba      	str	r2, [r7, #88]	; 0x58
 800b2b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e5      	bne.n	800b294 <HAL_UART_Abort_IT+0x44>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d118      	bne.n	800b302 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e0:	f023 0310 	bic.w	r3, r3, #16
 800b2e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b2f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e6      	bne.n	800b2d0 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00f      	beq.n	800b32a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b314:	2b80      	cmp	r3, #128	; 0x80
 800b316:	d104      	bne.n	800b322 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b31c:	4a5e      	ldr	r2, [pc, #376]	; (800b498 <HAL_UART_Abort_IT+0x248>)
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
 800b320:	e003      	b.n	800b32a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b326:	2200      	movs	r2, #0
 800b328:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00f      	beq.n	800b352 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33c:	2b40      	cmp	r3, #64	; 0x40
 800b33e:	d104      	bne.n	800b34a <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b344:	4a55      	ldr	r2, [pc, #340]	; (800b49c <HAL_UART_Abort_IT+0x24c>)
 800b346:	639a      	str	r2, [r3, #56]	; 0x38
 800b348:	e003      	b.n	800b352 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34e:	2200      	movs	r2, #0
 800b350:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b35c:	2b80      	cmp	r3, #128	; 0x80
 800b35e:	d12d      	bne.n	800b3bc <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	3308      	adds	r3, #8
 800b366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	e853 3f00 	ldrex	r3, [r3]
 800b36e:	623b      	str	r3, [r7, #32]
   return(result);
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b376:	677b      	str	r3, [r7, #116]	; 0x74
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3308      	adds	r3, #8
 800b37e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b380:	633a      	str	r2, [r7, #48]	; 0x30
 800b382:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b388:	e841 2300 	strex	r3, r2, [r1]
 800b38c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e5      	bne.n	800b360 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00f      	beq.n	800b3bc <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fb fdfa 	bl	8006f9a <HAL_DMA_Abort_IT>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
 800b3b4:	e002      	b.n	800b3bc <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c6:	2b40      	cmp	r3, #64	; 0x40
 800b3c8:	d130      	bne.n	800b42c <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3e0:	673b      	str	r3, [r7, #112]	; 0x70
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b3ea:	61fa      	str	r2, [r7, #28]
 800b3ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	69b9      	ldr	r1, [r7, #24]
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	617b      	str	r3, [r7, #20]
   return(result);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e5      	bne.n	800b3ca <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b402:	2b00      	cmp	r3, #0
 800b404:	d012      	beq.n	800b42c <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fb fdc5 	bl	8006f9a <HAL_DMA_Abort_IT>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d007      	beq.n	800b426 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41a:	2200      	movs	r2, #0
 800b41c:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 800b41e:	2301      	movs	r3, #1
 800b420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b424:	e002      	b.n	800b42c <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800b426:	2300      	movs	r3, #0
 800b428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800b42c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b430:	2b01      	cmp	r3, #1
 800b432:	d12b      	bne.n	800b48c <HAL_UART_Abort_IT+0x23c>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	665a      	str	r2, [r3, #100]	; 0x64
    huart->TxISR = NULL;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	220f      	movs	r2, #15
 800b45e:	621a      	str	r2, [r3, #32]
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	8b1b      	ldrh	r3, [r3, #24]
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 0208 	orr.w	r2, r2, #8
 800b470:	b292      	uxth	r2, r2
 800b472:	831a      	strh	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2220      	movs	r2, #32
 800b478:	679a      	str	r2, [r3, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2220      	movs	r2, #32
 800b47e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fb00 	bl	800ba8c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3788      	adds	r7, #136	; 0x88
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	0800c553 	.word	0x0800c553
 800b49c:	0800c5bd 	.word	0x0800c5bd

0800b4a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b0ba      	sub	sp, #232	; 0xe8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b4c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b4ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b4d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d115      	bne.n	800b508 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e0:	f003 0320 	and.w	r3, r3, #32
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00f      	beq.n	800b508 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b4e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ec:	f003 0320 	and.w	r3, r3, #32
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d009      	beq.n	800b508 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 82a6 	beq.w	800ba4a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
      }
      return;
 800b506:	e2a0      	b.n	800ba4a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8117 	beq.w	800b740 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d106      	bne.n	800b52c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b51e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b522:	4b85      	ldr	r3, [pc, #532]	; (800b738 <HAL_UART_IRQHandler+0x298>)
 800b524:	4013      	ands	r3, r2
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 810a 	beq.w	800b740 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b530:	f003 0301 	and.w	r3, r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	d011      	beq.n	800b55c <HAL_UART_IRQHandler+0xbc>
 800b538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2201      	movs	r2, #1
 800b54a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b552:	f043 0201 	orr.w	r2, r3, #1
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d011      	beq.n	800b58c <HAL_UART_IRQHandler+0xec>
 800b568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b56c:	f003 0301 	and.w	r3, r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d00b      	beq.n	800b58c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2202      	movs	r2, #2
 800b57a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b582:	f043 0204 	orr.w	r2, r3, #4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b58c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	2b00      	cmp	r3, #0
 800b596:	d011      	beq.n	800b5bc <HAL_UART_IRQHandler+0x11c>
 800b598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5b2:	f043 0202 	orr.w	r2, r3, #2
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d017      	beq.n	800b5f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b5c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5cc:	f003 0320 	and.w	r3, r3, #32
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b5d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00b      	beq.n	800b5f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2208      	movs	r2, #8
 800b5e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ee:	f043 0208 	orr.w	r2, r3, #8
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b600:	2b00      	cmp	r3, #0
 800b602:	d012      	beq.n	800b62a <HAL_UART_IRQHandler+0x18a>
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00c      	beq.n	800b62a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b620:	f043 0220 	orr.w	r2, r3, #32
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b630:	2b00      	cmp	r3, #0
 800b632:	f000 820c 	beq.w	800ba4e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63a:	f003 0320 	and.w	r3, r3, #32
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00d      	beq.n	800b65e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b646:	f003 0320 	and.w	r3, r3, #32
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b664:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b672:	2b40      	cmp	r3, #64	; 0x40
 800b674:	d005      	beq.n	800b682 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b67a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d04f      	beq.n	800b722 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 feec 	bl	800c460 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d141      	bne.n	800b71a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3308      	adds	r3, #8
 800b69c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b6ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	3308      	adds	r3, #8
 800b6be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b6c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b6ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b6d2:	e841 2300 	strex	r3, r2, [r1]
 800b6d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b6da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1d9      	bne.n	800b696 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d013      	beq.n	800b712 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6ee:	4a13      	ldr	r2, [pc, #76]	; (800b73c <HAL_UART_IRQHandler+0x29c>)
 800b6f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fb fc4f 	bl	8006f9a <HAL_DMA_Abort_IT>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d017      	beq.n	800b732 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b70c:	4610      	mov	r0, r2
 800b70e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b710:	e00f      	b.n	800b732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f9b0 	bl	800ba78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b718:	e00b      	b.n	800b732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f9ac 	bl	800ba78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b720:	e007      	b.n	800b732 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f9a8 	bl	800ba78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b730:	e18d      	b.n	800ba4e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b732:	bf00      	nop
    return;
 800b734:	e18b      	b.n	800ba4e <HAL_UART_IRQHandler+0x5ae>
 800b736:	bf00      	nop
 800b738:	04000120 	.word	0x04000120
 800b73c:	0800c527 	.word	0x0800c527

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b744:	2b01      	cmp	r3, #1
 800b746:	f040 8146 	bne.w	800b9d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b74a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 813f 	beq.w	800b9d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b75c:	f003 0310 	and.w	r3, r3, #16
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 8138 	beq.w	800b9d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2210      	movs	r2, #16
 800b76c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b778:	2b40      	cmp	r3, #64	; 0x40
 800b77a:	f040 80b4 	bne.w	800b8e6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b78a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f000 815f 	beq.w	800ba52 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b79a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	f080 8157 	bcs.w	800ba52 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f040 8085 	bne.w	800b8ca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7cc:	e853 3f00 	ldrex	r3, [r3]
 800b7d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7fa:	e841 2300 	strex	r3, r2, [r1]
 800b7fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1da      	bne.n	800b7c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3308      	adds	r3, #8
 800b810:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b814:	e853 3f00 	ldrex	r3, [r3]
 800b818:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b81a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b81c:	f023 0301 	bic.w	r3, r3, #1
 800b820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3308      	adds	r3, #8
 800b82a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b82e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b832:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b834:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b836:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b83a:	e841 2300 	strex	r3, r2, [r1]
 800b83e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1e1      	bne.n	800b80a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	3308      	adds	r3, #8
 800b84c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b850:	e853 3f00 	ldrex	r3, [r3]
 800b854:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b85c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3308      	adds	r3, #8
 800b866:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b86a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b86c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b86e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b870:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b872:	e841 2300 	strex	r3, r2, [r1]
 800b876:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1e3      	bne.n	800b846 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2220      	movs	r2, #32
 800b882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b89a:	f023 0310 	bic.w	r3, r3, #16
 800b89e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b8ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8b4:	e841 2300 	strex	r3, r2, [r1]
 800b8b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1e4      	bne.n	800b88a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f7fb fb2a 	bl	8006f1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f8de 	bl	800baa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8e4:	e0b5      	b.n	800ba52 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b900:	b29b      	uxth	r3, r3
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 80a7 	beq.w	800ba56 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 80a2 	beq.w	800ba56 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b934:	647b      	str	r3, [r7, #68]	; 0x44
 800b936:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b938:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b93a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b93c:	e841 2300 	strex	r3, r2, [r1]
 800b940:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1e4      	bne.n	800b912 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3308      	adds	r3, #8
 800b94e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	e853 3f00 	ldrex	r3, [r3]
 800b956:	623b      	str	r3, [r7, #32]
   return(result);
 800b958:	6a3b      	ldr	r3, [r7, #32]
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b96c:	633a      	str	r2, [r7, #48]	; 0x30
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e3      	bne.n	800b948 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2220      	movs	r2, #32
 800b984:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	e853 3f00 	ldrex	r3, [r3]
 800b99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f023 0310 	bic.w	r3, r3, #16
 800b9a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9b4:	61fb      	str	r3, [r7, #28]
 800b9b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	69b9      	ldr	r1, [r7, #24]
 800b9ba:	69fa      	ldr	r2, [r7, #28]
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e4      	bne.n	800b992 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f866 	bl	800baa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9d4:	e03f      	b.n	800ba56 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00e      	beq.n	800ba00 <HAL_UART_IRQHandler+0x560>
 800b9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d008      	beq.n	800ba00 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b9f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 f864 	bl	800cac6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9fe:	e02d      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ba00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00e      	beq.n	800ba2a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ba0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d008      	beq.n	800ba2a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d01c      	beq.n	800ba5a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	4798      	blx	r3
    }
    return;
 800ba28:	e017      	b.n	800ba5a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d012      	beq.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
 800ba36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00c      	beq.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 feb5 	bl	800c7b2 <UART_EndTransmit_IT>
    return;
 800ba48:	e008      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
      return;
 800ba4a:	bf00      	nop
 800ba4c:	e006      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
    return;
 800ba4e:	bf00      	nop
 800ba50:	e004      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
      return;
 800ba52:	bf00      	nop
 800ba54:	e002      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
      return;
 800ba56:	bf00      	nop
 800ba58:	e000      	b.n	800ba5c <HAL_UART_IRQHandler+0x5bc>
    return;
 800ba5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ba5c:	37e8      	adds	r7, #232	; 0xe8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop

0800ba64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ba94:	bf00      	nop
 800ba96:	370c      	adds	r7, #12
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr

0800baa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	460b      	mov	r3, r1
 800baaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800babc:	b08a      	sub	sp, #40	; 0x28
 800babe:	af00      	add	r7, sp, #0
 800bac0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	689a      	ldr	r2, [r3, #8]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	431a      	orrs	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	4313      	orrs	r3, r2
 800bade:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b9e      	ldr	r3, [pc, #632]	; (800bd60 <UART_SetConfig+0x2a8>)
 800bae8:	4013      	ands	r3, r2
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	6812      	ldr	r2, [r2, #0]
 800baee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800baf0:	430b      	orrs	r3, r1
 800baf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68da      	ldr	r2, [r3, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699b      	ldr	r3, [r3, #24]
 800bb0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a93      	ldr	r2, [pc, #588]	; (800bd64 <UART_SetConfig+0x2ac>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d004      	beq.n	800bb24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb20:	4313      	orrs	r3, r2
 800bb22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb34:	430a      	orrs	r2, r1
 800bb36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a8a      	ldr	r2, [pc, #552]	; (800bd68 <UART_SetConfig+0x2b0>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d126      	bne.n	800bb90 <UART_SetConfig+0xd8>
 800bb42:	4b8a      	ldr	r3, [pc, #552]	; (800bd6c <UART_SetConfig+0x2b4>)
 800bb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb48:	f003 0303 	and.w	r3, r3, #3
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d81b      	bhi.n	800bb88 <UART_SetConfig+0xd0>
 800bb50:	a201      	add	r2, pc, #4	; (adr r2, 800bb58 <UART_SetConfig+0xa0>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bb69 	.word	0x0800bb69
 800bb5c:	0800bb79 	.word	0x0800bb79
 800bb60:	0800bb71 	.word	0x0800bb71
 800bb64:	0800bb81 	.word	0x0800bb81
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb6e:	e0ab      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bb70:	2302      	movs	r3, #2
 800bb72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb76:	e0a7      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bb78:	2304      	movs	r3, #4
 800bb7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb7e:	e0a3      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bb80:	2308      	movs	r3, #8
 800bb82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb86:	e09f      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bb88:	2310      	movs	r3, #16
 800bb8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb8e:	e09b      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a76      	ldr	r2, [pc, #472]	; (800bd70 <UART_SetConfig+0x2b8>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d138      	bne.n	800bc0c <UART_SetConfig+0x154>
 800bb9a:	4b74      	ldr	r3, [pc, #464]	; (800bd6c <UART_SetConfig+0x2b4>)
 800bb9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba0:	f003 030c 	and.w	r3, r3, #12
 800bba4:	2b0c      	cmp	r3, #12
 800bba6:	d82d      	bhi.n	800bc04 <UART_SetConfig+0x14c>
 800bba8:	a201      	add	r2, pc, #4	; (adr r2, 800bbb0 <UART_SetConfig+0xf8>)
 800bbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbae:	bf00      	nop
 800bbb0:	0800bbe5 	.word	0x0800bbe5
 800bbb4:	0800bc05 	.word	0x0800bc05
 800bbb8:	0800bc05 	.word	0x0800bc05
 800bbbc:	0800bc05 	.word	0x0800bc05
 800bbc0:	0800bbf5 	.word	0x0800bbf5
 800bbc4:	0800bc05 	.word	0x0800bc05
 800bbc8:	0800bc05 	.word	0x0800bc05
 800bbcc:	0800bc05 	.word	0x0800bc05
 800bbd0:	0800bbed 	.word	0x0800bbed
 800bbd4:	0800bc05 	.word	0x0800bc05
 800bbd8:	0800bc05 	.word	0x0800bc05
 800bbdc:	0800bc05 	.word	0x0800bc05
 800bbe0:	0800bbfd 	.word	0x0800bbfd
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bbea:	e06d      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bbec:	2302      	movs	r3, #2
 800bbee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bbf2:	e069      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bbfa:	e065      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc02:	e061      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc04:	2310      	movs	r3, #16
 800bc06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc0a:	e05d      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a58      	ldr	r2, [pc, #352]	; (800bd74 <UART_SetConfig+0x2bc>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d125      	bne.n	800bc62 <UART_SetConfig+0x1aa>
 800bc16:	4b55      	ldr	r3, [pc, #340]	; (800bd6c <UART_SetConfig+0x2b4>)
 800bc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc20:	2b30      	cmp	r3, #48	; 0x30
 800bc22:	d016      	beq.n	800bc52 <UART_SetConfig+0x19a>
 800bc24:	2b30      	cmp	r3, #48	; 0x30
 800bc26:	d818      	bhi.n	800bc5a <UART_SetConfig+0x1a2>
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	d00a      	beq.n	800bc42 <UART_SetConfig+0x18a>
 800bc2c:	2b20      	cmp	r3, #32
 800bc2e:	d814      	bhi.n	800bc5a <UART_SetConfig+0x1a2>
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <UART_SetConfig+0x182>
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d008      	beq.n	800bc4a <UART_SetConfig+0x192>
 800bc38:	e00f      	b.n	800bc5a <UART_SetConfig+0x1a2>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc40:	e042      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc42:	2302      	movs	r3, #2
 800bc44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc48:	e03e      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc4a:	2304      	movs	r3, #4
 800bc4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc50:	e03a      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc52:	2308      	movs	r3, #8
 800bc54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc58:	e036      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc5a:	2310      	movs	r3, #16
 800bc5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc60:	e032      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	4a3f      	ldr	r2, [pc, #252]	; (800bd64 <UART_SetConfig+0x2ac>)
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d12a      	bne.n	800bcc2 <UART_SetConfig+0x20a>
 800bc6c:	4b3f      	ldr	r3, [pc, #252]	; (800bd6c <UART_SetConfig+0x2b4>)
 800bc6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc7a:	d01a      	beq.n	800bcb2 <UART_SetConfig+0x1fa>
 800bc7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc80:	d81b      	bhi.n	800bcba <UART_SetConfig+0x202>
 800bc82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc86:	d00c      	beq.n	800bca2 <UART_SetConfig+0x1ea>
 800bc88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc8c:	d815      	bhi.n	800bcba <UART_SetConfig+0x202>
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <UART_SetConfig+0x1e2>
 800bc92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc96:	d008      	beq.n	800bcaa <UART_SetConfig+0x1f2>
 800bc98:	e00f      	b.n	800bcba <UART_SetConfig+0x202>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bca0:	e012      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bca2:	2302      	movs	r3, #2
 800bca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bca8:	e00e      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bcaa:	2304      	movs	r3, #4
 800bcac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcb0:	e00a      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bcb2:	2308      	movs	r3, #8
 800bcb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcb8:	e006      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bcba:	2310      	movs	r3, #16
 800bcbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcc0:	e002      	b.n	800bcc8 <UART_SetConfig+0x210>
 800bcc2:	2310      	movs	r3, #16
 800bcc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a25      	ldr	r2, [pc, #148]	; (800bd64 <UART_SetConfig+0x2ac>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	f040 808a 	bne.w	800bde8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bcd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcd8:	2b08      	cmp	r3, #8
 800bcda:	d824      	bhi.n	800bd26 <UART_SetConfig+0x26e>
 800bcdc:	a201      	add	r2, pc, #4	; (adr r2, 800bce4 <UART_SetConfig+0x22c>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bd09 	.word	0x0800bd09
 800bce8:	0800bd27 	.word	0x0800bd27
 800bcec:	0800bd11 	.word	0x0800bd11
 800bcf0:	0800bd27 	.word	0x0800bd27
 800bcf4:	0800bd17 	.word	0x0800bd17
 800bcf8:	0800bd27 	.word	0x0800bd27
 800bcfc:	0800bd27 	.word	0x0800bd27
 800bd00:	0800bd27 	.word	0x0800bd27
 800bd04:	0800bd1f 	.word	0x0800bd1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd08:	f7fd f9be 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 800bd0c:	61f8      	str	r0, [r7, #28]
        break;
 800bd0e:	e010      	b.n	800bd32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd10:	4b19      	ldr	r3, [pc, #100]	; (800bd78 <UART_SetConfig+0x2c0>)
 800bd12:	61fb      	str	r3, [r7, #28]
        break;
 800bd14:	e00d      	b.n	800bd32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd16:	f7fd f91f 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 800bd1a:	61f8      	str	r0, [r7, #28]
        break;
 800bd1c:	e009      	b.n	800bd32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd22:	61fb      	str	r3, [r7, #28]
        break;
 800bd24:	e005      	b.n	800bd32 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bd30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8109 	beq.w	800bf4c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	4413      	add	r3, r2
 800bd44:	69fa      	ldr	r2, [r7, #28]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d305      	bcc.n	800bd56 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d912      	bls.n	800bd7c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bd5c:	e0f6      	b.n	800bf4c <UART_SetConfig+0x494>
 800bd5e:	bf00      	nop
 800bd60:	efff69f3 	.word	0xefff69f3
 800bd64:	40008000 	.word	0x40008000
 800bd68:	40013800 	.word	0x40013800
 800bd6c:	40021000 	.word	0x40021000
 800bd70:	40004400 	.word	0x40004400
 800bd74:	40004800 	.word	0x40004800
 800bd78:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	461c      	mov	r4, r3
 800bd82:	4615      	mov	r5, r2
 800bd84:	f04f 0200 	mov.w	r2, #0
 800bd88:	f04f 0300 	mov.w	r3, #0
 800bd8c:	022b      	lsls	r3, r5, #8
 800bd8e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bd92:	0222      	lsls	r2, r4, #8
 800bd94:	68f9      	ldr	r1, [r7, #12]
 800bd96:	6849      	ldr	r1, [r1, #4]
 800bd98:	0849      	lsrs	r1, r1, #1
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	4688      	mov	r8, r1
 800bd9e:	4681      	mov	r9, r0
 800bda0:	eb12 0a08 	adds.w	sl, r2, r8
 800bda4:	eb43 0b09 	adc.w	fp, r3, r9
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdb6:	4650      	mov	r0, sl
 800bdb8:	4659      	mov	r1, fp
 800bdba:	f7f4 ff65 	bl	8000c88 <__aeabi_uldivmod>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdc6:	69bb      	ldr	r3, [r7, #24]
 800bdc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdcc:	d308      	bcc.n	800bde0 <UART_SetConfig+0x328>
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdd4:	d204      	bcs.n	800bde0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	60da      	str	r2, [r3, #12]
 800bdde:	e0b5      	b.n	800bf4c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bde6:	e0b1      	b.n	800bf4c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdf0:	d15d      	bne.n	800beae <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800bdf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdf6:	2b08      	cmp	r3, #8
 800bdf8:	d827      	bhi.n	800be4a <UART_SetConfig+0x392>
 800bdfa:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <UART_SetConfig+0x348>)
 800bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be00:	0800be25 	.word	0x0800be25
 800be04:	0800be2d 	.word	0x0800be2d
 800be08:	0800be35 	.word	0x0800be35
 800be0c:	0800be4b 	.word	0x0800be4b
 800be10:	0800be3b 	.word	0x0800be3b
 800be14:	0800be4b 	.word	0x0800be4b
 800be18:	0800be4b 	.word	0x0800be4b
 800be1c:	0800be4b 	.word	0x0800be4b
 800be20:	0800be43 	.word	0x0800be43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be24:	f7fd f930 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 800be28:	61f8      	str	r0, [r7, #28]
        break;
 800be2a:	e014      	b.n	800be56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be2c:	f7fd f942 	bl	80090b4 <HAL_RCC_GetPCLK2Freq>
 800be30:	61f8      	str	r0, [r7, #28]
        break;
 800be32:	e010      	b.n	800be56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be34:	4b4c      	ldr	r3, [pc, #304]	; (800bf68 <UART_SetConfig+0x4b0>)
 800be36:	61fb      	str	r3, [r7, #28]
        break;
 800be38:	e00d      	b.n	800be56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be3a:	f7fd f88d 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 800be3e:	61f8      	str	r0, [r7, #28]
        break;
 800be40:	e009      	b.n	800be56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be46:	61fb      	str	r3, [r7, #28]
        break;
 800be48:	e005      	b.n	800be56 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800be4a:	2300      	movs	r3, #0
 800be4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800be54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d077      	beq.n	800bf4c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	005a      	lsls	r2, r3, #1
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	085b      	lsrs	r3, r3, #1
 800be66:	441a      	add	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b0f      	cmp	r3, #15
 800be76:	d916      	bls.n	800bea6 <UART_SetConfig+0x3ee>
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be7e:	d212      	bcs.n	800bea6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	b29b      	uxth	r3, r3
 800be84:	f023 030f 	bic.w	r3, r3, #15
 800be88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	085b      	lsrs	r3, r3, #1
 800be8e:	b29b      	uxth	r3, r3
 800be90:	f003 0307 	and.w	r3, r3, #7
 800be94:	b29a      	uxth	r2, r3
 800be96:	8afb      	ldrh	r3, [r7, #22]
 800be98:	4313      	orrs	r3, r2
 800be9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	8afa      	ldrh	r2, [r7, #22]
 800bea2:	60da      	str	r2, [r3, #12]
 800bea4:	e052      	b.n	800bf4c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800beac:	e04e      	b.n	800bf4c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800beae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800beb2:	2b08      	cmp	r3, #8
 800beb4:	d827      	bhi.n	800bf06 <UART_SetConfig+0x44e>
 800beb6:	a201      	add	r2, pc, #4	; (adr r2, 800bebc <UART_SetConfig+0x404>)
 800beb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bebc:	0800bee1 	.word	0x0800bee1
 800bec0:	0800bee9 	.word	0x0800bee9
 800bec4:	0800bef1 	.word	0x0800bef1
 800bec8:	0800bf07 	.word	0x0800bf07
 800becc:	0800bef7 	.word	0x0800bef7
 800bed0:	0800bf07 	.word	0x0800bf07
 800bed4:	0800bf07 	.word	0x0800bf07
 800bed8:	0800bf07 	.word	0x0800bf07
 800bedc:	0800beff 	.word	0x0800beff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bee0:	f7fd f8d2 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 800bee4:	61f8      	str	r0, [r7, #28]
        break;
 800bee6:	e014      	b.n	800bf12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bee8:	f7fd f8e4 	bl	80090b4 <HAL_RCC_GetPCLK2Freq>
 800beec:	61f8      	str	r0, [r7, #28]
        break;
 800beee:	e010      	b.n	800bf12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bef0:	4b1d      	ldr	r3, [pc, #116]	; (800bf68 <UART_SetConfig+0x4b0>)
 800bef2:	61fb      	str	r3, [r7, #28]
        break;
 800bef4:	e00d      	b.n	800bf12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bef6:	f7fd f82f 	bl	8008f58 <HAL_RCC_GetSysClockFreq>
 800befa:	61f8      	str	r0, [r7, #28]
        break;
 800befc:	e009      	b.n	800bf12 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800befe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf02:	61fb      	str	r3, [r7, #28]
        break;
 800bf04:	e005      	b.n	800bf12 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bf10:	bf00      	nop
    }

    if (pclk != 0U)
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d019      	beq.n	800bf4c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	085a      	lsrs	r2, r3, #1
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	441a      	add	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	2b0f      	cmp	r3, #15
 800bf30:	d909      	bls.n	800bf46 <UART_SetConfig+0x48e>
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf38:	d205      	bcs.n	800bf46 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60da      	str	r2, [r3, #12]
 800bf44:	e002      	b.n	800bf4c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800bf46:	2301      	movs	r3, #1
 800bf48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bf58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3728      	adds	r7, #40	; 0x28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf66:	bf00      	nop
 800bf68:	00f42400 	.word	0x00f42400

0800bf6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf78:	f003 0301 	and.w	r3, r3, #1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00a      	beq.n	800bf96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	f003 0304 	and.w	r3, r3, #4
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00a      	beq.n	800bfda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfde:	f003 0308 	and.w	r3, r3, #8
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00a      	beq.n	800bffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	f003 0310 	and.w	r3, r3, #16
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00a      	beq.n	800c01e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c022:	f003 0320 	and.w	r3, r3, #32
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	430a      	orrs	r2, r1
 800c03e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d01a      	beq.n	800c082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c06a:	d10a      	bne.n	800c082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	430a      	orrs	r2, r1
 800c080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00a      	beq.n	800c0a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	430a      	orrs	r2, r1
 800c0a2:	605a      	str	r2, [r3, #4]
  }
}
 800c0a4:	bf00      	nop
 800c0a6:	370c      	adds	r7, #12
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ae:	4770      	bx	lr

0800c0b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af02      	add	r7, sp, #8
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c0c0:	f7f9 fa0c 	bl	80054dc <HAL_GetTick>
 800c0c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0308 	and.w	r3, r3, #8
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d10e      	bne.n	800c0f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f82d 	bl	800c142 <UART_WaitOnFlagUntilTimeout>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	e023      	b.n	800c13a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	d10e      	bne.n	800c11e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f817 	bl	800c142 <UART_WaitOnFlagUntilTimeout>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d001      	beq.n	800c11e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e00d      	b.n	800c13a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2220      	movs	r2, #32
 800c122:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2220      	movs	r2, #32
 800c128:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b09c      	sub	sp, #112	; 0x70
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	603b      	str	r3, [r7, #0]
 800c14e:	4613      	mov	r3, r2
 800c150:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c152:	e0a5      	b.n	800c2a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15a:	f000 80a1 	beq.w	800c2a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c15e:	f7f9 f9bd 	bl	80054dc <HAL_GetTick>
 800c162:	4602      	mov	r2, r0
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d302      	bcc.n	800c174 <UART_WaitOnFlagUntilTimeout+0x32>
 800c16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c170:	2b00      	cmp	r3, #0
 800c172:	d13e      	bne.n	800c1f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17c:	e853 3f00 	ldrex	r3, [r3]
 800c180:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c184:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c188:	667b      	str	r3, [r7, #100]	; 0x64
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c192:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c194:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c198:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c19a:	e841 2300 	strex	r3, r2, [r1]
 800c19e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1e6      	bne.n	800c174 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	f023 0301 	bic.w	r3, r3, #1
 800c1bc:	663b      	str	r3, [r7, #96]	; 0x60
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800c1c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e5      	bne.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2220      	movs	r2, #32
 800c1e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	e067      	b.n	800c2c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0304 	and.w	r3, r3, #4
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d04f      	beq.n	800c2a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c20a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c20e:	d147      	bne.n	800c2a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c218:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c22e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	461a      	mov	r2, r3
 800c236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c238:	637b      	str	r3, [r7, #52]	; 0x34
 800c23a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c240:	e841 2300 	strex	r3, r2, [r1]
 800c244:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1e6      	bne.n	800c21a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3308      	adds	r3, #8
 800c252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	613b      	str	r3, [r7, #16]
   return(result);
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f023 0301 	bic.w	r3, r3, #1
 800c262:	66bb      	str	r3, [r7, #104]	; 0x68
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	3308      	adds	r3, #8
 800c26a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c26c:	623a      	str	r2, [r7, #32]
 800c26e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c270:	69f9      	ldr	r1, [r7, #28]
 800c272:	6a3a      	ldr	r2, [r7, #32]
 800c274:	e841 2300 	strex	r3, r2, [r1]
 800c278:	61bb      	str	r3, [r7, #24]
   return(result);
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d1e5      	bne.n	800c24c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2220      	movs	r2, #32
 800c284:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2220      	movs	r2, #32
 800c28a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2220      	movs	r2, #32
 800c290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c29c:	2303      	movs	r3, #3
 800c29e:	e010      	b.n	800c2c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	69da      	ldr	r2, [r3, #28]
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	4013      	ands	r3, r2
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	bf0c      	ite	eq
 800c2b0:	2301      	moveq	r3, #1
 800c2b2:	2300      	movne	r3, #0
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	f43f af4a 	beq.w	800c154 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3770      	adds	r7, #112	; 0x70
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
	...

0800c2cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b097      	sub	sp, #92	; 0x5c
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	88fa      	ldrh	r2, [r7, #6]
 800c2e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	88fa      	ldrh	r2, [r7, #6]
 800c2ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2fe:	d10e      	bne.n	800c31e <UART_Start_Receive_IT+0x52>
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	691b      	ldr	r3, [r3, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <UART_Start_Receive_IT+0x48>
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c30e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c312:	e02d      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	22ff      	movs	r2, #255	; 0xff
 800c318:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c31c:	e028      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10d      	bne.n	800c342 <UART_Start_Receive_IT+0x76>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d104      	bne.n	800c338 <UART_Start_Receive_IT+0x6c>
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	22ff      	movs	r2, #255	; 0xff
 800c332:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c336:	e01b      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	227f      	movs	r2, #127	; 0x7f
 800c33c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c340:	e016      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c34a:	d10d      	bne.n	800c368 <UART_Start_Receive_IT+0x9c>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <UART_Start_Receive_IT+0x92>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	227f      	movs	r2, #127	; 0x7f
 800c358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c35c:	e008      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	223f      	movs	r2, #63	; 0x3f
 800c362:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c366:	e003      	b.n	800c370 <UART_Start_Receive_IT+0xa4>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2222      	movs	r2, #34	; 0x22
 800c37c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3308      	adds	r3, #8
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c388:	e853 3f00 	ldrex	r3, [r3]
 800c38c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	f043 0301 	orr.w	r3, r3, #1
 800c394:	657b      	str	r3, [r7, #84]	; 0x54
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c39e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c3a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3a6:	e841 2300 	strex	r3, r2, [r1]
 800c3aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1e5      	bne.n	800c37e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3ba:	d107      	bne.n	800c3cc <UART_Start_Receive_IT+0x100>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d103      	bne.n	800c3cc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	4a24      	ldr	r2, [pc, #144]	; (800c458 <UART_Start_Receive_IT+0x18c>)
 800c3c8:	665a      	str	r2, [r3, #100]	; 0x64
 800c3ca:	e002      	b.n	800c3d2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4a23      	ldr	r2, [pc, #140]	; (800c45c <UART_Start_Receive_IT+0x190>)
 800c3d0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d019      	beq.n	800c416 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c3f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c400:	637b      	str	r3, [r7, #52]	; 0x34
 800c402:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e6      	bne.n	800c3e2 <UART_Start_Receive_IT+0x116>
 800c414:	e018      	b.n	800c448 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	613b      	str	r3, [r7, #16]
   return(result);
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	f043 0320 	orr.w	r3, r3, #32
 800c42a:	653b      	str	r3, [r7, #80]	; 0x50
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	461a      	mov	r2, r3
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	623b      	str	r3, [r7, #32]
 800c436:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	69f9      	ldr	r1, [r7, #28]
 800c43a:	6a3a      	ldr	r2, [r7, #32]
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	61bb      	str	r3, [r7, #24]
   return(result);
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e6      	bne.n	800c416 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	375c      	adds	r7, #92	; 0x5c
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	0800c967 	.word	0x0800c967
 800c45c:	0800c807 	.word	0x0800c807

0800c460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c460:	b480      	push	{r7}
 800c462:	b095      	sub	sp, #84	; 0x54
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c470:	e853 3f00 	ldrex	r3, [r3]
 800c474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c47c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c486:	643b      	str	r3, [r7, #64]	; 0x40
 800c488:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c48c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1e6      	bne.n	800c468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	3308      	adds	r3, #8
 800c4a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	e853 3f00 	ldrex	r3, [r3]
 800c4a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	f023 0301 	bic.w	r3, r3, #1
 800c4b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	3308      	adds	r3, #8
 800c4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e5      	bne.n	800c49a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d118      	bne.n	800c508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	e853 3f00 	ldrex	r3, [r3]
 800c4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f023 0310 	bic.w	r3, r3, #16
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f4:	61bb      	str	r3, [r7, #24]
 800c4f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	6979      	ldr	r1, [r7, #20]
 800c4fa:	69ba      	ldr	r2, [r7, #24]
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	613b      	str	r3, [r7, #16]
   return(result);
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e6      	bne.n	800c4d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c51a:	bf00      	nop
 800c51c:	3754      	adds	r7, #84	; 0x54
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c532:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7ff fa97 	bl	800ba78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c54a:	bf00      	nop
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c564:	2200      	movs	r2, #0
 800c566:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d004      	beq.n	800c57a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	2b00      	cmp	r3, #0
 800c578:	d11c      	bne.n	800c5b4 <UART_DMATxAbortCallback+0x62>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	220f      	movs	r2, #15
 800c598:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2220      	movs	r2, #32
 800c59e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7ff fa6d 	bl	800ba8c <HAL_UART_AbortCpltCallback>
 800c5b2:	e000      	b.n	800c5b6 <UART_DMATxAbortCallback+0x64>
      return;
 800c5b4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c8:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d004      	beq.n	800c5e4 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d126      	bne.n	800c632 <UART_DMARxAbortCallback+0x76>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	220f      	movs	r2, #15
 800c602:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	8b1b      	ldrh	r3, [r3, #24]
 800c60a:	b29a      	uxth	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f042 0208 	orr.w	r2, r2, #8
 800c614:	b292      	uxth	r2, r2
 800c616:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2220      	movs	r2, #32
 800c61c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2220      	movs	r2, #32
 800c622:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff fa2e 	bl	800ba8c <HAL_UART_AbortCpltCallback>
 800c630:	e000      	b.n	800c634 <UART_DMARxAbortCallback+0x78>
      return;
 800c632:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b08f      	sub	sp, #60	; 0x3c
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c646:	2b21      	cmp	r3, #33	; 0x21
 800c648:	d14d      	bne.n	800c6e6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c650:	b29b      	uxth	r3, r3
 800c652:	2b00      	cmp	r3, #0
 800c654:	d132      	bne.n	800c6bc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	e853 3f00 	ldrex	r3, [r3]
 800c662:	61fb      	str	r3, [r7, #28]
   return(result);
 800c664:	69fb      	ldr	r3, [r7, #28]
 800c666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c66a:	637b      	str	r3, [r7, #52]	; 0x34
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	461a      	mov	r2, r3
 800c672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c674:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c676:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67c:	e841 2300 	strex	r3, r2, [r1]
 800c680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1e6      	bne.n	800c656 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	60bb      	str	r3, [r7, #8]
   return(result);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c69c:	633b      	str	r3, [r7, #48]	; 0x30
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	61bb      	str	r3, [r7, #24]
 800c6a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6979      	ldr	r1, [r7, #20]
 800c6ac:	69ba      	ldr	r2, [r7, #24]
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e6      	bne.n	800c688 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c6ba:	e014      	b.n	800c6e6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6c0:	781a      	ldrb	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	b292      	uxth	r2, r2
 800c6c8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ce:	1c5a      	adds	r2, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	3b01      	subs	r3, #1
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c6e6:	bf00      	nop
 800c6e8:	373c      	adds	r7, #60	; 0x3c
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b091      	sub	sp, #68	; 0x44
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6fe:	2b21      	cmp	r3, #33	; 0x21
 800c700:	d151      	bne.n	800c7a6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c708:	b29b      	uxth	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d132      	bne.n	800c774 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	623b      	str	r3, [r7, #32]
   return(result);
 800c71c:	6a3b      	ldr	r3, [r7, #32]
 800c71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c722:	63bb      	str	r3, [r7, #56]	; 0x38
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	633b      	str	r3, [r7, #48]	; 0x30
 800c72e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c730:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c734:	e841 2300 	strex	r3, r2, [r1]
 800c738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1e6      	bne.n	800c70e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	e853 3f00 	ldrex	r3, [r3]
 800c74c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c754:	637b      	str	r3, [r7, #52]	; 0x34
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75e:	61fb      	str	r3, [r7, #28]
 800c760:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c762:	69b9      	ldr	r1, [r7, #24]
 800c764:	69fa      	ldr	r2, [r7, #28]
 800c766:	e841 2300 	strex	r3, r2, [r1]
 800c76a:	617b      	str	r3, [r7, #20]
   return(result);
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1e6      	bne.n	800c740 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c772:	e018      	b.n	800c7a6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c77c:	881a      	ldrh	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c786:	b292      	uxth	r2, r2
 800c788:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c78e:	1c9a      	adds	r2, r3, #2
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3b01      	subs	r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c7a6:	bf00      	nop
 800c7a8:	3744      	adds	r7, #68	; 0x44
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr

0800c7b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b088      	sub	sp, #32
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	e853 3f00 	ldrex	r3, [r3]
 800c7c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	61bb      	str	r3, [r7, #24]
 800c7da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7dc:	6979      	ldr	r1, [r7, #20]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	e841 2300 	strex	r3, r2, [r1]
 800c7e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1e6      	bne.n	800c7ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2220      	movs	r2, #32
 800c7f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7ff f933 	bl	800ba64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7fe:	bf00      	nop
 800c800:	3720      	adds	r7, #32
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}

0800c806 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c806:	b580      	push	{r7, lr}
 800c808:	b096      	sub	sp, #88	; 0x58
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c814:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c81c:	2b22      	cmp	r3, #34	; 0x22
 800c81e:	f040 8094 	bne.w	800c94a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c828:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c82c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c830:	b2d9      	uxtb	r1, r3
 800c832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c836:	b2da      	uxtb	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83c:	400a      	ands	r2, r1
 800c83e:	b2d2      	uxtb	r2, r2
 800c840:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c852:	b29b      	uxth	r3, r3
 800c854:	3b01      	subs	r3, #1
 800c856:	b29a      	uxth	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c864:	b29b      	uxth	r3, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	d179      	bne.n	800c95e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c872:	e853 3f00 	ldrex	r3, [r3]
 800c876:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c87e:	653b      	str	r3, [r7, #80]	; 0x50
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	461a      	mov	r2, r3
 800c886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c888:	647b      	str	r3, [r7, #68]	; 0x44
 800c88a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c890:	e841 2300 	strex	r3, r2, [r1]
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e6      	bne.n	800c86a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a6:	e853 3f00 	ldrex	r3, [r3]
 800c8aa:	623b      	str	r3, [r7, #32]
   return(result);
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	f023 0301 	bic.w	r3, r3, #1
 800c8b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3308      	adds	r3, #8
 800c8ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8bc:	633a      	str	r2, [r7, #48]	; 0x30
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e5      	bne.n	800c89c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d12e      	bne.n	800c942 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f023 0310 	bic.w	r3, r3, #16
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c908:	61fb      	str	r3, [r7, #28]
 800c90a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	69b9      	ldr	r1, [r7, #24]
 800c90e:	69fa      	ldr	r2, [r7, #28]
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	617b      	str	r3, [r7, #20]
   return(result);
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e6      	bne.n	800c8ea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	f003 0310 	and.w	r3, r3, #16
 800c926:	2b10      	cmp	r3, #16
 800c928:	d103      	bne.n	800c932 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2210      	movs	r2, #16
 800c930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c938:	4619      	mov	r1, r3
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff f8b0 	bl	800baa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c940:	e00d      	b.n	800c95e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7f6 f800 	bl	8002948 <HAL_UART_RxCpltCallback>
}
 800c948:	e009      	b.n	800c95e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	8b1b      	ldrh	r3, [r3, #24]
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f042 0208 	orr.w	r2, r2, #8
 800c95a:	b292      	uxth	r2, r2
 800c95c:	831a      	strh	r2, [r3, #24]
}
 800c95e:	bf00      	nop
 800c960:	3758      	adds	r7, #88	; 0x58
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b096      	sub	sp, #88	; 0x58
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c974:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c97c:	2b22      	cmp	r3, #34	; 0x22
 800c97e:	f040 8094 	bne.w	800caaa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c988:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c990:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c992:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c99a:	4013      	ands	r3, r2
 800c99c:	b29a      	uxth	r2, r3
 800c99e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	1c9a      	adds	r2, r3, #2
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d179      	bne.n	800cabe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c9de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9e8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c9ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9f0:	e841 2300 	strex	r3, r2, [r1]
 800c9f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e6      	bne.n	800c9ca <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3308      	adds	r3, #8
 800ca02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	e853 3f00 	ldrex	r3, [r3]
 800ca0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	f023 0301 	bic.w	r3, r3, #1
 800ca12:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca24:	e841 2300 	strex	r3, r2, [r1]
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d1e5      	bne.n	800c9fc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2220      	movs	r2, #32
 800ca34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d12e      	bne.n	800caa2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f023 0310 	bic.w	r3, r3, #16
 800ca5e:	647b      	str	r3, [r7, #68]	; 0x44
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	461a      	mov	r2, r3
 800ca66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca68:	61bb      	str	r3, [r7, #24]
 800ca6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	6979      	ldr	r1, [r7, #20]
 800ca6e:	69ba      	ldr	r2, [r7, #24]
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	613b      	str	r3, [r7, #16]
   return(result);
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e6      	bne.n	800ca4a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	f003 0310 	and.w	r3, r3, #16
 800ca86:	2b10      	cmp	r3, #16
 800ca88:	d103      	bne.n	800ca92 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2210      	movs	r2, #16
 800ca90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff f800 	bl	800baa0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caa0:	e00d      	b.n	800cabe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7f5 ff50 	bl	8002948 <HAL_UART_RxCpltCallback>
}
 800caa8:	e009      	b.n	800cabe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	8b1b      	ldrh	r3, [r3, #24]
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f042 0208 	orr.w	r2, r2, #8
 800caba:	b292      	uxth	r2, r2
 800cabc:	831a      	strh	r2, [r3, #24]
}
 800cabe:	bf00      	nop
 800cac0:	3758      	adds	r7, #88	; 0x58
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
	...

0800cadc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cae0:	4904      	ldr	r1, [pc, #16]	; (800caf4 <MX_FATFS_Init+0x18>)
 800cae2:	4805      	ldr	r0, [pc, #20]	; (800caf8 <MX_FATFS_Init+0x1c>)
 800cae4:	f000 f8ae 	bl	800cc44 <FATFS_LinkDriver>
 800cae8:	4603      	mov	r3, r0
 800caea:	461a      	mov	r2, r3
 800caec:	4b03      	ldr	r3, [pc, #12]	; (800cafc <MX_FATFS_Init+0x20>)
 800caee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800caf0:	bf00      	nop
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	2000079c 	.word	0x2000079c
 800caf8:	20000030 	.word	0x20000030
 800cafc:	20000798 	.word	0x20000798

0800cb00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 800cb0a:	79fb      	ldrb	r3, [r7, #7]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f8 f861 	bl	8004bd4 <SD_disk_initialize>
 800cb12:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	4603      	mov	r3, r0
 800cb24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800cb26:	79fb      	ldrb	r3, [r7, #7]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7f8 f93f 	bl	8004dac <SD_disk_status>
 800cb2e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800cb48:	7bf8      	ldrb	r0, [r7, #15]
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	f7f8 f942 	bl	8004dd8 <SD_disk_read>
 800cb54:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800cb6e:	7bf8      	ldrb	r0, [r7, #15]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	f7f8 f999 	bl	8004eac <SD_disk_write>
 800cb7a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	603a      	str	r2, [r7, #0]
 800cb8e:	71fb      	strb	r3, [r7, #7]
 800cb90:	460b      	mov	r3, r1
 800cb92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800cb94:	79b9      	ldrb	r1, [r7, #6]
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7f8 fa0a 	bl	8004fb4 <SD_disk_ioctl>
 800cba0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
	...

0800cbac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbc2:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbc4:	7a5b      	ldrb	r3, [r3, #9]
 800cbc6:	b2db      	uxtb	r3, r3
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d131      	bne.n	800cc30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cbcc:	4b1c      	ldr	r3, [pc, #112]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbce:	7a5b      	ldrb	r3, [r3, #9]
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cbda:	4b19      	ldr	r3, [pc, #100]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbdc:	7a5b      	ldrb	r3, [r3, #9]
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	4a17      	ldr	r2, [pc, #92]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cbea:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbec:	7a5b      	ldrb	r3, [r3, #9]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbf4:	4413      	add	r3, r2
 800cbf6:	79fa      	ldrb	r2, [r7, #7]
 800cbf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cbfa:	4b11      	ldr	r3, [pc, #68]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cbfc:	7a5b      	ldrb	r3, [r3, #9]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	1c5a      	adds	r2, r3, #1
 800cc02:	b2d1      	uxtb	r1, r2
 800cc04:	4a0e      	ldr	r2, [pc, #56]	; (800cc40 <FATFS_LinkDriverEx+0x94>)
 800cc06:	7251      	strb	r1, [r2, #9]
 800cc08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc0a:	7dbb      	ldrb	r3, [r7, #22]
 800cc0c:	3330      	adds	r3, #48	; 0x30
 800cc0e:	b2da      	uxtb	r2, r3
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	3301      	adds	r3, #1
 800cc18:	223a      	movs	r2, #58	; 0x3a
 800cc1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	3302      	adds	r3, #2
 800cc20:	222f      	movs	r2, #47	; 0x2f
 800cc22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	3303      	adds	r3, #3
 800cc28:	2200      	movs	r2, #0
 800cc2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	371c      	adds	r7, #28
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop
 800cc40:	200007a0 	.word	0x200007a0

0800cc44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc4e:	2200      	movs	r2, #0
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff ffaa 	bl	800cbac <FATFS_LinkDriverEx>
 800cc58:	4603      	mov	r3, r0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <__errno>:
 800cc64:	4b01      	ldr	r3, [pc, #4]	; (800cc6c <__errno+0x8>)
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	20000044 	.word	0x20000044

0800cc70 <__libc_init_array>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	4d0d      	ldr	r5, [pc, #52]	; (800cca8 <__libc_init_array+0x38>)
 800cc74:	4c0d      	ldr	r4, [pc, #52]	; (800ccac <__libc_init_array+0x3c>)
 800cc76:	1b64      	subs	r4, r4, r5
 800cc78:	10a4      	asrs	r4, r4, #2
 800cc7a:	2600      	movs	r6, #0
 800cc7c:	42a6      	cmp	r6, r4
 800cc7e:	d109      	bne.n	800cc94 <__libc_init_array+0x24>
 800cc80:	4d0b      	ldr	r5, [pc, #44]	; (800ccb0 <__libc_init_array+0x40>)
 800cc82:	4c0c      	ldr	r4, [pc, #48]	; (800ccb4 <__libc_init_array+0x44>)
 800cc84:	f005 fb6c 	bl	8012360 <_init>
 800cc88:	1b64      	subs	r4, r4, r5
 800cc8a:	10a4      	asrs	r4, r4, #2
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	42a6      	cmp	r6, r4
 800cc90:	d105      	bne.n	800cc9e <__libc_init_array+0x2e>
 800cc92:	bd70      	pop	{r4, r5, r6, pc}
 800cc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc98:	4798      	blx	r3
 800cc9a:	3601      	adds	r6, #1
 800cc9c:	e7ee      	b.n	800cc7c <__libc_init_array+0xc>
 800cc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cca2:	4798      	blx	r3
 800cca4:	3601      	adds	r6, #1
 800cca6:	e7f2      	b.n	800cc8e <__libc_init_array+0x1e>
 800cca8:	08012f24 	.word	0x08012f24
 800ccac:	08012f24 	.word	0x08012f24
 800ccb0:	08012f24 	.word	0x08012f24
 800ccb4:	08012f28 	.word	0x08012f28

0800ccb8 <malloc>:
 800ccb8:	4b02      	ldr	r3, [pc, #8]	; (800ccc4 <malloc+0xc>)
 800ccba:	4601      	mov	r1, r0
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	f000 b877 	b.w	800cdb0 <_malloc_r>
 800ccc2:	bf00      	nop
 800ccc4:	20000044 	.word	0x20000044

0800ccc8 <memset>:
 800ccc8:	4402      	add	r2, r0
 800ccca:	4603      	mov	r3, r0
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d100      	bne.n	800ccd2 <memset+0xa>
 800ccd0:	4770      	bx	lr
 800ccd2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccd6:	e7f9      	b.n	800cccc <memset+0x4>

0800ccd8 <_free_r>:
 800ccd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccda:	2900      	cmp	r1, #0
 800ccdc:	d044      	beq.n	800cd68 <_free_r+0x90>
 800ccde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce2:	9001      	str	r0, [sp, #4]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f1a1 0404 	sub.w	r4, r1, #4
 800ccea:	bfb8      	it	lt
 800ccec:	18e4      	addlt	r4, r4, r3
 800ccee:	f003 fcb7 	bl	8010660 <__malloc_lock>
 800ccf2:	4a1e      	ldr	r2, [pc, #120]	; (800cd6c <_free_r+0x94>)
 800ccf4:	9801      	ldr	r0, [sp, #4]
 800ccf6:	6813      	ldr	r3, [r2, #0]
 800ccf8:	b933      	cbnz	r3, 800cd08 <_free_r+0x30>
 800ccfa:	6063      	str	r3, [r4, #4]
 800ccfc:	6014      	str	r4, [r2, #0]
 800ccfe:	b003      	add	sp, #12
 800cd00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd04:	f003 bcb2 	b.w	801066c <__malloc_unlock>
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d908      	bls.n	800cd1e <_free_r+0x46>
 800cd0c:	6825      	ldr	r5, [r4, #0]
 800cd0e:	1961      	adds	r1, r4, r5
 800cd10:	428b      	cmp	r3, r1
 800cd12:	bf01      	itttt	eq
 800cd14:	6819      	ldreq	r1, [r3, #0]
 800cd16:	685b      	ldreq	r3, [r3, #4]
 800cd18:	1949      	addeq	r1, r1, r5
 800cd1a:	6021      	streq	r1, [r4, #0]
 800cd1c:	e7ed      	b.n	800ccfa <_free_r+0x22>
 800cd1e:	461a      	mov	r2, r3
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	b10b      	cbz	r3, 800cd28 <_free_r+0x50>
 800cd24:	42a3      	cmp	r3, r4
 800cd26:	d9fa      	bls.n	800cd1e <_free_r+0x46>
 800cd28:	6811      	ldr	r1, [r2, #0]
 800cd2a:	1855      	adds	r5, r2, r1
 800cd2c:	42a5      	cmp	r5, r4
 800cd2e:	d10b      	bne.n	800cd48 <_free_r+0x70>
 800cd30:	6824      	ldr	r4, [r4, #0]
 800cd32:	4421      	add	r1, r4
 800cd34:	1854      	adds	r4, r2, r1
 800cd36:	42a3      	cmp	r3, r4
 800cd38:	6011      	str	r1, [r2, #0]
 800cd3a:	d1e0      	bne.n	800ccfe <_free_r+0x26>
 800cd3c:	681c      	ldr	r4, [r3, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	6053      	str	r3, [r2, #4]
 800cd42:	4421      	add	r1, r4
 800cd44:	6011      	str	r1, [r2, #0]
 800cd46:	e7da      	b.n	800ccfe <_free_r+0x26>
 800cd48:	d902      	bls.n	800cd50 <_free_r+0x78>
 800cd4a:	230c      	movs	r3, #12
 800cd4c:	6003      	str	r3, [r0, #0]
 800cd4e:	e7d6      	b.n	800ccfe <_free_r+0x26>
 800cd50:	6825      	ldr	r5, [r4, #0]
 800cd52:	1961      	adds	r1, r4, r5
 800cd54:	428b      	cmp	r3, r1
 800cd56:	bf04      	itt	eq
 800cd58:	6819      	ldreq	r1, [r3, #0]
 800cd5a:	685b      	ldreq	r3, [r3, #4]
 800cd5c:	6063      	str	r3, [r4, #4]
 800cd5e:	bf04      	itt	eq
 800cd60:	1949      	addeq	r1, r1, r5
 800cd62:	6021      	streq	r1, [r4, #0]
 800cd64:	6054      	str	r4, [r2, #4]
 800cd66:	e7ca      	b.n	800ccfe <_free_r+0x26>
 800cd68:	b003      	add	sp, #12
 800cd6a:	bd30      	pop	{r4, r5, pc}
 800cd6c:	200007ac 	.word	0x200007ac

0800cd70 <sbrk_aligned>:
 800cd70:	b570      	push	{r4, r5, r6, lr}
 800cd72:	4e0e      	ldr	r6, [pc, #56]	; (800cdac <sbrk_aligned+0x3c>)
 800cd74:	460c      	mov	r4, r1
 800cd76:	6831      	ldr	r1, [r6, #0]
 800cd78:	4605      	mov	r5, r0
 800cd7a:	b911      	cbnz	r1, 800cd82 <sbrk_aligned+0x12>
 800cd7c:	f000 ff94 	bl	800dca8 <_sbrk_r>
 800cd80:	6030      	str	r0, [r6, #0]
 800cd82:	4621      	mov	r1, r4
 800cd84:	4628      	mov	r0, r5
 800cd86:	f000 ff8f 	bl	800dca8 <_sbrk_r>
 800cd8a:	1c43      	adds	r3, r0, #1
 800cd8c:	d00a      	beq.n	800cda4 <sbrk_aligned+0x34>
 800cd8e:	1cc4      	adds	r4, r0, #3
 800cd90:	f024 0403 	bic.w	r4, r4, #3
 800cd94:	42a0      	cmp	r0, r4
 800cd96:	d007      	beq.n	800cda8 <sbrk_aligned+0x38>
 800cd98:	1a21      	subs	r1, r4, r0
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f000 ff84 	bl	800dca8 <_sbrk_r>
 800cda0:	3001      	adds	r0, #1
 800cda2:	d101      	bne.n	800cda8 <sbrk_aligned+0x38>
 800cda4:	f04f 34ff 	mov.w	r4, #4294967295
 800cda8:	4620      	mov	r0, r4
 800cdaa:	bd70      	pop	{r4, r5, r6, pc}
 800cdac:	200007b0 	.word	0x200007b0

0800cdb0 <_malloc_r>:
 800cdb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb4:	1ccd      	adds	r5, r1, #3
 800cdb6:	f025 0503 	bic.w	r5, r5, #3
 800cdba:	3508      	adds	r5, #8
 800cdbc:	2d0c      	cmp	r5, #12
 800cdbe:	bf38      	it	cc
 800cdc0:	250c      	movcc	r5, #12
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	db01      	blt.n	800cdcc <_malloc_r+0x1c>
 800cdc8:	42a9      	cmp	r1, r5
 800cdca:	d905      	bls.n	800cdd8 <_malloc_r+0x28>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	603b      	str	r3, [r7, #0]
 800cdd0:	2600      	movs	r6, #0
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd8:	4e2e      	ldr	r6, [pc, #184]	; (800ce94 <_malloc_r+0xe4>)
 800cdda:	f003 fc41 	bl	8010660 <__malloc_lock>
 800cdde:	6833      	ldr	r3, [r6, #0]
 800cde0:	461c      	mov	r4, r3
 800cde2:	bb34      	cbnz	r4, 800ce32 <_malloc_r+0x82>
 800cde4:	4629      	mov	r1, r5
 800cde6:	4638      	mov	r0, r7
 800cde8:	f7ff ffc2 	bl	800cd70 <sbrk_aligned>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	4604      	mov	r4, r0
 800cdf0:	d14d      	bne.n	800ce8e <_malloc_r+0xde>
 800cdf2:	6834      	ldr	r4, [r6, #0]
 800cdf4:	4626      	mov	r6, r4
 800cdf6:	2e00      	cmp	r6, #0
 800cdf8:	d140      	bne.n	800ce7c <_malloc_r+0xcc>
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4638      	mov	r0, r7
 800ce00:	eb04 0803 	add.w	r8, r4, r3
 800ce04:	f000 ff50 	bl	800dca8 <_sbrk_r>
 800ce08:	4580      	cmp	r8, r0
 800ce0a:	d13a      	bne.n	800ce82 <_malloc_r+0xd2>
 800ce0c:	6821      	ldr	r1, [r4, #0]
 800ce0e:	3503      	adds	r5, #3
 800ce10:	1a6d      	subs	r5, r5, r1
 800ce12:	f025 0503 	bic.w	r5, r5, #3
 800ce16:	3508      	adds	r5, #8
 800ce18:	2d0c      	cmp	r5, #12
 800ce1a:	bf38      	it	cc
 800ce1c:	250c      	movcc	r5, #12
 800ce1e:	4629      	mov	r1, r5
 800ce20:	4638      	mov	r0, r7
 800ce22:	f7ff ffa5 	bl	800cd70 <sbrk_aligned>
 800ce26:	3001      	adds	r0, #1
 800ce28:	d02b      	beq.n	800ce82 <_malloc_r+0xd2>
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	442b      	add	r3, r5
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	e00e      	b.n	800ce50 <_malloc_r+0xa0>
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	1b52      	subs	r2, r2, r5
 800ce36:	d41e      	bmi.n	800ce76 <_malloc_r+0xc6>
 800ce38:	2a0b      	cmp	r2, #11
 800ce3a:	d916      	bls.n	800ce6a <_malloc_r+0xba>
 800ce3c:	1961      	adds	r1, r4, r5
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	6025      	str	r5, [r4, #0]
 800ce42:	bf18      	it	ne
 800ce44:	6059      	strne	r1, [r3, #4]
 800ce46:	6863      	ldr	r3, [r4, #4]
 800ce48:	bf08      	it	eq
 800ce4a:	6031      	streq	r1, [r6, #0]
 800ce4c:	5162      	str	r2, [r4, r5]
 800ce4e:	604b      	str	r3, [r1, #4]
 800ce50:	4638      	mov	r0, r7
 800ce52:	f104 060b 	add.w	r6, r4, #11
 800ce56:	f003 fc09 	bl	801066c <__malloc_unlock>
 800ce5a:	f026 0607 	bic.w	r6, r6, #7
 800ce5e:	1d23      	adds	r3, r4, #4
 800ce60:	1af2      	subs	r2, r6, r3
 800ce62:	d0b6      	beq.n	800cdd2 <_malloc_r+0x22>
 800ce64:	1b9b      	subs	r3, r3, r6
 800ce66:	50a3      	str	r3, [r4, r2]
 800ce68:	e7b3      	b.n	800cdd2 <_malloc_r+0x22>
 800ce6a:	6862      	ldr	r2, [r4, #4]
 800ce6c:	42a3      	cmp	r3, r4
 800ce6e:	bf0c      	ite	eq
 800ce70:	6032      	streq	r2, [r6, #0]
 800ce72:	605a      	strne	r2, [r3, #4]
 800ce74:	e7ec      	b.n	800ce50 <_malloc_r+0xa0>
 800ce76:	4623      	mov	r3, r4
 800ce78:	6864      	ldr	r4, [r4, #4]
 800ce7a:	e7b2      	b.n	800cde2 <_malloc_r+0x32>
 800ce7c:	4634      	mov	r4, r6
 800ce7e:	6876      	ldr	r6, [r6, #4]
 800ce80:	e7b9      	b.n	800cdf6 <_malloc_r+0x46>
 800ce82:	230c      	movs	r3, #12
 800ce84:	603b      	str	r3, [r7, #0]
 800ce86:	4638      	mov	r0, r7
 800ce88:	f003 fbf0 	bl	801066c <__malloc_unlock>
 800ce8c:	e7a1      	b.n	800cdd2 <_malloc_r+0x22>
 800ce8e:	6025      	str	r5, [r4, #0]
 800ce90:	e7de      	b.n	800ce50 <_malloc_r+0xa0>
 800ce92:	bf00      	nop
 800ce94:	200007ac 	.word	0x200007ac

0800ce98 <__cvt>:
 800ce98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce9c:	ec55 4b10 	vmov	r4, r5, d0
 800cea0:	2d00      	cmp	r5, #0
 800cea2:	460e      	mov	r6, r1
 800cea4:	4619      	mov	r1, r3
 800cea6:	462b      	mov	r3, r5
 800cea8:	bfbb      	ittet	lt
 800ceaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ceae:	461d      	movlt	r5, r3
 800ceb0:	2300      	movge	r3, #0
 800ceb2:	232d      	movlt	r3, #45	; 0x2d
 800ceb4:	700b      	strb	r3, [r1, #0]
 800ceb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ceb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cebc:	4691      	mov	r9, r2
 800cebe:	f023 0820 	bic.w	r8, r3, #32
 800cec2:	bfbc      	itt	lt
 800cec4:	4622      	movlt	r2, r4
 800cec6:	4614      	movlt	r4, r2
 800cec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cecc:	d005      	beq.n	800ceda <__cvt+0x42>
 800cece:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ced2:	d100      	bne.n	800ced6 <__cvt+0x3e>
 800ced4:	3601      	adds	r6, #1
 800ced6:	2102      	movs	r1, #2
 800ced8:	e000      	b.n	800cedc <__cvt+0x44>
 800ceda:	2103      	movs	r1, #3
 800cedc:	ab03      	add	r3, sp, #12
 800cede:	9301      	str	r3, [sp, #4]
 800cee0:	ab02      	add	r3, sp, #8
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	ec45 4b10 	vmov	d0, r4, r5
 800cee8:	4653      	mov	r3, sl
 800ceea:	4632      	mov	r2, r6
 800ceec:	f001 ffe8 	bl	800eec0 <_dtoa_r>
 800cef0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cef4:	4607      	mov	r7, r0
 800cef6:	d102      	bne.n	800cefe <__cvt+0x66>
 800cef8:	f019 0f01 	tst.w	r9, #1
 800cefc:	d022      	beq.n	800cf44 <__cvt+0xac>
 800cefe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf02:	eb07 0906 	add.w	r9, r7, r6
 800cf06:	d110      	bne.n	800cf2a <__cvt+0x92>
 800cf08:	783b      	ldrb	r3, [r7, #0]
 800cf0a:	2b30      	cmp	r3, #48	; 0x30
 800cf0c:	d10a      	bne.n	800cf24 <__cvt+0x8c>
 800cf0e:	2200      	movs	r2, #0
 800cf10:	2300      	movs	r3, #0
 800cf12:	4620      	mov	r0, r4
 800cf14:	4629      	mov	r1, r5
 800cf16:	f7f3 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf1a:	b918      	cbnz	r0, 800cf24 <__cvt+0x8c>
 800cf1c:	f1c6 0601 	rsb	r6, r6, #1
 800cf20:	f8ca 6000 	str.w	r6, [sl]
 800cf24:	f8da 3000 	ldr.w	r3, [sl]
 800cf28:	4499      	add	r9, r3
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf36:	b108      	cbz	r0, 800cf3c <__cvt+0xa4>
 800cf38:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf3c:	2230      	movs	r2, #48	; 0x30
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	454b      	cmp	r3, r9
 800cf42:	d307      	bcc.n	800cf54 <__cvt+0xbc>
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf48:	1bdb      	subs	r3, r3, r7
 800cf4a:	4638      	mov	r0, r7
 800cf4c:	6013      	str	r3, [r2, #0]
 800cf4e:	b004      	add	sp, #16
 800cf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf54:	1c59      	adds	r1, r3, #1
 800cf56:	9103      	str	r1, [sp, #12]
 800cf58:	701a      	strb	r2, [r3, #0]
 800cf5a:	e7f0      	b.n	800cf3e <__cvt+0xa6>

0800cf5c <__exponent>:
 800cf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2900      	cmp	r1, #0
 800cf62:	bfb8      	it	lt
 800cf64:	4249      	neglt	r1, r1
 800cf66:	f803 2b02 	strb.w	r2, [r3], #2
 800cf6a:	bfb4      	ite	lt
 800cf6c:	222d      	movlt	r2, #45	; 0x2d
 800cf6e:	222b      	movge	r2, #43	; 0x2b
 800cf70:	2909      	cmp	r1, #9
 800cf72:	7042      	strb	r2, [r0, #1]
 800cf74:	dd2a      	ble.n	800cfcc <__exponent+0x70>
 800cf76:	f10d 0407 	add.w	r4, sp, #7
 800cf7a:	46a4      	mov	ip, r4
 800cf7c:	270a      	movs	r7, #10
 800cf7e:	46a6      	mov	lr, r4
 800cf80:	460a      	mov	r2, r1
 800cf82:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf86:	fb07 1516 	mls	r5, r7, r6, r1
 800cf8a:	3530      	adds	r5, #48	; 0x30
 800cf8c:	2a63      	cmp	r2, #99	; 0x63
 800cf8e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf96:	4631      	mov	r1, r6
 800cf98:	dcf1      	bgt.n	800cf7e <__exponent+0x22>
 800cf9a:	3130      	adds	r1, #48	; 0x30
 800cf9c:	f1ae 0502 	sub.w	r5, lr, #2
 800cfa0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cfa4:	1c44      	adds	r4, r0, #1
 800cfa6:	4629      	mov	r1, r5
 800cfa8:	4561      	cmp	r1, ip
 800cfaa:	d30a      	bcc.n	800cfc2 <__exponent+0x66>
 800cfac:	f10d 0209 	add.w	r2, sp, #9
 800cfb0:	eba2 020e 	sub.w	r2, r2, lr
 800cfb4:	4565      	cmp	r5, ip
 800cfb6:	bf88      	it	hi
 800cfb8:	2200      	movhi	r2, #0
 800cfba:	4413      	add	r3, r2
 800cfbc:	1a18      	subs	r0, r3, r0
 800cfbe:	b003      	add	sp, #12
 800cfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfca:	e7ed      	b.n	800cfa8 <__exponent+0x4c>
 800cfcc:	2330      	movs	r3, #48	; 0x30
 800cfce:	3130      	adds	r1, #48	; 0x30
 800cfd0:	7083      	strb	r3, [r0, #2]
 800cfd2:	70c1      	strb	r1, [r0, #3]
 800cfd4:	1d03      	adds	r3, r0, #4
 800cfd6:	e7f1      	b.n	800cfbc <__exponent+0x60>

0800cfd8 <_printf_float>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	ed2d 8b02 	vpush	{d8}
 800cfe0:	b08d      	sub	sp, #52	; 0x34
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfe8:	4616      	mov	r6, r2
 800cfea:	461f      	mov	r7, r3
 800cfec:	4605      	mov	r5, r0
 800cfee:	f003 faab 	bl	8010548 <_localeconv_r>
 800cff2:	f8d0 a000 	ldr.w	sl, [r0]
 800cff6:	4650      	mov	r0, sl
 800cff8:	f7f3 f8ea 	bl	80001d0 <strlen>
 800cffc:	2300      	movs	r3, #0
 800cffe:	930a      	str	r3, [sp, #40]	; 0x28
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	9305      	str	r3, [sp, #20]
 800d004:	f8d8 3000 	ldr.w	r3, [r8]
 800d008:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d00c:	3307      	adds	r3, #7
 800d00e:	f023 0307 	bic.w	r3, r3, #7
 800d012:	f103 0208 	add.w	r2, r3, #8
 800d016:	f8c8 2000 	str.w	r2, [r8]
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d022:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d02a:	9307      	str	r3, [sp, #28]
 800d02c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d030:	ee08 0a10 	vmov	s16, r0
 800d034:	4b9f      	ldr	r3, [pc, #636]	; (800d2b4 <_printf_float+0x2dc>)
 800d036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d03a:	f04f 32ff 	mov.w	r2, #4294967295
 800d03e:	f7f3 fd75 	bl	8000b2c <__aeabi_dcmpun>
 800d042:	bb88      	cbnz	r0, 800d0a8 <_printf_float+0xd0>
 800d044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d048:	4b9a      	ldr	r3, [pc, #616]	; (800d2b4 <_printf_float+0x2dc>)
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	f7f3 fd4f 	bl	8000af0 <__aeabi_dcmple>
 800d052:	bb48      	cbnz	r0, 800d0a8 <_printf_float+0xd0>
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	f7f3 fd3e 	bl	8000adc <__aeabi_dcmplt>
 800d060:	b110      	cbz	r0, 800d068 <_printf_float+0x90>
 800d062:	232d      	movs	r3, #45	; 0x2d
 800d064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d068:	4b93      	ldr	r3, [pc, #588]	; (800d2b8 <_printf_float+0x2e0>)
 800d06a:	4894      	ldr	r0, [pc, #592]	; (800d2bc <_printf_float+0x2e4>)
 800d06c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d070:	bf94      	ite	ls
 800d072:	4698      	movls	r8, r3
 800d074:	4680      	movhi	r8, r0
 800d076:	2303      	movs	r3, #3
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	9b05      	ldr	r3, [sp, #20]
 800d07c:	f023 0204 	bic.w	r2, r3, #4
 800d080:	6022      	str	r2, [r4, #0]
 800d082:	f04f 0900 	mov.w	r9, #0
 800d086:	9700      	str	r7, [sp, #0]
 800d088:	4633      	mov	r3, r6
 800d08a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d08c:	4621      	mov	r1, r4
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f9d8 	bl	800d444 <_printf_common>
 800d094:	3001      	adds	r0, #1
 800d096:	f040 8090 	bne.w	800d1ba <_printf_float+0x1e2>
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	b00d      	add	sp, #52	; 0x34
 800d0a0:	ecbd 8b02 	vpop	{d8}
 800d0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	464b      	mov	r3, r9
 800d0ac:	4640      	mov	r0, r8
 800d0ae:	4649      	mov	r1, r9
 800d0b0:	f7f3 fd3c 	bl	8000b2c <__aeabi_dcmpun>
 800d0b4:	b140      	cbz	r0, 800d0c8 <_printf_float+0xf0>
 800d0b6:	464b      	mov	r3, r9
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	bfbc      	itt	lt
 800d0bc:	232d      	movlt	r3, #45	; 0x2d
 800d0be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0c2:	487f      	ldr	r0, [pc, #508]	; (800d2c0 <_printf_float+0x2e8>)
 800d0c4:	4b7f      	ldr	r3, [pc, #508]	; (800d2c4 <_printf_float+0x2ec>)
 800d0c6:	e7d1      	b.n	800d06c <_printf_float+0x94>
 800d0c8:	6863      	ldr	r3, [r4, #4]
 800d0ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0ce:	9206      	str	r2, [sp, #24]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	d13f      	bne.n	800d154 <_printf_float+0x17c>
 800d0d4:	2306      	movs	r3, #6
 800d0d6:	6063      	str	r3, [r4, #4]
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	6861      	ldr	r1, [r4, #4]
 800d0dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	9303      	str	r3, [sp, #12]
 800d0e4:	ab0a      	add	r3, sp, #40	; 0x28
 800d0e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0ea:	ab09      	add	r3, sp, #36	; 0x24
 800d0ec:	ec49 8b10 	vmov	d0, r8, r9
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	6022      	str	r2, [r4, #0]
 800d0f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7ff fecd 	bl	800ce98 <__cvt>
 800d0fe:	9b06      	ldr	r3, [sp, #24]
 800d100:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d102:	2b47      	cmp	r3, #71	; 0x47
 800d104:	4680      	mov	r8, r0
 800d106:	d108      	bne.n	800d11a <_printf_float+0x142>
 800d108:	1cc8      	adds	r0, r1, #3
 800d10a:	db02      	blt.n	800d112 <_printf_float+0x13a>
 800d10c:	6863      	ldr	r3, [r4, #4]
 800d10e:	4299      	cmp	r1, r3
 800d110:	dd41      	ble.n	800d196 <_printf_float+0x1be>
 800d112:	f1ab 0b02 	sub.w	fp, fp, #2
 800d116:	fa5f fb8b 	uxtb.w	fp, fp
 800d11a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d11e:	d820      	bhi.n	800d162 <_printf_float+0x18a>
 800d120:	3901      	subs	r1, #1
 800d122:	465a      	mov	r2, fp
 800d124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d128:	9109      	str	r1, [sp, #36]	; 0x24
 800d12a:	f7ff ff17 	bl	800cf5c <__exponent>
 800d12e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d130:	1813      	adds	r3, r2, r0
 800d132:	2a01      	cmp	r2, #1
 800d134:	4681      	mov	r9, r0
 800d136:	6123      	str	r3, [r4, #16]
 800d138:	dc02      	bgt.n	800d140 <_printf_float+0x168>
 800d13a:	6822      	ldr	r2, [r4, #0]
 800d13c:	07d2      	lsls	r2, r2, #31
 800d13e:	d501      	bpl.n	800d144 <_printf_float+0x16c>
 800d140:	3301      	adds	r3, #1
 800d142:	6123      	str	r3, [r4, #16]
 800d144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d09c      	beq.n	800d086 <_printf_float+0xae>
 800d14c:	232d      	movs	r3, #45	; 0x2d
 800d14e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d152:	e798      	b.n	800d086 <_printf_float+0xae>
 800d154:	9a06      	ldr	r2, [sp, #24]
 800d156:	2a47      	cmp	r2, #71	; 0x47
 800d158:	d1be      	bne.n	800d0d8 <_printf_float+0x100>
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1bc      	bne.n	800d0d8 <_printf_float+0x100>
 800d15e:	2301      	movs	r3, #1
 800d160:	e7b9      	b.n	800d0d6 <_printf_float+0xfe>
 800d162:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d166:	d118      	bne.n	800d19a <_printf_float+0x1c2>
 800d168:	2900      	cmp	r1, #0
 800d16a:	6863      	ldr	r3, [r4, #4]
 800d16c:	dd0b      	ble.n	800d186 <_printf_float+0x1ae>
 800d16e:	6121      	str	r1, [r4, #16]
 800d170:	b913      	cbnz	r3, 800d178 <_printf_float+0x1a0>
 800d172:	6822      	ldr	r2, [r4, #0]
 800d174:	07d0      	lsls	r0, r2, #31
 800d176:	d502      	bpl.n	800d17e <_printf_float+0x1a6>
 800d178:	3301      	adds	r3, #1
 800d17a:	440b      	add	r3, r1
 800d17c:	6123      	str	r3, [r4, #16]
 800d17e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d180:	f04f 0900 	mov.w	r9, #0
 800d184:	e7de      	b.n	800d144 <_printf_float+0x16c>
 800d186:	b913      	cbnz	r3, 800d18e <_printf_float+0x1b6>
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	07d2      	lsls	r2, r2, #31
 800d18c:	d501      	bpl.n	800d192 <_printf_float+0x1ba>
 800d18e:	3302      	adds	r3, #2
 800d190:	e7f4      	b.n	800d17c <_printf_float+0x1a4>
 800d192:	2301      	movs	r3, #1
 800d194:	e7f2      	b.n	800d17c <_printf_float+0x1a4>
 800d196:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d19c:	4299      	cmp	r1, r3
 800d19e:	db05      	blt.n	800d1ac <_printf_float+0x1d4>
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	6121      	str	r1, [r4, #16]
 800d1a4:	07d8      	lsls	r0, r3, #31
 800d1a6:	d5ea      	bpl.n	800d17e <_printf_float+0x1a6>
 800d1a8:	1c4b      	adds	r3, r1, #1
 800d1aa:	e7e7      	b.n	800d17c <_printf_float+0x1a4>
 800d1ac:	2900      	cmp	r1, #0
 800d1ae:	bfd4      	ite	le
 800d1b0:	f1c1 0202 	rsble	r2, r1, #2
 800d1b4:	2201      	movgt	r2, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	e7e0      	b.n	800d17c <_printf_float+0x1a4>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	055a      	lsls	r2, r3, #21
 800d1be:	d407      	bmi.n	800d1d0 <_printf_float+0x1f8>
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	4642      	mov	r2, r8
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b8      	blx	r7
 800d1ca:	3001      	adds	r0, #1
 800d1cc:	d12c      	bne.n	800d228 <_printf_float+0x250>
 800d1ce:	e764      	b.n	800d09a <_printf_float+0xc2>
 800d1d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1d4:	f240 80e0 	bls.w	800d398 <_printf_float+0x3c0>
 800d1d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1dc:	2200      	movs	r2, #0
 800d1de:	2300      	movs	r3, #0
 800d1e0:	f7f3 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d034      	beq.n	800d252 <_printf_float+0x27a>
 800d1e8:	4a37      	ldr	r2, [pc, #220]	; (800d2c8 <_printf_float+0x2f0>)
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b8      	blx	r7
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f af51 	beq.w	800d09a <_printf_float+0xc2>
 800d1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	db02      	blt.n	800d206 <_printf_float+0x22e>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	07d8      	lsls	r0, r3, #31
 800d204:	d510      	bpl.n	800d228 <_printf_float+0x250>
 800d206:	ee18 3a10 	vmov	r3, s16
 800d20a:	4652      	mov	r2, sl
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	f43f af41 	beq.w	800d09a <_printf_float+0xc2>
 800d218:	f04f 0800 	mov.w	r8, #0
 800d21c:	f104 091a 	add.w	r9, r4, #26
 800d220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d222:	3b01      	subs	r3, #1
 800d224:	4543      	cmp	r3, r8
 800d226:	dc09      	bgt.n	800d23c <_printf_float+0x264>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	079b      	lsls	r3, r3, #30
 800d22c:	f100 8105 	bmi.w	800d43a <_printf_float+0x462>
 800d230:	68e0      	ldr	r0, [r4, #12]
 800d232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d234:	4298      	cmp	r0, r3
 800d236:	bfb8      	it	lt
 800d238:	4618      	movlt	r0, r3
 800d23a:	e730      	b.n	800d09e <_printf_float+0xc6>
 800d23c:	2301      	movs	r3, #1
 800d23e:	464a      	mov	r2, r9
 800d240:	4631      	mov	r1, r6
 800d242:	4628      	mov	r0, r5
 800d244:	47b8      	blx	r7
 800d246:	3001      	adds	r0, #1
 800d248:	f43f af27 	beq.w	800d09a <_printf_float+0xc2>
 800d24c:	f108 0801 	add.w	r8, r8, #1
 800d250:	e7e6      	b.n	800d220 <_printf_float+0x248>
 800d252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d254:	2b00      	cmp	r3, #0
 800d256:	dc39      	bgt.n	800d2cc <_printf_float+0x2f4>
 800d258:	4a1b      	ldr	r2, [pc, #108]	; (800d2c8 <_printf_float+0x2f0>)
 800d25a:	2301      	movs	r3, #1
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af19 	beq.w	800d09a <_printf_float+0xc2>
 800d268:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d26c:	4313      	orrs	r3, r2
 800d26e:	d102      	bne.n	800d276 <_printf_float+0x29e>
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	07d9      	lsls	r1, r3, #31
 800d274:	d5d8      	bpl.n	800d228 <_printf_float+0x250>
 800d276:	ee18 3a10 	vmov	r3, s16
 800d27a:	4652      	mov	r2, sl
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	47b8      	blx	r7
 800d282:	3001      	adds	r0, #1
 800d284:	f43f af09 	beq.w	800d09a <_printf_float+0xc2>
 800d288:	f04f 0900 	mov.w	r9, #0
 800d28c:	f104 0a1a 	add.w	sl, r4, #26
 800d290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d292:	425b      	negs	r3, r3
 800d294:	454b      	cmp	r3, r9
 800d296:	dc01      	bgt.n	800d29c <_printf_float+0x2c4>
 800d298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d29a:	e792      	b.n	800d1c2 <_printf_float+0x1ea>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4652      	mov	r2, sl
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b8      	blx	r7
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	f43f aef7 	beq.w	800d09a <_printf_float+0xc2>
 800d2ac:	f109 0901 	add.w	r9, r9, #1
 800d2b0:	e7ee      	b.n	800d290 <_printf_float+0x2b8>
 800d2b2:	bf00      	nop
 800d2b4:	7fefffff 	.word	0x7fefffff
 800d2b8:	08012a60 	.word	0x08012a60
 800d2bc:	08012a64 	.word	0x08012a64
 800d2c0:	08012a6c 	.word	0x08012a6c
 800d2c4:	08012a68 	.word	0x08012a68
 800d2c8:	08012ec9 	.word	0x08012ec9
 800d2cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	bfa8      	it	ge
 800d2d4:	461a      	movge	r2, r3
 800d2d6:	2a00      	cmp	r2, #0
 800d2d8:	4691      	mov	r9, r2
 800d2da:	dc37      	bgt.n	800d34c <_printf_float+0x374>
 800d2dc:	f04f 0b00 	mov.w	fp, #0
 800d2e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2e4:	f104 021a 	add.w	r2, r4, #26
 800d2e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	eba3 0309 	sub.w	r3, r3, r9
 800d2f0:	455b      	cmp	r3, fp
 800d2f2:	dc33      	bgt.n	800d35c <_printf_float+0x384>
 800d2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	db3b      	blt.n	800d374 <_printf_float+0x39c>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	07da      	lsls	r2, r3, #31
 800d300:	d438      	bmi.n	800d374 <_printf_float+0x39c>
 800d302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d304:	9a05      	ldr	r2, [sp, #20]
 800d306:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d308:	1a9a      	subs	r2, r3, r2
 800d30a:	eba3 0901 	sub.w	r9, r3, r1
 800d30e:	4591      	cmp	r9, r2
 800d310:	bfa8      	it	ge
 800d312:	4691      	movge	r9, r2
 800d314:	f1b9 0f00 	cmp.w	r9, #0
 800d318:	dc35      	bgt.n	800d386 <_printf_float+0x3ae>
 800d31a:	f04f 0800 	mov.w	r8, #0
 800d31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d322:	f104 0a1a 	add.w	sl, r4, #26
 800d326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	eba3 0309 	sub.w	r3, r3, r9
 800d330:	4543      	cmp	r3, r8
 800d332:	f77f af79 	ble.w	800d228 <_printf_float+0x250>
 800d336:	2301      	movs	r3, #1
 800d338:	4652      	mov	r2, sl
 800d33a:	4631      	mov	r1, r6
 800d33c:	4628      	mov	r0, r5
 800d33e:	47b8      	blx	r7
 800d340:	3001      	adds	r0, #1
 800d342:	f43f aeaa 	beq.w	800d09a <_printf_float+0xc2>
 800d346:	f108 0801 	add.w	r8, r8, #1
 800d34a:	e7ec      	b.n	800d326 <_printf_float+0x34e>
 800d34c:	4613      	mov	r3, r2
 800d34e:	4631      	mov	r1, r6
 800d350:	4642      	mov	r2, r8
 800d352:	4628      	mov	r0, r5
 800d354:	47b8      	blx	r7
 800d356:	3001      	adds	r0, #1
 800d358:	d1c0      	bne.n	800d2dc <_printf_float+0x304>
 800d35a:	e69e      	b.n	800d09a <_printf_float+0xc2>
 800d35c:	2301      	movs	r3, #1
 800d35e:	4631      	mov	r1, r6
 800d360:	4628      	mov	r0, r5
 800d362:	9205      	str	r2, [sp, #20]
 800d364:	47b8      	blx	r7
 800d366:	3001      	adds	r0, #1
 800d368:	f43f ae97 	beq.w	800d09a <_printf_float+0xc2>
 800d36c:	9a05      	ldr	r2, [sp, #20]
 800d36e:	f10b 0b01 	add.w	fp, fp, #1
 800d372:	e7b9      	b.n	800d2e8 <_printf_float+0x310>
 800d374:	ee18 3a10 	vmov	r3, s16
 800d378:	4652      	mov	r2, sl
 800d37a:	4631      	mov	r1, r6
 800d37c:	4628      	mov	r0, r5
 800d37e:	47b8      	blx	r7
 800d380:	3001      	adds	r0, #1
 800d382:	d1be      	bne.n	800d302 <_printf_float+0x32a>
 800d384:	e689      	b.n	800d09a <_printf_float+0xc2>
 800d386:	9a05      	ldr	r2, [sp, #20]
 800d388:	464b      	mov	r3, r9
 800d38a:	4442      	add	r2, r8
 800d38c:	4631      	mov	r1, r6
 800d38e:	4628      	mov	r0, r5
 800d390:	47b8      	blx	r7
 800d392:	3001      	adds	r0, #1
 800d394:	d1c1      	bne.n	800d31a <_printf_float+0x342>
 800d396:	e680      	b.n	800d09a <_printf_float+0xc2>
 800d398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d39a:	2a01      	cmp	r2, #1
 800d39c:	dc01      	bgt.n	800d3a2 <_printf_float+0x3ca>
 800d39e:	07db      	lsls	r3, r3, #31
 800d3a0:	d538      	bpl.n	800d414 <_printf_float+0x43c>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	4642      	mov	r2, r8
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	47b8      	blx	r7
 800d3ac:	3001      	adds	r0, #1
 800d3ae:	f43f ae74 	beq.w	800d09a <_printf_float+0xc2>
 800d3b2:	ee18 3a10 	vmov	r3, s16
 800d3b6:	4652      	mov	r2, sl
 800d3b8:	4631      	mov	r1, r6
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	47b8      	blx	r7
 800d3be:	3001      	adds	r0, #1
 800d3c0:	f43f ae6b 	beq.w	800d09a <_printf_float+0xc2>
 800d3c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	f7f3 fb7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3d0:	b9d8      	cbnz	r0, 800d40a <_printf_float+0x432>
 800d3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d4:	f108 0201 	add.w	r2, r8, #1
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4628      	mov	r0, r5
 800d3de:	47b8      	blx	r7
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d10e      	bne.n	800d402 <_printf_float+0x42a>
 800d3e4:	e659      	b.n	800d09a <_printf_float+0xc2>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4652      	mov	r2, sl
 800d3ea:	4631      	mov	r1, r6
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f43f ae52 	beq.w	800d09a <_printf_float+0xc2>
 800d3f6:	f108 0801 	add.w	r8, r8, #1
 800d3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3fc:	3b01      	subs	r3, #1
 800d3fe:	4543      	cmp	r3, r8
 800d400:	dcf1      	bgt.n	800d3e6 <_printf_float+0x40e>
 800d402:	464b      	mov	r3, r9
 800d404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d408:	e6dc      	b.n	800d1c4 <_printf_float+0x1ec>
 800d40a:	f04f 0800 	mov.w	r8, #0
 800d40e:	f104 0a1a 	add.w	sl, r4, #26
 800d412:	e7f2      	b.n	800d3fa <_printf_float+0x422>
 800d414:	2301      	movs	r3, #1
 800d416:	4642      	mov	r2, r8
 800d418:	e7df      	b.n	800d3da <_printf_float+0x402>
 800d41a:	2301      	movs	r3, #1
 800d41c:	464a      	mov	r2, r9
 800d41e:	4631      	mov	r1, r6
 800d420:	4628      	mov	r0, r5
 800d422:	47b8      	blx	r7
 800d424:	3001      	adds	r0, #1
 800d426:	f43f ae38 	beq.w	800d09a <_printf_float+0xc2>
 800d42a:	f108 0801 	add.w	r8, r8, #1
 800d42e:	68e3      	ldr	r3, [r4, #12]
 800d430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d432:	1a5b      	subs	r3, r3, r1
 800d434:	4543      	cmp	r3, r8
 800d436:	dcf0      	bgt.n	800d41a <_printf_float+0x442>
 800d438:	e6fa      	b.n	800d230 <_printf_float+0x258>
 800d43a:	f04f 0800 	mov.w	r8, #0
 800d43e:	f104 0919 	add.w	r9, r4, #25
 800d442:	e7f4      	b.n	800d42e <_printf_float+0x456>

0800d444 <_printf_common>:
 800d444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d448:	4616      	mov	r6, r2
 800d44a:	4699      	mov	r9, r3
 800d44c:	688a      	ldr	r2, [r1, #8]
 800d44e:	690b      	ldr	r3, [r1, #16]
 800d450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d454:	4293      	cmp	r3, r2
 800d456:	bfb8      	it	lt
 800d458:	4613      	movlt	r3, r2
 800d45a:	6033      	str	r3, [r6, #0]
 800d45c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d460:	4607      	mov	r7, r0
 800d462:	460c      	mov	r4, r1
 800d464:	b10a      	cbz	r2, 800d46a <_printf_common+0x26>
 800d466:	3301      	adds	r3, #1
 800d468:	6033      	str	r3, [r6, #0]
 800d46a:	6823      	ldr	r3, [r4, #0]
 800d46c:	0699      	lsls	r1, r3, #26
 800d46e:	bf42      	ittt	mi
 800d470:	6833      	ldrmi	r3, [r6, #0]
 800d472:	3302      	addmi	r3, #2
 800d474:	6033      	strmi	r3, [r6, #0]
 800d476:	6825      	ldr	r5, [r4, #0]
 800d478:	f015 0506 	ands.w	r5, r5, #6
 800d47c:	d106      	bne.n	800d48c <_printf_common+0x48>
 800d47e:	f104 0a19 	add.w	sl, r4, #25
 800d482:	68e3      	ldr	r3, [r4, #12]
 800d484:	6832      	ldr	r2, [r6, #0]
 800d486:	1a9b      	subs	r3, r3, r2
 800d488:	42ab      	cmp	r3, r5
 800d48a:	dc26      	bgt.n	800d4da <_printf_common+0x96>
 800d48c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d490:	1e13      	subs	r3, r2, #0
 800d492:	6822      	ldr	r2, [r4, #0]
 800d494:	bf18      	it	ne
 800d496:	2301      	movne	r3, #1
 800d498:	0692      	lsls	r2, r2, #26
 800d49a:	d42b      	bmi.n	800d4f4 <_printf_common+0xb0>
 800d49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	47c0      	blx	r8
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	d01e      	beq.n	800d4e8 <_printf_common+0xa4>
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	68e5      	ldr	r5, [r4, #12]
 800d4ae:	6832      	ldr	r2, [r6, #0]
 800d4b0:	f003 0306 	and.w	r3, r3, #6
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	bf08      	it	eq
 800d4b8:	1aad      	subeq	r5, r5, r2
 800d4ba:	68a3      	ldr	r3, [r4, #8]
 800d4bc:	6922      	ldr	r2, [r4, #16]
 800d4be:	bf0c      	ite	eq
 800d4c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4c4:	2500      	movne	r5, #0
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	bfc4      	itt	gt
 800d4ca:	1a9b      	subgt	r3, r3, r2
 800d4cc:	18ed      	addgt	r5, r5, r3
 800d4ce:	2600      	movs	r6, #0
 800d4d0:	341a      	adds	r4, #26
 800d4d2:	42b5      	cmp	r5, r6
 800d4d4:	d11a      	bne.n	800d50c <_printf_common+0xc8>
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	e008      	b.n	800d4ec <_printf_common+0xa8>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	4652      	mov	r2, sl
 800d4de:	4649      	mov	r1, r9
 800d4e0:	4638      	mov	r0, r7
 800d4e2:	47c0      	blx	r8
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d103      	bne.n	800d4f0 <_printf_common+0xac>
 800d4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	e7c6      	b.n	800d482 <_printf_common+0x3e>
 800d4f4:	18e1      	adds	r1, r4, r3
 800d4f6:	1c5a      	adds	r2, r3, #1
 800d4f8:	2030      	movs	r0, #48	; 0x30
 800d4fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4fe:	4422      	add	r2, r4
 800d500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d508:	3302      	adds	r3, #2
 800d50a:	e7c7      	b.n	800d49c <_printf_common+0x58>
 800d50c:	2301      	movs	r3, #1
 800d50e:	4622      	mov	r2, r4
 800d510:	4649      	mov	r1, r9
 800d512:	4638      	mov	r0, r7
 800d514:	47c0      	blx	r8
 800d516:	3001      	adds	r0, #1
 800d518:	d0e6      	beq.n	800d4e8 <_printf_common+0xa4>
 800d51a:	3601      	adds	r6, #1
 800d51c:	e7d9      	b.n	800d4d2 <_printf_common+0x8e>
	...

0800d520 <_printf_i>:
 800d520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d524:	7e0f      	ldrb	r7, [r1, #24]
 800d526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d528:	2f78      	cmp	r7, #120	; 0x78
 800d52a:	4691      	mov	r9, r2
 800d52c:	4680      	mov	r8, r0
 800d52e:	460c      	mov	r4, r1
 800d530:	469a      	mov	sl, r3
 800d532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d536:	d807      	bhi.n	800d548 <_printf_i+0x28>
 800d538:	2f62      	cmp	r7, #98	; 0x62
 800d53a:	d80a      	bhi.n	800d552 <_printf_i+0x32>
 800d53c:	2f00      	cmp	r7, #0
 800d53e:	f000 80d8 	beq.w	800d6f2 <_printf_i+0x1d2>
 800d542:	2f58      	cmp	r7, #88	; 0x58
 800d544:	f000 80a3 	beq.w	800d68e <_printf_i+0x16e>
 800d548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d550:	e03a      	b.n	800d5c8 <_printf_i+0xa8>
 800d552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d556:	2b15      	cmp	r3, #21
 800d558:	d8f6      	bhi.n	800d548 <_printf_i+0x28>
 800d55a:	a101      	add	r1, pc, #4	; (adr r1, 800d560 <_printf_i+0x40>)
 800d55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d560:	0800d5b9 	.word	0x0800d5b9
 800d564:	0800d5cd 	.word	0x0800d5cd
 800d568:	0800d549 	.word	0x0800d549
 800d56c:	0800d549 	.word	0x0800d549
 800d570:	0800d549 	.word	0x0800d549
 800d574:	0800d549 	.word	0x0800d549
 800d578:	0800d5cd 	.word	0x0800d5cd
 800d57c:	0800d549 	.word	0x0800d549
 800d580:	0800d549 	.word	0x0800d549
 800d584:	0800d549 	.word	0x0800d549
 800d588:	0800d549 	.word	0x0800d549
 800d58c:	0800d6d9 	.word	0x0800d6d9
 800d590:	0800d5fd 	.word	0x0800d5fd
 800d594:	0800d6bb 	.word	0x0800d6bb
 800d598:	0800d549 	.word	0x0800d549
 800d59c:	0800d549 	.word	0x0800d549
 800d5a0:	0800d6fb 	.word	0x0800d6fb
 800d5a4:	0800d549 	.word	0x0800d549
 800d5a8:	0800d5fd 	.word	0x0800d5fd
 800d5ac:	0800d549 	.word	0x0800d549
 800d5b0:	0800d549 	.word	0x0800d549
 800d5b4:	0800d6c3 	.word	0x0800d6c3
 800d5b8:	682b      	ldr	r3, [r5, #0]
 800d5ba:	1d1a      	adds	r2, r3, #4
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	602a      	str	r2, [r5, #0]
 800d5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e0a3      	b.n	800d714 <_printf_i+0x1f4>
 800d5cc:	6820      	ldr	r0, [r4, #0]
 800d5ce:	6829      	ldr	r1, [r5, #0]
 800d5d0:	0606      	lsls	r6, r0, #24
 800d5d2:	f101 0304 	add.w	r3, r1, #4
 800d5d6:	d50a      	bpl.n	800d5ee <_printf_i+0xce>
 800d5d8:	680e      	ldr	r6, [r1, #0]
 800d5da:	602b      	str	r3, [r5, #0]
 800d5dc:	2e00      	cmp	r6, #0
 800d5de:	da03      	bge.n	800d5e8 <_printf_i+0xc8>
 800d5e0:	232d      	movs	r3, #45	; 0x2d
 800d5e2:	4276      	negs	r6, r6
 800d5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5e8:	485e      	ldr	r0, [pc, #376]	; (800d764 <_printf_i+0x244>)
 800d5ea:	230a      	movs	r3, #10
 800d5ec:	e019      	b.n	800d622 <_printf_i+0x102>
 800d5ee:	680e      	ldr	r6, [r1, #0]
 800d5f0:	602b      	str	r3, [r5, #0]
 800d5f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5f6:	bf18      	it	ne
 800d5f8:	b236      	sxthne	r6, r6
 800d5fa:	e7ef      	b.n	800d5dc <_printf_i+0xbc>
 800d5fc:	682b      	ldr	r3, [r5, #0]
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	1d19      	adds	r1, r3, #4
 800d602:	6029      	str	r1, [r5, #0]
 800d604:	0601      	lsls	r1, r0, #24
 800d606:	d501      	bpl.n	800d60c <_printf_i+0xec>
 800d608:	681e      	ldr	r6, [r3, #0]
 800d60a:	e002      	b.n	800d612 <_printf_i+0xf2>
 800d60c:	0646      	lsls	r6, r0, #25
 800d60e:	d5fb      	bpl.n	800d608 <_printf_i+0xe8>
 800d610:	881e      	ldrh	r6, [r3, #0]
 800d612:	4854      	ldr	r0, [pc, #336]	; (800d764 <_printf_i+0x244>)
 800d614:	2f6f      	cmp	r7, #111	; 0x6f
 800d616:	bf0c      	ite	eq
 800d618:	2308      	moveq	r3, #8
 800d61a:	230a      	movne	r3, #10
 800d61c:	2100      	movs	r1, #0
 800d61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d622:	6865      	ldr	r5, [r4, #4]
 800d624:	60a5      	str	r5, [r4, #8]
 800d626:	2d00      	cmp	r5, #0
 800d628:	bfa2      	ittt	ge
 800d62a:	6821      	ldrge	r1, [r4, #0]
 800d62c:	f021 0104 	bicge.w	r1, r1, #4
 800d630:	6021      	strge	r1, [r4, #0]
 800d632:	b90e      	cbnz	r6, 800d638 <_printf_i+0x118>
 800d634:	2d00      	cmp	r5, #0
 800d636:	d04d      	beq.n	800d6d4 <_printf_i+0x1b4>
 800d638:	4615      	mov	r5, r2
 800d63a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d63e:	fb03 6711 	mls	r7, r3, r1, r6
 800d642:	5dc7      	ldrb	r7, [r0, r7]
 800d644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d648:	4637      	mov	r7, r6
 800d64a:	42bb      	cmp	r3, r7
 800d64c:	460e      	mov	r6, r1
 800d64e:	d9f4      	bls.n	800d63a <_printf_i+0x11a>
 800d650:	2b08      	cmp	r3, #8
 800d652:	d10b      	bne.n	800d66c <_printf_i+0x14c>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	07de      	lsls	r6, r3, #31
 800d658:	d508      	bpl.n	800d66c <_printf_i+0x14c>
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	6861      	ldr	r1, [r4, #4]
 800d65e:	4299      	cmp	r1, r3
 800d660:	bfde      	ittt	le
 800d662:	2330      	movle	r3, #48	; 0x30
 800d664:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d668:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d66c:	1b52      	subs	r2, r2, r5
 800d66e:	6122      	str	r2, [r4, #16]
 800d670:	f8cd a000 	str.w	sl, [sp]
 800d674:	464b      	mov	r3, r9
 800d676:	aa03      	add	r2, sp, #12
 800d678:	4621      	mov	r1, r4
 800d67a:	4640      	mov	r0, r8
 800d67c:	f7ff fee2 	bl	800d444 <_printf_common>
 800d680:	3001      	adds	r0, #1
 800d682:	d14c      	bne.n	800d71e <_printf_i+0x1fe>
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	b004      	add	sp, #16
 800d68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68e:	4835      	ldr	r0, [pc, #212]	; (800d764 <_printf_i+0x244>)
 800d690:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d694:	6829      	ldr	r1, [r5, #0]
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	f851 6b04 	ldr.w	r6, [r1], #4
 800d69c:	6029      	str	r1, [r5, #0]
 800d69e:	061d      	lsls	r5, r3, #24
 800d6a0:	d514      	bpl.n	800d6cc <_printf_i+0x1ac>
 800d6a2:	07df      	lsls	r7, r3, #31
 800d6a4:	bf44      	itt	mi
 800d6a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6aa:	6023      	strmi	r3, [r4, #0]
 800d6ac:	b91e      	cbnz	r6, 800d6b6 <_printf_i+0x196>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	f023 0320 	bic.w	r3, r3, #32
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	2310      	movs	r3, #16
 800d6b8:	e7b0      	b.n	800d61c <_printf_i+0xfc>
 800d6ba:	6823      	ldr	r3, [r4, #0]
 800d6bc:	f043 0320 	orr.w	r3, r3, #32
 800d6c0:	6023      	str	r3, [r4, #0]
 800d6c2:	2378      	movs	r3, #120	; 0x78
 800d6c4:	4828      	ldr	r0, [pc, #160]	; (800d768 <_printf_i+0x248>)
 800d6c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6ca:	e7e3      	b.n	800d694 <_printf_i+0x174>
 800d6cc:	0659      	lsls	r1, r3, #25
 800d6ce:	bf48      	it	mi
 800d6d0:	b2b6      	uxthmi	r6, r6
 800d6d2:	e7e6      	b.n	800d6a2 <_printf_i+0x182>
 800d6d4:	4615      	mov	r5, r2
 800d6d6:	e7bb      	b.n	800d650 <_printf_i+0x130>
 800d6d8:	682b      	ldr	r3, [r5, #0]
 800d6da:	6826      	ldr	r6, [r4, #0]
 800d6dc:	6961      	ldr	r1, [r4, #20]
 800d6de:	1d18      	adds	r0, r3, #4
 800d6e0:	6028      	str	r0, [r5, #0]
 800d6e2:	0635      	lsls	r5, r6, #24
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	d501      	bpl.n	800d6ec <_printf_i+0x1cc>
 800d6e8:	6019      	str	r1, [r3, #0]
 800d6ea:	e002      	b.n	800d6f2 <_printf_i+0x1d2>
 800d6ec:	0670      	lsls	r0, r6, #25
 800d6ee:	d5fb      	bpl.n	800d6e8 <_printf_i+0x1c8>
 800d6f0:	8019      	strh	r1, [r3, #0]
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	6123      	str	r3, [r4, #16]
 800d6f6:	4615      	mov	r5, r2
 800d6f8:	e7ba      	b.n	800d670 <_printf_i+0x150>
 800d6fa:	682b      	ldr	r3, [r5, #0]
 800d6fc:	1d1a      	adds	r2, r3, #4
 800d6fe:	602a      	str	r2, [r5, #0]
 800d700:	681d      	ldr	r5, [r3, #0]
 800d702:	6862      	ldr	r2, [r4, #4]
 800d704:	2100      	movs	r1, #0
 800d706:	4628      	mov	r0, r5
 800d708:	f7f2 fd6a 	bl	80001e0 <memchr>
 800d70c:	b108      	cbz	r0, 800d712 <_printf_i+0x1f2>
 800d70e:	1b40      	subs	r0, r0, r5
 800d710:	6060      	str	r0, [r4, #4]
 800d712:	6863      	ldr	r3, [r4, #4]
 800d714:	6123      	str	r3, [r4, #16]
 800d716:	2300      	movs	r3, #0
 800d718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d71c:	e7a8      	b.n	800d670 <_printf_i+0x150>
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	462a      	mov	r2, r5
 800d722:	4649      	mov	r1, r9
 800d724:	4640      	mov	r0, r8
 800d726:	47d0      	blx	sl
 800d728:	3001      	adds	r0, #1
 800d72a:	d0ab      	beq.n	800d684 <_printf_i+0x164>
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	079b      	lsls	r3, r3, #30
 800d730:	d413      	bmi.n	800d75a <_printf_i+0x23a>
 800d732:	68e0      	ldr	r0, [r4, #12]
 800d734:	9b03      	ldr	r3, [sp, #12]
 800d736:	4298      	cmp	r0, r3
 800d738:	bfb8      	it	lt
 800d73a:	4618      	movlt	r0, r3
 800d73c:	e7a4      	b.n	800d688 <_printf_i+0x168>
 800d73e:	2301      	movs	r3, #1
 800d740:	4632      	mov	r2, r6
 800d742:	4649      	mov	r1, r9
 800d744:	4640      	mov	r0, r8
 800d746:	47d0      	blx	sl
 800d748:	3001      	adds	r0, #1
 800d74a:	d09b      	beq.n	800d684 <_printf_i+0x164>
 800d74c:	3501      	adds	r5, #1
 800d74e:	68e3      	ldr	r3, [r4, #12]
 800d750:	9903      	ldr	r1, [sp, #12]
 800d752:	1a5b      	subs	r3, r3, r1
 800d754:	42ab      	cmp	r3, r5
 800d756:	dcf2      	bgt.n	800d73e <_printf_i+0x21e>
 800d758:	e7eb      	b.n	800d732 <_printf_i+0x212>
 800d75a:	2500      	movs	r5, #0
 800d75c:	f104 0619 	add.w	r6, r4, #25
 800d760:	e7f5      	b.n	800d74e <_printf_i+0x22e>
 800d762:	bf00      	nop
 800d764:	08012a70 	.word	0x08012a70
 800d768:	08012a81 	.word	0x08012a81

0800d76c <_scanf_float>:
 800d76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d770:	b087      	sub	sp, #28
 800d772:	4617      	mov	r7, r2
 800d774:	9303      	str	r3, [sp, #12]
 800d776:	688b      	ldr	r3, [r1, #8]
 800d778:	1e5a      	subs	r2, r3, #1
 800d77a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d77e:	bf83      	ittte	hi
 800d780:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d784:	195b      	addhi	r3, r3, r5
 800d786:	9302      	strhi	r3, [sp, #8]
 800d788:	2300      	movls	r3, #0
 800d78a:	bf86      	itte	hi
 800d78c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d790:	608b      	strhi	r3, [r1, #8]
 800d792:	9302      	strls	r3, [sp, #8]
 800d794:	680b      	ldr	r3, [r1, #0]
 800d796:	468b      	mov	fp, r1
 800d798:	2500      	movs	r5, #0
 800d79a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d79e:	f84b 3b1c 	str.w	r3, [fp], #28
 800d7a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	465e      	mov	r6, fp
 800d7ac:	46aa      	mov	sl, r5
 800d7ae:	46a9      	mov	r9, r5
 800d7b0:	9501      	str	r5, [sp, #4]
 800d7b2:	68a2      	ldr	r2, [r4, #8]
 800d7b4:	b152      	cbz	r2, 800d7cc <_scanf_float+0x60>
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b4e      	cmp	r3, #78	; 0x4e
 800d7bc:	d864      	bhi.n	800d888 <_scanf_float+0x11c>
 800d7be:	2b40      	cmp	r3, #64	; 0x40
 800d7c0:	d83c      	bhi.n	800d83c <_scanf_float+0xd0>
 800d7c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d7c6:	b2c8      	uxtb	r0, r1
 800d7c8:	280e      	cmp	r0, #14
 800d7ca:	d93a      	bls.n	800d842 <_scanf_float+0xd6>
 800d7cc:	f1b9 0f00 	cmp.w	r9, #0
 800d7d0:	d003      	beq.n	800d7da <_scanf_float+0x6e>
 800d7d2:	6823      	ldr	r3, [r4, #0]
 800d7d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d7de:	f1ba 0f01 	cmp.w	sl, #1
 800d7e2:	f200 8113 	bhi.w	800da0c <_scanf_float+0x2a0>
 800d7e6:	455e      	cmp	r6, fp
 800d7e8:	f200 8105 	bhi.w	800d9f6 <_scanf_float+0x28a>
 800d7ec:	2501      	movs	r5, #1
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	b007      	add	sp, #28
 800d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d7fa:	2a0d      	cmp	r2, #13
 800d7fc:	d8e6      	bhi.n	800d7cc <_scanf_float+0x60>
 800d7fe:	a101      	add	r1, pc, #4	; (adr r1, 800d804 <_scanf_float+0x98>)
 800d800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d804:	0800d943 	.word	0x0800d943
 800d808:	0800d7cd 	.word	0x0800d7cd
 800d80c:	0800d7cd 	.word	0x0800d7cd
 800d810:	0800d7cd 	.word	0x0800d7cd
 800d814:	0800d9a3 	.word	0x0800d9a3
 800d818:	0800d97b 	.word	0x0800d97b
 800d81c:	0800d7cd 	.word	0x0800d7cd
 800d820:	0800d7cd 	.word	0x0800d7cd
 800d824:	0800d951 	.word	0x0800d951
 800d828:	0800d7cd 	.word	0x0800d7cd
 800d82c:	0800d7cd 	.word	0x0800d7cd
 800d830:	0800d7cd 	.word	0x0800d7cd
 800d834:	0800d7cd 	.word	0x0800d7cd
 800d838:	0800d909 	.word	0x0800d909
 800d83c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d840:	e7db      	b.n	800d7fa <_scanf_float+0x8e>
 800d842:	290e      	cmp	r1, #14
 800d844:	d8c2      	bhi.n	800d7cc <_scanf_float+0x60>
 800d846:	a001      	add	r0, pc, #4	; (adr r0, 800d84c <_scanf_float+0xe0>)
 800d848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d84c:	0800d8fb 	.word	0x0800d8fb
 800d850:	0800d7cd 	.word	0x0800d7cd
 800d854:	0800d8fb 	.word	0x0800d8fb
 800d858:	0800d98f 	.word	0x0800d98f
 800d85c:	0800d7cd 	.word	0x0800d7cd
 800d860:	0800d8a9 	.word	0x0800d8a9
 800d864:	0800d8e5 	.word	0x0800d8e5
 800d868:	0800d8e5 	.word	0x0800d8e5
 800d86c:	0800d8e5 	.word	0x0800d8e5
 800d870:	0800d8e5 	.word	0x0800d8e5
 800d874:	0800d8e5 	.word	0x0800d8e5
 800d878:	0800d8e5 	.word	0x0800d8e5
 800d87c:	0800d8e5 	.word	0x0800d8e5
 800d880:	0800d8e5 	.word	0x0800d8e5
 800d884:	0800d8e5 	.word	0x0800d8e5
 800d888:	2b6e      	cmp	r3, #110	; 0x6e
 800d88a:	d809      	bhi.n	800d8a0 <_scanf_float+0x134>
 800d88c:	2b60      	cmp	r3, #96	; 0x60
 800d88e:	d8b2      	bhi.n	800d7f6 <_scanf_float+0x8a>
 800d890:	2b54      	cmp	r3, #84	; 0x54
 800d892:	d077      	beq.n	800d984 <_scanf_float+0x218>
 800d894:	2b59      	cmp	r3, #89	; 0x59
 800d896:	d199      	bne.n	800d7cc <_scanf_float+0x60>
 800d898:	2d07      	cmp	r5, #7
 800d89a:	d197      	bne.n	800d7cc <_scanf_float+0x60>
 800d89c:	2508      	movs	r5, #8
 800d89e:	e029      	b.n	800d8f4 <_scanf_float+0x188>
 800d8a0:	2b74      	cmp	r3, #116	; 0x74
 800d8a2:	d06f      	beq.n	800d984 <_scanf_float+0x218>
 800d8a4:	2b79      	cmp	r3, #121	; 0x79
 800d8a6:	e7f6      	b.n	800d896 <_scanf_float+0x12a>
 800d8a8:	6821      	ldr	r1, [r4, #0]
 800d8aa:	05c8      	lsls	r0, r1, #23
 800d8ac:	d51a      	bpl.n	800d8e4 <_scanf_float+0x178>
 800d8ae:	9b02      	ldr	r3, [sp, #8]
 800d8b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d8b4:	6021      	str	r1, [r4, #0]
 800d8b6:	f109 0901 	add.w	r9, r9, #1
 800d8ba:	b11b      	cbz	r3, 800d8c4 <_scanf_float+0x158>
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	3201      	adds	r2, #1
 800d8c0:	9302      	str	r3, [sp, #8]
 800d8c2:	60a2      	str	r2, [r4, #8]
 800d8c4:	68a3      	ldr	r3, [r4, #8]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	60a3      	str	r3, [r4, #8]
 800d8ca:	6923      	ldr	r3, [r4, #16]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	607b      	str	r3, [r7, #4]
 800d8d8:	f340 8084 	ble.w	800d9e4 <_scanf_float+0x278>
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	603b      	str	r3, [r7, #0]
 800d8e2:	e766      	b.n	800d7b2 <_scanf_float+0x46>
 800d8e4:	eb1a 0f05 	cmn.w	sl, r5
 800d8e8:	f47f af70 	bne.w	800d7cc <_scanf_float+0x60>
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800d8f8:	e7e4      	b.n	800d8c4 <_scanf_float+0x158>
 800d8fa:	6822      	ldr	r2, [r4, #0]
 800d8fc:	0610      	lsls	r0, r2, #24
 800d8fe:	f57f af65 	bpl.w	800d7cc <_scanf_float+0x60>
 800d902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d906:	e7f4      	b.n	800d8f2 <_scanf_float+0x186>
 800d908:	f1ba 0f00 	cmp.w	sl, #0
 800d90c:	d10e      	bne.n	800d92c <_scanf_float+0x1c0>
 800d90e:	f1b9 0f00 	cmp.w	r9, #0
 800d912:	d10e      	bne.n	800d932 <_scanf_float+0x1c6>
 800d914:	6822      	ldr	r2, [r4, #0]
 800d916:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d91a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d91e:	d108      	bne.n	800d932 <_scanf_float+0x1c6>
 800d920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d924:	6022      	str	r2, [r4, #0]
 800d926:	f04f 0a01 	mov.w	sl, #1
 800d92a:	e7e3      	b.n	800d8f4 <_scanf_float+0x188>
 800d92c:	f1ba 0f02 	cmp.w	sl, #2
 800d930:	d055      	beq.n	800d9de <_scanf_float+0x272>
 800d932:	2d01      	cmp	r5, #1
 800d934:	d002      	beq.n	800d93c <_scanf_float+0x1d0>
 800d936:	2d04      	cmp	r5, #4
 800d938:	f47f af48 	bne.w	800d7cc <_scanf_float+0x60>
 800d93c:	3501      	adds	r5, #1
 800d93e:	b2ed      	uxtb	r5, r5
 800d940:	e7d8      	b.n	800d8f4 <_scanf_float+0x188>
 800d942:	f1ba 0f01 	cmp.w	sl, #1
 800d946:	f47f af41 	bne.w	800d7cc <_scanf_float+0x60>
 800d94a:	f04f 0a02 	mov.w	sl, #2
 800d94e:	e7d1      	b.n	800d8f4 <_scanf_float+0x188>
 800d950:	b97d      	cbnz	r5, 800d972 <_scanf_float+0x206>
 800d952:	f1b9 0f00 	cmp.w	r9, #0
 800d956:	f47f af3c 	bne.w	800d7d2 <_scanf_float+0x66>
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d960:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d964:	f47f af39 	bne.w	800d7da <_scanf_float+0x6e>
 800d968:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d96c:	6022      	str	r2, [r4, #0]
 800d96e:	2501      	movs	r5, #1
 800d970:	e7c0      	b.n	800d8f4 <_scanf_float+0x188>
 800d972:	2d03      	cmp	r5, #3
 800d974:	d0e2      	beq.n	800d93c <_scanf_float+0x1d0>
 800d976:	2d05      	cmp	r5, #5
 800d978:	e7de      	b.n	800d938 <_scanf_float+0x1cc>
 800d97a:	2d02      	cmp	r5, #2
 800d97c:	f47f af26 	bne.w	800d7cc <_scanf_float+0x60>
 800d980:	2503      	movs	r5, #3
 800d982:	e7b7      	b.n	800d8f4 <_scanf_float+0x188>
 800d984:	2d06      	cmp	r5, #6
 800d986:	f47f af21 	bne.w	800d7cc <_scanf_float+0x60>
 800d98a:	2507      	movs	r5, #7
 800d98c:	e7b2      	b.n	800d8f4 <_scanf_float+0x188>
 800d98e:	6822      	ldr	r2, [r4, #0]
 800d990:	0591      	lsls	r1, r2, #22
 800d992:	f57f af1b 	bpl.w	800d7cc <_scanf_float+0x60>
 800d996:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d99a:	6022      	str	r2, [r4, #0]
 800d99c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9a0:	e7a8      	b.n	800d8f4 <_scanf_float+0x188>
 800d9a2:	6822      	ldr	r2, [r4, #0]
 800d9a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d9a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d9ac:	d006      	beq.n	800d9bc <_scanf_float+0x250>
 800d9ae:	0550      	lsls	r0, r2, #21
 800d9b0:	f57f af0c 	bpl.w	800d7cc <_scanf_float+0x60>
 800d9b4:	f1b9 0f00 	cmp.w	r9, #0
 800d9b8:	f43f af0f 	beq.w	800d7da <_scanf_float+0x6e>
 800d9bc:	0591      	lsls	r1, r2, #22
 800d9be:	bf58      	it	pl
 800d9c0:	9901      	ldrpl	r1, [sp, #4]
 800d9c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d9c6:	bf58      	it	pl
 800d9c8:	eba9 0101 	subpl.w	r1, r9, r1
 800d9cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d9d0:	bf58      	it	pl
 800d9d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d9d6:	6022      	str	r2, [r4, #0]
 800d9d8:	f04f 0900 	mov.w	r9, #0
 800d9dc:	e78a      	b.n	800d8f4 <_scanf_float+0x188>
 800d9de:	f04f 0a03 	mov.w	sl, #3
 800d9e2:	e787      	b.n	800d8f4 <_scanf_float+0x188>
 800d9e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d9e8:	4639      	mov	r1, r7
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	4798      	blx	r3
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f aedf 	beq.w	800d7b2 <_scanf_float+0x46>
 800d9f4:	e6ea      	b.n	800d7cc <_scanf_float+0x60>
 800d9f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d9fe:	463a      	mov	r2, r7
 800da00:	4640      	mov	r0, r8
 800da02:	4798      	blx	r3
 800da04:	6923      	ldr	r3, [r4, #16]
 800da06:	3b01      	subs	r3, #1
 800da08:	6123      	str	r3, [r4, #16]
 800da0a:	e6ec      	b.n	800d7e6 <_scanf_float+0x7a>
 800da0c:	1e6b      	subs	r3, r5, #1
 800da0e:	2b06      	cmp	r3, #6
 800da10:	d825      	bhi.n	800da5e <_scanf_float+0x2f2>
 800da12:	2d02      	cmp	r5, #2
 800da14:	d836      	bhi.n	800da84 <_scanf_float+0x318>
 800da16:	455e      	cmp	r6, fp
 800da18:	f67f aee8 	bls.w	800d7ec <_scanf_float+0x80>
 800da1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da24:	463a      	mov	r2, r7
 800da26:	4640      	mov	r0, r8
 800da28:	4798      	blx	r3
 800da2a:	6923      	ldr	r3, [r4, #16]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	6123      	str	r3, [r4, #16]
 800da30:	e7f1      	b.n	800da16 <_scanf_float+0x2aa>
 800da32:	9802      	ldr	r0, [sp, #8]
 800da34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800da3c:	9002      	str	r0, [sp, #8]
 800da3e:	463a      	mov	r2, r7
 800da40:	4640      	mov	r0, r8
 800da42:	4798      	blx	r3
 800da44:	6923      	ldr	r3, [r4, #16]
 800da46:	3b01      	subs	r3, #1
 800da48:	6123      	str	r3, [r4, #16]
 800da4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da4e:	fa5f fa8a 	uxtb.w	sl, sl
 800da52:	f1ba 0f02 	cmp.w	sl, #2
 800da56:	d1ec      	bne.n	800da32 <_scanf_float+0x2c6>
 800da58:	3d03      	subs	r5, #3
 800da5a:	b2ed      	uxtb	r5, r5
 800da5c:	1b76      	subs	r6, r6, r5
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	05da      	lsls	r2, r3, #23
 800da62:	d52f      	bpl.n	800dac4 <_scanf_float+0x358>
 800da64:	055b      	lsls	r3, r3, #21
 800da66:	d510      	bpl.n	800da8a <_scanf_float+0x31e>
 800da68:	455e      	cmp	r6, fp
 800da6a:	f67f aebf 	bls.w	800d7ec <_scanf_float+0x80>
 800da6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800da76:	463a      	mov	r2, r7
 800da78:	4640      	mov	r0, r8
 800da7a:	4798      	blx	r3
 800da7c:	6923      	ldr	r3, [r4, #16]
 800da7e:	3b01      	subs	r3, #1
 800da80:	6123      	str	r3, [r4, #16]
 800da82:	e7f1      	b.n	800da68 <_scanf_float+0x2fc>
 800da84:	46aa      	mov	sl, r5
 800da86:	9602      	str	r6, [sp, #8]
 800da88:	e7df      	b.n	800da4a <_scanf_float+0x2de>
 800da8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800da8e:	6923      	ldr	r3, [r4, #16]
 800da90:	2965      	cmp	r1, #101	; 0x65
 800da92:	f103 33ff 	add.w	r3, r3, #4294967295
 800da96:	f106 35ff 	add.w	r5, r6, #4294967295
 800da9a:	6123      	str	r3, [r4, #16]
 800da9c:	d00c      	beq.n	800dab8 <_scanf_float+0x34c>
 800da9e:	2945      	cmp	r1, #69	; 0x45
 800daa0:	d00a      	beq.n	800dab8 <_scanf_float+0x34c>
 800daa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800daa6:	463a      	mov	r2, r7
 800daa8:	4640      	mov	r0, r8
 800daaa:	4798      	blx	r3
 800daac:	6923      	ldr	r3, [r4, #16]
 800daae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800dab2:	3b01      	subs	r3, #1
 800dab4:	1eb5      	subs	r5, r6, #2
 800dab6:	6123      	str	r3, [r4, #16]
 800dab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dabc:	463a      	mov	r2, r7
 800dabe:	4640      	mov	r0, r8
 800dac0:	4798      	blx	r3
 800dac2:	462e      	mov	r6, r5
 800dac4:	6825      	ldr	r5, [r4, #0]
 800dac6:	f015 0510 	ands.w	r5, r5, #16
 800daca:	d159      	bne.n	800db80 <_scanf_float+0x414>
 800dacc:	7035      	strb	r5, [r6, #0]
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dad8:	d11b      	bne.n	800db12 <_scanf_float+0x3a6>
 800dada:	9b01      	ldr	r3, [sp, #4]
 800dadc:	454b      	cmp	r3, r9
 800dade:	eba3 0209 	sub.w	r2, r3, r9
 800dae2:	d123      	bne.n	800db2c <_scanf_float+0x3c0>
 800dae4:	2200      	movs	r2, #0
 800dae6:	4659      	mov	r1, fp
 800dae8:	4640      	mov	r0, r8
 800daea:	f001 f813 	bl	800eb14 <_strtod_r>
 800daee:	6822      	ldr	r2, [r4, #0]
 800daf0:	9b03      	ldr	r3, [sp, #12]
 800daf2:	f012 0f02 	tst.w	r2, #2
 800daf6:	ec57 6b10 	vmov	r6, r7, d0
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	d021      	beq.n	800db42 <_scanf_float+0x3d6>
 800dafe:	9903      	ldr	r1, [sp, #12]
 800db00:	1d1a      	adds	r2, r3, #4
 800db02:	600a      	str	r2, [r1, #0]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	e9c3 6700 	strd	r6, r7, [r3]
 800db0a:	68e3      	ldr	r3, [r4, #12]
 800db0c:	3301      	adds	r3, #1
 800db0e:	60e3      	str	r3, [r4, #12]
 800db10:	e66d      	b.n	800d7ee <_scanf_float+0x82>
 800db12:	9b04      	ldr	r3, [sp, #16]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d0e5      	beq.n	800dae4 <_scanf_float+0x378>
 800db18:	9905      	ldr	r1, [sp, #20]
 800db1a:	230a      	movs	r3, #10
 800db1c:	462a      	mov	r2, r5
 800db1e:	3101      	adds	r1, #1
 800db20:	4640      	mov	r0, r8
 800db22:	f001 f87f 	bl	800ec24 <_strtol_r>
 800db26:	9b04      	ldr	r3, [sp, #16]
 800db28:	9e05      	ldr	r6, [sp, #20]
 800db2a:	1ac2      	subs	r2, r0, r3
 800db2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800db30:	429e      	cmp	r6, r3
 800db32:	bf28      	it	cs
 800db34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800db38:	4912      	ldr	r1, [pc, #72]	; (800db84 <_scanf_float+0x418>)
 800db3a:	4630      	mov	r0, r6
 800db3c:	f000 f9a8 	bl	800de90 <siprintf>
 800db40:	e7d0      	b.n	800dae4 <_scanf_float+0x378>
 800db42:	9903      	ldr	r1, [sp, #12]
 800db44:	f012 0f04 	tst.w	r2, #4
 800db48:	f103 0204 	add.w	r2, r3, #4
 800db4c:	600a      	str	r2, [r1, #0]
 800db4e:	d1d9      	bne.n	800db04 <_scanf_float+0x398>
 800db50:	f8d3 8000 	ldr.w	r8, [r3]
 800db54:	ee10 2a10 	vmov	r2, s0
 800db58:	ee10 0a10 	vmov	r0, s0
 800db5c:	463b      	mov	r3, r7
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 ffe4 	bl	8000b2c <__aeabi_dcmpun>
 800db64:	b128      	cbz	r0, 800db72 <_scanf_float+0x406>
 800db66:	4808      	ldr	r0, [pc, #32]	; (800db88 <_scanf_float+0x41c>)
 800db68:	f000 f98c 	bl	800de84 <nanf>
 800db6c:	ed88 0a00 	vstr	s0, [r8]
 800db70:	e7cb      	b.n	800db0a <_scanf_float+0x39e>
 800db72:	4630      	mov	r0, r6
 800db74:	4639      	mov	r1, r7
 800db76:	f7f3 f837 	bl	8000be8 <__aeabi_d2f>
 800db7a:	f8c8 0000 	str.w	r0, [r8]
 800db7e:	e7c4      	b.n	800db0a <_scanf_float+0x39e>
 800db80:	2500      	movs	r5, #0
 800db82:	e634      	b.n	800d7ee <_scanf_float+0x82>
 800db84:	08012a92 	.word	0x08012a92
 800db88:	08012f1b 	.word	0x08012f1b

0800db8c <iprintf>:
 800db8c:	b40f      	push	{r0, r1, r2, r3}
 800db8e:	4b0a      	ldr	r3, [pc, #40]	; (800dbb8 <iprintf+0x2c>)
 800db90:	b513      	push	{r0, r1, r4, lr}
 800db92:	681c      	ldr	r4, [r3, #0]
 800db94:	b124      	cbz	r4, 800dba0 <iprintf+0x14>
 800db96:	69a3      	ldr	r3, [r4, #24]
 800db98:	b913      	cbnz	r3, 800dba0 <iprintf+0x14>
 800db9a:	4620      	mov	r0, r4
 800db9c:	f002 f8aa 	bl	800fcf4 <__sinit>
 800dba0:	ab05      	add	r3, sp, #20
 800dba2:	9a04      	ldr	r2, [sp, #16]
 800dba4:	68a1      	ldr	r1, [r4, #8]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	4620      	mov	r0, r4
 800dbaa:	f003 fbc1 	bl	8011330 <_vfiprintf_r>
 800dbae:	b002      	add	sp, #8
 800dbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbb4:	b004      	add	sp, #16
 800dbb6:	4770      	bx	lr
 800dbb8:	20000044 	.word	0x20000044

0800dbbc <_puts_r>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	460e      	mov	r6, r1
 800dbc0:	4605      	mov	r5, r0
 800dbc2:	b118      	cbz	r0, 800dbcc <_puts_r+0x10>
 800dbc4:	6983      	ldr	r3, [r0, #24]
 800dbc6:	b90b      	cbnz	r3, 800dbcc <_puts_r+0x10>
 800dbc8:	f002 f894 	bl	800fcf4 <__sinit>
 800dbcc:	69ab      	ldr	r3, [r5, #24]
 800dbce:	68ac      	ldr	r4, [r5, #8]
 800dbd0:	b913      	cbnz	r3, 800dbd8 <_puts_r+0x1c>
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f002 f88e 	bl	800fcf4 <__sinit>
 800dbd8:	4b2c      	ldr	r3, [pc, #176]	; (800dc8c <_puts_r+0xd0>)
 800dbda:	429c      	cmp	r4, r3
 800dbdc:	d120      	bne.n	800dc20 <_puts_r+0x64>
 800dbde:	686c      	ldr	r4, [r5, #4]
 800dbe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbe2:	07db      	lsls	r3, r3, #31
 800dbe4:	d405      	bmi.n	800dbf2 <_puts_r+0x36>
 800dbe6:	89a3      	ldrh	r3, [r4, #12]
 800dbe8:	0598      	lsls	r0, r3, #22
 800dbea:	d402      	bmi.n	800dbf2 <_puts_r+0x36>
 800dbec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbee:	f002 fcb0 	bl	8010552 <__retarget_lock_acquire_recursive>
 800dbf2:	89a3      	ldrh	r3, [r4, #12]
 800dbf4:	0719      	lsls	r1, r3, #28
 800dbf6:	d51d      	bpl.n	800dc34 <_puts_r+0x78>
 800dbf8:	6923      	ldr	r3, [r4, #16]
 800dbfa:	b1db      	cbz	r3, 800dc34 <_puts_r+0x78>
 800dbfc:	3e01      	subs	r6, #1
 800dbfe:	68a3      	ldr	r3, [r4, #8]
 800dc00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc04:	3b01      	subs	r3, #1
 800dc06:	60a3      	str	r3, [r4, #8]
 800dc08:	bb39      	cbnz	r1, 800dc5a <_puts_r+0x9e>
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	da38      	bge.n	800dc80 <_puts_r+0xc4>
 800dc0e:	4622      	mov	r2, r4
 800dc10:	210a      	movs	r1, #10
 800dc12:	4628      	mov	r0, r5
 800dc14:	f001 f808 	bl	800ec28 <__swbuf_r>
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d011      	beq.n	800dc40 <_puts_r+0x84>
 800dc1c:	250a      	movs	r5, #10
 800dc1e:	e011      	b.n	800dc44 <_puts_r+0x88>
 800dc20:	4b1b      	ldr	r3, [pc, #108]	; (800dc90 <_puts_r+0xd4>)
 800dc22:	429c      	cmp	r4, r3
 800dc24:	d101      	bne.n	800dc2a <_puts_r+0x6e>
 800dc26:	68ac      	ldr	r4, [r5, #8]
 800dc28:	e7da      	b.n	800dbe0 <_puts_r+0x24>
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	; (800dc94 <_puts_r+0xd8>)
 800dc2c:	429c      	cmp	r4, r3
 800dc2e:	bf08      	it	eq
 800dc30:	68ec      	ldreq	r4, [r5, #12]
 800dc32:	e7d5      	b.n	800dbe0 <_puts_r+0x24>
 800dc34:	4621      	mov	r1, r4
 800dc36:	4628      	mov	r0, r5
 800dc38:	f001 f848 	bl	800eccc <__swsetup_r>
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d0dd      	beq.n	800dbfc <_puts_r+0x40>
 800dc40:	f04f 35ff 	mov.w	r5, #4294967295
 800dc44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc46:	07da      	lsls	r2, r3, #31
 800dc48:	d405      	bmi.n	800dc56 <_puts_r+0x9a>
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	059b      	lsls	r3, r3, #22
 800dc4e:	d402      	bmi.n	800dc56 <_puts_r+0x9a>
 800dc50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc52:	f002 fc7f 	bl	8010554 <__retarget_lock_release_recursive>
 800dc56:	4628      	mov	r0, r5
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	da04      	bge.n	800dc68 <_puts_r+0xac>
 800dc5e:	69a2      	ldr	r2, [r4, #24]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	dc06      	bgt.n	800dc72 <_puts_r+0xb6>
 800dc64:	290a      	cmp	r1, #10
 800dc66:	d004      	beq.n	800dc72 <_puts_r+0xb6>
 800dc68:	6823      	ldr	r3, [r4, #0]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	6022      	str	r2, [r4, #0]
 800dc6e:	7019      	strb	r1, [r3, #0]
 800dc70:	e7c5      	b.n	800dbfe <_puts_r+0x42>
 800dc72:	4622      	mov	r2, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	f000 ffd7 	bl	800ec28 <__swbuf_r>
 800dc7a:	3001      	adds	r0, #1
 800dc7c:	d1bf      	bne.n	800dbfe <_puts_r+0x42>
 800dc7e:	e7df      	b.n	800dc40 <_puts_r+0x84>
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	250a      	movs	r5, #10
 800dc84:	1c5a      	adds	r2, r3, #1
 800dc86:	6022      	str	r2, [r4, #0]
 800dc88:	701d      	strb	r5, [r3, #0]
 800dc8a:	e7db      	b.n	800dc44 <_puts_r+0x88>
 800dc8c:	08012c9c 	.word	0x08012c9c
 800dc90:	08012cbc 	.word	0x08012cbc
 800dc94:	08012c7c 	.word	0x08012c7c

0800dc98 <puts>:
 800dc98:	4b02      	ldr	r3, [pc, #8]	; (800dca4 <puts+0xc>)
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	f7ff bf8d 	b.w	800dbbc <_puts_r>
 800dca2:	bf00      	nop
 800dca4:	20000044 	.word	0x20000044

0800dca8 <_sbrk_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d06      	ldr	r5, [pc, #24]	; (800dcc4 <_sbrk_r+0x1c>)
 800dcac:	2300      	movs	r3, #0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	602b      	str	r3, [r5, #0]
 800dcb4:	f7f5 fa2a 	bl	800310c <_sbrk>
 800dcb8:	1c43      	adds	r3, r0, #1
 800dcba:	d102      	bne.n	800dcc2 <_sbrk_r+0x1a>
 800dcbc:	682b      	ldr	r3, [r5, #0]
 800dcbe:	b103      	cbz	r3, 800dcc2 <_sbrk_r+0x1a>
 800dcc0:	6023      	str	r3, [r4, #0]
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	200007b8 	.word	0x200007b8

0800dcc8 <iscanf>:
 800dcc8:	b40f      	push	{r0, r1, r2, r3}
 800dcca:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <iscanf+0x2c>)
 800dccc:	b513      	push	{r0, r1, r4, lr}
 800dcce:	681c      	ldr	r4, [r3, #0]
 800dcd0:	b124      	cbz	r4, 800dcdc <iscanf+0x14>
 800dcd2:	69a3      	ldr	r3, [r4, #24]
 800dcd4:	b913      	cbnz	r3, 800dcdc <iscanf+0x14>
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f002 f80c 	bl	800fcf4 <__sinit>
 800dcdc:	ab05      	add	r3, sp, #20
 800dcde:	9a04      	ldr	r2, [sp, #16]
 800dce0:	6861      	ldr	r1, [r4, #4]
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	4620      	mov	r0, r4
 800dce6:	f003 fdf9 	bl	80118dc <_vfiscanf_r>
 800dcea:	b002      	add	sp, #8
 800dcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf0:	b004      	add	sp, #16
 800dcf2:	4770      	bx	lr
 800dcf4:	20000044 	.word	0x20000044

0800dcf8 <setvbuf>:
 800dcf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcfc:	461d      	mov	r5, r3
 800dcfe:	4b5d      	ldr	r3, [pc, #372]	; (800de74 <setvbuf+0x17c>)
 800dd00:	681f      	ldr	r7, [r3, #0]
 800dd02:	4604      	mov	r4, r0
 800dd04:	460e      	mov	r6, r1
 800dd06:	4690      	mov	r8, r2
 800dd08:	b127      	cbz	r7, 800dd14 <setvbuf+0x1c>
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	b913      	cbnz	r3, 800dd14 <setvbuf+0x1c>
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f001 fff0 	bl	800fcf4 <__sinit>
 800dd14:	4b58      	ldr	r3, [pc, #352]	; (800de78 <setvbuf+0x180>)
 800dd16:	429c      	cmp	r4, r3
 800dd18:	d167      	bne.n	800ddea <setvbuf+0xf2>
 800dd1a:	687c      	ldr	r4, [r7, #4]
 800dd1c:	f1b8 0f02 	cmp.w	r8, #2
 800dd20:	d006      	beq.n	800dd30 <setvbuf+0x38>
 800dd22:	f1b8 0f01 	cmp.w	r8, #1
 800dd26:	f200 809f 	bhi.w	800de68 <setvbuf+0x170>
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	f2c0 809c 	blt.w	800de68 <setvbuf+0x170>
 800dd30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd32:	07db      	lsls	r3, r3, #31
 800dd34:	d405      	bmi.n	800dd42 <setvbuf+0x4a>
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	0598      	lsls	r0, r3, #22
 800dd3a:	d402      	bmi.n	800dd42 <setvbuf+0x4a>
 800dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3e:	f002 fc08 	bl	8010552 <__retarget_lock_acquire_recursive>
 800dd42:	4621      	mov	r1, r4
 800dd44:	4638      	mov	r0, r7
 800dd46:	f001 ff2f 	bl	800fba8 <_fflush_r>
 800dd4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd4c:	b141      	cbz	r1, 800dd60 <setvbuf+0x68>
 800dd4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd52:	4299      	cmp	r1, r3
 800dd54:	d002      	beq.n	800dd5c <setvbuf+0x64>
 800dd56:	4638      	mov	r0, r7
 800dd58:	f7fe ffbe 	bl	800ccd8 <_free_r>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	6363      	str	r3, [r4, #52]	; 0x34
 800dd60:	2300      	movs	r3, #0
 800dd62:	61a3      	str	r3, [r4, #24]
 800dd64:	6063      	str	r3, [r4, #4]
 800dd66:	89a3      	ldrh	r3, [r4, #12]
 800dd68:	0619      	lsls	r1, r3, #24
 800dd6a:	d503      	bpl.n	800dd74 <setvbuf+0x7c>
 800dd6c:	6921      	ldr	r1, [r4, #16]
 800dd6e:	4638      	mov	r0, r7
 800dd70:	f7fe ffb2 	bl	800ccd8 <_free_r>
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800dd7a:	f023 0303 	bic.w	r3, r3, #3
 800dd7e:	f1b8 0f02 	cmp.w	r8, #2
 800dd82:	81a3      	strh	r3, [r4, #12]
 800dd84:	d06c      	beq.n	800de60 <setvbuf+0x168>
 800dd86:	ab01      	add	r3, sp, #4
 800dd88:	466a      	mov	r2, sp
 800dd8a:	4621      	mov	r1, r4
 800dd8c:	4638      	mov	r0, r7
 800dd8e:	f002 fbe2 	bl	8010556 <__swhatbuf_r>
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	4318      	orrs	r0, r3
 800dd96:	81a0      	strh	r0, [r4, #12]
 800dd98:	2d00      	cmp	r5, #0
 800dd9a:	d130      	bne.n	800ddfe <setvbuf+0x106>
 800dd9c:	9d00      	ldr	r5, [sp, #0]
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f7fe ff8a 	bl	800ccb8 <malloc>
 800dda4:	4606      	mov	r6, r0
 800dda6:	2800      	cmp	r0, #0
 800dda8:	d155      	bne.n	800de56 <setvbuf+0x15e>
 800ddaa:	f8dd 9000 	ldr.w	r9, [sp]
 800ddae:	45a9      	cmp	r9, r5
 800ddb0:	d14a      	bne.n	800de48 <setvbuf+0x150>
 800ddb2:	f04f 35ff 	mov.w	r5, #4294967295
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	60a2      	str	r2, [r4, #8]
 800ddba:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800ddbe:	6022      	str	r2, [r4, #0]
 800ddc0:	6122      	str	r2, [r4, #16]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc8:	6162      	str	r2, [r4, #20]
 800ddca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddcc:	f043 0302 	orr.w	r3, r3, #2
 800ddd0:	07d2      	lsls	r2, r2, #31
 800ddd2:	81a3      	strh	r3, [r4, #12]
 800ddd4:	d405      	bmi.n	800dde2 <setvbuf+0xea>
 800ddd6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ddda:	d102      	bne.n	800dde2 <setvbuf+0xea>
 800dddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddde:	f002 fbb9 	bl	8010554 <__retarget_lock_release_recursive>
 800dde2:	4628      	mov	r0, r5
 800dde4:	b003      	add	sp, #12
 800dde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddea:	4b24      	ldr	r3, [pc, #144]	; (800de7c <setvbuf+0x184>)
 800ddec:	429c      	cmp	r4, r3
 800ddee:	d101      	bne.n	800ddf4 <setvbuf+0xfc>
 800ddf0:	68bc      	ldr	r4, [r7, #8]
 800ddf2:	e793      	b.n	800dd1c <setvbuf+0x24>
 800ddf4:	4b22      	ldr	r3, [pc, #136]	; (800de80 <setvbuf+0x188>)
 800ddf6:	429c      	cmp	r4, r3
 800ddf8:	bf08      	it	eq
 800ddfa:	68fc      	ldreq	r4, [r7, #12]
 800ddfc:	e78e      	b.n	800dd1c <setvbuf+0x24>
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d0cd      	beq.n	800dd9e <setvbuf+0xa6>
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	b913      	cbnz	r3, 800de0c <setvbuf+0x114>
 800de06:	4638      	mov	r0, r7
 800de08:	f001 ff74 	bl	800fcf4 <__sinit>
 800de0c:	f1b8 0f01 	cmp.w	r8, #1
 800de10:	bf08      	it	eq
 800de12:	89a3      	ldrheq	r3, [r4, #12]
 800de14:	6026      	str	r6, [r4, #0]
 800de16:	bf04      	itt	eq
 800de18:	f043 0301 	orreq.w	r3, r3, #1
 800de1c:	81a3      	strheq	r3, [r4, #12]
 800de1e:	89a2      	ldrh	r2, [r4, #12]
 800de20:	f012 0308 	ands.w	r3, r2, #8
 800de24:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800de28:	d01c      	beq.n	800de64 <setvbuf+0x16c>
 800de2a:	07d3      	lsls	r3, r2, #31
 800de2c:	bf41      	itttt	mi
 800de2e:	2300      	movmi	r3, #0
 800de30:	426d      	negmi	r5, r5
 800de32:	60a3      	strmi	r3, [r4, #8]
 800de34:	61a5      	strmi	r5, [r4, #24]
 800de36:	bf58      	it	pl
 800de38:	60a5      	strpl	r5, [r4, #8]
 800de3a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800de3c:	f015 0501 	ands.w	r5, r5, #1
 800de40:	d115      	bne.n	800de6e <setvbuf+0x176>
 800de42:	f412 7f00 	tst.w	r2, #512	; 0x200
 800de46:	e7c8      	b.n	800ddda <setvbuf+0xe2>
 800de48:	4648      	mov	r0, r9
 800de4a:	f7fe ff35 	bl	800ccb8 <malloc>
 800de4e:	4606      	mov	r6, r0
 800de50:	2800      	cmp	r0, #0
 800de52:	d0ae      	beq.n	800ddb2 <setvbuf+0xba>
 800de54:	464d      	mov	r5, r9
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de5c:	81a3      	strh	r3, [r4, #12]
 800de5e:	e7d0      	b.n	800de02 <setvbuf+0x10a>
 800de60:	2500      	movs	r5, #0
 800de62:	e7a8      	b.n	800ddb6 <setvbuf+0xbe>
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	e7e8      	b.n	800de3a <setvbuf+0x142>
 800de68:	f04f 35ff 	mov.w	r5, #4294967295
 800de6c:	e7b9      	b.n	800dde2 <setvbuf+0xea>
 800de6e:	2500      	movs	r5, #0
 800de70:	e7b7      	b.n	800dde2 <setvbuf+0xea>
 800de72:	bf00      	nop
 800de74:	20000044 	.word	0x20000044
 800de78:	08012c9c 	.word	0x08012c9c
 800de7c:	08012cbc 	.word	0x08012cbc
 800de80:	08012c7c 	.word	0x08012c7c

0800de84 <nanf>:
 800de84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800de8c <nanf+0x8>
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	7fc00000 	.word	0x7fc00000

0800de90 <siprintf>:
 800de90:	b40e      	push	{r1, r2, r3}
 800de92:	b500      	push	{lr}
 800de94:	b09c      	sub	sp, #112	; 0x70
 800de96:	ab1d      	add	r3, sp, #116	; 0x74
 800de98:	9002      	str	r0, [sp, #8]
 800de9a:	9006      	str	r0, [sp, #24]
 800de9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dea0:	4809      	ldr	r0, [pc, #36]	; (800dec8 <siprintf+0x38>)
 800dea2:	9107      	str	r1, [sp, #28]
 800dea4:	9104      	str	r1, [sp, #16]
 800dea6:	4909      	ldr	r1, [pc, #36]	; (800decc <siprintf+0x3c>)
 800dea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800deac:	9105      	str	r1, [sp, #20]
 800deae:	6800      	ldr	r0, [r0, #0]
 800deb0:	9301      	str	r3, [sp, #4]
 800deb2:	a902      	add	r1, sp, #8
 800deb4:	f003 f912 	bl	80110dc <_svfiprintf_r>
 800deb8:	9b02      	ldr	r3, [sp, #8]
 800deba:	2200      	movs	r2, #0
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	b01c      	add	sp, #112	; 0x70
 800dec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec4:	b003      	add	sp, #12
 800dec6:	4770      	bx	lr
 800dec8:	20000044 	.word	0x20000044
 800decc:	ffff0208 	.word	0xffff0208

0800ded0 <sulp>:
 800ded0:	b570      	push	{r4, r5, r6, lr}
 800ded2:	4604      	mov	r4, r0
 800ded4:	460d      	mov	r5, r1
 800ded6:	ec45 4b10 	vmov	d0, r4, r5
 800deda:	4616      	mov	r6, r2
 800dedc:	f002 ff3e 	bl	8010d5c <__ulp>
 800dee0:	ec51 0b10 	vmov	r0, r1, d0
 800dee4:	b17e      	cbz	r6, 800df06 <sulp+0x36>
 800dee6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800deea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800deee:	2b00      	cmp	r3, #0
 800def0:	dd09      	ble.n	800df06 <sulp+0x36>
 800def2:	051b      	lsls	r3, r3, #20
 800def4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800def8:	2400      	movs	r4, #0
 800defa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800defe:	4622      	mov	r2, r4
 800df00:	462b      	mov	r3, r5
 800df02:	f7f2 fb79 	bl	80005f8 <__aeabi_dmul>
 800df06:	bd70      	pop	{r4, r5, r6, pc}

0800df08 <_strtod_l>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	ed2d 8b02 	vpush	{d8}
 800df10:	b09d      	sub	sp, #116	; 0x74
 800df12:	461f      	mov	r7, r3
 800df14:	2300      	movs	r3, #0
 800df16:	9318      	str	r3, [sp, #96]	; 0x60
 800df18:	4ba2      	ldr	r3, [pc, #648]	; (800e1a4 <_strtod_l+0x29c>)
 800df1a:	9213      	str	r2, [sp, #76]	; 0x4c
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	9305      	str	r3, [sp, #20]
 800df20:	4604      	mov	r4, r0
 800df22:	4618      	mov	r0, r3
 800df24:	4688      	mov	r8, r1
 800df26:	f7f2 f953 	bl	80001d0 <strlen>
 800df2a:	f04f 0a00 	mov.w	sl, #0
 800df2e:	4605      	mov	r5, r0
 800df30:	f04f 0b00 	mov.w	fp, #0
 800df34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800df38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	2a2b      	cmp	r2, #43	; 0x2b
 800df3e:	d04e      	beq.n	800dfde <_strtod_l+0xd6>
 800df40:	d83b      	bhi.n	800dfba <_strtod_l+0xb2>
 800df42:	2a0d      	cmp	r2, #13
 800df44:	d834      	bhi.n	800dfb0 <_strtod_l+0xa8>
 800df46:	2a08      	cmp	r2, #8
 800df48:	d834      	bhi.n	800dfb4 <_strtod_l+0xac>
 800df4a:	2a00      	cmp	r2, #0
 800df4c:	d03e      	beq.n	800dfcc <_strtod_l+0xc4>
 800df4e:	2300      	movs	r3, #0
 800df50:	930a      	str	r3, [sp, #40]	; 0x28
 800df52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800df54:	7833      	ldrb	r3, [r6, #0]
 800df56:	2b30      	cmp	r3, #48	; 0x30
 800df58:	f040 80b0 	bne.w	800e0bc <_strtod_l+0x1b4>
 800df5c:	7873      	ldrb	r3, [r6, #1]
 800df5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800df62:	2b58      	cmp	r3, #88	; 0x58
 800df64:	d168      	bne.n	800e038 <_strtod_l+0x130>
 800df66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df68:	9301      	str	r3, [sp, #4]
 800df6a:	ab18      	add	r3, sp, #96	; 0x60
 800df6c:	9702      	str	r7, [sp, #8]
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	4a8d      	ldr	r2, [pc, #564]	; (800e1a8 <_strtod_l+0x2a0>)
 800df72:	ab19      	add	r3, sp, #100	; 0x64
 800df74:	a917      	add	r1, sp, #92	; 0x5c
 800df76:	4620      	mov	r0, r4
 800df78:	f001 ffde 	bl	800ff38 <__gethex>
 800df7c:	f010 0707 	ands.w	r7, r0, #7
 800df80:	4605      	mov	r5, r0
 800df82:	d005      	beq.n	800df90 <_strtod_l+0x88>
 800df84:	2f06      	cmp	r7, #6
 800df86:	d12c      	bne.n	800dfe2 <_strtod_l+0xda>
 800df88:	3601      	adds	r6, #1
 800df8a:	2300      	movs	r3, #0
 800df8c:	9617      	str	r6, [sp, #92]	; 0x5c
 800df8e:	930a      	str	r3, [sp, #40]	; 0x28
 800df90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df92:	2b00      	cmp	r3, #0
 800df94:	f040 8590 	bne.w	800eab8 <_strtod_l+0xbb0>
 800df98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df9a:	b1eb      	cbz	r3, 800dfd8 <_strtod_l+0xd0>
 800df9c:	4652      	mov	r2, sl
 800df9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dfa2:	ec43 2b10 	vmov	d0, r2, r3
 800dfa6:	b01d      	add	sp, #116	; 0x74
 800dfa8:	ecbd 8b02 	vpop	{d8}
 800dfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb0:	2a20      	cmp	r2, #32
 800dfb2:	d1cc      	bne.n	800df4e <_strtod_l+0x46>
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfb8:	e7be      	b.n	800df38 <_strtod_l+0x30>
 800dfba:	2a2d      	cmp	r2, #45	; 0x2d
 800dfbc:	d1c7      	bne.n	800df4e <_strtod_l+0x46>
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	920a      	str	r2, [sp, #40]	; 0x28
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d1c2      	bne.n	800df52 <_strtod_l+0x4a>
 800dfcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dfce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	f040 856e 	bne.w	800eab4 <_strtod_l+0xbac>
 800dfd8:	4652      	mov	r2, sl
 800dfda:	465b      	mov	r3, fp
 800dfdc:	e7e1      	b.n	800dfa2 <_strtod_l+0x9a>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	e7ee      	b.n	800dfc0 <_strtod_l+0xb8>
 800dfe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dfe4:	b13a      	cbz	r2, 800dff6 <_strtod_l+0xee>
 800dfe6:	2135      	movs	r1, #53	; 0x35
 800dfe8:	a81a      	add	r0, sp, #104	; 0x68
 800dfea:	f002 ffc2 	bl	8010f72 <__copybits>
 800dfee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dff0:	4620      	mov	r0, r4
 800dff2:	f002 fb81 	bl	80106f8 <_Bfree>
 800dff6:	3f01      	subs	r7, #1
 800dff8:	2f04      	cmp	r7, #4
 800dffa:	d806      	bhi.n	800e00a <_strtod_l+0x102>
 800dffc:	e8df f007 	tbb	[pc, r7]
 800e000:	1714030a 	.word	0x1714030a
 800e004:	0a          	.byte	0x0a
 800e005:	00          	.byte	0x00
 800e006:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e00a:	0728      	lsls	r0, r5, #28
 800e00c:	d5c0      	bpl.n	800df90 <_strtod_l+0x88>
 800e00e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e012:	e7bd      	b.n	800df90 <_strtod_l+0x88>
 800e014:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e018:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e01a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e01e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e022:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e026:	e7f0      	b.n	800e00a <_strtod_l+0x102>
 800e028:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e1ac <_strtod_l+0x2a4>
 800e02c:	e7ed      	b.n	800e00a <_strtod_l+0x102>
 800e02e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e032:	f04f 3aff 	mov.w	sl, #4294967295
 800e036:	e7e8      	b.n	800e00a <_strtod_l+0x102>
 800e038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e03e:	785b      	ldrb	r3, [r3, #1]
 800e040:	2b30      	cmp	r3, #48	; 0x30
 800e042:	d0f9      	beq.n	800e038 <_strtod_l+0x130>
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0a3      	beq.n	800df90 <_strtod_l+0x88>
 800e048:	2301      	movs	r3, #1
 800e04a:	f04f 0900 	mov.w	r9, #0
 800e04e:	9304      	str	r3, [sp, #16]
 800e050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e052:	9308      	str	r3, [sp, #32]
 800e054:	f8cd 901c 	str.w	r9, [sp, #28]
 800e058:	464f      	mov	r7, r9
 800e05a:	220a      	movs	r2, #10
 800e05c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e05e:	7806      	ldrb	r6, [r0, #0]
 800e060:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e064:	b2d9      	uxtb	r1, r3
 800e066:	2909      	cmp	r1, #9
 800e068:	d92a      	bls.n	800e0c0 <_strtod_l+0x1b8>
 800e06a:	9905      	ldr	r1, [sp, #20]
 800e06c:	462a      	mov	r2, r5
 800e06e:	f003 fec6 	bl	8011dfe <strncmp>
 800e072:	b398      	cbz	r0, 800e0dc <_strtod_l+0x1d4>
 800e074:	2000      	movs	r0, #0
 800e076:	4632      	mov	r2, r6
 800e078:	463d      	mov	r5, r7
 800e07a:	9005      	str	r0, [sp, #20]
 800e07c:	4603      	mov	r3, r0
 800e07e:	2a65      	cmp	r2, #101	; 0x65
 800e080:	d001      	beq.n	800e086 <_strtod_l+0x17e>
 800e082:	2a45      	cmp	r2, #69	; 0x45
 800e084:	d118      	bne.n	800e0b8 <_strtod_l+0x1b0>
 800e086:	b91d      	cbnz	r5, 800e090 <_strtod_l+0x188>
 800e088:	9a04      	ldr	r2, [sp, #16]
 800e08a:	4302      	orrs	r2, r0
 800e08c:	d09e      	beq.n	800dfcc <_strtod_l+0xc4>
 800e08e:	2500      	movs	r5, #0
 800e090:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e094:	f108 0201 	add.w	r2, r8, #1
 800e098:	9217      	str	r2, [sp, #92]	; 0x5c
 800e09a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e09e:	2a2b      	cmp	r2, #43	; 0x2b
 800e0a0:	d075      	beq.n	800e18e <_strtod_l+0x286>
 800e0a2:	2a2d      	cmp	r2, #45	; 0x2d
 800e0a4:	d07b      	beq.n	800e19e <_strtod_l+0x296>
 800e0a6:	f04f 0c00 	mov.w	ip, #0
 800e0aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e0ae:	2909      	cmp	r1, #9
 800e0b0:	f240 8082 	bls.w	800e1b8 <_strtod_l+0x2b0>
 800e0b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	e09d      	b.n	800e1f8 <_strtod_l+0x2f0>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e7c4      	b.n	800e04a <_strtod_l+0x142>
 800e0c0:	2f08      	cmp	r7, #8
 800e0c2:	bfd8      	it	le
 800e0c4:	9907      	ldrle	r1, [sp, #28]
 800e0c6:	f100 0001 	add.w	r0, r0, #1
 800e0ca:	bfda      	itte	le
 800e0cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800e0d0:	9307      	strle	r3, [sp, #28]
 800e0d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e0d6:	3701      	adds	r7, #1
 800e0d8:	9017      	str	r0, [sp, #92]	; 0x5c
 800e0da:	e7bf      	b.n	800e05c <_strtod_l+0x154>
 800e0dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0de:	195a      	adds	r2, r3, r5
 800e0e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0e2:	5d5a      	ldrb	r2, [r3, r5]
 800e0e4:	2f00      	cmp	r7, #0
 800e0e6:	d037      	beq.n	800e158 <_strtod_l+0x250>
 800e0e8:	9005      	str	r0, [sp, #20]
 800e0ea:	463d      	mov	r5, r7
 800e0ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e0f0:	2b09      	cmp	r3, #9
 800e0f2:	d912      	bls.n	800e11a <_strtod_l+0x212>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e7c2      	b.n	800e07e <_strtod_l+0x176>
 800e0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e0fe:	785a      	ldrb	r2, [r3, #1]
 800e100:	3001      	adds	r0, #1
 800e102:	2a30      	cmp	r2, #48	; 0x30
 800e104:	d0f8      	beq.n	800e0f8 <_strtod_l+0x1f0>
 800e106:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e10a:	2b08      	cmp	r3, #8
 800e10c:	f200 84d9 	bhi.w	800eac2 <_strtod_l+0xbba>
 800e110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e112:	9005      	str	r0, [sp, #20]
 800e114:	2000      	movs	r0, #0
 800e116:	9308      	str	r3, [sp, #32]
 800e118:	4605      	mov	r5, r0
 800e11a:	3a30      	subs	r2, #48	; 0x30
 800e11c:	f100 0301 	add.w	r3, r0, #1
 800e120:	d014      	beq.n	800e14c <_strtod_l+0x244>
 800e122:	9905      	ldr	r1, [sp, #20]
 800e124:	4419      	add	r1, r3
 800e126:	9105      	str	r1, [sp, #20]
 800e128:	462b      	mov	r3, r5
 800e12a:	eb00 0e05 	add.w	lr, r0, r5
 800e12e:	210a      	movs	r1, #10
 800e130:	4573      	cmp	r3, lr
 800e132:	d113      	bne.n	800e15c <_strtod_l+0x254>
 800e134:	182b      	adds	r3, r5, r0
 800e136:	2b08      	cmp	r3, #8
 800e138:	f105 0501 	add.w	r5, r5, #1
 800e13c:	4405      	add	r5, r0
 800e13e:	dc1c      	bgt.n	800e17a <_strtod_l+0x272>
 800e140:	9907      	ldr	r1, [sp, #28]
 800e142:	230a      	movs	r3, #10
 800e144:	fb03 2301 	mla	r3, r3, r1, r2
 800e148:	9307      	str	r3, [sp, #28]
 800e14a:	2300      	movs	r3, #0
 800e14c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e14e:	1c51      	adds	r1, r2, #1
 800e150:	9117      	str	r1, [sp, #92]	; 0x5c
 800e152:	7852      	ldrb	r2, [r2, #1]
 800e154:	4618      	mov	r0, r3
 800e156:	e7c9      	b.n	800e0ec <_strtod_l+0x1e4>
 800e158:	4638      	mov	r0, r7
 800e15a:	e7d2      	b.n	800e102 <_strtod_l+0x1fa>
 800e15c:	2b08      	cmp	r3, #8
 800e15e:	dc04      	bgt.n	800e16a <_strtod_l+0x262>
 800e160:	9e07      	ldr	r6, [sp, #28]
 800e162:	434e      	muls	r6, r1
 800e164:	9607      	str	r6, [sp, #28]
 800e166:	3301      	adds	r3, #1
 800e168:	e7e2      	b.n	800e130 <_strtod_l+0x228>
 800e16a:	f103 0c01 	add.w	ip, r3, #1
 800e16e:	f1bc 0f10 	cmp.w	ip, #16
 800e172:	bfd8      	it	le
 800e174:	fb01 f909 	mulle.w	r9, r1, r9
 800e178:	e7f5      	b.n	800e166 <_strtod_l+0x25e>
 800e17a:	2d10      	cmp	r5, #16
 800e17c:	bfdc      	itt	le
 800e17e:	230a      	movle	r3, #10
 800e180:	fb03 2909 	mlale	r9, r3, r9, r2
 800e184:	e7e1      	b.n	800e14a <_strtod_l+0x242>
 800e186:	2300      	movs	r3, #0
 800e188:	9305      	str	r3, [sp, #20]
 800e18a:	2301      	movs	r3, #1
 800e18c:	e77c      	b.n	800e088 <_strtod_l+0x180>
 800e18e:	f04f 0c00 	mov.w	ip, #0
 800e192:	f108 0202 	add.w	r2, r8, #2
 800e196:	9217      	str	r2, [sp, #92]	; 0x5c
 800e198:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e19c:	e785      	b.n	800e0aa <_strtod_l+0x1a2>
 800e19e:	f04f 0c01 	mov.w	ip, #1
 800e1a2:	e7f6      	b.n	800e192 <_strtod_l+0x28a>
 800e1a4:	08012d44 	.word	0x08012d44
 800e1a8:	08012a98 	.word	0x08012a98
 800e1ac:	7ff00000 	.word	0x7ff00000
 800e1b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1b2:	1c51      	adds	r1, r2, #1
 800e1b4:	9117      	str	r1, [sp, #92]	; 0x5c
 800e1b6:	7852      	ldrb	r2, [r2, #1]
 800e1b8:	2a30      	cmp	r2, #48	; 0x30
 800e1ba:	d0f9      	beq.n	800e1b0 <_strtod_l+0x2a8>
 800e1bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e1c0:	2908      	cmp	r1, #8
 800e1c2:	f63f af79 	bhi.w	800e0b8 <_strtod_l+0x1b0>
 800e1c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e1ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1cc:	9206      	str	r2, [sp, #24]
 800e1ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e1d0:	1c51      	adds	r1, r2, #1
 800e1d2:	9117      	str	r1, [sp, #92]	; 0x5c
 800e1d4:	7852      	ldrb	r2, [r2, #1]
 800e1d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e1da:	2e09      	cmp	r6, #9
 800e1dc:	d937      	bls.n	800e24e <_strtod_l+0x346>
 800e1de:	9e06      	ldr	r6, [sp, #24]
 800e1e0:	1b89      	subs	r1, r1, r6
 800e1e2:	2908      	cmp	r1, #8
 800e1e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e1e8:	dc02      	bgt.n	800e1f0 <_strtod_l+0x2e8>
 800e1ea:	4576      	cmp	r6, lr
 800e1ec:	bfa8      	it	ge
 800e1ee:	4676      	movge	r6, lr
 800e1f0:	f1bc 0f00 	cmp.w	ip, #0
 800e1f4:	d000      	beq.n	800e1f8 <_strtod_l+0x2f0>
 800e1f6:	4276      	negs	r6, r6
 800e1f8:	2d00      	cmp	r5, #0
 800e1fa:	d14d      	bne.n	800e298 <_strtod_l+0x390>
 800e1fc:	9904      	ldr	r1, [sp, #16]
 800e1fe:	4301      	orrs	r1, r0
 800e200:	f47f aec6 	bne.w	800df90 <_strtod_l+0x88>
 800e204:	2b00      	cmp	r3, #0
 800e206:	f47f aee1 	bne.w	800dfcc <_strtod_l+0xc4>
 800e20a:	2a69      	cmp	r2, #105	; 0x69
 800e20c:	d027      	beq.n	800e25e <_strtod_l+0x356>
 800e20e:	dc24      	bgt.n	800e25a <_strtod_l+0x352>
 800e210:	2a49      	cmp	r2, #73	; 0x49
 800e212:	d024      	beq.n	800e25e <_strtod_l+0x356>
 800e214:	2a4e      	cmp	r2, #78	; 0x4e
 800e216:	f47f aed9 	bne.w	800dfcc <_strtod_l+0xc4>
 800e21a:	499f      	ldr	r1, [pc, #636]	; (800e498 <_strtod_l+0x590>)
 800e21c:	a817      	add	r0, sp, #92	; 0x5c
 800e21e:	f002 f8e3 	bl	80103e8 <__match>
 800e222:	2800      	cmp	r0, #0
 800e224:	f43f aed2 	beq.w	800dfcc <_strtod_l+0xc4>
 800e228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b28      	cmp	r3, #40	; 0x28
 800e22e:	d12d      	bne.n	800e28c <_strtod_l+0x384>
 800e230:	499a      	ldr	r1, [pc, #616]	; (800e49c <_strtod_l+0x594>)
 800e232:	aa1a      	add	r2, sp, #104	; 0x68
 800e234:	a817      	add	r0, sp, #92	; 0x5c
 800e236:	f002 f8eb 	bl	8010410 <__hexnan>
 800e23a:	2805      	cmp	r0, #5
 800e23c:	d126      	bne.n	800e28c <_strtod_l+0x384>
 800e23e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e240:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e244:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e248:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e24c:	e6a0      	b.n	800df90 <_strtod_l+0x88>
 800e24e:	210a      	movs	r1, #10
 800e250:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e254:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e258:	e7b9      	b.n	800e1ce <_strtod_l+0x2c6>
 800e25a:	2a6e      	cmp	r2, #110	; 0x6e
 800e25c:	e7db      	b.n	800e216 <_strtod_l+0x30e>
 800e25e:	4990      	ldr	r1, [pc, #576]	; (800e4a0 <_strtod_l+0x598>)
 800e260:	a817      	add	r0, sp, #92	; 0x5c
 800e262:	f002 f8c1 	bl	80103e8 <__match>
 800e266:	2800      	cmp	r0, #0
 800e268:	f43f aeb0 	beq.w	800dfcc <_strtod_l+0xc4>
 800e26c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e26e:	498d      	ldr	r1, [pc, #564]	; (800e4a4 <_strtod_l+0x59c>)
 800e270:	3b01      	subs	r3, #1
 800e272:	a817      	add	r0, sp, #92	; 0x5c
 800e274:	9317      	str	r3, [sp, #92]	; 0x5c
 800e276:	f002 f8b7 	bl	80103e8 <__match>
 800e27a:	b910      	cbnz	r0, 800e282 <_strtod_l+0x37a>
 800e27c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e27e:	3301      	adds	r3, #1
 800e280:	9317      	str	r3, [sp, #92]	; 0x5c
 800e282:	f8df b230 	ldr.w	fp, [pc, #560]	; 800e4b4 <_strtod_l+0x5ac>
 800e286:	f04f 0a00 	mov.w	sl, #0
 800e28a:	e681      	b.n	800df90 <_strtod_l+0x88>
 800e28c:	4886      	ldr	r0, [pc, #536]	; (800e4a8 <_strtod_l+0x5a0>)
 800e28e:	f003 fd33 	bl	8011cf8 <nan>
 800e292:	ec5b ab10 	vmov	sl, fp, d0
 800e296:	e67b      	b.n	800df90 <_strtod_l+0x88>
 800e298:	9b05      	ldr	r3, [sp, #20]
 800e29a:	9807      	ldr	r0, [sp, #28]
 800e29c:	1af3      	subs	r3, r6, r3
 800e29e:	2f00      	cmp	r7, #0
 800e2a0:	bf08      	it	eq
 800e2a2:	462f      	moveq	r7, r5
 800e2a4:	2d10      	cmp	r5, #16
 800e2a6:	9306      	str	r3, [sp, #24]
 800e2a8:	46a8      	mov	r8, r5
 800e2aa:	bfa8      	it	ge
 800e2ac:	f04f 0810 	movge.w	r8, #16
 800e2b0:	f7f2 f928 	bl	8000504 <__aeabi_ui2d>
 800e2b4:	2d09      	cmp	r5, #9
 800e2b6:	4682      	mov	sl, r0
 800e2b8:	468b      	mov	fp, r1
 800e2ba:	dd13      	ble.n	800e2e4 <_strtod_l+0x3dc>
 800e2bc:	4b7b      	ldr	r3, [pc, #492]	; (800e4ac <_strtod_l+0x5a4>)
 800e2be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e2c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e2c6:	f7f2 f997 	bl	80005f8 <__aeabi_dmul>
 800e2ca:	4682      	mov	sl, r0
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	468b      	mov	fp, r1
 800e2d0:	f7f2 f918 	bl	8000504 <__aeabi_ui2d>
 800e2d4:	4602      	mov	r2, r0
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	4650      	mov	r0, sl
 800e2da:	4659      	mov	r1, fp
 800e2dc:	f7f1 ffd6 	bl	800028c <__adddf3>
 800e2e0:	4682      	mov	sl, r0
 800e2e2:	468b      	mov	fp, r1
 800e2e4:	2d0f      	cmp	r5, #15
 800e2e6:	dc38      	bgt.n	800e35a <_strtod_l+0x452>
 800e2e8:	9b06      	ldr	r3, [sp, #24]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f43f ae50 	beq.w	800df90 <_strtod_l+0x88>
 800e2f0:	dd24      	ble.n	800e33c <_strtod_l+0x434>
 800e2f2:	2b16      	cmp	r3, #22
 800e2f4:	dc0b      	bgt.n	800e30e <_strtod_l+0x406>
 800e2f6:	496d      	ldr	r1, [pc, #436]	; (800e4ac <_strtod_l+0x5a4>)
 800e2f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e300:	4652      	mov	r2, sl
 800e302:	465b      	mov	r3, fp
 800e304:	f7f2 f978 	bl	80005f8 <__aeabi_dmul>
 800e308:	4682      	mov	sl, r0
 800e30a:	468b      	mov	fp, r1
 800e30c:	e640      	b.n	800df90 <_strtod_l+0x88>
 800e30e:	9a06      	ldr	r2, [sp, #24]
 800e310:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e314:	4293      	cmp	r3, r2
 800e316:	db20      	blt.n	800e35a <_strtod_l+0x452>
 800e318:	4c64      	ldr	r4, [pc, #400]	; (800e4ac <_strtod_l+0x5a4>)
 800e31a:	f1c5 050f 	rsb	r5, r5, #15
 800e31e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e322:	4652      	mov	r2, sl
 800e324:	465b      	mov	r3, fp
 800e326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32a:	f7f2 f965 	bl	80005f8 <__aeabi_dmul>
 800e32e:	9b06      	ldr	r3, [sp, #24]
 800e330:	1b5d      	subs	r5, r3, r5
 800e332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e33a:	e7e3      	b.n	800e304 <_strtod_l+0x3fc>
 800e33c:	9b06      	ldr	r3, [sp, #24]
 800e33e:	3316      	adds	r3, #22
 800e340:	db0b      	blt.n	800e35a <_strtod_l+0x452>
 800e342:	9b05      	ldr	r3, [sp, #20]
 800e344:	1b9e      	subs	r6, r3, r6
 800e346:	4b59      	ldr	r3, [pc, #356]	; (800e4ac <_strtod_l+0x5a4>)
 800e348:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e34c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e350:	4650      	mov	r0, sl
 800e352:	4659      	mov	r1, fp
 800e354:	f7f2 fa7a 	bl	800084c <__aeabi_ddiv>
 800e358:	e7d6      	b.n	800e308 <_strtod_l+0x400>
 800e35a:	9b06      	ldr	r3, [sp, #24]
 800e35c:	eba5 0808 	sub.w	r8, r5, r8
 800e360:	4498      	add	r8, r3
 800e362:	f1b8 0f00 	cmp.w	r8, #0
 800e366:	dd74      	ble.n	800e452 <_strtod_l+0x54a>
 800e368:	f018 030f 	ands.w	r3, r8, #15
 800e36c:	d00a      	beq.n	800e384 <_strtod_l+0x47c>
 800e36e:	494f      	ldr	r1, [pc, #316]	; (800e4ac <_strtod_l+0x5a4>)
 800e370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e374:	4652      	mov	r2, sl
 800e376:	465b      	mov	r3, fp
 800e378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	4682      	mov	sl, r0
 800e382:	468b      	mov	fp, r1
 800e384:	f038 080f 	bics.w	r8, r8, #15
 800e388:	d04f      	beq.n	800e42a <_strtod_l+0x522>
 800e38a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e38e:	dd22      	ble.n	800e3d6 <_strtod_l+0x4ce>
 800e390:	2500      	movs	r5, #0
 800e392:	462e      	mov	r6, r5
 800e394:	9507      	str	r5, [sp, #28]
 800e396:	9505      	str	r5, [sp, #20]
 800e398:	2322      	movs	r3, #34	; 0x22
 800e39a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800e4b4 <_strtod_l+0x5ac>
 800e39e:	6023      	str	r3, [r4, #0]
 800e3a0:	f04f 0a00 	mov.w	sl, #0
 800e3a4:	9b07      	ldr	r3, [sp, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f43f adf2 	beq.w	800df90 <_strtod_l+0x88>
 800e3ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f002 f9a2 	bl	80106f8 <_Bfree>
 800e3b4:	9905      	ldr	r1, [sp, #20]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f002 f99e 	bl	80106f8 <_Bfree>
 800e3bc:	4631      	mov	r1, r6
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f002 f99a 	bl	80106f8 <_Bfree>
 800e3c4:	9907      	ldr	r1, [sp, #28]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f002 f996 	bl	80106f8 <_Bfree>
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f002 f992 	bl	80106f8 <_Bfree>
 800e3d4:	e5dc      	b.n	800df90 <_strtod_l+0x88>
 800e3d6:	4b36      	ldr	r3, [pc, #216]	; (800e4b0 <_strtod_l+0x5a8>)
 800e3d8:	9304      	str	r3, [sp, #16]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e3e0:	4650      	mov	r0, sl
 800e3e2:	4659      	mov	r1, fp
 800e3e4:	4699      	mov	r9, r3
 800e3e6:	f1b8 0f01 	cmp.w	r8, #1
 800e3ea:	dc21      	bgt.n	800e430 <_strtod_l+0x528>
 800e3ec:	b10b      	cbz	r3, 800e3f2 <_strtod_l+0x4ea>
 800e3ee:	4682      	mov	sl, r0
 800e3f0:	468b      	mov	fp, r1
 800e3f2:	4b2f      	ldr	r3, [pc, #188]	; (800e4b0 <_strtod_l+0x5a8>)
 800e3f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e3f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e3fc:	4652      	mov	r2, sl
 800e3fe:	465b      	mov	r3, fp
 800e400:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e404:	f7f2 f8f8 	bl	80005f8 <__aeabi_dmul>
 800e408:	4b2a      	ldr	r3, [pc, #168]	; (800e4b4 <_strtod_l+0x5ac>)
 800e40a:	460a      	mov	r2, r1
 800e40c:	400b      	ands	r3, r1
 800e40e:	492a      	ldr	r1, [pc, #168]	; (800e4b8 <_strtod_l+0x5b0>)
 800e410:	428b      	cmp	r3, r1
 800e412:	4682      	mov	sl, r0
 800e414:	d8bc      	bhi.n	800e390 <_strtod_l+0x488>
 800e416:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e41a:	428b      	cmp	r3, r1
 800e41c:	bf86      	itte	hi
 800e41e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800e4bc <_strtod_l+0x5b4>
 800e422:	f04f 3aff 	movhi.w	sl, #4294967295
 800e426:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e42a:	2300      	movs	r3, #0
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	e084      	b.n	800e53a <_strtod_l+0x632>
 800e430:	f018 0f01 	tst.w	r8, #1
 800e434:	d005      	beq.n	800e442 <_strtod_l+0x53a>
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43c:	f7f2 f8dc 	bl	80005f8 <__aeabi_dmul>
 800e440:	2301      	movs	r3, #1
 800e442:	9a04      	ldr	r2, [sp, #16]
 800e444:	3208      	adds	r2, #8
 800e446:	f109 0901 	add.w	r9, r9, #1
 800e44a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e44e:	9204      	str	r2, [sp, #16]
 800e450:	e7c9      	b.n	800e3e6 <_strtod_l+0x4de>
 800e452:	d0ea      	beq.n	800e42a <_strtod_l+0x522>
 800e454:	f1c8 0800 	rsb	r8, r8, #0
 800e458:	f018 020f 	ands.w	r2, r8, #15
 800e45c:	d00a      	beq.n	800e474 <_strtod_l+0x56c>
 800e45e:	4b13      	ldr	r3, [pc, #76]	; (800e4ac <_strtod_l+0x5a4>)
 800e460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e464:	4650      	mov	r0, sl
 800e466:	4659      	mov	r1, fp
 800e468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46c:	f7f2 f9ee 	bl	800084c <__aeabi_ddiv>
 800e470:	4682      	mov	sl, r0
 800e472:	468b      	mov	fp, r1
 800e474:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e478:	d0d7      	beq.n	800e42a <_strtod_l+0x522>
 800e47a:	f1b8 0f1f 	cmp.w	r8, #31
 800e47e:	dd1f      	ble.n	800e4c0 <_strtod_l+0x5b8>
 800e480:	2500      	movs	r5, #0
 800e482:	462e      	mov	r6, r5
 800e484:	9507      	str	r5, [sp, #28]
 800e486:	9505      	str	r5, [sp, #20]
 800e488:	2322      	movs	r3, #34	; 0x22
 800e48a:	f04f 0a00 	mov.w	sl, #0
 800e48e:	f04f 0b00 	mov.w	fp, #0
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	e786      	b.n	800e3a4 <_strtod_l+0x49c>
 800e496:	bf00      	nop
 800e498:	08012a6d 	.word	0x08012a6d
 800e49c:	08012aac 	.word	0x08012aac
 800e4a0:	08012a65 	.word	0x08012a65
 800e4a4:	08012bec 	.word	0x08012bec
 800e4a8:	08012f1b 	.word	0x08012f1b
 800e4ac:	08012de0 	.word	0x08012de0
 800e4b0:	08012db8 	.word	0x08012db8
 800e4b4:	7ff00000 	.word	0x7ff00000
 800e4b8:	7ca00000 	.word	0x7ca00000
 800e4bc:	7fefffff 	.word	0x7fefffff
 800e4c0:	f018 0310 	ands.w	r3, r8, #16
 800e4c4:	bf18      	it	ne
 800e4c6:	236a      	movne	r3, #106	; 0x6a
 800e4c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e878 <_strtod_l+0x970>
 800e4cc:	9304      	str	r3, [sp, #16]
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	4659      	mov	r1, fp
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	f018 0f01 	tst.w	r8, #1
 800e4d8:	d004      	beq.n	800e4e4 <_strtod_l+0x5dc>
 800e4da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e4de:	f7f2 f88b 	bl	80005f8 <__aeabi_dmul>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e4e8:	f109 0908 	add.w	r9, r9, #8
 800e4ec:	d1f2      	bne.n	800e4d4 <_strtod_l+0x5cc>
 800e4ee:	b10b      	cbz	r3, 800e4f4 <_strtod_l+0x5ec>
 800e4f0:	4682      	mov	sl, r0
 800e4f2:	468b      	mov	fp, r1
 800e4f4:	9b04      	ldr	r3, [sp, #16]
 800e4f6:	b1c3      	cbz	r3, 800e52a <_strtod_l+0x622>
 800e4f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e4fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e500:	2b00      	cmp	r3, #0
 800e502:	4659      	mov	r1, fp
 800e504:	dd11      	ble.n	800e52a <_strtod_l+0x622>
 800e506:	2b1f      	cmp	r3, #31
 800e508:	f340 8124 	ble.w	800e754 <_strtod_l+0x84c>
 800e50c:	2b34      	cmp	r3, #52	; 0x34
 800e50e:	bfde      	ittt	le
 800e510:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e514:	f04f 33ff 	movle.w	r3, #4294967295
 800e518:	fa03 f202 	lslle.w	r2, r3, r2
 800e51c:	f04f 0a00 	mov.w	sl, #0
 800e520:	bfcc      	ite	gt
 800e522:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e526:	ea02 0b01 	andle.w	fp, r2, r1
 800e52a:	2200      	movs	r2, #0
 800e52c:	2300      	movs	r3, #0
 800e52e:	4650      	mov	r0, sl
 800e530:	4659      	mov	r1, fp
 800e532:	f7f2 fac9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e536:	2800      	cmp	r0, #0
 800e538:	d1a2      	bne.n	800e480 <_strtod_l+0x578>
 800e53a:	9b07      	ldr	r3, [sp, #28]
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	9908      	ldr	r1, [sp, #32]
 800e540:	462b      	mov	r3, r5
 800e542:	463a      	mov	r2, r7
 800e544:	4620      	mov	r0, r4
 800e546:	f002 f93f 	bl	80107c8 <__s2b>
 800e54a:	9007      	str	r0, [sp, #28]
 800e54c:	2800      	cmp	r0, #0
 800e54e:	f43f af1f 	beq.w	800e390 <_strtod_l+0x488>
 800e552:	9b05      	ldr	r3, [sp, #20]
 800e554:	1b9e      	subs	r6, r3, r6
 800e556:	9b06      	ldr	r3, [sp, #24]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	bfb4      	ite	lt
 800e55c:	4633      	movlt	r3, r6
 800e55e:	2300      	movge	r3, #0
 800e560:	930c      	str	r3, [sp, #48]	; 0x30
 800e562:	9b06      	ldr	r3, [sp, #24]
 800e564:	2500      	movs	r5, #0
 800e566:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e56a:	9312      	str	r3, [sp, #72]	; 0x48
 800e56c:	462e      	mov	r6, r5
 800e56e:	9b07      	ldr	r3, [sp, #28]
 800e570:	4620      	mov	r0, r4
 800e572:	6859      	ldr	r1, [r3, #4]
 800e574:	f002 f880 	bl	8010678 <_Balloc>
 800e578:	9005      	str	r0, [sp, #20]
 800e57a:	2800      	cmp	r0, #0
 800e57c:	f43f af0c 	beq.w	800e398 <_strtod_l+0x490>
 800e580:	9b07      	ldr	r3, [sp, #28]
 800e582:	691a      	ldr	r2, [r3, #16]
 800e584:	3202      	adds	r2, #2
 800e586:	f103 010c 	add.w	r1, r3, #12
 800e58a:	0092      	lsls	r2, r2, #2
 800e58c:	300c      	adds	r0, #12
 800e58e:	f002 f859 	bl	8010644 <memcpy>
 800e592:	ec4b ab10 	vmov	d0, sl, fp
 800e596:	aa1a      	add	r2, sp, #104	; 0x68
 800e598:	a919      	add	r1, sp, #100	; 0x64
 800e59a:	4620      	mov	r0, r4
 800e59c:	f002 fc5a 	bl	8010e54 <__d2b>
 800e5a0:	ec4b ab18 	vmov	d8, sl, fp
 800e5a4:	9018      	str	r0, [sp, #96]	; 0x60
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	f43f aef6 	beq.w	800e398 <_strtod_l+0x490>
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	f002 f9a4 	bl	80108fc <__i2b>
 800e5b4:	4606      	mov	r6, r0
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	f43f aeee 	beq.w	800e398 <_strtod_l+0x490>
 800e5bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e5be:	9904      	ldr	r1, [sp, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	bfab      	itete	ge
 800e5c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800e5c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800e5c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e5ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800e5ce:	bfac      	ite	ge
 800e5d0:	eb03 0902 	addge.w	r9, r3, r2
 800e5d4:	1ad7      	sublt	r7, r2, r3
 800e5d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e5d8:	eba3 0801 	sub.w	r8, r3, r1
 800e5dc:	4490      	add	r8, r2
 800e5de:	4ba1      	ldr	r3, [pc, #644]	; (800e864 <_strtod_l+0x95c>)
 800e5e0:	f108 38ff 	add.w	r8, r8, #4294967295
 800e5e4:	4598      	cmp	r8, r3
 800e5e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e5ea:	f280 80c7 	bge.w	800e77c <_strtod_l+0x874>
 800e5ee:	eba3 0308 	sub.w	r3, r3, r8
 800e5f2:	2b1f      	cmp	r3, #31
 800e5f4:	eba2 0203 	sub.w	r2, r2, r3
 800e5f8:	f04f 0101 	mov.w	r1, #1
 800e5fc:	f300 80b1 	bgt.w	800e762 <_strtod_l+0x85a>
 800e600:	fa01 f303 	lsl.w	r3, r1, r3
 800e604:	930d      	str	r3, [sp, #52]	; 0x34
 800e606:	2300      	movs	r3, #0
 800e608:	9308      	str	r3, [sp, #32]
 800e60a:	eb09 0802 	add.w	r8, r9, r2
 800e60e:	9b04      	ldr	r3, [sp, #16]
 800e610:	45c1      	cmp	r9, r8
 800e612:	4417      	add	r7, r2
 800e614:	441f      	add	r7, r3
 800e616:	464b      	mov	r3, r9
 800e618:	bfa8      	it	ge
 800e61a:	4643      	movge	r3, r8
 800e61c:	42bb      	cmp	r3, r7
 800e61e:	bfa8      	it	ge
 800e620:	463b      	movge	r3, r7
 800e622:	2b00      	cmp	r3, #0
 800e624:	bfc2      	ittt	gt
 800e626:	eba8 0803 	subgt.w	r8, r8, r3
 800e62a:	1aff      	subgt	r7, r7, r3
 800e62c:	eba9 0903 	subgt.w	r9, r9, r3
 800e630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e632:	2b00      	cmp	r3, #0
 800e634:	dd17      	ble.n	800e666 <_strtod_l+0x75e>
 800e636:	4631      	mov	r1, r6
 800e638:	461a      	mov	r2, r3
 800e63a:	4620      	mov	r0, r4
 800e63c:	f002 fa1e 	bl	8010a7c <__pow5mult>
 800e640:	4606      	mov	r6, r0
 800e642:	2800      	cmp	r0, #0
 800e644:	f43f aea8 	beq.w	800e398 <_strtod_l+0x490>
 800e648:	4601      	mov	r1, r0
 800e64a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e64c:	4620      	mov	r0, r4
 800e64e:	f002 f96b 	bl	8010928 <__multiply>
 800e652:	900b      	str	r0, [sp, #44]	; 0x2c
 800e654:	2800      	cmp	r0, #0
 800e656:	f43f ae9f 	beq.w	800e398 <_strtod_l+0x490>
 800e65a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e65c:	4620      	mov	r0, r4
 800e65e:	f002 f84b 	bl	80106f8 <_Bfree>
 800e662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e664:	9318      	str	r3, [sp, #96]	; 0x60
 800e666:	f1b8 0f00 	cmp.w	r8, #0
 800e66a:	f300 808c 	bgt.w	800e786 <_strtod_l+0x87e>
 800e66e:	9b06      	ldr	r3, [sp, #24]
 800e670:	2b00      	cmp	r3, #0
 800e672:	dd08      	ble.n	800e686 <_strtod_l+0x77e>
 800e674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e676:	9905      	ldr	r1, [sp, #20]
 800e678:	4620      	mov	r0, r4
 800e67a:	f002 f9ff 	bl	8010a7c <__pow5mult>
 800e67e:	9005      	str	r0, [sp, #20]
 800e680:	2800      	cmp	r0, #0
 800e682:	f43f ae89 	beq.w	800e398 <_strtod_l+0x490>
 800e686:	2f00      	cmp	r7, #0
 800e688:	dd08      	ble.n	800e69c <_strtod_l+0x794>
 800e68a:	9905      	ldr	r1, [sp, #20]
 800e68c:	463a      	mov	r2, r7
 800e68e:	4620      	mov	r0, r4
 800e690:	f002 fa4e 	bl	8010b30 <__lshift>
 800e694:	9005      	str	r0, [sp, #20]
 800e696:	2800      	cmp	r0, #0
 800e698:	f43f ae7e 	beq.w	800e398 <_strtod_l+0x490>
 800e69c:	f1b9 0f00 	cmp.w	r9, #0
 800e6a0:	dd08      	ble.n	800e6b4 <_strtod_l+0x7ac>
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	464a      	mov	r2, r9
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f002 fa42 	bl	8010b30 <__lshift>
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f ae72 	beq.w	800e398 <_strtod_l+0x490>
 800e6b4:	9a05      	ldr	r2, [sp, #20]
 800e6b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	f002 fac5 	bl	8010c48 <__mdiff>
 800e6be:	4605      	mov	r5, r0
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	f43f ae69 	beq.w	800e398 <_strtod_l+0x490>
 800e6c6:	68c3      	ldr	r3, [r0, #12]
 800e6c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60c3      	str	r3, [r0, #12]
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	f002 fa9e 	bl	8010c10 <__mcmp>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	da60      	bge.n	800e79a <_strtod_l+0x892>
 800e6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6da:	ea53 030a 	orrs.w	r3, r3, sl
 800e6de:	f040 8082 	bne.w	800e7e6 <_strtod_l+0x8de>
 800e6e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d17d      	bne.n	800e7e6 <_strtod_l+0x8de>
 800e6ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6ee:	0d1b      	lsrs	r3, r3, #20
 800e6f0:	051b      	lsls	r3, r3, #20
 800e6f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e6f6:	d976      	bls.n	800e7e6 <_strtod_l+0x8de>
 800e6f8:	696b      	ldr	r3, [r5, #20]
 800e6fa:	b913      	cbnz	r3, 800e702 <_strtod_l+0x7fa>
 800e6fc:	692b      	ldr	r3, [r5, #16]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	dd71      	ble.n	800e7e6 <_strtod_l+0x8de>
 800e702:	4629      	mov	r1, r5
 800e704:	2201      	movs	r2, #1
 800e706:	4620      	mov	r0, r4
 800e708:	f002 fa12 	bl	8010b30 <__lshift>
 800e70c:	4631      	mov	r1, r6
 800e70e:	4605      	mov	r5, r0
 800e710:	f002 fa7e 	bl	8010c10 <__mcmp>
 800e714:	2800      	cmp	r0, #0
 800e716:	dd66      	ble.n	800e7e6 <_strtod_l+0x8de>
 800e718:	9904      	ldr	r1, [sp, #16]
 800e71a:	4a53      	ldr	r2, [pc, #332]	; (800e868 <_strtod_l+0x960>)
 800e71c:	465b      	mov	r3, fp
 800e71e:	2900      	cmp	r1, #0
 800e720:	f000 8081 	beq.w	800e826 <_strtod_l+0x91e>
 800e724:	ea02 010b 	and.w	r1, r2, fp
 800e728:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e72c:	dc7b      	bgt.n	800e826 <_strtod_l+0x91e>
 800e72e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e732:	f77f aea9 	ble.w	800e488 <_strtod_l+0x580>
 800e736:	4b4d      	ldr	r3, [pc, #308]	; (800e86c <_strtod_l+0x964>)
 800e738:	4650      	mov	r0, sl
 800e73a:	4659      	mov	r1, fp
 800e73c:	2200      	movs	r2, #0
 800e73e:	f7f1 ff5b 	bl	80005f8 <__aeabi_dmul>
 800e742:	460b      	mov	r3, r1
 800e744:	4303      	orrs	r3, r0
 800e746:	bf08      	it	eq
 800e748:	2322      	moveq	r3, #34	; 0x22
 800e74a:	4682      	mov	sl, r0
 800e74c:	468b      	mov	fp, r1
 800e74e:	bf08      	it	eq
 800e750:	6023      	streq	r3, [r4, #0]
 800e752:	e62b      	b.n	800e3ac <_strtod_l+0x4a4>
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	fa02 f303 	lsl.w	r3, r2, r3
 800e75c:	ea03 0a0a 	and.w	sl, r3, sl
 800e760:	e6e3      	b.n	800e52a <_strtod_l+0x622>
 800e762:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e766:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e76a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e76e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e772:	fa01 f308 	lsl.w	r3, r1, r8
 800e776:	9308      	str	r3, [sp, #32]
 800e778:	910d      	str	r1, [sp, #52]	; 0x34
 800e77a:	e746      	b.n	800e60a <_strtod_l+0x702>
 800e77c:	2300      	movs	r3, #0
 800e77e:	9308      	str	r3, [sp, #32]
 800e780:	2301      	movs	r3, #1
 800e782:	930d      	str	r3, [sp, #52]	; 0x34
 800e784:	e741      	b.n	800e60a <_strtod_l+0x702>
 800e786:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e788:	4642      	mov	r2, r8
 800e78a:	4620      	mov	r0, r4
 800e78c:	f002 f9d0 	bl	8010b30 <__lshift>
 800e790:	9018      	str	r0, [sp, #96]	; 0x60
 800e792:	2800      	cmp	r0, #0
 800e794:	f47f af6b 	bne.w	800e66e <_strtod_l+0x766>
 800e798:	e5fe      	b.n	800e398 <_strtod_l+0x490>
 800e79a:	465f      	mov	r7, fp
 800e79c:	d16e      	bne.n	800e87c <_strtod_l+0x974>
 800e79e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7a4:	b342      	cbz	r2, 800e7f8 <_strtod_l+0x8f0>
 800e7a6:	4a32      	ldr	r2, [pc, #200]	; (800e870 <_strtod_l+0x968>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d128      	bne.n	800e7fe <_strtod_l+0x8f6>
 800e7ac:	9b04      	ldr	r3, [sp, #16]
 800e7ae:	4651      	mov	r1, sl
 800e7b0:	b1eb      	cbz	r3, 800e7ee <_strtod_l+0x8e6>
 800e7b2:	4b2d      	ldr	r3, [pc, #180]	; (800e868 <_strtod_l+0x960>)
 800e7b4:	403b      	ands	r3, r7
 800e7b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e7be:	d819      	bhi.n	800e7f4 <_strtod_l+0x8ec>
 800e7c0:	0d1b      	lsrs	r3, r3, #20
 800e7c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e7ca:	4299      	cmp	r1, r3
 800e7cc:	d117      	bne.n	800e7fe <_strtod_l+0x8f6>
 800e7ce:	4b29      	ldr	r3, [pc, #164]	; (800e874 <_strtod_l+0x96c>)
 800e7d0:	429f      	cmp	r7, r3
 800e7d2:	d102      	bne.n	800e7da <_strtod_l+0x8d2>
 800e7d4:	3101      	adds	r1, #1
 800e7d6:	f43f addf 	beq.w	800e398 <_strtod_l+0x490>
 800e7da:	4b23      	ldr	r3, [pc, #140]	; (800e868 <_strtod_l+0x960>)
 800e7dc:	403b      	ands	r3, r7
 800e7de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e7e2:	f04f 0a00 	mov.w	sl, #0
 800e7e6:	9b04      	ldr	r3, [sp, #16]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1a4      	bne.n	800e736 <_strtod_l+0x82e>
 800e7ec:	e5de      	b.n	800e3ac <_strtod_l+0x4a4>
 800e7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f2:	e7ea      	b.n	800e7ca <_strtod_l+0x8c2>
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	e7e8      	b.n	800e7ca <_strtod_l+0x8c2>
 800e7f8:	ea53 030a 	orrs.w	r3, r3, sl
 800e7fc:	d08c      	beq.n	800e718 <_strtod_l+0x810>
 800e7fe:	9b08      	ldr	r3, [sp, #32]
 800e800:	b1db      	cbz	r3, 800e83a <_strtod_l+0x932>
 800e802:	423b      	tst	r3, r7
 800e804:	d0ef      	beq.n	800e7e6 <_strtod_l+0x8de>
 800e806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e808:	9a04      	ldr	r2, [sp, #16]
 800e80a:	4650      	mov	r0, sl
 800e80c:	4659      	mov	r1, fp
 800e80e:	b1c3      	cbz	r3, 800e842 <_strtod_l+0x93a>
 800e810:	f7ff fb5e 	bl	800ded0 <sulp>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	ec51 0b18 	vmov	r0, r1, d8
 800e81c:	f7f1 fd36 	bl	800028c <__adddf3>
 800e820:	4682      	mov	sl, r0
 800e822:	468b      	mov	fp, r1
 800e824:	e7df      	b.n	800e7e6 <_strtod_l+0x8de>
 800e826:	4013      	ands	r3, r2
 800e828:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e82c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e830:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e834:	f04f 3aff 	mov.w	sl, #4294967295
 800e838:	e7d5      	b.n	800e7e6 <_strtod_l+0x8de>
 800e83a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e83c:	ea13 0f0a 	tst.w	r3, sl
 800e840:	e7e0      	b.n	800e804 <_strtod_l+0x8fc>
 800e842:	f7ff fb45 	bl	800ded0 <sulp>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	ec51 0b18 	vmov	r0, r1, d8
 800e84e:	f7f1 fd1b 	bl	8000288 <__aeabi_dsub>
 800e852:	2200      	movs	r2, #0
 800e854:	2300      	movs	r3, #0
 800e856:	4682      	mov	sl, r0
 800e858:	468b      	mov	fp, r1
 800e85a:	f7f2 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800e85e:	2800      	cmp	r0, #0
 800e860:	d0c1      	beq.n	800e7e6 <_strtod_l+0x8de>
 800e862:	e611      	b.n	800e488 <_strtod_l+0x580>
 800e864:	fffffc02 	.word	0xfffffc02
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	39500000 	.word	0x39500000
 800e870:	000fffff 	.word	0x000fffff
 800e874:	7fefffff 	.word	0x7fefffff
 800e878:	08012ac0 	.word	0x08012ac0
 800e87c:	4631      	mov	r1, r6
 800e87e:	4628      	mov	r0, r5
 800e880:	f002 fb44 	bl	8010f0c <__ratio>
 800e884:	ec59 8b10 	vmov	r8, r9, d0
 800e888:	ee10 0a10 	vmov	r0, s0
 800e88c:	2200      	movs	r2, #0
 800e88e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e892:	4649      	mov	r1, r9
 800e894:	f7f2 f92c 	bl	8000af0 <__aeabi_dcmple>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d07a      	beq.n	800e992 <_strtod_l+0xa8a>
 800e89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d04a      	beq.n	800e938 <_strtod_l+0xa30>
 800e8a2:	4b95      	ldr	r3, [pc, #596]	; (800eaf8 <_strtod_l+0xbf0>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e8aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800eaf8 <_strtod_l+0xbf0>
 800e8ae:	f04f 0800 	mov.w	r8, #0
 800e8b2:	4b92      	ldr	r3, [pc, #584]	; (800eafc <_strtod_l+0xbf4>)
 800e8b4:	403b      	ands	r3, r7
 800e8b6:	930d      	str	r3, [sp, #52]	; 0x34
 800e8b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e8ba:	4b91      	ldr	r3, [pc, #580]	; (800eb00 <_strtod_l+0xbf8>)
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	f040 80b0 	bne.w	800ea22 <_strtod_l+0xb1a>
 800e8c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e8c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e8ca:	ec4b ab10 	vmov	d0, sl, fp
 800e8ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8d2:	f002 fa43 	bl	8010d5c <__ulp>
 800e8d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e8da:	ec53 2b10 	vmov	r2, r3, d0
 800e8de:	f7f1 fe8b 	bl	80005f8 <__aeabi_dmul>
 800e8e2:	4652      	mov	r2, sl
 800e8e4:	465b      	mov	r3, fp
 800e8e6:	f7f1 fcd1 	bl	800028c <__adddf3>
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4983      	ldr	r1, [pc, #524]	; (800eafc <_strtod_l+0xbf4>)
 800e8ee:	4a85      	ldr	r2, [pc, #532]	; (800eb04 <_strtod_l+0xbfc>)
 800e8f0:	4019      	ands	r1, r3
 800e8f2:	4291      	cmp	r1, r2
 800e8f4:	4682      	mov	sl, r0
 800e8f6:	d960      	bls.n	800e9ba <_strtod_l+0xab2>
 800e8f8:	ee18 3a90 	vmov	r3, s17
 800e8fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e900:	4293      	cmp	r3, r2
 800e902:	d104      	bne.n	800e90e <_strtod_l+0xa06>
 800e904:	ee18 3a10 	vmov	r3, s16
 800e908:	3301      	adds	r3, #1
 800e90a:	f43f ad45 	beq.w	800e398 <_strtod_l+0x490>
 800e90e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800eb10 <_strtod_l+0xc08>
 800e912:	f04f 3aff 	mov.w	sl, #4294967295
 800e916:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e918:	4620      	mov	r0, r4
 800e91a:	f001 feed 	bl	80106f8 <_Bfree>
 800e91e:	9905      	ldr	r1, [sp, #20]
 800e920:	4620      	mov	r0, r4
 800e922:	f001 fee9 	bl	80106f8 <_Bfree>
 800e926:	4631      	mov	r1, r6
 800e928:	4620      	mov	r0, r4
 800e92a:	f001 fee5 	bl	80106f8 <_Bfree>
 800e92e:	4629      	mov	r1, r5
 800e930:	4620      	mov	r0, r4
 800e932:	f001 fee1 	bl	80106f8 <_Bfree>
 800e936:	e61a      	b.n	800e56e <_strtod_l+0x666>
 800e938:	f1ba 0f00 	cmp.w	sl, #0
 800e93c:	d11b      	bne.n	800e976 <_strtod_l+0xa6e>
 800e93e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e942:	b9f3      	cbnz	r3, 800e982 <_strtod_l+0xa7a>
 800e944:	4b6c      	ldr	r3, [pc, #432]	; (800eaf8 <_strtod_l+0xbf0>)
 800e946:	2200      	movs	r2, #0
 800e948:	4640      	mov	r0, r8
 800e94a:	4649      	mov	r1, r9
 800e94c:	f7f2 f8c6 	bl	8000adc <__aeabi_dcmplt>
 800e950:	b9d0      	cbnz	r0, 800e988 <_strtod_l+0xa80>
 800e952:	4640      	mov	r0, r8
 800e954:	4649      	mov	r1, r9
 800e956:	4b6c      	ldr	r3, [pc, #432]	; (800eb08 <_strtod_l+0xc00>)
 800e958:	2200      	movs	r2, #0
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	4680      	mov	r8, r0
 800e960:	4689      	mov	r9, r1
 800e962:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e966:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e96a:	9315      	str	r3, [sp, #84]	; 0x54
 800e96c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e970:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e974:	e79d      	b.n	800e8b2 <_strtod_l+0x9aa>
 800e976:	f1ba 0f01 	cmp.w	sl, #1
 800e97a:	d102      	bne.n	800e982 <_strtod_l+0xa7a>
 800e97c:	2f00      	cmp	r7, #0
 800e97e:	f43f ad83 	beq.w	800e488 <_strtod_l+0x580>
 800e982:	4b62      	ldr	r3, [pc, #392]	; (800eb0c <_strtod_l+0xc04>)
 800e984:	2200      	movs	r2, #0
 800e986:	e78e      	b.n	800e8a6 <_strtod_l+0x99e>
 800e988:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800eb08 <_strtod_l+0xc00>
 800e98c:	f04f 0800 	mov.w	r8, #0
 800e990:	e7e7      	b.n	800e962 <_strtod_l+0xa5a>
 800e992:	4b5d      	ldr	r3, [pc, #372]	; (800eb08 <_strtod_l+0xc00>)
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	2200      	movs	r2, #0
 800e99a:	f7f1 fe2d 	bl	80005f8 <__aeabi_dmul>
 800e99e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9a0:	4680      	mov	r8, r0
 800e9a2:	4689      	mov	r9, r1
 800e9a4:	b933      	cbnz	r3, 800e9b4 <_strtod_l+0xaac>
 800e9a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9aa:	900e      	str	r0, [sp, #56]	; 0x38
 800e9ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800e9ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e9b2:	e7dd      	b.n	800e970 <_strtod_l+0xa68>
 800e9b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e9b8:	e7f9      	b.n	800e9ae <_strtod_l+0xaa6>
 800e9ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e9be:	9b04      	ldr	r3, [sp, #16]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1a8      	bne.n	800e916 <_strtod_l+0xa0e>
 800e9c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e9c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e9ca:	0d1b      	lsrs	r3, r3, #20
 800e9cc:	051b      	lsls	r3, r3, #20
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d1a1      	bne.n	800e916 <_strtod_l+0xa0e>
 800e9d2:	4640      	mov	r0, r8
 800e9d4:	4649      	mov	r1, r9
 800e9d6:	f7f2 f96f 	bl	8000cb8 <__aeabi_d2lz>
 800e9da:	f7f1 fddf 	bl	800059c <__aeabi_l2d>
 800e9de:	4602      	mov	r2, r0
 800e9e0:	460b      	mov	r3, r1
 800e9e2:	4640      	mov	r0, r8
 800e9e4:	4649      	mov	r1, r9
 800e9e6:	f7f1 fc4f 	bl	8000288 <__aeabi_dsub>
 800e9ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e9ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9f0:	ea43 030a 	orr.w	r3, r3, sl
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	4680      	mov	r8, r0
 800e9f8:	4689      	mov	r9, r1
 800e9fa:	d055      	beq.n	800eaa8 <_strtod_l+0xba0>
 800e9fc:	a336      	add	r3, pc, #216	; (adr r3, 800ead8 <_strtod_l+0xbd0>)
 800e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea02:	f7f2 f86b 	bl	8000adc <__aeabi_dcmplt>
 800ea06:	2800      	cmp	r0, #0
 800ea08:	f47f acd0 	bne.w	800e3ac <_strtod_l+0x4a4>
 800ea0c:	a334      	add	r3, pc, #208	; (adr r3, 800eae0 <_strtod_l+0xbd8>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	4640      	mov	r0, r8
 800ea14:	4649      	mov	r1, r9
 800ea16:	f7f2 f87f 	bl	8000b18 <__aeabi_dcmpgt>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	f43f af7b 	beq.w	800e916 <_strtod_l+0xa0e>
 800ea20:	e4c4      	b.n	800e3ac <_strtod_l+0x4a4>
 800ea22:	9b04      	ldr	r3, [sp, #16]
 800ea24:	b333      	cbz	r3, 800ea74 <_strtod_l+0xb6c>
 800ea26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ea2c:	d822      	bhi.n	800ea74 <_strtod_l+0xb6c>
 800ea2e:	a32e      	add	r3, pc, #184	; (adr r3, 800eae8 <_strtod_l+0xbe0>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4640      	mov	r0, r8
 800ea36:	4649      	mov	r1, r9
 800ea38:	f7f2 f85a 	bl	8000af0 <__aeabi_dcmple>
 800ea3c:	b1a0      	cbz	r0, 800ea68 <_strtod_l+0xb60>
 800ea3e:	4649      	mov	r1, r9
 800ea40:	4640      	mov	r0, r8
 800ea42:	f7f2 f8b1 	bl	8000ba8 <__aeabi_d2uiz>
 800ea46:	2801      	cmp	r0, #1
 800ea48:	bf38      	it	cc
 800ea4a:	2001      	movcc	r0, #1
 800ea4c:	f7f1 fd5a 	bl	8000504 <__aeabi_ui2d>
 800ea50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea52:	4680      	mov	r8, r0
 800ea54:	4689      	mov	r9, r1
 800ea56:	bb23      	cbnz	r3, 800eaa2 <_strtod_l+0xb9a>
 800ea58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea5c:	9010      	str	r0, [sp, #64]	; 0x40
 800ea5e:	9311      	str	r3, [sp, #68]	; 0x44
 800ea60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ea64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ea68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ea70:	1a9b      	subs	r3, r3, r2
 800ea72:	9309      	str	r3, [sp, #36]	; 0x24
 800ea74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea78:	eeb0 0a48 	vmov.f32	s0, s16
 800ea7c:	eef0 0a68 	vmov.f32	s1, s17
 800ea80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea84:	f002 f96a 	bl	8010d5c <__ulp>
 800ea88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea8c:	ec53 2b10 	vmov	r2, r3, d0
 800ea90:	f7f1 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ea94:	ec53 2b18 	vmov	r2, r3, d8
 800ea98:	f7f1 fbf8 	bl	800028c <__adddf3>
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	468b      	mov	fp, r1
 800eaa0:	e78d      	b.n	800e9be <_strtod_l+0xab6>
 800eaa2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800eaa6:	e7db      	b.n	800ea60 <_strtod_l+0xb58>
 800eaa8:	a311      	add	r3, pc, #68	; (adr r3, 800eaf0 <_strtod_l+0xbe8>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	f7f2 f815 	bl	8000adc <__aeabi_dcmplt>
 800eab2:	e7b2      	b.n	800ea1a <_strtod_l+0xb12>
 800eab4:	2300      	movs	r3, #0
 800eab6:	930a      	str	r3, [sp, #40]	; 0x28
 800eab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eaba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eabc:	6013      	str	r3, [r2, #0]
 800eabe:	f7ff ba6b 	b.w	800df98 <_strtod_l+0x90>
 800eac2:	2a65      	cmp	r2, #101	; 0x65
 800eac4:	f43f ab5f 	beq.w	800e186 <_strtod_l+0x27e>
 800eac8:	2a45      	cmp	r2, #69	; 0x45
 800eaca:	f43f ab5c 	beq.w	800e186 <_strtod_l+0x27e>
 800eace:	2301      	movs	r3, #1
 800ead0:	f7ff bb94 	b.w	800e1fc <_strtod_l+0x2f4>
 800ead4:	f3af 8000 	nop.w
 800ead8:	94a03595 	.word	0x94a03595
 800eadc:	3fdfffff 	.word	0x3fdfffff
 800eae0:	35afe535 	.word	0x35afe535
 800eae4:	3fe00000 	.word	0x3fe00000
 800eae8:	ffc00000 	.word	0xffc00000
 800eaec:	41dfffff 	.word	0x41dfffff
 800eaf0:	94a03595 	.word	0x94a03595
 800eaf4:	3fcfffff 	.word	0x3fcfffff
 800eaf8:	3ff00000 	.word	0x3ff00000
 800eafc:	7ff00000 	.word	0x7ff00000
 800eb00:	7fe00000 	.word	0x7fe00000
 800eb04:	7c9fffff 	.word	0x7c9fffff
 800eb08:	3fe00000 	.word	0x3fe00000
 800eb0c:	bff00000 	.word	0xbff00000
 800eb10:	7fefffff 	.word	0x7fefffff

0800eb14 <_strtod_r>:
 800eb14:	4b01      	ldr	r3, [pc, #4]	; (800eb1c <_strtod_r+0x8>)
 800eb16:	f7ff b9f7 	b.w	800df08 <_strtod_l>
 800eb1a:	bf00      	nop
 800eb1c:	200000ac 	.word	0x200000ac

0800eb20 <_strtol_l.constprop.0>:
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb26:	d001      	beq.n	800eb2c <_strtol_l.constprop.0+0xc>
 800eb28:	2b24      	cmp	r3, #36	; 0x24
 800eb2a:	d906      	bls.n	800eb3a <_strtol_l.constprop.0+0x1a>
 800eb2c:	f7fe f89a 	bl	800cc64 <__errno>
 800eb30:	2316      	movs	r3, #22
 800eb32:	6003      	str	r3, [r0, #0]
 800eb34:	2000      	movs	r0, #0
 800eb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ec20 <_strtol_l.constprop.0+0x100>
 800eb3e:	460d      	mov	r5, r1
 800eb40:	462e      	mov	r6, r5
 800eb42:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb46:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eb4a:	f017 0708 	ands.w	r7, r7, #8
 800eb4e:	d1f7      	bne.n	800eb40 <_strtol_l.constprop.0+0x20>
 800eb50:	2c2d      	cmp	r4, #45	; 0x2d
 800eb52:	d132      	bne.n	800ebba <_strtol_l.constprop.0+0x9a>
 800eb54:	782c      	ldrb	r4, [r5, #0]
 800eb56:	2701      	movs	r7, #1
 800eb58:	1cb5      	adds	r5, r6, #2
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d05b      	beq.n	800ec16 <_strtol_l.constprop.0+0xf6>
 800eb5e:	2b10      	cmp	r3, #16
 800eb60:	d109      	bne.n	800eb76 <_strtol_l.constprop.0+0x56>
 800eb62:	2c30      	cmp	r4, #48	; 0x30
 800eb64:	d107      	bne.n	800eb76 <_strtol_l.constprop.0+0x56>
 800eb66:	782c      	ldrb	r4, [r5, #0]
 800eb68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb6c:	2c58      	cmp	r4, #88	; 0x58
 800eb6e:	d14d      	bne.n	800ec0c <_strtol_l.constprop.0+0xec>
 800eb70:	786c      	ldrb	r4, [r5, #1]
 800eb72:	2310      	movs	r3, #16
 800eb74:	3502      	adds	r5, #2
 800eb76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eb7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb7e:	f04f 0c00 	mov.w	ip, #0
 800eb82:	fbb8 f9f3 	udiv	r9, r8, r3
 800eb86:	4666      	mov	r6, ip
 800eb88:	fb03 8a19 	mls	sl, r3, r9, r8
 800eb8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800eb90:	f1be 0f09 	cmp.w	lr, #9
 800eb94:	d816      	bhi.n	800ebc4 <_strtol_l.constprop.0+0xa4>
 800eb96:	4674      	mov	r4, lr
 800eb98:	42a3      	cmp	r3, r4
 800eb9a:	dd24      	ble.n	800ebe6 <_strtol_l.constprop.0+0xc6>
 800eb9c:	f1bc 0f00 	cmp.w	ip, #0
 800eba0:	db1e      	blt.n	800ebe0 <_strtol_l.constprop.0+0xc0>
 800eba2:	45b1      	cmp	r9, r6
 800eba4:	d31c      	bcc.n	800ebe0 <_strtol_l.constprop.0+0xc0>
 800eba6:	d101      	bne.n	800ebac <_strtol_l.constprop.0+0x8c>
 800eba8:	45a2      	cmp	sl, r4
 800ebaa:	db19      	blt.n	800ebe0 <_strtol_l.constprop.0+0xc0>
 800ebac:	fb06 4603 	mla	r6, r6, r3, r4
 800ebb0:	f04f 0c01 	mov.w	ip, #1
 800ebb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebb8:	e7e8      	b.n	800eb8c <_strtol_l.constprop.0+0x6c>
 800ebba:	2c2b      	cmp	r4, #43	; 0x2b
 800ebbc:	bf04      	itt	eq
 800ebbe:	782c      	ldrbeq	r4, [r5, #0]
 800ebc0:	1cb5      	addeq	r5, r6, #2
 800ebc2:	e7ca      	b.n	800eb5a <_strtol_l.constprop.0+0x3a>
 800ebc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ebc8:	f1be 0f19 	cmp.w	lr, #25
 800ebcc:	d801      	bhi.n	800ebd2 <_strtol_l.constprop.0+0xb2>
 800ebce:	3c37      	subs	r4, #55	; 0x37
 800ebd0:	e7e2      	b.n	800eb98 <_strtol_l.constprop.0+0x78>
 800ebd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ebd6:	f1be 0f19 	cmp.w	lr, #25
 800ebda:	d804      	bhi.n	800ebe6 <_strtol_l.constprop.0+0xc6>
 800ebdc:	3c57      	subs	r4, #87	; 0x57
 800ebde:	e7db      	b.n	800eb98 <_strtol_l.constprop.0+0x78>
 800ebe0:	f04f 3cff 	mov.w	ip, #4294967295
 800ebe4:	e7e6      	b.n	800ebb4 <_strtol_l.constprop.0+0x94>
 800ebe6:	f1bc 0f00 	cmp.w	ip, #0
 800ebea:	da05      	bge.n	800ebf8 <_strtol_l.constprop.0+0xd8>
 800ebec:	2322      	movs	r3, #34	; 0x22
 800ebee:	6003      	str	r3, [r0, #0]
 800ebf0:	4646      	mov	r6, r8
 800ebf2:	b942      	cbnz	r2, 800ec06 <_strtol_l.constprop.0+0xe6>
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	e79e      	b.n	800eb36 <_strtol_l.constprop.0+0x16>
 800ebf8:	b107      	cbz	r7, 800ebfc <_strtol_l.constprop.0+0xdc>
 800ebfa:	4276      	negs	r6, r6
 800ebfc:	2a00      	cmp	r2, #0
 800ebfe:	d0f9      	beq.n	800ebf4 <_strtol_l.constprop.0+0xd4>
 800ec00:	f1bc 0f00 	cmp.w	ip, #0
 800ec04:	d000      	beq.n	800ec08 <_strtol_l.constprop.0+0xe8>
 800ec06:	1e69      	subs	r1, r5, #1
 800ec08:	6011      	str	r1, [r2, #0]
 800ec0a:	e7f3      	b.n	800ebf4 <_strtol_l.constprop.0+0xd4>
 800ec0c:	2430      	movs	r4, #48	; 0x30
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1b1      	bne.n	800eb76 <_strtol_l.constprop.0+0x56>
 800ec12:	2308      	movs	r3, #8
 800ec14:	e7af      	b.n	800eb76 <_strtol_l.constprop.0+0x56>
 800ec16:	2c30      	cmp	r4, #48	; 0x30
 800ec18:	d0a5      	beq.n	800eb66 <_strtol_l.constprop.0+0x46>
 800ec1a:	230a      	movs	r3, #10
 800ec1c:	e7ab      	b.n	800eb76 <_strtol_l.constprop.0+0x56>
 800ec1e:	bf00      	nop
 800ec20:	08012ae9 	.word	0x08012ae9

0800ec24 <_strtol_r>:
 800ec24:	f7ff bf7c 	b.w	800eb20 <_strtol_l.constprop.0>

0800ec28 <__swbuf_r>:
 800ec28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec2a:	460e      	mov	r6, r1
 800ec2c:	4614      	mov	r4, r2
 800ec2e:	4605      	mov	r5, r0
 800ec30:	b118      	cbz	r0, 800ec3a <__swbuf_r+0x12>
 800ec32:	6983      	ldr	r3, [r0, #24]
 800ec34:	b90b      	cbnz	r3, 800ec3a <__swbuf_r+0x12>
 800ec36:	f001 f85d 	bl	800fcf4 <__sinit>
 800ec3a:	4b21      	ldr	r3, [pc, #132]	; (800ecc0 <__swbuf_r+0x98>)
 800ec3c:	429c      	cmp	r4, r3
 800ec3e:	d12b      	bne.n	800ec98 <__swbuf_r+0x70>
 800ec40:	686c      	ldr	r4, [r5, #4]
 800ec42:	69a3      	ldr	r3, [r4, #24]
 800ec44:	60a3      	str	r3, [r4, #8]
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	071a      	lsls	r2, r3, #28
 800ec4a:	d52f      	bpl.n	800ecac <__swbuf_r+0x84>
 800ec4c:	6923      	ldr	r3, [r4, #16]
 800ec4e:	b36b      	cbz	r3, 800ecac <__swbuf_r+0x84>
 800ec50:	6923      	ldr	r3, [r4, #16]
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	1ac0      	subs	r0, r0, r3
 800ec56:	6963      	ldr	r3, [r4, #20]
 800ec58:	b2f6      	uxtb	r6, r6
 800ec5a:	4283      	cmp	r3, r0
 800ec5c:	4637      	mov	r7, r6
 800ec5e:	dc04      	bgt.n	800ec6a <__swbuf_r+0x42>
 800ec60:	4621      	mov	r1, r4
 800ec62:	4628      	mov	r0, r5
 800ec64:	f000 ffa0 	bl	800fba8 <_fflush_r>
 800ec68:	bb30      	cbnz	r0, 800ecb8 <__swbuf_r+0x90>
 800ec6a:	68a3      	ldr	r3, [r4, #8]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	60a3      	str	r3, [r4, #8]
 800ec70:	6823      	ldr	r3, [r4, #0]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	6022      	str	r2, [r4, #0]
 800ec76:	701e      	strb	r6, [r3, #0]
 800ec78:	6963      	ldr	r3, [r4, #20]
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	4283      	cmp	r3, r0
 800ec7e:	d004      	beq.n	800ec8a <__swbuf_r+0x62>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	07db      	lsls	r3, r3, #31
 800ec84:	d506      	bpl.n	800ec94 <__swbuf_r+0x6c>
 800ec86:	2e0a      	cmp	r6, #10
 800ec88:	d104      	bne.n	800ec94 <__swbuf_r+0x6c>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	f000 ff8b 	bl	800fba8 <_fflush_r>
 800ec92:	b988      	cbnz	r0, 800ecb8 <__swbuf_r+0x90>
 800ec94:	4638      	mov	r0, r7
 800ec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec98:	4b0a      	ldr	r3, [pc, #40]	; (800ecc4 <__swbuf_r+0x9c>)
 800ec9a:	429c      	cmp	r4, r3
 800ec9c:	d101      	bne.n	800eca2 <__swbuf_r+0x7a>
 800ec9e:	68ac      	ldr	r4, [r5, #8]
 800eca0:	e7cf      	b.n	800ec42 <__swbuf_r+0x1a>
 800eca2:	4b09      	ldr	r3, [pc, #36]	; (800ecc8 <__swbuf_r+0xa0>)
 800eca4:	429c      	cmp	r4, r3
 800eca6:	bf08      	it	eq
 800eca8:	68ec      	ldreq	r4, [r5, #12]
 800ecaa:	e7ca      	b.n	800ec42 <__swbuf_r+0x1a>
 800ecac:	4621      	mov	r1, r4
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f000 f80c 	bl	800eccc <__swsetup_r>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d0cb      	beq.n	800ec50 <__swbuf_r+0x28>
 800ecb8:	f04f 37ff 	mov.w	r7, #4294967295
 800ecbc:	e7ea      	b.n	800ec94 <__swbuf_r+0x6c>
 800ecbe:	bf00      	nop
 800ecc0:	08012c9c 	.word	0x08012c9c
 800ecc4:	08012cbc 	.word	0x08012cbc
 800ecc8:	08012c7c 	.word	0x08012c7c

0800eccc <__swsetup_r>:
 800eccc:	4b32      	ldr	r3, [pc, #200]	; (800ed98 <__swsetup_r+0xcc>)
 800ecce:	b570      	push	{r4, r5, r6, lr}
 800ecd0:	681d      	ldr	r5, [r3, #0]
 800ecd2:	4606      	mov	r6, r0
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	b125      	cbz	r5, 800ece2 <__swsetup_r+0x16>
 800ecd8:	69ab      	ldr	r3, [r5, #24]
 800ecda:	b913      	cbnz	r3, 800ece2 <__swsetup_r+0x16>
 800ecdc:	4628      	mov	r0, r5
 800ecde:	f001 f809 	bl	800fcf4 <__sinit>
 800ece2:	4b2e      	ldr	r3, [pc, #184]	; (800ed9c <__swsetup_r+0xd0>)
 800ece4:	429c      	cmp	r4, r3
 800ece6:	d10f      	bne.n	800ed08 <__swsetup_r+0x3c>
 800ece8:	686c      	ldr	r4, [r5, #4]
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ecf0:	0719      	lsls	r1, r3, #28
 800ecf2:	d42c      	bmi.n	800ed4e <__swsetup_r+0x82>
 800ecf4:	06dd      	lsls	r5, r3, #27
 800ecf6:	d411      	bmi.n	800ed1c <__swsetup_r+0x50>
 800ecf8:	2309      	movs	r3, #9
 800ecfa:	6033      	str	r3, [r6, #0]
 800ecfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed00:	81a3      	strh	r3, [r4, #12]
 800ed02:	f04f 30ff 	mov.w	r0, #4294967295
 800ed06:	e03e      	b.n	800ed86 <__swsetup_r+0xba>
 800ed08:	4b25      	ldr	r3, [pc, #148]	; (800eda0 <__swsetup_r+0xd4>)
 800ed0a:	429c      	cmp	r4, r3
 800ed0c:	d101      	bne.n	800ed12 <__swsetup_r+0x46>
 800ed0e:	68ac      	ldr	r4, [r5, #8]
 800ed10:	e7eb      	b.n	800ecea <__swsetup_r+0x1e>
 800ed12:	4b24      	ldr	r3, [pc, #144]	; (800eda4 <__swsetup_r+0xd8>)
 800ed14:	429c      	cmp	r4, r3
 800ed16:	bf08      	it	eq
 800ed18:	68ec      	ldreq	r4, [r5, #12]
 800ed1a:	e7e6      	b.n	800ecea <__swsetup_r+0x1e>
 800ed1c:	0758      	lsls	r0, r3, #29
 800ed1e:	d512      	bpl.n	800ed46 <__swsetup_r+0x7a>
 800ed20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed22:	b141      	cbz	r1, 800ed36 <__swsetup_r+0x6a>
 800ed24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed28:	4299      	cmp	r1, r3
 800ed2a:	d002      	beq.n	800ed32 <__swsetup_r+0x66>
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	f7fd ffd3 	bl	800ccd8 <_free_r>
 800ed32:	2300      	movs	r3, #0
 800ed34:	6363      	str	r3, [r4, #52]	; 0x34
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed3c:	81a3      	strh	r3, [r4, #12]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	6923      	ldr	r3, [r4, #16]
 800ed44:	6023      	str	r3, [r4, #0]
 800ed46:	89a3      	ldrh	r3, [r4, #12]
 800ed48:	f043 0308 	orr.w	r3, r3, #8
 800ed4c:	81a3      	strh	r3, [r4, #12]
 800ed4e:	6923      	ldr	r3, [r4, #16]
 800ed50:	b94b      	cbnz	r3, 800ed66 <__swsetup_r+0x9a>
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed5c:	d003      	beq.n	800ed66 <__swsetup_r+0x9a>
 800ed5e:	4621      	mov	r1, r4
 800ed60:	4630      	mov	r0, r6
 800ed62:	f001 fc1d 	bl	80105a0 <__smakebuf_r>
 800ed66:	89a0      	ldrh	r0, [r4, #12]
 800ed68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed6c:	f010 0301 	ands.w	r3, r0, #1
 800ed70:	d00a      	beq.n	800ed88 <__swsetup_r+0xbc>
 800ed72:	2300      	movs	r3, #0
 800ed74:	60a3      	str	r3, [r4, #8]
 800ed76:	6963      	ldr	r3, [r4, #20]
 800ed78:	425b      	negs	r3, r3
 800ed7a:	61a3      	str	r3, [r4, #24]
 800ed7c:	6923      	ldr	r3, [r4, #16]
 800ed7e:	b943      	cbnz	r3, 800ed92 <__swsetup_r+0xc6>
 800ed80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed84:	d1ba      	bne.n	800ecfc <__swsetup_r+0x30>
 800ed86:	bd70      	pop	{r4, r5, r6, pc}
 800ed88:	0781      	lsls	r1, r0, #30
 800ed8a:	bf58      	it	pl
 800ed8c:	6963      	ldrpl	r3, [r4, #20]
 800ed8e:	60a3      	str	r3, [r4, #8]
 800ed90:	e7f4      	b.n	800ed7c <__swsetup_r+0xb0>
 800ed92:	2000      	movs	r0, #0
 800ed94:	e7f7      	b.n	800ed86 <__swsetup_r+0xba>
 800ed96:	bf00      	nop
 800ed98:	20000044 	.word	0x20000044
 800ed9c:	08012c9c 	.word	0x08012c9c
 800eda0:	08012cbc 	.word	0x08012cbc
 800eda4:	08012c7c 	.word	0x08012c7c

0800eda8 <quorem>:
 800eda8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	6903      	ldr	r3, [r0, #16]
 800edae:	690c      	ldr	r4, [r1, #16]
 800edb0:	42a3      	cmp	r3, r4
 800edb2:	4607      	mov	r7, r0
 800edb4:	f2c0 8081 	blt.w	800eeba <quorem+0x112>
 800edb8:	3c01      	subs	r4, #1
 800edba:	f101 0814 	add.w	r8, r1, #20
 800edbe:	f100 0514 	add.w	r5, r0, #20
 800edc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800edcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edd0:	3301      	adds	r3, #1
 800edd2:	429a      	cmp	r2, r3
 800edd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800edd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eddc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ede0:	d331      	bcc.n	800ee46 <quorem+0x9e>
 800ede2:	f04f 0e00 	mov.w	lr, #0
 800ede6:	4640      	mov	r0, r8
 800ede8:	46ac      	mov	ip, r5
 800edea:	46f2      	mov	sl, lr
 800edec:	f850 2b04 	ldr.w	r2, [r0], #4
 800edf0:	b293      	uxth	r3, r2
 800edf2:	fb06 e303 	mla	r3, r6, r3, lr
 800edf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	ebaa 0303 	sub.w	r3, sl, r3
 800ee00:	f8dc a000 	ldr.w	sl, [ip]
 800ee04:	0c12      	lsrs	r2, r2, #16
 800ee06:	fa13 f38a 	uxtah	r3, r3, sl
 800ee0a:	fb06 e202 	mla	r2, r6, r2, lr
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	9b00      	ldr	r3, [sp, #0]
 800ee12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee16:	b292      	uxth	r2, r2
 800ee18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ee1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee20:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee24:	4581      	cmp	r9, r0
 800ee26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee2a:	f84c 3b04 	str.w	r3, [ip], #4
 800ee2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee32:	d2db      	bcs.n	800edec <quorem+0x44>
 800ee34:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee38:	b92b      	cbnz	r3, 800ee46 <quorem+0x9e>
 800ee3a:	9b01      	ldr	r3, [sp, #4]
 800ee3c:	3b04      	subs	r3, #4
 800ee3e:	429d      	cmp	r5, r3
 800ee40:	461a      	mov	r2, r3
 800ee42:	d32e      	bcc.n	800eea2 <quorem+0xfa>
 800ee44:	613c      	str	r4, [r7, #16]
 800ee46:	4638      	mov	r0, r7
 800ee48:	f001 fee2 	bl	8010c10 <__mcmp>
 800ee4c:	2800      	cmp	r0, #0
 800ee4e:	db24      	blt.n	800ee9a <quorem+0xf2>
 800ee50:	3601      	adds	r6, #1
 800ee52:	4628      	mov	r0, r5
 800ee54:	f04f 0c00 	mov.w	ip, #0
 800ee58:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee5c:	f8d0 e000 	ldr.w	lr, [r0]
 800ee60:	b293      	uxth	r3, r2
 800ee62:	ebac 0303 	sub.w	r3, ip, r3
 800ee66:	0c12      	lsrs	r2, r2, #16
 800ee68:	fa13 f38e 	uxtah	r3, r3, lr
 800ee6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ee70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee7a:	45c1      	cmp	r9, r8
 800ee7c:	f840 3b04 	str.w	r3, [r0], #4
 800ee80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee84:	d2e8      	bcs.n	800ee58 <quorem+0xb0>
 800ee86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee8e:	b922      	cbnz	r2, 800ee9a <quorem+0xf2>
 800ee90:	3b04      	subs	r3, #4
 800ee92:	429d      	cmp	r5, r3
 800ee94:	461a      	mov	r2, r3
 800ee96:	d30a      	bcc.n	800eeae <quorem+0x106>
 800ee98:	613c      	str	r4, [r7, #16]
 800ee9a:	4630      	mov	r0, r6
 800ee9c:	b003      	add	sp, #12
 800ee9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea2:	6812      	ldr	r2, [r2, #0]
 800eea4:	3b04      	subs	r3, #4
 800eea6:	2a00      	cmp	r2, #0
 800eea8:	d1cc      	bne.n	800ee44 <quorem+0x9c>
 800eeaa:	3c01      	subs	r4, #1
 800eeac:	e7c7      	b.n	800ee3e <quorem+0x96>
 800eeae:	6812      	ldr	r2, [r2, #0]
 800eeb0:	3b04      	subs	r3, #4
 800eeb2:	2a00      	cmp	r2, #0
 800eeb4:	d1f0      	bne.n	800ee98 <quorem+0xf0>
 800eeb6:	3c01      	subs	r4, #1
 800eeb8:	e7eb      	b.n	800ee92 <quorem+0xea>
 800eeba:	2000      	movs	r0, #0
 800eebc:	e7ee      	b.n	800ee9c <quorem+0xf4>
	...

0800eec0 <_dtoa_r>:
 800eec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec4:	ed2d 8b04 	vpush	{d8-d9}
 800eec8:	ec57 6b10 	vmov	r6, r7, d0
 800eecc:	b093      	sub	sp, #76	; 0x4c
 800eece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eed4:	9106      	str	r1, [sp, #24]
 800eed6:	ee10 aa10 	vmov	sl, s0
 800eeda:	4604      	mov	r4, r0
 800eedc:	9209      	str	r2, [sp, #36]	; 0x24
 800eede:	930c      	str	r3, [sp, #48]	; 0x30
 800eee0:	46bb      	mov	fp, r7
 800eee2:	b975      	cbnz	r5, 800ef02 <_dtoa_r+0x42>
 800eee4:	2010      	movs	r0, #16
 800eee6:	f7fd fee7 	bl	800ccb8 <malloc>
 800eeea:	4602      	mov	r2, r0
 800eeec:	6260      	str	r0, [r4, #36]	; 0x24
 800eeee:	b920      	cbnz	r0, 800eefa <_dtoa_r+0x3a>
 800eef0:	4ba7      	ldr	r3, [pc, #668]	; (800f190 <_dtoa_r+0x2d0>)
 800eef2:	21ea      	movs	r1, #234	; 0xea
 800eef4:	48a7      	ldr	r0, [pc, #668]	; (800f194 <_dtoa_r+0x2d4>)
 800eef6:	f003 f8fd 	bl	80120f4 <__assert_func>
 800eefa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eefe:	6005      	str	r5, [r0, #0]
 800ef00:	60c5      	str	r5, [r0, #12]
 800ef02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef04:	6819      	ldr	r1, [r3, #0]
 800ef06:	b151      	cbz	r1, 800ef1e <_dtoa_r+0x5e>
 800ef08:	685a      	ldr	r2, [r3, #4]
 800ef0a:	604a      	str	r2, [r1, #4]
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	4093      	lsls	r3, r2
 800ef10:	608b      	str	r3, [r1, #8]
 800ef12:	4620      	mov	r0, r4
 800ef14:	f001 fbf0 	bl	80106f8 <_Bfree>
 800ef18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]
 800ef1e:	1e3b      	subs	r3, r7, #0
 800ef20:	bfaa      	itet	ge
 800ef22:	2300      	movge	r3, #0
 800ef24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ef28:	f8c8 3000 	strge.w	r3, [r8]
 800ef2c:	4b9a      	ldr	r3, [pc, #616]	; (800f198 <_dtoa_r+0x2d8>)
 800ef2e:	bfbc      	itt	lt
 800ef30:	2201      	movlt	r2, #1
 800ef32:	f8c8 2000 	strlt.w	r2, [r8]
 800ef36:	ea33 030b 	bics.w	r3, r3, fp
 800ef3a:	d11b      	bne.n	800ef74 <_dtoa_r+0xb4>
 800ef3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef42:	6013      	str	r3, [r2, #0]
 800ef44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef48:	4333      	orrs	r3, r6
 800ef4a:	f000 8592 	beq.w	800fa72 <_dtoa_r+0xbb2>
 800ef4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef50:	b963      	cbnz	r3, 800ef6c <_dtoa_r+0xac>
 800ef52:	4b92      	ldr	r3, [pc, #584]	; (800f19c <_dtoa_r+0x2dc>)
 800ef54:	e022      	b.n	800ef9c <_dtoa_r+0xdc>
 800ef56:	4b92      	ldr	r3, [pc, #584]	; (800f1a0 <_dtoa_r+0x2e0>)
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	3308      	adds	r3, #8
 800ef5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	9801      	ldr	r0, [sp, #4]
 800ef62:	b013      	add	sp, #76	; 0x4c
 800ef64:	ecbd 8b04 	vpop	{d8-d9}
 800ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	4b8b      	ldr	r3, [pc, #556]	; (800f19c <_dtoa_r+0x2dc>)
 800ef6e:	9301      	str	r3, [sp, #4]
 800ef70:	3303      	adds	r3, #3
 800ef72:	e7f3      	b.n	800ef5c <_dtoa_r+0x9c>
 800ef74:	2200      	movs	r2, #0
 800ef76:	2300      	movs	r3, #0
 800ef78:	4650      	mov	r0, sl
 800ef7a:	4659      	mov	r1, fp
 800ef7c:	f7f1 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef80:	ec4b ab19 	vmov	d9, sl, fp
 800ef84:	4680      	mov	r8, r0
 800ef86:	b158      	cbz	r0, 800efa0 <_dtoa_r+0xe0>
 800ef88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f000 856b 	beq.w	800fa6c <_dtoa_r+0xbac>
 800ef96:	4883      	ldr	r0, [pc, #524]	; (800f1a4 <_dtoa_r+0x2e4>)
 800ef98:	6018      	str	r0, [r3, #0]
 800ef9a:	1e43      	subs	r3, r0, #1
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	e7df      	b.n	800ef60 <_dtoa_r+0xa0>
 800efa0:	ec4b ab10 	vmov	d0, sl, fp
 800efa4:	aa10      	add	r2, sp, #64	; 0x40
 800efa6:	a911      	add	r1, sp, #68	; 0x44
 800efa8:	4620      	mov	r0, r4
 800efaa:	f001 ff53 	bl	8010e54 <__d2b>
 800efae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800efb2:	ee08 0a10 	vmov	s16, r0
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	f000 8084 	beq.w	800f0c4 <_dtoa_r+0x204>
 800efbc:	ee19 3a90 	vmov	r3, s19
 800efc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800efc8:	4656      	mov	r6, sl
 800efca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800efce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800efd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800efd6:	4b74      	ldr	r3, [pc, #464]	; (800f1a8 <_dtoa_r+0x2e8>)
 800efd8:	2200      	movs	r2, #0
 800efda:	4630      	mov	r0, r6
 800efdc:	4639      	mov	r1, r7
 800efde:	f7f1 f953 	bl	8000288 <__aeabi_dsub>
 800efe2:	a365      	add	r3, pc, #404	; (adr r3, 800f178 <_dtoa_r+0x2b8>)
 800efe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe8:	f7f1 fb06 	bl	80005f8 <__aeabi_dmul>
 800efec:	a364      	add	r3, pc, #400	; (adr r3, 800f180 <_dtoa_r+0x2c0>)
 800efee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff2:	f7f1 f94b 	bl	800028c <__adddf3>
 800eff6:	4606      	mov	r6, r0
 800eff8:	4628      	mov	r0, r5
 800effa:	460f      	mov	r7, r1
 800effc:	f7f1 fa92 	bl	8000524 <__aeabi_i2d>
 800f000:	a361      	add	r3, pc, #388	; (adr r3, 800f188 <_dtoa_r+0x2c8>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	f7f1 faf7 	bl	80005f8 <__aeabi_dmul>
 800f00a:	4602      	mov	r2, r0
 800f00c:	460b      	mov	r3, r1
 800f00e:	4630      	mov	r0, r6
 800f010:	4639      	mov	r1, r7
 800f012:	f7f1 f93b 	bl	800028c <__adddf3>
 800f016:	4606      	mov	r6, r0
 800f018:	460f      	mov	r7, r1
 800f01a:	f7f1 fd9d 	bl	8000b58 <__aeabi_d2iz>
 800f01e:	2200      	movs	r2, #0
 800f020:	9000      	str	r0, [sp, #0]
 800f022:	2300      	movs	r3, #0
 800f024:	4630      	mov	r0, r6
 800f026:	4639      	mov	r1, r7
 800f028:	f7f1 fd58 	bl	8000adc <__aeabi_dcmplt>
 800f02c:	b150      	cbz	r0, 800f044 <_dtoa_r+0x184>
 800f02e:	9800      	ldr	r0, [sp, #0]
 800f030:	f7f1 fa78 	bl	8000524 <__aeabi_i2d>
 800f034:	4632      	mov	r2, r6
 800f036:	463b      	mov	r3, r7
 800f038:	f7f1 fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 800f03c:	b910      	cbnz	r0, 800f044 <_dtoa_r+0x184>
 800f03e:	9b00      	ldr	r3, [sp, #0]
 800f040:	3b01      	subs	r3, #1
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	9b00      	ldr	r3, [sp, #0]
 800f046:	2b16      	cmp	r3, #22
 800f048:	d85a      	bhi.n	800f100 <_dtoa_r+0x240>
 800f04a:	9a00      	ldr	r2, [sp, #0]
 800f04c:	4b57      	ldr	r3, [pc, #348]	; (800f1ac <_dtoa_r+0x2ec>)
 800f04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f056:	ec51 0b19 	vmov	r0, r1, d9
 800f05a:	f7f1 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800f05e:	2800      	cmp	r0, #0
 800f060:	d050      	beq.n	800f104 <_dtoa_r+0x244>
 800f062:	9b00      	ldr	r3, [sp, #0]
 800f064:	3b01      	subs	r3, #1
 800f066:	9300      	str	r3, [sp, #0]
 800f068:	2300      	movs	r3, #0
 800f06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f06e:	1b5d      	subs	r5, r3, r5
 800f070:	1e6b      	subs	r3, r5, #1
 800f072:	9305      	str	r3, [sp, #20]
 800f074:	bf45      	ittet	mi
 800f076:	f1c5 0301 	rsbmi	r3, r5, #1
 800f07a:	9304      	strmi	r3, [sp, #16]
 800f07c:	2300      	movpl	r3, #0
 800f07e:	2300      	movmi	r3, #0
 800f080:	bf4c      	ite	mi
 800f082:	9305      	strmi	r3, [sp, #20]
 800f084:	9304      	strpl	r3, [sp, #16]
 800f086:	9b00      	ldr	r3, [sp, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	db3d      	blt.n	800f108 <_dtoa_r+0x248>
 800f08c:	9b05      	ldr	r3, [sp, #20]
 800f08e:	9a00      	ldr	r2, [sp, #0]
 800f090:	920a      	str	r2, [sp, #40]	; 0x28
 800f092:	4413      	add	r3, r2
 800f094:	9305      	str	r3, [sp, #20]
 800f096:	2300      	movs	r3, #0
 800f098:	9307      	str	r3, [sp, #28]
 800f09a:	9b06      	ldr	r3, [sp, #24]
 800f09c:	2b09      	cmp	r3, #9
 800f09e:	f200 8089 	bhi.w	800f1b4 <_dtoa_r+0x2f4>
 800f0a2:	2b05      	cmp	r3, #5
 800f0a4:	bfc4      	itt	gt
 800f0a6:	3b04      	subgt	r3, #4
 800f0a8:	9306      	strgt	r3, [sp, #24]
 800f0aa:	9b06      	ldr	r3, [sp, #24]
 800f0ac:	f1a3 0302 	sub.w	r3, r3, #2
 800f0b0:	bfcc      	ite	gt
 800f0b2:	2500      	movgt	r5, #0
 800f0b4:	2501      	movle	r5, #1
 800f0b6:	2b03      	cmp	r3, #3
 800f0b8:	f200 8087 	bhi.w	800f1ca <_dtoa_r+0x30a>
 800f0bc:	e8df f003 	tbb	[pc, r3]
 800f0c0:	59383a2d 	.word	0x59383a2d
 800f0c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f0c8:	441d      	add	r5, r3
 800f0ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f0ce:	2b20      	cmp	r3, #32
 800f0d0:	bfc1      	itttt	gt
 800f0d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f0d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f0da:	fa0b f303 	lslgt.w	r3, fp, r3
 800f0de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f0e2:	bfda      	itte	le
 800f0e4:	f1c3 0320 	rsble	r3, r3, #32
 800f0e8:	fa06 f003 	lslle.w	r0, r6, r3
 800f0ec:	4318      	orrgt	r0, r3
 800f0ee:	f7f1 fa09 	bl	8000504 <__aeabi_ui2d>
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	4606      	mov	r6, r0
 800f0f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f0fa:	3d01      	subs	r5, #1
 800f0fc:	930e      	str	r3, [sp, #56]	; 0x38
 800f0fe:	e76a      	b.n	800efd6 <_dtoa_r+0x116>
 800f100:	2301      	movs	r3, #1
 800f102:	e7b2      	b.n	800f06a <_dtoa_r+0x1aa>
 800f104:	900b      	str	r0, [sp, #44]	; 0x2c
 800f106:	e7b1      	b.n	800f06c <_dtoa_r+0x1ac>
 800f108:	9b04      	ldr	r3, [sp, #16]
 800f10a:	9a00      	ldr	r2, [sp, #0]
 800f10c:	1a9b      	subs	r3, r3, r2
 800f10e:	9304      	str	r3, [sp, #16]
 800f110:	4253      	negs	r3, r2
 800f112:	9307      	str	r3, [sp, #28]
 800f114:	2300      	movs	r3, #0
 800f116:	930a      	str	r3, [sp, #40]	; 0x28
 800f118:	e7bf      	b.n	800f09a <_dtoa_r+0x1da>
 800f11a:	2300      	movs	r3, #0
 800f11c:	9308      	str	r3, [sp, #32]
 800f11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f120:	2b00      	cmp	r3, #0
 800f122:	dc55      	bgt.n	800f1d0 <_dtoa_r+0x310>
 800f124:	2301      	movs	r3, #1
 800f126:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f12a:	461a      	mov	r2, r3
 800f12c:	9209      	str	r2, [sp, #36]	; 0x24
 800f12e:	e00c      	b.n	800f14a <_dtoa_r+0x28a>
 800f130:	2301      	movs	r3, #1
 800f132:	e7f3      	b.n	800f11c <_dtoa_r+0x25c>
 800f134:	2300      	movs	r3, #0
 800f136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f138:	9308      	str	r3, [sp, #32]
 800f13a:	9b00      	ldr	r3, [sp, #0]
 800f13c:	4413      	add	r3, r2
 800f13e:	9302      	str	r3, [sp, #8]
 800f140:	3301      	adds	r3, #1
 800f142:	2b01      	cmp	r3, #1
 800f144:	9303      	str	r3, [sp, #12]
 800f146:	bfb8      	it	lt
 800f148:	2301      	movlt	r3, #1
 800f14a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f14c:	2200      	movs	r2, #0
 800f14e:	6042      	str	r2, [r0, #4]
 800f150:	2204      	movs	r2, #4
 800f152:	f102 0614 	add.w	r6, r2, #20
 800f156:	429e      	cmp	r6, r3
 800f158:	6841      	ldr	r1, [r0, #4]
 800f15a:	d93d      	bls.n	800f1d8 <_dtoa_r+0x318>
 800f15c:	4620      	mov	r0, r4
 800f15e:	f001 fa8b 	bl	8010678 <_Balloc>
 800f162:	9001      	str	r0, [sp, #4]
 800f164:	2800      	cmp	r0, #0
 800f166:	d13b      	bne.n	800f1e0 <_dtoa_r+0x320>
 800f168:	4b11      	ldr	r3, [pc, #68]	; (800f1b0 <_dtoa_r+0x2f0>)
 800f16a:	4602      	mov	r2, r0
 800f16c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f170:	e6c0      	b.n	800eef4 <_dtoa_r+0x34>
 800f172:	2301      	movs	r3, #1
 800f174:	e7df      	b.n	800f136 <_dtoa_r+0x276>
 800f176:	bf00      	nop
 800f178:	636f4361 	.word	0x636f4361
 800f17c:	3fd287a7 	.word	0x3fd287a7
 800f180:	8b60c8b3 	.word	0x8b60c8b3
 800f184:	3fc68a28 	.word	0x3fc68a28
 800f188:	509f79fb 	.word	0x509f79fb
 800f18c:	3fd34413 	.word	0x3fd34413
 800f190:	08012bf6 	.word	0x08012bf6
 800f194:	08012c0d 	.word	0x08012c0d
 800f198:	7ff00000 	.word	0x7ff00000
 800f19c:	08012bf2 	.word	0x08012bf2
 800f1a0:	08012be9 	.word	0x08012be9
 800f1a4:	08012eca 	.word	0x08012eca
 800f1a8:	3ff80000 	.word	0x3ff80000
 800f1ac:	08012de0 	.word	0x08012de0
 800f1b0:	08012c68 	.word	0x08012c68
 800f1b4:	2501      	movs	r5, #1
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	9306      	str	r3, [sp, #24]
 800f1ba:	9508      	str	r5, [sp, #32]
 800f1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2312      	movs	r3, #18
 800f1c8:	e7b0      	b.n	800f12c <_dtoa_r+0x26c>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	9308      	str	r3, [sp, #32]
 800f1ce:	e7f5      	b.n	800f1bc <_dtoa_r+0x2fc>
 800f1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1d6:	e7b8      	b.n	800f14a <_dtoa_r+0x28a>
 800f1d8:	3101      	adds	r1, #1
 800f1da:	6041      	str	r1, [r0, #4]
 800f1dc:	0052      	lsls	r2, r2, #1
 800f1de:	e7b8      	b.n	800f152 <_dtoa_r+0x292>
 800f1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1e2:	9a01      	ldr	r2, [sp, #4]
 800f1e4:	601a      	str	r2, [r3, #0]
 800f1e6:	9b03      	ldr	r3, [sp, #12]
 800f1e8:	2b0e      	cmp	r3, #14
 800f1ea:	f200 809d 	bhi.w	800f328 <_dtoa_r+0x468>
 800f1ee:	2d00      	cmp	r5, #0
 800f1f0:	f000 809a 	beq.w	800f328 <_dtoa_r+0x468>
 800f1f4:	9b00      	ldr	r3, [sp, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	dd32      	ble.n	800f260 <_dtoa_r+0x3a0>
 800f1fa:	4ab7      	ldr	r2, [pc, #732]	; (800f4d8 <_dtoa_r+0x618>)
 800f1fc:	f003 030f 	and.w	r3, r3, #15
 800f200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f204:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f208:	9b00      	ldr	r3, [sp, #0]
 800f20a:	05d8      	lsls	r0, r3, #23
 800f20c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f210:	d516      	bpl.n	800f240 <_dtoa_r+0x380>
 800f212:	4bb2      	ldr	r3, [pc, #712]	; (800f4dc <_dtoa_r+0x61c>)
 800f214:	ec51 0b19 	vmov	r0, r1, d9
 800f218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f21c:	f7f1 fb16 	bl	800084c <__aeabi_ddiv>
 800f220:	f007 070f 	and.w	r7, r7, #15
 800f224:	4682      	mov	sl, r0
 800f226:	468b      	mov	fp, r1
 800f228:	2503      	movs	r5, #3
 800f22a:	4eac      	ldr	r6, [pc, #688]	; (800f4dc <_dtoa_r+0x61c>)
 800f22c:	b957      	cbnz	r7, 800f244 <_dtoa_r+0x384>
 800f22e:	4642      	mov	r2, r8
 800f230:	464b      	mov	r3, r9
 800f232:	4650      	mov	r0, sl
 800f234:	4659      	mov	r1, fp
 800f236:	f7f1 fb09 	bl	800084c <__aeabi_ddiv>
 800f23a:	4682      	mov	sl, r0
 800f23c:	468b      	mov	fp, r1
 800f23e:	e028      	b.n	800f292 <_dtoa_r+0x3d2>
 800f240:	2502      	movs	r5, #2
 800f242:	e7f2      	b.n	800f22a <_dtoa_r+0x36a>
 800f244:	07f9      	lsls	r1, r7, #31
 800f246:	d508      	bpl.n	800f25a <_dtoa_r+0x39a>
 800f248:	4640      	mov	r0, r8
 800f24a:	4649      	mov	r1, r9
 800f24c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f250:	f7f1 f9d2 	bl	80005f8 <__aeabi_dmul>
 800f254:	3501      	adds	r5, #1
 800f256:	4680      	mov	r8, r0
 800f258:	4689      	mov	r9, r1
 800f25a:	107f      	asrs	r7, r7, #1
 800f25c:	3608      	adds	r6, #8
 800f25e:	e7e5      	b.n	800f22c <_dtoa_r+0x36c>
 800f260:	f000 809b 	beq.w	800f39a <_dtoa_r+0x4da>
 800f264:	9b00      	ldr	r3, [sp, #0]
 800f266:	4f9d      	ldr	r7, [pc, #628]	; (800f4dc <_dtoa_r+0x61c>)
 800f268:	425e      	negs	r6, r3
 800f26a:	4b9b      	ldr	r3, [pc, #620]	; (800f4d8 <_dtoa_r+0x618>)
 800f26c:	f006 020f 	and.w	r2, r6, #15
 800f270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	ec51 0b19 	vmov	r0, r1, d9
 800f27c:	f7f1 f9bc 	bl	80005f8 <__aeabi_dmul>
 800f280:	1136      	asrs	r6, r6, #4
 800f282:	4682      	mov	sl, r0
 800f284:	468b      	mov	fp, r1
 800f286:	2300      	movs	r3, #0
 800f288:	2502      	movs	r5, #2
 800f28a:	2e00      	cmp	r6, #0
 800f28c:	d17a      	bne.n	800f384 <_dtoa_r+0x4c4>
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1d3      	bne.n	800f23a <_dtoa_r+0x37a>
 800f292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 8082 	beq.w	800f39e <_dtoa_r+0x4de>
 800f29a:	4b91      	ldr	r3, [pc, #580]	; (800f4e0 <_dtoa_r+0x620>)
 800f29c:	2200      	movs	r2, #0
 800f29e:	4650      	mov	r0, sl
 800f2a0:	4659      	mov	r1, fp
 800f2a2:	f7f1 fc1b 	bl	8000adc <__aeabi_dcmplt>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d079      	beq.n	800f39e <_dtoa_r+0x4de>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d076      	beq.n	800f39e <_dtoa_r+0x4de>
 800f2b0:	9b02      	ldr	r3, [sp, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dd36      	ble.n	800f324 <_dtoa_r+0x464>
 800f2b6:	9b00      	ldr	r3, [sp, #0]
 800f2b8:	4650      	mov	r0, sl
 800f2ba:	4659      	mov	r1, fp
 800f2bc:	1e5f      	subs	r7, r3, #1
 800f2be:	2200      	movs	r2, #0
 800f2c0:	4b88      	ldr	r3, [pc, #544]	; (800f4e4 <_dtoa_r+0x624>)
 800f2c2:	f7f1 f999 	bl	80005f8 <__aeabi_dmul>
 800f2c6:	9e02      	ldr	r6, [sp, #8]
 800f2c8:	4682      	mov	sl, r0
 800f2ca:	468b      	mov	fp, r1
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f7f1 f928 	bl	8000524 <__aeabi_i2d>
 800f2d4:	4652      	mov	r2, sl
 800f2d6:	465b      	mov	r3, fp
 800f2d8:	f7f1 f98e 	bl	80005f8 <__aeabi_dmul>
 800f2dc:	4b82      	ldr	r3, [pc, #520]	; (800f4e8 <_dtoa_r+0x628>)
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f7f0 ffd4 	bl	800028c <__adddf3>
 800f2e4:	46d0      	mov	r8, sl
 800f2e6:	46d9      	mov	r9, fp
 800f2e8:	4682      	mov	sl, r0
 800f2ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f2ee:	2e00      	cmp	r6, #0
 800f2f0:	d158      	bne.n	800f3a4 <_dtoa_r+0x4e4>
 800f2f2:	4b7e      	ldr	r3, [pc, #504]	; (800f4ec <_dtoa_r+0x62c>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	4649      	mov	r1, r9
 800f2fa:	f7f0 ffc5 	bl	8000288 <__aeabi_dsub>
 800f2fe:	4652      	mov	r2, sl
 800f300:	465b      	mov	r3, fp
 800f302:	4680      	mov	r8, r0
 800f304:	4689      	mov	r9, r1
 800f306:	f7f1 fc07 	bl	8000b18 <__aeabi_dcmpgt>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	f040 8295 	bne.w	800f83a <_dtoa_r+0x97a>
 800f310:	4652      	mov	r2, sl
 800f312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f316:	4640      	mov	r0, r8
 800f318:	4649      	mov	r1, r9
 800f31a:	f7f1 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800f31e:	2800      	cmp	r0, #0
 800f320:	f040 8289 	bne.w	800f836 <_dtoa_r+0x976>
 800f324:	ec5b ab19 	vmov	sl, fp, d9
 800f328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f2c0 8148 	blt.w	800f5c0 <_dtoa_r+0x700>
 800f330:	9a00      	ldr	r2, [sp, #0]
 800f332:	2a0e      	cmp	r2, #14
 800f334:	f300 8144 	bgt.w	800f5c0 <_dtoa_r+0x700>
 800f338:	4b67      	ldr	r3, [pc, #412]	; (800f4d8 <_dtoa_r+0x618>)
 800f33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f33e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f344:	2b00      	cmp	r3, #0
 800f346:	f280 80d5 	bge.w	800f4f4 <_dtoa_r+0x634>
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f300 80d1 	bgt.w	800f4f4 <_dtoa_r+0x634>
 800f352:	f040 826f 	bne.w	800f834 <_dtoa_r+0x974>
 800f356:	4b65      	ldr	r3, [pc, #404]	; (800f4ec <_dtoa_r+0x62c>)
 800f358:	2200      	movs	r2, #0
 800f35a:	4640      	mov	r0, r8
 800f35c:	4649      	mov	r1, r9
 800f35e:	f7f1 f94b 	bl	80005f8 <__aeabi_dmul>
 800f362:	4652      	mov	r2, sl
 800f364:	465b      	mov	r3, fp
 800f366:	f7f1 fbcd 	bl	8000b04 <__aeabi_dcmpge>
 800f36a:	9e03      	ldr	r6, [sp, #12]
 800f36c:	4637      	mov	r7, r6
 800f36e:	2800      	cmp	r0, #0
 800f370:	f040 8245 	bne.w	800f7fe <_dtoa_r+0x93e>
 800f374:	9d01      	ldr	r5, [sp, #4]
 800f376:	2331      	movs	r3, #49	; 0x31
 800f378:	f805 3b01 	strb.w	r3, [r5], #1
 800f37c:	9b00      	ldr	r3, [sp, #0]
 800f37e:	3301      	adds	r3, #1
 800f380:	9300      	str	r3, [sp, #0]
 800f382:	e240      	b.n	800f806 <_dtoa_r+0x946>
 800f384:	07f2      	lsls	r2, r6, #31
 800f386:	d505      	bpl.n	800f394 <_dtoa_r+0x4d4>
 800f388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f38c:	f7f1 f934 	bl	80005f8 <__aeabi_dmul>
 800f390:	3501      	adds	r5, #1
 800f392:	2301      	movs	r3, #1
 800f394:	1076      	asrs	r6, r6, #1
 800f396:	3708      	adds	r7, #8
 800f398:	e777      	b.n	800f28a <_dtoa_r+0x3ca>
 800f39a:	2502      	movs	r5, #2
 800f39c:	e779      	b.n	800f292 <_dtoa_r+0x3d2>
 800f39e:	9f00      	ldr	r7, [sp, #0]
 800f3a0:	9e03      	ldr	r6, [sp, #12]
 800f3a2:	e794      	b.n	800f2ce <_dtoa_r+0x40e>
 800f3a4:	9901      	ldr	r1, [sp, #4]
 800f3a6:	4b4c      	ldr	r3, [pc, #304]	; (800f4d8 <_dtoa_r+0x618>)
 800f3a8:	4431      	add	r1, r6
 800f3aa:	910d      	str	r1, [sp, #52]	; 0x34
 800f3ac:	9908      	ldr	r1, [sp, #32]
 800f3ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f3b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3b6:	2900      	cmp	r1, #0
 800f3b8:	d043      	beq.n	800f442 <_dtoa_r+0x582>
 800f3ba:	494d      	ldr	r1, [pc, #308]	; (800f4f0 <_dtoa_r+0x630>)
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f7f1 fa45 	bl	800084c <__aeabi_ddiv>
 800f3c2:	4652      	mov	r2, sl
 800f3c4:	465b      	mov	r3, fp
 800f3c6:	f7f0 ff5f 	bl	8000288 <__aeabi_dsub>
 800f3ca:	9d01      	ldr	r5, [sp, #4]
 800f3cc:	4682      	mov	sl, r0
 800f3ce:	468b      	mov	fp, r1
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	4640      	mov	r0, r8
 800f3d4:	f7f1 fbc0 	bl	8000b58 <__aeabi_d2iz>
 800f3d8:	4606      	mov	r6, r0
 800f3da:	f7f1 f8a3 	bl	8000524 <__aeabi_i2d>
 800f3de:	4602      	mov	r2, r0
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	4649      	mov	r1, r9
 800f3e6:	f7f0 ff4f 	bl	8000288 <__aeabi_dsub>
 800f3ea:	3630      	adds	r6, #48	; 0x30
 800f3ec:	f805 6b01 	strb.w	r6, [r5], #1
 800f3f0:	4652      	mov	r2, sl
 800f3f2:	465b      	mov	r3, fp
 800f3f4:	4680      	mov	r8, r0
 800f3f6:	4689      	mov	r9, r1
 800f3f8:	f7f1 fb70 	bl	8000adc <__aeabi_dcmplt>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d163      	bne.n	800f4c8 <_dtoa_r+0x608>
 800f400:	4642      	mov	r2, r8
 800f402:	464b      	mov	r3, r9
 800f404:	4936      	ldr	r1, [pc, #216]	; (800f4e0 <_dtoa_r+0x620>)
 800f406:	2000      	movs	r0, #0
 800f408:	f7f0 ff3e 	bl	8000288 <__aeabi_dsub>
 800f40c:	4652      	mov	r2, sl
 800f40e:	465b      	mov	r3, fp
 800f410:	f7f1 fb64 	bl	8000adc <__aeabi_dcmplt>
 800f414:	2800      	cmp	r0, #0
 800f416:	f040 80b5 	bne.w	800f584 <_dtoa_r+0x6c4>
 800f41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f41c:	429d      	cmp	r5, r3
 800f41e:	d081      	beq.n	800f324 <_dtoa_r+0x464>
 800f420:	4b30      	ldr	r3, [pc, #192]	; (800f4e4 <_dtoa_r+0x624>)
 800f422:	2200      	movs	r2, #0
 800f424:	4650      	mov	r0, sl
 800f426:	4659      	mov	r1, fp
 800f428:	f7f1 f8e6 	bl	80005f8 <__aeabi_dmul>
 800f42c:	4b2d      	ldr	r3, [pc, #180]	; (800f4e4 <_dtoa_r+0x624>)
 800f42e:	4682      	mov	sl, r0
 800f430:	468b      	mov	fp, r1
 800f432:	4640      	mov	r0, r8
 800f434:	4649      	mov	r1, r9
 800f436:	2200      	movs	r2, #0
 800f438:	f7f1 f8de 	bl	80005f8 <__aeabi_dmul>
 800f43c:	4680      	mov	r8, r0
 800f43e:	4689      	mov	r9, r1
 800f440:	e7c6      	b.n	800f3d0 <_dtoa_r+0x510>
 800f442:	4650      	mov	r0, sl
 800f444:	4659      	mov	r1, fp
 800f446:	f7f1 f8d7 	bl	80005f8 <__aeabi_dmul>
 800f44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f44c:	9d01      	ldr	r5, [sp, #4]
 800f44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f450:	4682      	mov	sl, r0
 800f452:	468b      	mov	fp, r1
 800f454:	4649      	mov	r1, r9
 800f456:	4640      	mov	r0, r8
 800f458:	f7f1 fb7e 	bl	8000b58 <__aeabi_d2iz>
 800f45c:	4606      	mov	r6, r0
 800f45e:	f7f1 f861 	bl	8000524 <__aeabi_i2d>
 800f462:	3630      	adds	r6, #48	; 0x30
 800f464:	4602      	mov	r2, r0
 800f466:	460b      	mov	r3, r1
 800f468:	4640      	mov	r0, r8
 800f46a:	4649      	mov	r1, r9
 800f46c:	f7f0 ff0c 	bl	8000288 <__aeabi_dsub>
 800f470:	f805 6b01 	strb.w	r6, [r5], #1
 800f474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f476:	429d      	cmp	r5, r3
 800f478:	4680      	mov	r8, r0
 800f47a:	4689      	mov	r9, r1
 800f47c:	f04f 0200 	mov.w	r2, #0
 800f480:	d124      	bne.n	800f4cc <_dtoa_r+0x60c>
 800f482:	4b1b      	ldr	r3, [pc, #108]	; (800f4f0 <_dtoa_r+0x630>)
 800f484:	4650      	mov	r0, sl
 800f486:	4659      	mov	r1, fp
 800f488:	f7f0 ff00 	bl	800028c <__adddf3>
 800f48c:	4602      	mov	r2, r0
 800f48e:	460b      	mov	r3, r1
 800f490:	4640      	mov	r0, r8
 800f492:	4649      	mov	r1, r9
 800f494:	f7f1 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 800f498:	2800      	cmp	r0, #0
 800f49a:	d173      	bne.n	800f584 <_dtoa_r+0x6c4>
 800f49c:	4652      	mov	r2, sl
 800f49e:	465b      	mov	r3, fp
 800f4a0:	4913      	ldr	r1, [pc, #76]	; (800f4f0 <_dtoa_r+0x630>)
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	f7f0 fef0 	bl	8000288 <__aeabi_dsub>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4649      	mov	r1, r9
 800f4b0:	f7f1 fb14 	bl	8000adc <__aeabi_dcmplt>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	f43f af35 	beq.w	800f324 <_dtoa_r+0x464>
 800f4ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f4bc:	1e6b      	subs	r3, r5, #1
 800f4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4c4:	2b30      	cmp	r3, #48	; 0x30
 800f4c6:	d0f8      	beq.n	800f4ba <_dtoa_r+0x5fa>
 800f4c8:	9700      	str	r7, [sp, #0]
 800f4ca:	e049      	b.n	800f560 <_dtoa_r+0x6a0>
 800f4cc:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <_dtoa_r+0x624>)
 800f4ce:	f7f1 f893 	bl	80005f8 <__aeabi_dmul>
 800f4d2:	4680      	mov	r8, r0
 800f4d4:	4689      	mov	r9, r1
 800f4d6:	e7bd      	b.n	800f454 <_dtoa_r+0x594>
 800f4d8:	08012de0 	.word	0x08012de0
 800f4dc:	08012db8 	.word	0x08012db8
 800f4e0:	3ff00000 	.word	0x3ff00000
 800f4e4:	40240000 	.word	0x40240000
 800f4e8:	401c0000 	.word	0x401c0000
 800f4ec:	40140000 	.word	0x40140000
 800f4f0:	3fe00000 	.word	0x3fe00000
 800f4f4:	9d01      	ldr	r5, [sp, #4]
 800f4f6:	4656      	mov	r6, sl
 800f4f8:	465f      	mov	r7, fp
 800f4fa:	4642      	mov	r2, r8
 800f4fc:	464b      	mov	r3, r9
 800f4fe:	4630      	mov	r0, r6
 800f500:	4639      	mov	r1, r7
 800f502:	f7f1 f9a3 	bl	800084c <__aeabi_ddiv>
 800f506:	f7f1 fb27 	bl	8000b58 <__aeabi_d2iz>
 800f50a:	4682      	mov	sl, r0
 800f50c:	f7f1 f80a 	bl	8000524 <__aeabi_i2d>
 800f510:	4642      	mov	r2, r8
 800f512:	464b      	mov	r3, r9
 800f514:	f7f1 f870 	bl	80005f8 <__aeabi_dmul>
 800f518:	4602      	mov	r2, r0
 800f51a:	460b      	mov	r3, r1
 800f51c:	4630      	mov	r0, r6
 800f51e:	4639      	mov	r1, r7
 800f520:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f524:	f7f0 feb0 	bl	8000288 <__aeabi_dsub>
 800f528:	f805 6b01 	strb.w	r6, [r5], #1
 800f52c:	9e01      	ldr	r6, [sp, #4]
 800f52e:	9f03      	ldr	r7, [sp, #12]
 800f530:	1bae      	subs	r6, r5, r6
 800f532:	42b7      	cmp	r7, r6
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	d135      	bne.n	800f5a6 <_dtoa_r+0x6e6>
 800f53a:	f7f0 fea7 	bl	800028c <__adddf3>
 800f53e:	4642      	mov	r2, r8
 800f540:	464b      	mov	r3, r9
 800f542:	4606      	mov	r6, r0
 800f544:	460f      	mov	r7, r1
 800f546:	f7f1 fae7 	bl	8000b18 <__aeabi_dcmpgt>
 800f54a:	b9d0      	cbnz	r0, 800f582 <_dtoa_r+0x6c2>
 800f54c:	4642      	mov	r2, r8
 800f54e:	464b      	mov	r3, r9
 800f550:	4630      	mov	r0, r6
 800f552:	4639      	mov	r1, r7
 800f554:	f7f1 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f558:	b110      	cbz	r0, 800f560 <_dtoa_r+0x6a0>
 800f55a:	f01a 0f01 	tst.w	sl, #1
 800f55e:	d110      	bne.n	800f582 <_dtoa_r+0x6c2>
 800f560:	4620      	mov	r0, r4
 800f562:	ee18 1a10 	vmov	r1, s16
 800f566:	f001 f8c7 	bl	80106f8 <_Bfree>
 800f56a:	2300      	movs	r3, #0
 800f56c:	9800      	ldr	r0, [sp, #0]
 800f56e:	702b      	strb	r3, [r5, #0]
 800f570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f572:	3001      	adds	r0, #1
 800f574:	6018      	str	r0, [r3, #0]
 800f576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f43f acf1 	beq.w	800ef60 <_dtoa_r+0xa0>
 800f57e:	601d      	str	r5, [r3, #0]
 800f580:	e4ee      	b.n	800ef60 <_dtoa_r+0xa0>
 800f582:	9f00      	ldr	r7, [sp, #0]
 800f584:	462b      	mov	r3, r5
 800f586:	461d      	mov	r5, r3
 800f588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f58c:	2a39      	cmp	r2, #57	; 0x39
 800f58e:	d106      	bne.n	800f59e <_dtoa_r+0x6de>
 800f590:	9a01      	ldr	r2, [sp, #4]
 800f592:	429a      	cmp	r2, r3
 800f594:	d1f7      	bne.n	800f586 <_dtoa_r+0x6c6>
 800f596:	9901      	ldr	r1, [sp, #4]
 800f598:	2230      	movs	r2, #48	; 0x30
 800f59a:	3701      	adds	r7, #1
 800f59c:	700a      	strb	r2, [r1, #0]
 800f59e:	781a      	ldrb	r2, [r3, #0]
 800f5a0:	3201      	adds	r2, #1
 800f5a2:	701a      	strb	r2, [r3, #0]
 800f5a4:	e790      	b.n	800f4c8 <_dtoa_r+0x608>
 800f5a6:	4ba6      	ldr	r3, [pc, #664]	; (800f840 <_dtoa_r+0x980>)
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	f7f1 f825 	bl	80005f8 <__aeabi_dmul>
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	460f      	mov	r7, r1
 800f5b6:	f7f1 fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d09d      	beq.n	800f4fa <_dtoa_r+0x63a>
 800f5be:	e7cf      	b.n	800f560 <_dtoa_r+0x6a0>
 800f5c0:	9a08      	ldr	r2, [sp, #32]
 800f5c2:	2a00      	cmp	r2, #0
 800f5c4:	f000 80d7 	beq.w	800f776 <_dtoa_r+0x8b6>
 800f5c8:	9a06      	ldr	r2, [sp, #24]
 800f5ca:	2a01      	cmp	r2, #1
 800f5cc:	f300 80ba 	bgt.w	800f744 <_dtoa_r+0x884>
 800f5d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5d2:	2a00      	cmp	r2, #0
 800f5d4:	f000 80b2 	beq.w	800f73c <_dtoa_r+0x87c>
 800f5d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f5dc:	9e07      	ldr	r6, [sp, #28]
 800f5de:	9d04      	ldr	r5, [sp, #16]
 800f5e0:	9a04      	ldr	r2, [sp, #16]
 800f5e2:	441a      	add	r2, r3
 800f5e4:	9204      	str	r2, [sp, #16]
 800f5e6:	9a05      	ldr	r2, [sp, #20]
 800f5e8:	2101      	movs	r1, #1
 800f5ea:	441a      	add	r2, r3
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	9205      	str	r2, [sp, #20]
 800f5f0:	f001 f984 	bl	80108fc <__i2b>
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	2d00      	cmp	r5, #0
 800f5f8:	dd0c      	ble.n	800f614 <_dtoa_r+0x754>
 800f5fa:	9b05      	ldr	r3, [sp, #20]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	dd09      	ble.n	800f614 <_dtoa_r+0x754>
 800f600:	42ab      	cmp	r3, r5
 800f602:	9a04      	ldr	r2, [sp, #16]
 800f604:	bfa8      	it	ge
 800f606:	462b      	movge	r3, r5
 800f608:	1ad2      	subs	r2, r2, r3
 800f60a:	9204      	str	r2, [sp, #16]
 800f60c:	9a05      	ldr	r2, [sp, #20]
 800f60e:	1aed      	subs	r5, r5, r3
 800f610:	1ad3      	subs	r3, r2, r3
 800f612:	9305      	str	r3, [sp, #20]
 800f614:	9b07      	ldr	r3, [sp, #28]
 800f616:	b31b      	cbz	r3, 800f660 <_dtoa_r+0x7a0>
 800f618:	9b08      	ldr	r3, [sp, #32]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f000 80af 	beq.w	800f77e <_dtoa_r+0x8be>
 800f620:	2e00      	cmp	r6, #0
 800f622:	dd13      	ble.n	800f64c <_dtoa_r+0x78c>
 800f624:	4639      	mov	r1, r7
 800f626:	4632      	mov	r2, r6
 800f628:	4620      	mov	r0, r4
 800f62a:	f001 fa27 	bl	8010a7c <__pow5mult>
 800f62e:	ee18 2a10 	vmov	r2, s16
 800f632:	4601      	mov	r1, r0
 800f634:	4607      	mov	r7, r0
 800f636:	4620      	mov	r0, r4
 800f638:	f001 f976 	bl	8010928 <__multiply>
 800f63c:	ee18 1a10 	vmov	r1, s16
 800f640:	4680      	mov	r8, r0
 800f642:	4620      	mov	r0, r4
 800f644:	f001 f858 	bl	80106f8 <_Bfree>
 800f648:	ee08 8a10 	vmov	s16, r8
 800f64c:	9b07      	ldr	r3, [sp, #28]
 800f64e:	1b9a      	subs	r2, r3, r6
 800f650:	d006      	beq.n	800f660 <_dtoa_r+0x7a0>
 800f652:	ee18 1a10 	vmov	r1, s16
 800f656:	4620      	mov	r0, r4
 800f658:	f001 fa10 	bl	8010a7c <__pow5mult>
 800f65c:	ee08 0a10 	vmov	s16, r0
 800f660:	2101      	movs	r1, #1
 800f662:	4620      	mov	r0, r4
 800f664:	f001 f94a 	bl	80108fc <__i2b>
 800f668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	4606      	mov	r6, r0
 800f66e:	f340 8088 	ble.w	800f782 <_dtoa_r+0x8c2>
 800f672:	461a      	mov	r2, r3
 800f674:	4601      	mov	r1, r0
 800f676:	4620      	mov	r0, r4
 800f678:	f001 fa00 	bl	8010a7c <__pow5mult>
 800f67c:	9b06      	ldr	r3, [sp, #24]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	4606      	mov	r6, r0
 800f682:	f340 8081 	ble.w	800f788 <_dtoa_r+0x8c8>
 800f686:	f04f 0800 	mov.w	r8, #0
 800f68a:	6933      	ldr	r3, [r6, #16]
 800f68c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f690:	6918      	ldr	r0, [r3, #16]
 800f692:	f001 f8e3 	bl	801085c <__hi0bits>
 800f696:	f1c0 0020 	rsb	r0, r0, #32
 800f69a:	9b05      	ldr	r3, [sp, #20]
 800f69c:	4418      	add	r0, r3
 800f69e:	f010 001f 	ands.w	r0, r0, #31
 800f6a2:	f000 8092 	beq.w	800f7ca <_dtoa_r+0x90a>
 800f6a6:	f1c0 0320 	rsb	r3, r0, #32
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	f340 808a 	ble.w	800f7c4 <_dtoa_r+0x904>
 800f6b0:	f1c0 001c 	rsb	r0, r0, #28
 800f6b4:	9b04      	ldr	r3, [sp, #16]
 800f6b6:	4403      	add	r3, r0
 800f6b8:	9304      	str	r3, [sp, #16]
 800f6ba:	9b05      	ldr	r3, [sp, #20]
 800f6bc:	4403      	add	r3, r0
 800f6be:	4405      	add	r5, r0
 800f6c0:	9305      	str	r3, [sp, #20]
 800f6c2:	9b04      	ldr	r3, [sp, #16]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	dd07      	ble.n	800f6d8 <_dtoa_r+0x818>
 800f6c8:	ee18 1a10 	vmov	r1, s16
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f001 fa2e 	bl	8010b30 <__lshift>
 800f6d4:	ee08 0a10 	vmov	s16, r0
 800f6d8:	9b05      	ldr	r3, [sp, #20]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	dd05      	ble.n	800f6ea <_dtoa_r+0x82a>
 800f6de:	4631      	mov	r1, r6
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f001 fa24 	bl	8010b30 <__lshift>
 800f6e8:	4606      	mov	r6, r0
 800f6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d06e      	beq.n	800f7ce <_dtoa_r+0x90e>
 800f6f0:	ee18 0a10 	vmov	r0, s16
 800f6f4:	4631      	mov	r1, r6
 800f6f6:	f001 fa8b 	bl	8010c10 <__mcmp>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	da67      	bge.n	800f7ce <_dtoa_r+0x90e>
 800f6fe:	9b00      	ldr	r3, [sp, #0]
 800f700:	3b01      	subs	r3, #1
 800f702:	ee18 1a10 	vmov	r1, s16
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	220a      	movs	r2, #10
 800f70a:	2300      	movs	r3, #0
 800f70c:	4620      	mov	r0, r4
 800f70e:	f001 f815 	bl	801073c <__multadd>
 800f712:	9b08      	ldr	r3, [sp, #32]
 800f714:	ee08 0a10 	vmov	s16, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 81b1 	beq.w	800fa80 <_dtoa_r+0xbc0>
 800f71e:	2300      	movs	r3, #0
 800f720:	4639      	mov	r1, r7
 800f722:	220a      	movs	r2, #10
 800f724:	4620      	mov	r0, r4
 800f726:	f001 f809 	bl	801073c <__multadd>
 800f72a:	9b02      	ldr	r3, [sp, #8]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	4607      	mov	r7, r0
 800f730:	f300 808e 	bgt.w	800f850 <_dtoa_r+0x990>
 800f734:	9b06      	ldr	r3, [sp, #24]
 800f736:	2b02      	cmp	r3, #2
 800f738:	dc51      	bgt.n	800f7de <_dtoa_r+0x91e>
 800f73a:	e089      	b.n	800f850 <_dtoa_r+0x990>
 800f73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f73e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f742:	e74b      	b.n	800f5dc <_dtoa_r+0x71c>
 800f744:	9b03      	ldr	r3, [sp, #12]
 800f746:	1e5e      	subs	r6, r3, #1
 800f748:	9b07      	ldr	r3, [sp, #28]
 800f74a:	42b3      	cmp	r3, r6
 800f74c:	bfbf      	itttt	lt
 800f74e:	9b07      	ldrlt	r3, [sp, #28]
 800f750:	9607      	strlt	r6, [sp, #28]
 800f752:	1af2      	sublt	r2, r6, r3
 800f754:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f756:	bfb6      	itet	lt
 800f758:	189b      	addlt	r3, r3, r2
 800f75a:	1b9e      	subge	r6, r3, r6
 800f75c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f75e:	9b03      	ldr	r3, [sp, #12]
 800f760:	bfb8      	it	lt
 800f762:	2600      	movlt	r6, #0
 800f764:	2b00      	cmp	r3, #0
 800f766:	bfb7      	itett	lt
 800f768:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f76c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f770:	1a9d      	sublt	r5, r3, r2
 800f772:	2300      	movlt	r3, #0
 800f774:	e734      	b.n	800f5e0 <_dtoa_r+0x720>
 800f776:	9e07      	ldr	r6, [sp, #28]
 800f778:	9d04      	ldr	r5, [sp, #16]
 800f77a:	9f08      	ldr	r7, [sp, #32]
 800f77c:	e73b      	b.n	800f5f6 <_dtoa_r+0x736>
 800f77e:	9a07      	ldr	r2, [sp, #28]
 800f780:	e767      	b.n	800f652 <_dtoa_r+0x792>
 800f782:	9b06      	ldr	r3, [sp, #24]
 800f784:	2b01      	cmp	r3, #1
 800f786:	dc18      	bgt.n	800f7ba <_dtoa_r+0x8fa>
 800f788:	f1ba 0f00 	cmp.w	sl, #0
 800f78c:	d115      	bne.n	800f7ba <_dtoa_r+0x8fa>
 800f78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f792:	b993      	cbnz	r3, 800f7ba <_dtoa_r+0x8fa>
 800f794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f798:	0d1b      	lsrs	r3, r3, #20
 800f79a:	051b      	lsls	r3, r3, #20
 800f79c:	b183      	cbz	r3, 800f7c0 <_dtoa_r+0x900>
 800f79e:	9b04      	ldr	r3, [sp, #16]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	9b05      	ldr	r3, [sp, #20]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	9305      	str	r3, [sp, #20]
 800f7aa:	f04f 0801 	mov.w	r8, #1
 800f7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	f47f af6a 	bne.w	800f68a <_dtoa_r+0x7ca>
 800f7b6:	2001      	movs	r0, #1
 800f7b8:	e76f      	b.n	800f69a <_dtoa_r+0x7da>
 800f7ba:	f04f 0800 	mov.w	r8, #0
 800f7be:	e7f6      	b.n	800f7ae <_dtoa_r+0x8ee>
 800f7c0:	4698      	mov	r8, r3
 800f7c2:	e7f4      	b.n	800f7ae <_dtoa_r+0x8ee>
 800f7c4:	f43f af7d 	beq.w	800f6c2 <_dtoa_r+0x802>
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	301c      	adds	r0, #28
 800f7cc:	e772      	b.n	800f6b4 <_dtoa_r+0x7f4>
 800f7ce:	9b03      	ldr	r3, [sp, #12]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	dc37      	bgt.n	800f844 <_dtoa_r+0x984>
 800f7d4:	9b06      	ldr	r3, [sp, #24]
 800f7d6:	2b02      	cmp	r3, #2
 800f7d8:	dd34      	ble.n	800f844 <_dtoa_r+0x984>
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	9302      	str	r3, [sp, #8]
 800f7de:	9b02      	ldr	r3, [sp, #8]
 800f7e0:	b96b      	cbnz	r3, 800f7fe <_dtoa_r+0x93e>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	2205      	movs	r2, #5
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	f000 ffa8 	bl	801073c <__multadd>
 800f7ec:	4601      	mov	r1, r0
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	ee18 0a10 	vmov	r0, s16
 800f7f4:	f001 fa0c 	bl	8010c10 <__mcmp>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	f73f adbb 	bgt.w	800f374 <_dtoa_r+0x4b4>
 800f7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f800:	9d01      	ldr	r5, [sp, #4]
 800f802:	43db      	mvns	r3, r3
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	f04f 0800 	mov.w	r8, #0
 800f80a:	4631      	mov	r1, r6
 800f80c:	4620      	mov	r0, r4
 800f80e:	f000 ff73 	bl	80106f8 <_Bfree>
 800f812:	2f00      	cmp	r7, #0
 800f814:	f43f aea4 	beq.w	800f560 <_dtoa_r+0x6a0>
 800f818:	f1b8 0f00 	cmp.w	r8, #0
 800f81c:	d005      	beq.n	800f82a <_dtoa_r+0x96a>
 800f81e:	45b8      	cmp	r8, r7
 800f820:	d003      	beq.n	800f82a <_dtoa_r+0x96a>
 800f822:	4641      	mov	r1, r8
 800f824:	4620      	mov	r0, r4
 800f826:	f000 ff67 	bl	80106f8 <_Bfree>
 800f82a:	4639      	mov	r1, r7
 800f82c:	4620      	mov	r0, r4
 800f82e:	f000 ff63 	bl	80106f8 <_Bfree>
 800f832:	e695      	b.n	800f560 <_dtoa_r+0x6a0>
 800f834:	2600      	movs	r6, #0
 800f836:	4637      	mov	r7, r6
 800f838:	e7e1      	b.n	800f7fe <_dtoa_r+0x93e>
 800f83a:	9700      	str	r7, [sp, #0]
 800f83c:	4637      	mov	r7, r6
 800f83e:	e599      	b.n	800f374 <_dtoa_r+0x4b4>
 800f840:	40240000 	.word	0x40240000
 800f844:	9b08      	ldr	r3, [sp, #32]
 800f846:	2b00      	cmp	r3, #0
 800f848:	f000 80ca 	beq.w	800f9e0 <_dtoa_r+0xb20>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	2d00      	cmp	r5, #0
 800f852:	dd05      	ble.n	800f860 <_dtoa_r+0x9a0>
 800f854:	4639      	mov	r1, r7
 800f856:	462a      	mov	r2, r5
 800f858:	4620      	mov	r0, r4
 800f85a:	f001 f969 	bl	8010b30 <__lshift>
 800f85e:	4607      	mov	r7, r0
 800f860:	f1b8 0f00 	cmp.w	r8, #0
 800f864:	d05b      	beq.n	800f91e <_dtoa_r+0xa5e>
 800f866:	6879      	ldr	r1, [r7, #4]
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 ff05 	bl	8010678 <_Balloc>
 800f86e:	4605      	mov	r5, r0
 800f870:	b928      	cbnz	r0, 800f87e <_dtoa_r+0x9be>
 800f872:	4b87      	ldr	r3, [pc, #540]	; (800fa90 <_dtoa_r+0xbd0>)
 800f874:	4602      	mov	r2, r0
 800f876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f87a:	f7ff bb3b 	b.w	800eef4 <_dtoa_r+0x34>
 800f87e:	693a      	ldr	r2, [r7, #16]
 800f880:	3202      	adds	r2, #2
 800f882:	0092      	lsls	r2, r2, #2
 800f884:	f107 010c 	add.w	r1, r7, #12
 800f888:	300c      	adds	r0, #12
 800f88a:	f000 fedb 	bl	8010644 <memcpy>
 800f88e:	2201      	movs	r2, #1
 800f890:	4629      	mov	r1, r5
 800f892:	4620      	mov	r0, r4
 800f894:	f001 f94c 	bl	8010b30 <__lshift>
 800f898:	9b01      	ldr	r3, [sp, #4]
 800f89a:	f103 0901 	add.w	r9, r3, #1
 800f89e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f8a2:	4413      	add	r3, r2
 800f8a4:	9305      	str	r3, [sp, #20]
 800f8a6:	f00a 0301 	and.w	r3, sl, #1
 800f8aa:	46b8      	mov	r8, r7
 800f8ac:	9304      	str	r3, [sp, #16]
 800f8ae:	4607      	mov	r7, r0
 800f8b0:	4631      	mov	r1, r6
 800f8b2:	ee18 0a10 	vmov	r0, s16
 800f8b6:	f7ff fa77 	bl	800eda8 <quorem>
 800f8ba:	4641      	mov	r1, r8
 800f8bc:	9002      	str	r0, [sp, #8]
 800f8be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f8c2:	ee18 0a10 	vmov	r0, s16
 800f8c6:	f001 f9a3 	bl	8010c10 <__mcmp>
 800f8ca:	463a      	mov	r2, r7
 800f8cc:	9003      	str	r0, [sp, #12]
 800f8ce:	4631      	mov	r1, r6
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f001 f9b9 	bl	8010c48 <__mdiff>
 800f8d6:	68c2      	ldr	r2, [r0, #12]
 800f8d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800f8dc:	4605      	mov	r5, r0
 800f8de:	bb02      	cbnz	r2, 800f922 <_dtoa_r+0xa62>
 800f8e0:	4601      	mov	r1, r0
 800f8e2:	ee18 0a10 	vmov	r0, s16
 800f8e6:	f001 f993 	bl	8010c10 <__mcmp>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	4629      	mov	r1, r5
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	9207      	str	r2, [sp, #28]
 800f8f2:	f000 ff01 	bl	80106f8 <_Bfree>
 800f8f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f8fa:	ea43 0102 	orr.w	r1, r3, r2
 800f8fe:	9b04      	ldr	r3, [sp, #16]
 800f900:	430b      	orrs	r3, r1
 800f902:	464d      	mov	r5, r9
 800f904:	d10f      	bne.n	800f926 <_dtoa_r+0xa66>
 800f906:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f90a:	d02a      	beq.n	800f962 <_dtoa_r+0xaa2>
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	dd02      	ble.n	800f918 <_dtoa_r+0xa58>
 800f912:	9b02      	ldr	r3, [sp, #8]
 800f914:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f918:	f88b a000 	strb.w	sl, [fp]
 800f91c:	e775      	b.n	800f80a <_dtoa_r+0x94a>
 800f91e:	4638      	mov	r0, r7
 800f920:	e7ba      	b.n	800f898 <_dtoa_r+0x9d8>
 800f922:	2201      	movs	r2, #1
 800f924:	e7e2      	b.n	800f8ec <_dtoa_r+0xa2c>
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	db04      	blt.n	800f936 <_dtoa_r+0xa76>
 800f92c:	9906      	ldr	r1, [sp, #24]
 800f92e:	430b      	orrs	r3, r1
 800f930:	9904      	ldr	r1, [sp, #16]
 800f932:	430b      	orrs	r3, r1
 800f934:	d122      	bne.n	800f97c <_dtoa_r+0xabc>
 800f936:	2a00      	cmp	r2, #0
 800f938:	ddee      	ble.n	800f918 <_dtoa_r+0xa58>
 800f93a:	ee18 1a10 	vmov	r1, s16
 800f93e:	2201      	movs	r2, #1
 800f940:	4620      	mov	r0, r4
 800f942:	f001 f8f5 	bl	8010b30 <__lshift>
 800f946:	4631      	mov	r1, r6
 800f948:	ee08 0a10 	vmov	s16, r0
 800f94c:	f001 f960 	bl	8010c10 <__mcmp>
 800f950:	2800      	cmp	r0, #0
 800f952:	dc03      	bgt.n	800f95c <_dtoa_r+0xa9c>
 800f954:	d1e0      	bne.n	800f918 <_dtoa_r+0xa58>
 800f956:	f01a 0f01 	tst.w	sl, #1
 800f95a:	d0dd      	beq.n	800f918 <_dtoa_r+0xa58>
 800f95c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f960:	d1d7      	bne.n	800f912 <_dtoa_r+0xa52>
 800f962:	2339      	movs	r3, #57	; 0x39
 800f964:	f88b 3000 	strb.w	r3, [fp]
 800f968:	462b      	mov	r3, r5
 800f96a:	461d      	mov	r5, r3
 800f96c:	3b01      	subs	r3, #1
 800f96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f972:	2a39      	cmp	r2, #57	; 0x39
 800f974:	d071      	beq.n	800fa5a <_dtoa_r+0xb9a>
 800f976:	3201      	adds	r2, #1
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	e746      	b.n	800f80a <_dtoa_r+0x94a>
 800f97c:	2a00      	cmp	r2, #0
 800f97e:	dd07      	ble.n	800f990 <_dtoa_r+0xad0>
 800f980:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f984:	d0ed      	beq.n	800f962 <_dtoa_r+0xaa2>
 800f986:	f10a 0301 	add.w	r3, sl, #1
 800f98a:	f88b 3000 	strb.w	r3, [fp]
 800f98e:	e73c      	b.n	800f80a <_dtoa_r+0x94a>
 800f990:	9b05      	ldr	r3, [sp, #20]
 800f992:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f996:	4599      	cmp	r9, r3
 800f998:	d047      	beq.n	800fa2a <_dtoa_r+0xb6a>
 800f99a:	ee18 1a10 	vmov	r1, s16
 800f99e:	2300      	movs	r3, #0
 800f9a0:	220a      	movs	r2, #10
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 feca 	bl	801073c <__multadd>
 800f9a8:	45b8      	cmp	r8, r7
 800f9aa:	ee08 0a10 	vmov	s16, r0
 800f9ae:	f04f 0300 	mov.w	r3, #0
 800f9b2:	f04f 020a 	mov.w	r2, #10
 800f9b6:	4641      	mov	r1, r8
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	d106      	bne.n	800f9ca <_dtoa_r+0xb0a>
 800f9bc:	f000 febe 	bl	801073c <__multadd>
 800f9c0:	4680      	mov	r8, r0
 800f9c2:	4607      	mov	r7, r0
 800f9c4:	f109 0901 	add.w	r9, r9, #1
 800f9c8:	e772      	b.n	800f8b0 <_dtoa_r+0x9f0>
 800f9ca:	f000 feb7 	bl	801073c <__multadd>
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4680      	mov	r8, r0
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	220a      	movs	r2, #10
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 feb0 	bl	801073c <__multadd>
 800f9dc:	4607      	mov	r7, r0
 800f9de:	e7f1      	b.n	800f9c4 <_dtoa_r+0xb04>
 800f9e0:	9b03      	ldr	r3, [sp, #12]
 800f9e2:	9302      	str	r3, [sp, #8]
 800f9e4:	9d01      	ldr	r5, [sp, #4]
 800f9e6:	ee18 0a10 	vmov	r0, s16
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	f7ff f9dc 	bl	800eda8 <quorem>
 800f9f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f9f4:	9b01      	ldr	r3, [sp, #4]
 800f9f6:	f805 ab01 	strb.w	sl, [r5], #1
 800f9fa:	1aea      	subs	r2, r5, r3
 800f9fc:	9b02      	ldr	r3, [sp, #8]
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	dd09      	ble.n	800fa16 <_dtoa_r+0xb56>
 800fa02:	ee18 1a10 	vmov	r1, s16
 800fa06:	2300      	movs	r3, #0
 800fa08:	220a      	movs	r2, #10
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 fe96 	bl	801073c <__multadd>
 800fa10:	ee08 0a10 	vmov	s16, r0
 800fa14:	e7e7      	b.n	800f9e6 <_dtoa_r+0xb26>
 800fa16:	9b02      	ldr	r3, [sp, #8]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	bfc8      	it	gt
 800fa1c:	461d      	movgt	r5, r3
 800fa1e:	9b01      	ldr	r3, [sp, #4]
 800fa20:	bfd8      	it	le
 800fa22:	2501      	movle	r5, #1
 800fa24:	441d      	add	r5, r3
 800fa26:	f04f 0800 	mov.w	r8, #0
 800fa2a:	ee18 1a10 	vmov	r1, s16
 800fa2e:	2201      	movs	r2, #1
 800fa30:	4620      	mov	r0, r4
 800fa32:	f001 f87d 	bl	8010b30 <__lshift>
 800fa36:	4631      	mov	r1, r6
 800fa38:	ee08 0a10 	vmov	s16, r0
 800fa3c:	f001 f8e8 	bl	8010c10 <__mcmp>
 800fa40:	2800      	cmp	r0, #0
 800fa42:	dc91      	bgt.n	800f968 <_dtoa_r+0xaa8>
 800fa44:	d102      	bne.n	800fa4c <_dtoa_r+0xb8c>
 800fa46:	f01a 0f01 	tst.w	sl, #1
 800fa4a:	d18d      	bne.n	800f968 <_dtoa_r+0xaa8>
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	461d      	mov	r5, r3
 800fa50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa54:	2a30      	cmp	r2, #48	; 0x30
 800fa56:	d0fa      	beq.n	800fa4e <_dtoa_r+0xb8e>
 800fa58:	e6d7      	b.n	800f80a <_dtoa_r+0x94a>
 800fa5a:	9a01      	ldr	r2, [sp, #4]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d184      	bne.n	800f96a <_dtoa_r+0xaaa>
 800fa60:	9b00      	ldr	r3, [sp, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	9300      	str	r3, [sp, #0]
 800fa66:	2331      	movs	r3, #49	; 0x31
 800fa68:	7013      	strb	r3, [r2, #0]
 800fa6a:	e6ce      	b.n	800f80a <_dtoa_r+0x94a>
 800fa6c:	4b09      	ldr	r3, [pc, #36]	; (800fa94 <_dtoa_r+0xbd4>)
 800fa6e:	f7ff ba95 	b.w	800ef9c <_dtoa_r+0xdc>
 800fa72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f47f aa6e 	bne.w	800ef56 <_dtoa_r+0x96>
 800fa7a:	4b07      	ldr	r3, [pc, #28]	; (800fa98 <_dtoa_r+0xbd8>)
 800fa7c:	f7ff ba8e 	b.w	800ef9c <_dtoa_r+0xdc>
 800fa80:	9b02      	ldr	r3, [sp, #8]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	dcae      	bgt.n	800f9e4 <_dtoa_r+0xb24>
 800fa86:	9b06      	ldr	r3, [sp, #24]
 800fa88:	2b02      	cmp	r3, #2
 800fa8a:	f73f aea8 	bgt.w	800f7de <_dtoa_r+0x91e>
 800fa8e:	e7a9      	b.n	800f9e4 <_dtoa_r+0xb24>
 800fa90:	08012c68 	.word	0x08012c68
 800fa94:	08012ec9 	.word	0x08012ec9
 800fa98:	08012be9 	.word	0x08012be9

0800fa9c <__sflush_r>:
 800fa9c:	898a      	ldrh	r2, [r1, #12]
 800fa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa2:	4605      	mov	r5, r0
 800faa4:	0710      	lsls	r0, r2, #28
 800faa6:	460c      	mov	r4, r1
 800faa8:	d458      	bmi.n	800fb5c <__sflush_r+0xc0>
 800faaa:	684b      	ldr	r3, [r1, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	dc05      	bgt.n	800fabc <__sflush_r+0x20>
 800fab0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	dc02      	bgt.n	800fabc <__sflush_r+0x20>
 800fab6:	2000      	movs	r0, #0
 800fab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fabc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fabe:	2e00      	cmp	r6, #0
 800fac0:	d0f9      	beq.n	800fab6 <__sflush_r+0x1a>
 800fac2:	2300      	movs	r3, #0
 800fac4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fac8:	682f      	ldr	r7, [r5, #0]
 800faca:	602b      	str	r3, [r5, #0]
 800facc:	d032      	beq.n	800fb34 <__sflush_r+0x98>
 800face:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fad0:	89a3      	ldrh	r3, [r4, #12]
 800fad2:	075a      	lsls	r2, r3, #29
 800fad4:	d505      	bpl.n	800fae2 <__sflush_r+0x46>
 800fad6:	6863      	ldr	r3, [r4, #4]
 800fad8:	1ac0      	subs	r0, r0, r3
 800fada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fadc:	b10b      	cbz	r3, 800fae2 <__sflush_r+0x46>
 800fade:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fae0:	1ac0      	subs	r0, r0, r3
 800fae2:	2300      	movs	r3, #0
 800fae4:	4602      	mov	r2, r0
 800fae6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fae8:	6a21      	ldr	r1, [r4, #32]
 800faea:	4628      	mov	r0, r5
 800faec:	47b0      	blx	r6
 800faee:	1c43      	adds	r3, r0, #1
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	d106      	bne.n	800fb02 <__sflush_r+0x66>
 800faf4:	6829      	ldr	r1, [r5, #0]
 800faf6:	291d      	cmp	r1, #29
 800faf8:	d82c      	bhi.n	800fb54 <__sflush_r+0xb8>
 800fafa:	4a2a      	ldr	r2, [pc, #168]	; (800fba4 <__sflush_r+0x108>)
 800fafc:	40ca      	lsrs	r2, r1
 800fafe:	07d6      	lsls	r6, r2, #31
 800fb00:	d528      	bpl.n	800fb54 <__sflush_r+0xb8>
 800fb02:	2200      	movs	r2, #0
 800fb04:	6062      	str	r2, [r4, #4]
 800fb06:	04d9      	lsls	r1, r3, #19
 800fb08:	6922      	ldr	r2, [r4, #16]
 800fb0a:	6022      	str	r2, [r4, #0]
 800fb0c:	d504      	bpl.n	800fb18 <__sflush_r+0x7c>
 800fb0e:	1c42      	adds	r2, r0, #1
 800fb10:	d101      	bne.n	800fb16 <__sflush_r+0x7a>
 800fb12:	682b      	ldr	r3, [r5, #0]
 800fb14:	b903      	cbnz	r3, 800fb18 <__sflush_r+0x7c>
 800fb16:	6560      	str	r0, [r4, #84]	; 0x54
 800fb18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb1a:	602f      	str	r7, [r5, #0]
 800fb1c:	2900      	cmp	r1, #0
 800fb1e:	d0ca      	beq.n	800fab6 <__sflush_r+0x1a>
 800fb20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb24:	4299      	cmp	r1, r3
 800fb26:	d002      	beq.n	800fb2e <__sflush_r+0x92>
 800fb28:	4628      	mov	r0, r5
 800fb2a:	f7fd f8d5 	bl	800ccd8 <_free_r>
 800fb2e:	2000      	movs	r0, #0
 800fb30:	6360      	str	r0, [r4, #52]	; 0x34
 800fb32:	e7c1      	b.n	800fab8 <__sflush_r+0x1c>
 800fb34:	6a21      	ldr	r1, [r4, #32]
 800fb36:	2301      	movs	r3, #1
 800fb38:	4628      	mov	r0, r5
 800fb3a:	47b0      	blx	r6
 800fb3c:	1c41      	adds	r1, r0, #1
 800fb3e:	d1c7      	bne.n	800fad0 <__sflush_r+0x34>
 800fb40:	682b      	ldr	r3, [r5, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d0c4      	beq.n	800fad0 <__sflush_r+0x34>
 800fb46:	2b1d      	cmp	r3, #29
 800fb48:	d001      	beq.n	800fb4e <__sflush_r+0xb2>
 800fb4a:	2b16      	cmp	r3, #22
 800fb4c:	d101      	bne.n	800fb52 <__sflush_r+0xb6>
 800fb4e:	602f      	str	r7, [r5, #0]
 800fb50:	e7b1      	b.n	800fab6 <__sflush_r+0x1a>
 800fb52:	89a3      	ldrh	r3, [r4, #12]
 800fb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb58:	81a3      	strh	r3, [r4, #12]
 800fb5a:	e7ad      	b.n	800fab8 <__sflush_r+0x1c>
 800fb5c:	690f      	ldr	r7, [r1, #16]
 800fb5e:	2f00      	cmp	r7, #0
 800fb60:	d0a9      	beq.n	800fab6 <__sflush_r+0x1a>
 800fb62:	0793      	lsls	r3, r2, #30
 800fb64:	680e      	ldr	r6, [r1, #0]
 800fb66:	bf08      	it	eq
 800fb68:	694b      	ldreq	r3, [r1, #20]
 800fb6a:	600f      	str	r7, [r1, #0]
 800fb6c:	bf18      	it	ne
 800fb6e:	2300      	movne	r3, #0
 800fb70:	eba6 0807 	sub.w	r8, r6, r7
 800fb74:	608b      	str	r3, [r1, #8]
 800fb76:	f1b8 0f00 	cmp.w	r8, #0
 800fb7a:	dd9c      	ble.n	800fab6 <__sflush_r+0x1a>
 800fb7c:	6a21      	ldr	r1, [r4, #32]
 800fb7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb80:	4643      	mov	r3, r8
 800fb82:	463a      	mov	r2, r7
 800fb84:	4628      	mov	r0, r5
 800fb86:	47b0      	blx	r6
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	dc06      	bgt.n	800fb9a <__sflush_r+0xfe>
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb92:	81a3      	strh	r3, [r4, #12]
 800fb94:	f04f 30ff 	mov.w	r0, #4294967295
 800fb98:	e78e      	b.n	800fab8 <__sflush_r+0x1c>
 800fb9a:	4407      	add	r7, r0
 800fb9c:	eba8 0800 	sub.w	r8, r8, r0
 800fba0:	e7e9      	b.n	800fb76 <__sflush_r+0xda>
 800fba2:	bf00      	nop
 800fba4:	20400001 	.word	0x20400001

0800fba8 <_fflush_r>:
 800fba8:	b538      	push	{r3, r4, r5, lr}
 800fbaa:	690b      	ldr	r3, [r1, #16]
 800fbac:	4605      	mov	r5, r0
 800fbae:	460c      	mov	r4, r1
 800fbb0:	b913      	cbnz	r3, 800fbb8 <_fflush_r+0x10>
 800fbb2:	2500      	movs	r5, #0
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	bd38      	pop	{r3, r4, r5, pc}
 800fbb8:	b118      	cbz	r0, 800fbc2 <_fflush_r+0x1a>
 800fbba:	6983      	ldr	r3, [r0, #24]
 800fbbc:	b90b      	cbnz	r3, 800fbc2 <_fflush_r+0x1a>
 800fbbe:	f000 f899 	bl	800fcf4 <__sinit>
 800fbc2:	4b14      	ldr	r3, [pc, #80]	; (800fc14 <_fflush_r+0x6c>)
 800fbc4:	429c      	cmp	r4, r3
 800fbc6:	d11b      	bne.n	800fc00 <_fflush_r+0x58>
 800fbc8:	686c      	ldr	r4, [r5, #4]
 800fbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0ef      	beq.n	800fbb2 <_fflush_r+0xa>
 800fbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbd4:	07d0      	lsls	r0, r2, #31
 800fbd6:	d404      	bmi.n	800fbe2 <_fflush_r+0x3a>
 800fbd8:	0599      	lsls	r1, r3, #22
 800fbda:	d402      	bmi.n	800fbe2 <_fflush_r+0x3a>
 800fbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbde:	f000 fcb8 	bl	8010552 <__retarget_lock_acquire_recursive>
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	f7ff ff59 	bl	800fa9c <__sflush_r>
 800fbea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbec:	07da      	lsls	r2, r3, #31
 800fbee:	4605      	mov	r5, r0
 800fbf0:	d4e0      	bmi.n	800fbb4 <_fflush_r+0xc>
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	059b      	lsls	r3, r3, #22
 800fbf6:	d4dd      	bmi.n	800fbb4 <_fflush_r+0xc>
 800fbf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbfa:	f000 fcab 	bl	8010554 <__retarget_lock_release_recursive>
 800fbfe:	e7d9      	b.n	800fbb4 <_fflush_r+0xc>
 800fc00:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <_fflush_r+0x70>)
 800fc02:	429c      	cmp	r4, r3
 800fc04:	d101      	bne.n	800fc0a <_fflush_r+0x62>
 800fc06:	68ac      	ldr	r4, [r5, #8]
 800fc08:	e7df      	b.n	800fbca <_fflush_r+0x22>
 800fc0a:	4b04      	ldr	r3, [pc, #16]	; (800fc1c <_fflush_r+0x74>)
 800fc0c:	429c      	cmp	r4, r3
 800fc0e:	bf08      	it	eq
 800fc10:	68ec      	ldreq	r4, [r5, #12]
 800fc12:	e7da      	b.n	800fbca <_fflush_r+0x22>
 800fc14:	08012c9c 	.word	0x08012c9c
 800fc18:	08012cbc 	.word	0x08012cbc
 800fc1c:	08012c7c 	.word	0x08012c7c

0800fc20 <fflush>:
 800fc20:	4601      	mov	r1, r0
 800fc22:	b920      	cbnz	r0, 800fc2e <fflush+0xe>
 800fc24:	4b04      	ldr	r3, [pc, #16]	; (800fc38 <fflush+0x18>)
 800fc26:	4905      	ldr	r1, [pc, #20]	; (800fc3c <fflush+0x1c>)
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	f000 b8fe 	b.w	800fe2a <_fwalk_reent>
 800fc2e:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <fflush+0x20>)
 800fc30:	6818      	ldr	r0, [r3, #0]
 800fc32:	f7ff bfb9 	b.w	800fba8 <_fflush_r>
 800fc36:	bf00      	nop
 800fc38:	08012a5c 	.word	0x08012a5c
 800fc3c:	0800fba9 	.word	0x0800fba9
 800fc40:	20000044 	.word	0x20000044

0800fc44 <std>:
 800fc44:	2300      	movs	r3, #0
 800fc46:	b510      	push	{r4, lr}
 800fc48:	4604      	mov	r4, r0
 800fc4a:	e9c0 3300 	strd	r3, r3, [r0]
 800fc4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc52:	6083      	str	r3, [r0, #8]
 800fc54:	8181      	strh	r1, [r0, #12]
 800fc56:	6643      	str	r3, [r0, #100]	; 0x64
 800fc58:	81c2      	strh	r2, [r0, #14]
 800fc5a:	6183      	str	r3, [r0, #24]
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	2208      	movs	r2, #8
 800fc60:	305c      	adds	r0, #92	; 0x5c
 800fc62:	f7fd f831 	bl	800ccc8 <memset>
 800fc66:	4b05      	ldr	r3, [pc, #20]	; (800fc7c <std+0x38>)
 800fc68:	6263      	str	r3, [r4, #36]	; 0x24
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <std+0x3c>)
 800fc6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc6e:	4b05      	ldr	r3, [pc, #20]	; (800fc84 <std+0x40>)
 800fc70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc72:	4b05      	ldr	r3, [pc, #20]	; (800fc88 <std+0x44>)
 800fc74:	6224      	str	r4, [r4, #32]
 800fc76:	6323      	str	r3, [r4, #48]	; 0x30
 800fc78:	bd10      	pop	{r4, pc}
 800fc7a:	bf00      	nop
 800fc7c:	08011d79 	.word	0x08011d79
 800fc80:	08011d9b 	.word	0x08011d9b
 800fc84:	08011dd3 	.word	0x08011dd3
 800fc88:	08011df7 	.word	0x08011df7

0800fc8c <_cleanup_r>:
 800fc8c:	4901      	ldr	r1, [pc, #4]	; (800fc94 <_cleanup_r+0x8>)
 800fc8e:	f000 b8cc 	b.w	800fe2a <_fwalk_reent>
 800fc92:	bf00      	nop
 800fc94:	0800fba9 	.word	0x0800fba9

0800fc98 <__sfmoreglue>:
 800fc98:	b570      	push	{r4, r5, r6, lr}
 800fc9a:	2268      	movs	r2, #104	; 0x68
 800fc9c:	1e4d      	subs	r5, r1, #1
 800fc9e:	4355      	muls	r5, r2
 800fca0:	460e      	mov	r6, r1
 800fca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fca6:	f7fd f883 	bl	800cdb0 <_malloc_r>
 800fcaa:	4604      	mov	r4, r0
 800fcac:	b140      	cbz	r0, 800fcc0 <__sfmoreglue+0x28>
 800fcae:	2100      	movs	r1, #0
 800fcb0:	e9c0 1600 	strd	r1, r6, [r0]
 800fcb4:	300c      	adds	r0, #12
 800fcb6:	60a0      	str	r0, [r4, #8]
 800fcb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fcbc:	f7fd f804 	bl	800ccc8 <memset>
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	bd70      	pop	{r4, r5, r6, pc}

0800fcc4 <__sfp_lock_acquire>:
 800fcc4:	4801      	ldr	r0, [pc, #4]	; (800fccc <__sfp_lock_acquire+0x8>)
 800fcc6:	f000 bc44 	b.w	8010552 <__retarget_lock_acquire_recursive>
 800fcca:	bf00      	nop
 800fccc:	200007b5 	.word	0x200007b5

0800fcd0 <__sfp_lock_release>:
 800fcd0:	4801      	ldr	r0, [pc, #4]	; (800fcd8 <__sfp_lock_release+0x8>)
 800fcd2:	f000 bc3f 	b.w	8010554 <__retarget_lock_release_recursive>
 800fcd6:	bf00      	nop
 800fcd8:	200007b5 	.word	0x200007b5

0800fcdc <__sinit_lock_acquire>:
 800fcdc:	4801      	ldr	r0, [pc, #4]	; (800fce4 <__sinit_lock_acquire+0x8>)
 800fcde:	f000 bc38 	b.w	8010552 <__retarget_lock_acquire_recursive>
 800fce2:	bf00      	nop
 800fce4:	200007b6 	.word	0x200007b6

0800fce8 <__sinit_lock_release>:
 800fce8:	4801      	ldr	r0, [pc, #4]	; (800fcf0 <__sinit_lock_release+0x8>)
 800fcea:	f000 bc33 	b.w	8010554 <__retarget_lock_release_recursive>
 800fcee:	bf00      	nop
 800fcf0:	200007b6 	.word	0x200007b6

0800fcf4 <__sinit>:
 800fcf4:	b510      	push	{r4, lr}
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	f7ff fff0 	bl	800fcdc <__sinit_lock_acquire>
 800fcfc:	69a3      	ldr	r3, [r4, #24]
 800fcfe:	b11b      	cbz	r3, 800fd08 <__sinit+0x14>
 800fd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd04:	f7ff bff0 	b.w	800fce8 <__sinit_lock_release>
 800fd08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd0c:	6523      	str	r3, [r4, #80]	; 0x50
 800fd0e:	4b13      	ldr	r3, [pc, #76]	; (800fd5c <__sinit+0x68>)
 800fd10:	4a13      	ldr	r2, [pc, #76]	; (800fd60 <__sinit+0x6c>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd16:	42a3      	cmp	r3, r4
 800fd18:	bf04      	itt	eq
 800fd1a:	2301      	moveq	r3, #1
 800fd1c:	61a3      	streq	r3, [r4, #24]
 800fd1e:	4620      	mov	r0, r4
 800fd20:	f000 f820 	bl	800fd64 <__sfp>
 800fd24:	6060      	str	r0, [r4, #4]
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 f81c 	bl	800fd64 <__sfp>
 800fd2c:	60a0      	str	r0, [r4, #8]
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f000 f818 	bl	800fd64 <__sfp>
 800fd34:	2200      	movs	r2, #0
 800fd36:	60e0      	str	r0, [r4, #12]
 800fd38:	2104      	movs	r1, #4
 800fd3a:	6860      	ldr	r0, [r4, #4]
 800fd3c:	f7ff ff82 	bl	800fc44 <std>
 800fd40:	68a0      	ldr	r0, [r4, #8]
 800fd42:	2201      	movs	r2, #1
 800fd44:	2109      	movs	r1, #9
 800fd46:	f7ff ff7d 	bl	800fc44 <std>
 800fd4a:	68e0      	ldr	r0, [r4, #12]
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	2112      	movs	r1, #18
 800fd50:	f7ff ff78 	bl	800fc44 <std>
 800fd54:	2301      	movs	r3, #1
 800fd56:	61a3      	str	r3, [r4, #24]
 800fd58:	e7d2      	b.n	800fd00 <__sinit+0xc>
 800fd5a:	bf00      	nop
 800fd5c:	08012a5c 	.word	0x08012a5c
 800fd60:	0800fc8d 	.word	0x0800fc8d

0800fd64 <__sfp>:
 800fd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd66:	4607      	mov	r7, r0
 800fd68:	f7ff ffac 	bl	800fcc4 <__sfp_lock_acquire>
 800fd6c:	4b1e      	ldr	r3, [pc, #120]	; (800fde8 <__sfp+0x84>)
 800fd6e:	681e      	ldr	r6, [r3, #0]
 800fd70:	69b3      	ldr	r3, [r6, #24]
 800fd72:	b913      	cbnz	r3, 800fd7a <__sfp+0x16>
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7ff ffbd 	bl	800fcf4 <__sinit>
 800fd7a:	3648      	adds	r6, #72	; 0x48
 800fd7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd80:	3b01      	subs	r3, #1
 800fd82:	d503      	bpl.n	800fd8c <__sfp+0x28>
 800fd84:	6833      	ldr	r3, [r6, #0]
 800fd86:	b30b      	cbz	r3, 800fdcc <__sfp+0x68>
 800fd88:	6836      	ldr	r6, [r6, #0]
 800fd8a:	e7f7      	b.n	800fd7c <__sfp+0x18>
 800fd8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd90:	b9d5      	cbnz	r5, 800fdc8 <__sfp+0x64>
 800fd92:	4b16      	ldr	r3, [pc, #88]	; (800fdec <__sfp+0x88>)
 800fd94:	60e3      	str	r3, [r4, #12]
 800fd96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fd9a:	6665      	str	r5, [r4, #100]	; 0x64
 800fd9c:	f000 fbd8 	bl	8010550 <__retarget_lock_init_recursive>
 800fda0:	f7ff ff96 	bl	800fcd0 <__sfp_lock_release>
 800fda4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fda8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdac:	6025      	str	r5, [r4, #0]
 800fdae:	61a5      	str	r5, [r4, #24]
 800fdb0:	2208      	movs	r2, #8
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fdb8:	f7fc ff86 	bl	800ccc8 <memset>
 800fdbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fdc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdc8:	3468      	adds	r4, #104	; 0x68
 800fdca:	e7d9      	b.n	800fd80 <__sfp+0x1c>
 800fdcc:	2104      	movs	r1, #4
 800fdce:	4638      	mov	r0, r7
 800fdd0:	f7ff ff62 	bl	800fc98 <__sfmoreglue>
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	6030      	str	r0, [r6, #0]
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d1d5      	bne.n	800fd88 <__sfp+0x24>
 800fddc:	f7ff ff78 	bl	800fcd0 <__sfp_lock_release>
 800fde0:	230c      	movs	r3, #12
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	e7ee      	b.n	800fdc4 <__sfp+0x60>
 800fde6:	bf00      	nop
 800fde8:	08012a5c 	.word	0x08012a5c
 800fdec:	ffff0001 	.word	0xffff0001

0800fdf0 <_fwalk>:
 800fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	460f      	mov	r7, r1
 800fdf6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fdfa:	2600      	movs	r6, #0
 800fdfc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800fe00:	f1b8 0801 	subs.w	r8, r8, #1
 800fe04:	d505      	bpl.n	800fe12 <_fwalk+0x22>
 800fe06:	6824      	ldr	r4, [r4, #0]
 800fe08:	2c00      	cmp	r4, #0
 800fe0a:	d1f7      	bne.n	800fdfc <_fwalk+0xc>
 800fe0c:	4630      	mov	r0, r6
 800fe0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe12:	89ab      	ldrh	r3, [r5, #12]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d906      	bls.n	800fe26 <_fwalk+0x36>
 800fe18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	d002      	beq.n	800fe26 <_fwalk+0x36>
 800fe20:	4628      	mov	r0, r5
 800fe22:	47b8      	blx	r7
 800fe24:	4306      	orrs	r6, r0
 800fe26:	3568      	adds	r5, #104	; 0x68
 800fe28:	e7ea      	b.n	800fe00 <_fwalk+0x10>

0800fe2a <_fwalk_reent>:
 800fe2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe2e:	4606      	mov	r6, r0
 800fe30:	4688      	mov	r8, r1
 800fe32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe36:	2700      	movs	r7, #0
 800fe38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe3c:	f1b9 0901 	subs.w	r9, r9, #1
 800fe40:	d505      	bpl.n	800fe4e <_fwalk_reent+0x24>
 800fe42:	6824      	ldr	r4, [r4, #0]
 800fe44:	2c00      	cmp	r4, #0
 800fe46:	d1f7      	bne.n	800fe38 <_fwalk_reent+0xe>
 800fe48:	4638      	mov	r0, r7
 800fe4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe4e:	89ab      	ldrh	r3, [r5, #12]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d907      	bls.n	800fe64 <_fwalk_reent+0x3a>
 800fe54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe58:	3301      	adds	r3, #1
 800fe5a:	d003      	beq.n	800fe64 <_fwalk_reent+0x3a>
 800fe5c:	4629      	mov	r1, r5
 800fe5e:	4630      	mov	r0, r6
 800fe60:	47c0      	blx	r8
 800fe62:	4307      	orrs	r7, r0
 800fe64:	3568      	adds	r5, #104	; 0x68
 800fe66:	e7e9      	b.n	800fe3c <_fwalk_reent+0x12>

0800fe68 <rshift>:
 800fe68:	6903      	ldr	r3, [r0, #16]
 800fe6a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fe6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe72:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fe76:	f100 0414 	add.w	r4, r0, #20
 800fe7a:	dd45      	ble.n	800ff08 <rshift+0xa0>
 800fe7c:	f011 011f 	ands.w	r1, r1, #31
 800fe80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fe84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fe88:	d10c      	bne.n	800fea4 <rshift+0x3c>
 800fe8a:	f100 0710 	add.w	r7, r0, #16
 800fe8e:	4629      	mov	r1, r5
 800fe90:	42b1      	cmp	r1, r6
 800fe92:	d334      	bcc.n	800fefe <rshift+0x96>
 800fe94:	1a9b      	subs	r3, r3, r2
 800fe96:	009b      	lsls	r3, r3, #2
 800fe98:	1eea      	subs	r2, r5, #3
 800fe9a:	4296      	cmp	r6, r2
 800fe9c:	bf38      	it	cc
 800fe9e:	2300      	movcc	r3, #0
 800fea0:	4423      	add	r3, r4
 800fea2:	e015      	b.n	800fed0 <rshift+0x68>
 800fea4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fea8:	f1c1 0820 	rsb	r8, r1, #32
 800feac:	40cf      	lsrs	r7, r1
 800feae:	f105 0e04 	add.w	lr, r5, #4
 800feb2:	46a1      	mov	r9, r4
 800feb4:	4576      	cmp	r6, lr
 800feb6:	46f4      	mov	ip, lr
 800feb8:	d815      	bhi.n	800fee6 <rshift+0x7e>
 800feba:	1a9a      	subs	r2, r3, r2
 800febc:	0092      	lsls	r2, r2, #2
 800febe:	3a04      	subs	r2, #4
 800fec0:	3501      	adds	r5, #1
 800fec2:	42ae      	cmp	r6, r5
 800fec4:	bf38      	it	cc
 800fec6:	2200      	movcc	r2, #0
 800fec8:	18a3      	adds	r3, r4, r2
 800feca:	50a7      	str	r7, [r4, r2]
 800fecc:	b107      	cbz	r7, 800fed0 <rshift+0x68>
 800fece:	3304      	adds	r3, #4
 800fed0:	1b1a      	subs	r2, r3, r4
 800fed2:	42a3      	cmp	r3, r4
 800fed4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fed8:	bf08      	it	eq
 800feda:	2300      	moveq	r3, #0
 800fedc:	6102      	str	r2, [r0, #16]
 800fede:	bf08      	it	eq
 800fee0:	6143      	streq	r3, [r0, #20]
 800fee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fee6:	f8dc c000 	ldr.w	ip, [ip]
 800feea:	fa0c fc08 	lsl.w	ip, ip, r8
 800feee:	ea4c 0707 	orr.w	r7, ip, r7
 800fef2:	f849 7b04 	str.w	r7, [r9], #4
 800fef6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fefa:	40cf      	lsrs	r7, r1
 800fefc:	e7da      	b.n	800feb4 <rshift+0x4c>
 800fefe:	f851 cb04 	ldr.w	ip, [r1], #4
 800ff02:	f847 cf04 	str.w	ip, [r7, #4]!
 800ff06:	e7c3      	b.n	800fe90 <rshift+0x28>
 800ff08:	4623      	mov	r3, r4
 800ff0a:	e7e1      	b.n	800fed0 <rshift+0x68>

0800ff0c <__hexdig_fun>:
 800ff0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ff10:	2b09      	cmp	r3, #9
 800ff12:	d802      	bhi.n	800ff1a <__hexdig_fun+0xe>
 800ff14:	3820      	subs	r0, #32
 800ff16:	b2c0      	uxtb	r0, r0
 800ff18:	4770      	bx	lr
 800ff1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ff1e:	2b05      	cmp	r3, #5
 800ff20:	d801      	bhi.n	800ff26 <__hexdig_fun+0x1a>
 800ff22:	3847      	subs	r0, #71	; 0x47
 800ff24:	e7f7      	b.n	800ff16 <__hexdig_fun+0xa>
 800ff26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ff2a:	2b05      	cmp	r3, #5
 800ff2c:	d801      	bhi.n	800ff32 <__hexdig_fun+0x26>
 800ff2e:	3827      	subs	r0, #39	; 0x27
 800ff30:	e7f1      	b.n	800ff16 <__hexdig_fun+0xa>
 800ff32:	2000      	movs	r0, #0
 800ff34:	4770      	bx	lr
	...

0800ff38 <__gethex>:
 800ff38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3c:	ed2d 8b02 	vpush	{d8}
 800ff40:	b089      	sub	sp, #36	; 0x24
 800ff42:	ee08 0a10 	vmov	s16, r0
 800ff46:	9304      	str	r3, [sp, #16]
 800ff48:	4bb4      	ldr	r3, [pc, #720]	; (801021c <__gethex+0x2e4>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	9301      	str	r3, [sp, #4]
 800ff4e:	4618      	mov	r0, r3
 800ff50:	468b      	mov	fp, r1
 800ff52:	4690      	mov	r8, r2
 800ff54:	f7f0 f93c 	bl	80001d0 <strlen>
 800ff58:	9b01      	ldr	r3, [sp, #4]
 800ff5a:	f8db 2000 	ldr.w	r2, [fp]
 800ff5e:	4403      	add	r3, r0
 800ff60:	4682      	mov	sl, r0
 800ff62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ff66:	9305      	str	r3, [sp, #20]
 800ff68:	1c93      	adds	r3, r2, #2
 800ff6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ff6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ff72:	32fe      	adds	r2, #254	; 0xfe
 800ff74:	18d1      	adds	r1, r2, r3
 800ff76:	461f      	mov	r7, r3
 800ff78:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff7c:	9100      	str	r1, [sp, #0]
 800ff7e:	2830      	cmp	r0, #48	; 0x30
 800ff80:	d0f8      	beq.n	800ff74 <__gethex+0x3c>
 800ff82:	f7ff ffc3 	bl	800ff0c <__hexdig_fun>
 800ff86:	4604      	mov	r4, r0
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d13a      	bne.n	8010002 <__gethex+0xca>
 800ff8c:	9901      	ldr	r1, [sp, #4]
 800ff8e:	4652      	mov	r2, sl
 800ff90:	4638      	mov	r0, r7
 800ff92:	f001 ff34 	bl	8011dfe <strncmp>
 800ff96:	4605      	mov	r5, r0
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d168      	bne.n	801006e <__gethex+0x136>
 800ff9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ffa0:	eb07 060a 	add.w	r6, r7, sl
 800ffa4:	f7ff ffb2 	bl	800ff0c <__hexdig_fun>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d062      	beq.n	8010072 <__gethex+0x13a>
 800ffac:	4633      	mov	r3, r6
 800ffae:	7818      	ldrb	r0, [r3, #0]
 800ffb0:	2830      	cmp	r0, #48	; 0x30
 800ffb2:	461f      	mov	r7, r3
 800ffb4:	f103 0301 	add.w	r3, r3, #1
 800ffb8:	d0f9      	beq.n	800ffae <__gethex+0x76>
 800ffba:	f7ff ffa7 	bl	800ff0c <__hexdig_fun>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	fab0 f480 	clz	r4, r0
 800ffc4:	0964      	lsrs	r4, r4, #5
 800ffc6:	4635      	mov	r5, r6
 800ffc8:	9300      	str	r3, [sp, #0]
 800ffca:	463a      	mov	r2, r7
 800ffcc:	4616      	mov	r6, r2
 800ffce:	3201      	adds	r2, #1
 800ffd0:	7830      	ldrb	r0, [r6, #0]
 800ffd2:	f7ff ff9b 	bl	800ff0c <__hexdig_fun>
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	d1f8      	bne.n	800ffcc <__gethex+0x94>
 800ffda:	9901      	ldr	r1, [sp, #4]
 800ffdc:	4652      	mov	r2, sl
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f001 ff0d 	bl	8011dfe <strncmp>
 800ffe4:	b980      	cbnz	r0, 8010008 <__gethex+0xd0>
 800ffe6:	b94d      	cbnz	r5, 800fffc <__gethex+0xc4>
 800ffe8:	eb06 050a 	add.w	r5, r6, sl
 800ffec:	462a      	mov	r2, r5
 800ffee:	4616      	mov	r6, r2
 800fff0:	3201      	adds	r2, #1
 800fff2:	7830      	ldrb	r0, [r6, #0]
 800fff4:	f7ff ff8a 	bl	800ff0c <__hexdig_fun>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d1f8      	bne.n	800ffee <__gethex+0xb6>
 800fffc:	1bad      	subs	r5, r5, r6
 800fffe:	00ad      	lsls	r5, r5, #2
 8010000:	e004      	b.n	801000c <__gethex+0xd4>
 8010002:	2400      	movs	r4, #0
 8010004:	4625      	mov	r5, r4
 8010006:	e7e0      	b.n	800ffca <__gethex+0x92>
 8010008:	2d00      	cmp	r5, #0
 801000a:	d1f7      	bne.n	800fffc <__gethex+0xc4>
 801000c:	7833      	ldrb	r3, [r6, #0]
 801000e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010012:	2b50      	cmp	r3, #80	; 0x50
 8010014:	d13b      	bne.n	801008e <__gethex+0x156>
 8010016:	7873      	ldrb	r3, [r6, #1]
 8010018:	2b2b      	cmp	r3, #43	; 0x2b
 801001a:	d02c      	beq.n	8010076 <__gethex+0x13e>
 801001c:	2b2d      	cmp	r3, #45	; 0x2d
 801001e:	d02e      	beq.n	801007e <__gethex+0x146>
 8010020:	1c71      	adds	r1, r6, #1
 8010022:	f04f 0900 	mov.w	r9, #0
 8010026:	7808      	ldrb	r0, [r1, #0]
 8010028:	f7ff ff70 	bl	800ff0c <__hexdig_fun>
 801002c:	1e43      	subs	r3, r0, #1
 801002e:	b2db      	uxtb	r3, r3
 8010030:	2b18      	cmp	r3, #24
 8010032:	d82c      	bhi.n	801008e <__gethex+0x156>
 8010034:	f1a0 0210 	sub.w	r2, r0, #16
 8010038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801003c:	f7ff ff66 	bl	800ff0c <__hexdig_fun>
 8010040:	1e43      	subs	r3, r0, #1
 8010042:	b2db      	uxtb	r3, r3
 8010044:	2b18      	cmp	r3, #24
 8010046:	d91d      	bls.n	8010084 <__gethex+0x14c>
 8010048:	f1b9 0f00 	cmp.w	r9, #0
 801004c:	d000      	beq.n	8010050 <__gethex+0x118>
 801004e:	4252      	negs	r2, r2
 8010050:	4415      	add	r5, r2
 8010052:	f8cb 1000 	str.w	r1, [fp]
 8010056:	b1e4      	cbz	r4, 8010092 <__gethex+0x15a>
 8010058:	9b00      	ldr	r3, [sp, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	bf14      	ite	ne
 801005e:	2700      	movne	r7, #0
 8010060:	2706      	moveq	r7, #6
 8010062:	4638      	mov	r0, r7
 8010064:	b009      	add	sp, #36	; 0x24
 8010066:	ecbd 8b02 	vpop	{d8}
 801006a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006e:	463e      	mov	r6, r7
 8010070:	4625      	mov	r5, r4
 8010072:	2401      	movs	r4, #1
 8010074:	e7ca      	b.n	801000c <__gethex+0xd4>
 8010076:	f04f 0900 	mov.w	r9, #0
 801007a:	1cb1      	adds	r1, r6, #2
 801007c:	e7d3      	b.n	8010026 <__gethex+0xee>
 801007e:	f04f 0901 	mov.w	r9, #1
 8010082:	e7fa      	b.n	801007a <__gethex+0x142>
 8010084:	230a      	movs	r3, #10
 8010086:	fb03 0202 	mla	r2, r3, r2, r0
 801008a:	3a10      	subs	r2, #16
 801008c:	e7d4      	b.n	8010038 <__gethex+0x100>
 801008e:	4631      	mov	r1, r6
 8010090:	e7df      	b.n	8010052 <__gethex+0x11a>
 8010092:	1bf3      	subs	r3, r6, r7
 8010094:	3b01      	subs	r3, #1
 8010096:	4621      	mov	r1, r4
 8010098:	2b07      	cmp	r3, #7
 801009a:	dc0b      	bgt.n	80100b4 <__gethex+0x17c>
 801009c:	ee18 0a10 	vmov	r0, s16
 80100a0:	f000 faea 	bl	8010678 <_Balloc>
 80100a4:	4604      	mov	r4, r0
 80100a6:	b940      	cbnz	r0, 80100ba <__gethex+0x182>
 80100a8:	4b5d      	ldr	r3, [pc, #372]	; (8010220 <__gethex+0x2e8>)
 80100aa:	4602      	mov	r2, r0
 80100ac:	21de      	movs	r1, #222	; 0xde
 80100ae:	485d      	ldr	r0, [pc, #372]	; (8010224 <__gethex+0x2ec>)
 80100b0:	f002 f820 	bl	80120f4 <__assert_func>
 80100b4:	3101      	adds	r1, #1
 80100b6:	105b      	asrs	r3, r3, #1
 80100b8:	e7ee      	b.n	8010098 <__gethex+0x160>
 80100ba:	f100 0914 	add.w	r9, r0, #20
 80100be:	f04f 0b00 	mov.w	fp, #0
 80100c2:	f1ca 0301 	rsb	r3, sl, #1
 80100c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80100ca:	f8cd b000 	str.w	fp, [sp]
 80100ce:	9306      	str	r3, [sp, #24]
 80100d0:	42b7      	cmp	r7, r6
 80100d2:	d340      	bcc.n	8010156 <__gethex+0x21e>
 80100d4:	9802      	ldr	r0, [sp, #8]
 80100d6:	9b00      	ldr	r3, [sp, #0]
 80100d8:	f840 3b04 	str.w	r3, [r0], #4
 80100dc:	eba0 0009 	sub.w	r0, r0, r9
 80100e0:	1080      	asrs	r0, r0, #2
 80100e2:	0146      	lsls	r6, r0, #5
 80100e4:	6120      	str	r0, [r4, #16]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f000 fbb8 	bl	801085c <__hi0bits>
 80100ec:	1a30      	subs	r0, r6, r0
 80100ee:	f8d8 6000 	ldr.w	r6, [r8]
 80100f2:	42b0      	cmp	r0, r6
 80100f4:	dd63      	ble.n	80101be <__gethex+0x286>
 80100f6:	1b87      	subs	r7, r0, r6
 80100f8:	4639      	mov	r1, r7
 80100fa:	4620      	mov	r0, r4
 80100fc:	f000 ff5c 	bl	8010fb8 <__any_on>
 8010100:	4682      	mov	sl, r0
 8010102:	b1a8      	cbz	r0, 8010130 <__gethex+0x1f8>
 8010104:	1e7b      	subs	r3, r7, #1
 8010106:	1159      	asrs	r1, r3, #5
 8010108:	f003 021f 	and.w	r2, r3, #31
 801010c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010110:	f04f 0a01 	mov.w	sl, #1
 8010114:	fa0a f202 	lsl.w	r2, sl, r2
 8010118:	420a      	tst	r2, r1
 801011a:	d009      	beq.n	8010130 <__gethex+0x1f8>
 801011c:	4553      	cmp	r3, sl
 801011e:	dd05      	ble.n	801012c <__gethex+0x1f4>
 8010120:	1eb9      	subs	r1, r7, #2
 8010122:	4620      	mov	r0, r4
 8010124:	f000 ff48 	bl	8010fb8 <__any_on>
 8010128:	2800      	cmp	r0, #0
 801012a:	d145      	bne.n	80101b8 <__gethex+0x280>
 801012c:	f04f 0a02 	mov.w	sl, #2
 8010130:	4639      	mov	r1, r7
 8010132:	4620      	mov	r0, r4
 8010134:	f7ff fe98 	bl	800fe68 <rshift>
 8010138:	443d      	add	r5, r7
 801013a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801013e:	42ab      	cmp	r3, r5
 8010140:	da4c      	bge.n	80101dc <__gethex+0x2a4>
 8010142:	ee18 0a10 	vmov	r0, s16
 8010146:	4621      	mov	r1, r4
 8010148:	f000 fad6 	bl	80106f8 <_Bfree>
 801014c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801014e:	2300      	movs	r3, #0
 8010150:	6013      	str	r3, [r2, #0]
 8010152:	27a3      	movs	r7, #163	; 0xa3
 8010154:	e785      	b.n	8010062 <__gethex+0x12a>
 8010156:	1e73      	subs	r3, r6, #1
 8010158:	9a05      	ldr	r2, [sp, #20]
 801015a:	9303      	str	r3, [sp, #12]
 801015c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010160:	4293      	cmp	r3, r2
 8010162:	d019      	beq.n	8010198 <__gethex+0x260>
 8010164:	f1bb 0f20 	cmp.w	fp, #32
 8010168:	d107      	bne.n	801017a <__gethex+0x242>
 801016a:	9b02      	ldr	r3, [sp, #8]
 801016c:	9a00      	ldr	r2, [sp, #0]
 801016e:	f843 2b04 	str.w	r2, [r3], #4
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	2300      	movs	r3, #0
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	469b      	mov	fp, r3
 801017a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801017e:	f7ff fec5 	bl	800ff0c <__hexdig_fun>
 8010182:	9b00      	ldr	r3, [sp, #0]
 8010184:	f000 000f 	and.w	r0, r0, #15
 8010188:	fa00 f00b 	lsl.w	r0, r0, fp
 801018c:	4303      	orrs	r3, r0
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	f10b 0b04 	add.w	fp, fp, #4
 8010194:	9b03      	ldr	r3, [sp, #12]
 8010196:	e00d      	b.n	80101b4 <__gethex+0x27c>
 8010198:	9b03      	ldr	r3, [sp, #12]
 801019a:	9a06      	ldr	r2, [sp, #24]
 801019c:	4413      	add	r3, r2
 801019e:	42bb      	cmp	r3, r7
 80101a0:	d3e0      	bcc.n	8010164 <__gethex+0x22c>
 80101a2:	4618      	mov	r0, r3
 80101a4:	9901      	ldr	r1, [sp, #4]
 80101a6:	9307      	str	r3, [sp, #28]
 80101a8:	4652      	mov	r2, sl
 80101aa:	f001 fe28 	bl	8011dfe <strncmp>
 80101ae:	9b07      	ldr	r3, [sp, #28]
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d1d7      	bne.n	8010164 <__gethex+0x22c>
 80101b4:	461e      	mov	r6, r3
 80101b6:	e78b      	b.n	80100d0 <__gethex+0x198>
 80101b8:	f04f 0a03 	mov.w	sl, #3
 80101bc:	e7b8      	b.n	8010130 <__gethex+0x1f8>
 80101be:	da0a      	bge.n	80101d6 <__gethex+0x29e>
 80101c0:	1a37      	subs	r7, r6, r0
 80101c2:	4621      	mov	r1, r4
 80101c4:	ee18 0a10 	vmov	r0, s16
 80101c8:	463a      	mov	r2, r7
 80101ca:	f000 fcb1 	bl	8010b30 <__lshift>
 80101ce:	1bed      	subs	r5, r5, r7
 80101d0:	4604      	mov	r4, r0
 80101d2:	f100 0914 	add.w	r9, r0, #20
 80101d6:	f04f 0a00 	mov.w	sl, #0
 80101da:	e7ae      	b.n	801013a <__gethex+0x202>
 80101dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80101e0:	42a8      	cmp	r0, r5
 80101e2:	dd72      	ble.n	80102ca <__gethex+0x392>
 80101e4:	1b45      	subs	r5, r0, r5
 80101e6:	42ae      	cmp	r6, r5
 80101e8:	dc36      	bgt.n	8010258 <__gethex+0x320>
 80101ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101ee:	2b02      	cmp	r3, #2
 80101f0:	d02a      	beq.n	8010248 <__gethex+0x310>
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d02c      	beq.n	8010250 <__gethex+0x318>
 80101f6:	2b01      	cmp	r3, #1
 80101f8:	d11c      	bne.n	8010234 <__gethex+0x2fc>
 80101fa:	42ae      	cmp	r6, r5
 80101fc:	d11a      	bne.n	8010234 <__gethex+0x2fc>
 80101fe:	2e01      	cmp	r6, #1
 8010200:	d112      	bne.n	8010228 <__gethex+0x2f0>
 8010202:	9a04      	ldr	r2, [sp, #16]
 8010204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010208:	6013      	str	r3, [r2, #0]
 801020a:	2301      	movs	r3, #1
 801020c:	6123      	str	r3, [r4, #16]
 801020e:	f8c9 3000 	str.w	r3, [r9]
 8010212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010214:	2762      	movs	r7, #98	; 0x62
 8010216:	601c      	str	r4, [r3, #0]
 8010218:	e723      	b.n	8010062 <__gethex+0x12a>
 801021a:	bf00      	nop
 801021c:	08012d44 	.word	0x08012d44
 8010220:	08012c68 	.word	0x08012c68
 8010224:	08012cdc 	.word	0x08012cdc
 8010228:	1e71      	subs	r1, r6, #1
 801022a:	4620      	mov	r0, r4
 801022c:	f000 fec4 	bl	8010fb8 <__any_on>
 8010230:	2800      	cmp	r0, #0
 8010232:	d1e6      	bne.n	8010202 <__gethex+0x2ca>
 8010234:	ee18 0a10 	vmov	r0, s16
 8010238:	4621      	mov	r1, r4
 801023a:	f000 fa5d 	bl	80106f8 <_Bfree>
 801023e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010240:	2300      	movs	r3, #0
 8010242:	6013      	str	r3, [r2, #0]
 8010244:	2750      	movs	r7, #80	; 0x50
 8010246:	e70c      	b.n	8010062 <__gethex+0x12a>
 8010248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1f2      	bne.n	8010234 <__gethex+0x2fc>
 801024e:	e7d8      	b.n	8010202 <__gethex+0x2ca>
 8010250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010252:	2b00      	cmp	r3, #0
 8010254:	d1d5      	bne.n	8010202 <__gethex+0x2ca>
 8010256:	e7ed      	b.n	8010234 <__gethex+0x2fc>
 8010258:	1e6f      	subs	r7, r5, #1
 801025a:	f1ba 0f00 	cmp.w	sl, #0
 801025e:	d131      	bne.n	80102c4 <__gethex+0x38c>
 8010260:	b127      	cbz	r7, 801026c <__gethex+0x334>
 8010262:	4639      	mov	r1, r7
 8010264:	4620      	mov	r0, r4
 8010266:	f000 fea7 	bl	8010fb8 <__any_on>
 801026a:	4682      	mov	sl, r0
 801026c:	117b      	asrs	r3, r7, #5
 801026e:	2101      	movs	r1, #1
 8010270:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010274:	f007 071f 	and.w	r7, r7, #31
 8010278:	fa01 f707 	lsl.w	r7, r1, r7
 801027c:	421f      	tst	r7, r3
 801027e:	4629      	mov	r1, r5
 8010280:	4620      	mov	r0, r4
 8010282:	bf18      	it	ne
 8010284:	f04a 0a02 	orrne.w	sl, sl, #2
 8010288:	1b76      	subs	r6, r6, r5
 801028a:	f7ff fded 	bl	800fe68 <rshift>
 801028e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010292:	2702      	movs	r7, #2
 8010294:	f1ba 0f00 	cmp.w	sl, #0
 8010298:	d048      	beq.n	801032c <__gethex+0x3f4>
 801029a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d015      	beq.n	80102ce <__gethex+0x396>
 80102a2:	2b03      	cmp	r3, #3
 80102a4:	d017      	beq.n	80102d6 <__gethex+0x39e>
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d109      	bne.n	80102be <__gethex+0x386>
 80102aa:	f01a 0f02 	tst.w	sl, #2
 80102ae:	d006      	beq.n	80102be <__gethex+0x386>
 80102b0:	f8d9 0000 	ldr.w	r0, [r9]
 80102b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80102b8:	f01a 0f01 	tst.w	sl, #1
 80102bc:	d10e      	bne.n	80102dc <__gethex+0x3a4>
 80102be:	f047 0710 	orr.w	r7, r7, #16
 80102c2:	e033      	b.n	801032c <__gethex+0x3f4>
 80102c4:	f04f 0a01 	mov.w	sl, #1
 80102c8:	e7d0      	b.n	801026c <__gethex+0x334>
 80102ca:	2701      	movs	r7, #1
 80102cc:	e7e2      	b.n	8010294 <__gethex+0x35c>
 80102ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102d0:	f1c3 0301 	rsb	r3, r3, #1
 80102d4:	9315      	str	r3, [sp, #84]	; 0x54
 80102d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d0f0      	beq.n	80102be <__gethex+0x386>
 80102dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80102e0:	f104 0314 	add.w	r3, r4, #20
 80102e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80102e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80102ec:	f04f 0c00 	mov.w	ip, #0
 80102f0:	4618      	mov	r0, r3
 80102f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80102fa:	d01c      	beq.n	8010336 <__gethex+0x3fe>
 80102fc:	3201      	adds	r2, #1
 80102fe:	6002      	str	r2, [r0, #0]
 8010300:	2f02      	cmp	r7, #2
 8010302:	f104 0314 	add.w	r3, r4, #20
 8010306:	d13f      	bne.n	8010388 <__gethex+0x450>
 8010308:	f8d8 2000 	ldr.w	r2, [r8]
 801030c:	3a01      	subs	r2, #1
 801030e:	42b2      	cmp	r2, r6
 8010310:	d10a      	bne.n	8010328 <__gethex+0x3f0>
 8010312:	1171      	asrs	r1, r6, #5
 8010314:	2201      	movs	r2, #1
 8010316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801031a:	f006 061f 	and.w	r6, r6, #31
 801031e:	fa02 f606 	lsl.w	r6, r2, r6
 8010322:	421e      	tst	r6, r3
 8010324:	bf18      	it	ne
 8010326:	4617      	movne	r7, r2
 8010328:	f047 0720 	orr.w	r7, r7, #32
 801032c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801032e:	601c      	str	r4, [r3, #0]
 8010330:	9b04      	ldr	r3, [sp, #16]
 8010332:	601d      	str	r5, [r3, #0]
 8010334:	e695      	b.n	8010062 <__gethex+0x12a>
 8010336:	4299      	cmp	r1, r3
 8010338:	f843 cc04 	str.w	ip, [r3, #-4]
 801033c:	d8d8      	bhi.n	80102f0 <__gethex+0x3b8>
 801033e:	68a3      	ldr	r3, [r4, #8]
 8010340:	459b      	cmp	fp, r3
 8010342:	db19      	blt.n	8010378 <__gethex+0x440>
 8010344:	6861      	ldr	r1, [r4, #4]
 8010346:	ee18 0a10 	vmov	r0, s16
 801034a:	3101      	adds	r1, #1
 801034c:	f000 f994 	bl	8010678 <_Balloc>
 8010350:	4681      	mov	r9, r0
 8010352:	b918      	cbnz	r0, 801035c <__gethex+0x424>
 8010354:	4b1a      	ldr	r3, [pc, #104]	; (80103c0 <__gethex+0x488>)
 8010356:	4602      	mov	r2, r0
 8010358:	2184      	movs	r1, #132	; 0x84
 801035a:	e6a8      	b.n	80100ae <__gethex+0x176>
 801035c:	6922      	ldr	r2, [r4, #16]
 801035e:	3202      	adds	r2, #2
 8010360:	f104 010c 	add.w	r1, r4, #12
 8010364:	0092      	lsls	r2, r2, #2
 8010366:	300c      	adds	r0, #12
 8010368:	f000 f96c 	bl	8010644 <memcpy>
 801036c:	4621      	mov	r1, r4
 801036e:	ee18 0a10 	vmov	r0, s16
 8010372:	f000 f9c1 	bl	80106f8 <_Bfree>
 8010376:	464c      	mov	r4, r9
 8010378:	6923      	ldr	r3, [r4, #16]
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010380:	6122      	str	r2, [r4, #16]
 8010382:	2201      	movs	r2, #1
 8010384:	615a      	str	r2, [r3, #20]
 8010386:	e7bb      	b.n	8010300 <__gethex+0x3c8>
 8010388:	6922      	ldr	r2, [r4, #16]
 801038a:	455a      	cmp	r2, fp
 801038c:	dd0b      	ble.n	80103a6 <__gethex+0x46e>
 801038e:	2101      	movs	r1, #1
 8010390:	4620      	mov	r0, r4
 8010392:	f7ff fd69 	bl	800fe68 <rshift>
 8010396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801039a:	3501      	adds	r5, #1
 801039c:	42ab      	cmp	r3, r5
 801039e:	f6ff aed0 	blt.w	8010142 <__gethex+0x20a>
 80103a2:	2701      	movs	r7, #1
 80103a4:	e7c0      	b.n	8010328 <__gethex+0x3f0>
 80103a6:	f016 061f 	ands.w	r6, r6, #31
 80103aa:	d0fa      	beq.n	80103a2 <__gethex+0x46a>
 80103ac:	4453      	add	r3, sl
 80103ae:	f1c6 0620 	rsb	r6, r6, #32
 80103b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80103b6:	f000 fa51 	bl	801085c <__hi0bits>
 80103ba:	42b0      	cmp	r0, r6
 80103bc:	dbe7      	blt.n	801038e <__gethex+0x456>
 80103be:	e7f0      	b.n	80103a2 <__gethex+0x46a>
 80103c0:	08012c68 	.word	0x08012c68

080103c4 <L_shift>:
 80103c4:	f1c2 0208 	rsb	r2, r2, #8
 80103c8:	0092      	lsls	r2, r2, #2
 80103ca:	b570      	push	{r4, r5, r6, lr}
 80103cc:	f1c2 0620 	rsb	r6, r2, #32
 80103d0:	6843      	ldr	r3, [r0, #4]
 80103d2:	6804      	ldr	r4, [r0, #0]
 80103d4:	fa03 f506 	lsl.w	r5, r3, r6
 80103d8:	432c      	orrs	r4, r5
 80103da:	40d3      	lsrs	r3, r2
 80103dc:	6004      	str	r4, [r0, #0]
 80103de:	f840 3f04 	str.w	r3, [r0, #4]!
 80103e2:	4288      	cmp	r0, r1
 80103e4:	d3f4      	bcc.n	80103d0 <L_shift+0xc>
 80103e6:	bd70      	pop	{r4, r5, r6, pc}

080103e8 <__match>:
 80103e8:	b530      	push	{r4, r5, lr}
 80103ea:	6803      	ldr	r3, [r0, #0]
 80103ec:	3301      	adds	r3, #1
 80103ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103f2:	b914      	cbnz	r4, 80103fa <__match+0x12>
 80103f4:	6003      	str	r3, [r0, #0]
 80103f6:	2001      	movs	r0, #1
 80103f8:	bd30      	pop	{r4, r5, pc}
 80103fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010402:	2d19      	cmp	r5, #25
 8010404:	bf98      	it	ls
 8010406:	3220      	addls	r2, #32
 8010408:	42a2      	cmp	r2, r4
 801040a:	d0f0      	beq.n	80103ee <__match+0x6>
 801040c:	2000      	movs	r0, #0
 801040e:	e7f3      	b.n	80103f8 <__match+0x10>

08010410 <__hexnan>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	680b      	ldr	r3, [r1, #0]
 8010416:	115e      	asrs	r6, r3, #5
 8010418:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801041c:	f013 031f 	ands.w	r3, r3, #31
 8010420:	b087      	sub	sp, #28
 8010422:	bf18      	it	ne
 8010424:	3604      	addne	r6, #4
 8010426:	2500      	movs	r5, #0
 8010428:	1f37      	subs	r7, r6, #4
 801042a:	4690      	mov	r8, r2
 801042c:	6802      	ldr	r2, [r0, #0]
 801042e:	9301      	str	r3, [sp, #4]
 8010430:	4682      	mov	sl, r0
 8010432:	f846 5c04 	str.w	r5, [r6, #-4]
 8010436:	46b9      	mov	r9, r7
 8010438:	463c      	mov	r4, r7
 801043a:	9502      	str	r5, [sp, #8]
 801043c:	46ab      	mov	fp, r5
 801043e:	7851      	ldrb	r1, [r2, #1]
 8010440:	1c53      	adds	r3, r2, #1
 8010442:	9303      	str	r3, [sp, #12]
 8010444:	b341      	cbz	r1, 8010498 <__hexnan+0x88>
 8010446:	4608      	mov	r0, r1
 8010448:	9205      	str	r2, [sp, #20]
 801044a:	9104      	str	r1, [sp, #16]
 801044c:	f7ff fd5e 	bl	800ff0c <__hexdig_fun>
 8010450:	2800      	cmp	r0, #0
 8010452:	d14f      	bne.n	80104f4 <__hexnan+0xe4>
 8010454:	9904      	ldr	r1, [sp, #16]
 8010456:	9a05      	ldr	r2, [sp, #20]
 8010458:	2920      	cmp	r1, #32
 801045a:	d818      	bhi.n	801048e <__hexnan+0x7e>
 801045c:	9b02      	ldr	r3, [sp, #8]
 801045e:	459b      	cmp	fp, r3
 8010460:	dd13      	ble.n	801048a <__hexnan+0x7a>
 8010462:	454c      	cmp	r4, r9
 8010464:	d206      	bcs.n	8010474 <__hexnan+0x64>
 8010466:	2d07      	cmp	r5, #7
 8010468:	dc04      	bgt.n	8010474 <__hexnan+0x64>
 801046a:	462a      	mov	r2, r5
 801046c:	4649      	mov	r1, r9
 801046e:	4620      	mov	r0, r4
 8010470:	f7ff ffa8 	bl	80103c4 <L_shift>
 8010474:	4544      	cmp	r4, r8
 8010476:	d950      	bls.n	801051a <__hexnan+0x10a>
 8010478:	2300      	movs	r3, #0
 801047a:	f1a4 0904 	sub.w	r9, r4, #4
 801047e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010482:	f8cd b008 	str.w	fp, [sp, #8]
 8010486:	464c      	mov	r4, r9
 8010488:	461d      	mov	r5, r3
 801048a:	9a03      	ldr	r2, [sp, #12]
 801048c:	e7d7      	b.n	801043e <__hexnan+0x2e>
 801048e:	2929      	cmp	r1, #41	; 0x29
 8010490:	d156      	bne.n	8010540 <__hexnan+0x130>
 8010492:	3202      	adds	r2, #2
 8010494:	f8ca 2000 	str.w	r2, [sl]
 8010498:	f1bb 0f00 	cmp.w	fp, #0
 801049c:	d050      	beq.n	8010540 <__hexnan+0x130>
 801049e:	454c      	cmp	r4, r9
 80104a0:	d206      	bcs.n	80104b0 <__hexnan+0xa0>
 80104a2:	2d07      	cmp	r5, #7
 80104a4:	dc04      	bgt.n	80104b0 <__hexnan+0xa0>
 80104a6:	462a      	mov	r2, r5
 80104a8:	4649      	mov	r1, r9
 80104aa:	4620      	mov	r0, r4
 80104ac:	f7ff ff8a 	bl	80103c4 <L_shift>
 80104b0:	4544      	cmp	r4, r8
 80104b2:	d934      	bls.n	801051e <__hexnan+0x10e>
 80104b4:	f1a8 0204 	sub.w	r2, r8, #4
 80104b8:	4623      	mov	r3, r4
 80104ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80104be:	f842 1f04 	str.w	r1, [r2, #4]!
 80104c2:	429f      	cmp	r7, r3
 80104c4:	d2f9      	bcs.n	80104ba <__hexnan+0xaa>
 80104c6:	1b3b      	subs	r3, r7, r4
 80104c8:	f023 0303 	bic.w	r3, r3, #3
 80104cc:	3304      	adds	r3, #4
 80104ce:	3401      	adds	r4, #1
 80104d0:	3e03      	subs	r6, #3
 80104d2:	42b4      	cmp	r4, r6
 80104d4:	bf88      	it	hi
 80104d6:	2304      	movhi	r3, #4
 80104d8:	4443      	add	r3, r8
 80104da:	2200      	movs	r2, #0
 80104dc:	f843 2b04 	str.w	r2, [r3], #4
 80104e0:	429f      	cmp	r7, r3
 80104e2:	d2fb      	bcs.n	80104dc <__hexnan+0xcc>
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	b91b      	cbnz	r3, 80104f0 <__hexnan+0xe0>
 80104e8:	4547      	cmp	r7, r8
 80104ea:	d127      	bne.n	801053c <__hexnan+0x12c>
 80104ec:	2301      	movs	r3, #1
 80104ee:	603b      	str	r3, [r7, #0]
 80104f0:	2005      	movs	r0, #5
 80104f2:	e026      	b.n	8010542 <__hexnan+0x132>
 80104f4:	3501      	adds	r5, #1
 80104f6:	2d08      	cmp	r5, #8
 80104f8:	f10b 0b01 	add.w	fp, fp, #1
 80104fc:	dd06      	ble.n	801050c <__hexnan+0xfc>
 80104fe:	4544      	cmp	r4, r8
 8010500:	d9c3      	bls.n	801048a <__hexnan+0x7a>
 8010502:	2300      	movs	r3, #0
 8010504:	f844 3c04 	str.w	r3, [r4, #-4]
 8010508:	2501      	movs	r5, #1
 801050a:	3c04      	subs	r4, #4
 801050c:	6822      	ldr	r2, [r4, #0]
 801050e:	f000 000f 	and.w	r0, r0, #15
 8010512:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010516:	6022      	str	r2, [r4, #0]
 8010518:	e7b7      	b.n	801048a <__hexnan+0x7a>
 801051a:	2508      	movs	r5, #8
 801051c:	e7b5      	b.n	801048a <__hexnan+0x7a>
 801051e:	9b01      	ldr	r3, [sp, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d0df      	beq.n	80104e4 <__hexnan+0xd4>
 8010524:	f04f 32ff 	mov.w	r2, #4294967295
 8010528:	f1c3 0320 	rsb	r3, r3, #32
 801052c:	fa22 f303 	lsr.w	r3, r2, r3
 8010530:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010534:	401a      	ands	r2, r3
 8010536:	f846 2c04 	str.w	r2, [r6, #-4]
 801053a:	e7d3      	b.n	80104e4 <__hexnan+0xd4>
 801053c:	3f04      	subs	r7, #4
 801053e:	e7d1      	b.n	80104e4 <__hexnan+0xd4>
 8010540:	2004      	movs	r0, #4
 8010542:	b007      	add	sp, #28
 8010544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010548 <_localeconv_r>:
 8010548:	4800      	ldr	r0, [pc, #0]	; (801054c <_localeconv_r+0x4>)
 801054a:	4770      	bx	lr
 801054c:	2000019c 	.word	0x2000019c

08010550 <__retarget_lock_init_recursive>:
 8010550:	4770      	bx	lr

08010552 <__retarget_lock_acquire_recursive>:
 8010552:	4770      	bx	lr

08010554 <__retarget_lock_release_recursive>:
 8010554:	4770      	bx	lr

08010556 <__swhatbuf_r>:
 8010556:	b570      	push	{r4, r5, r6, lr}
 8010558:	460e      	mov	r6, r1
 801055a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801055e:	2900      	cmp	r1, #0
 8010560:	b096      	sub	sp, #88	; 0x58
 8010562:	4614      	mov	r4, r2
 8010564:	461d      	mov	r5, r3
 8010566:	da08      	bge.n	801057a <__swhatbuf_r+0x24>
 8010568:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801056c:	2200      	movs	r2, #0
 801056e:	602a      	str	r2, [r5, #0]
 8010570:	061a      	lsls	r2, r3, #24
 8010572:	d410      	bmi.n	8010596 <__swhatbuf_r+0x40>
 8010574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010578:	e00e      	b.n	8010598 <__swhatbuf_r+0x42>
 801057a:	466a      	mov	r2, sp
 801057c:	f001 fdfa 	bl	8012174 <_fstat_r>
 8010580:	2800      	cmp	r0, #0
 8010582:	dbf1      	blt.n	8010568 <__swhatbuf_r+0x12>
 8010584:	9a01      	ldr	r2, [sp, #4]
 8010586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801058a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801058e:	425a      	negs	r2, r3
 8010590:	415a      	adcs	r2, r3
 8010592:	602a      	str	r2, [r5, #0]
 8010594:	e7ee      	b.n	8010574 <__swhatbuf_r+0x1e>
 8010596:	2340      	movs	r3, #64	; 0x40
 8010598:	2000      	movs	r0, #0
 801059a:	6023      	str	r3, [r4, #0]
 801059c:	b016      	add	sp, #88	; 0x58
 801059e:	bd70      	pop	{r4, r5, r6, pc}

080105a0 <__smakebuf_r>:
 80105a0:	898b      	ldrh	r3, [r1, #12]
 80105a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105a4:	079d      	lsls	r5, r3, #30
 80105a6:	4606      	mov	r6, r0
 80105a8:	460c      	mov	r4, r1
 80105aa:	d507      	bpl.n	80105bc <__smakebuf_r+0x1c>
 80105ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105b0:	6023      	str	r3, [r4, #0]
 80105b2:	6123      	str	r3, [r4, #16]
 80105b4:	2301      	movs	r3, #1
 80105b6:	6163      	str	r3, [r4, #20]
 80105b8:	b002      	add	sp, #8
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	ab01      	add	r3, sp, #4
 80105be:	466a      	mov	r2, sp
 80105c0:	f7ff ffc9 	bl	8010556 <__swhatbuf_r>
 80105c4:	9900      	ldr	r1, [sp, #0]
 80105c6:	4605      	mov	r5, r0
 80105c8:	4630      	mov	r0, r6
 80105ca:	f7fc fbf1 	bl	800cdb0 <_malloc_r>
 80105ce:	b948      	cbnz	r0, 80105e4 <__smakebuf_r+0x44>
 80105d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105d4:	059a      	lsls	r2, r3, #22
 80105d6:	d4ef      	bmi.n	80105b8 <__smakebuf_r+0x18>
 80105d8:	f023 0303 	bic.w	r3, r3, #3
 80105dc:	f043 0302 	orr.w	r3, r3, #2
 80105e0:	81a3      	strh	r3, [r4, #12]
 80105e2:	e7e3      	b.n	80105ac <__smakebuf_r+0xc>
 80105e4:	4b0d      	ldr	r3, [pc, #52]	; (801061c <__smakebuf_r+0x7c>)
 80105e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80105e8:	89a3      	ldrh	r3, [r4, #12]
 80105ea:	6020      	str	r0, [r4, #0]
 80105ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105f0:	81a3      	strh	r3, [r4, #12]
 80105f2:	9b00      	ldr	r3, [sp, #0]
 80105f4:	6163      	str	r3, [r4, #20]
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	6120      	str	r0, [r4, #16]
 80105fa:	b15b      	cbz	r3, 8010614 <__smakebuf_r+0x74>
 80105fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010600:	4630      	mov	r0, r6
 8010602:	f001 fdc9 	bl	8012198 <_isatty_r>
 8010606:	b128      	cbz	r0, 8010614 <__smakebuf_r+0x74>
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	f023 0303 	bic.w	r3, r3, #3
 801060e:	f043 0301 	orr.w	r3, r3, #1
 8010612:	81a3      	strh	r3, [r4, #12]
 8010614:	89a0      	ldrh	r0, [r4, #12]
 8010616:	4305      	orrs	r5, r0
 8010618:	81a5      	strh	r5, [r4, #12]
 801061a:	e7cd      	b.n	80105b8 <__smakebuf_r+0x18>
 801061c:	0800fc8d 	.word	0x0800fc8d

08010620 <__ascii_mbtowc>:
 8010620:	b082      	sub	sp, #8
 8010622:	b901      	cbnz	r1, 8010626 <__ascii_mbtowc+0x6>
 8010624:	a901      	add	r1, sp, #4
 8010626:	b142      	cbz	r2, 801063a <__ascii_mbtowc+0x1a>
 8010628:	b14b      	cbz	r3, 801063e <__ascii_mbtowc+0x1e>
 801062a:	7813      	ldrb	r3, [r2, #0]
 801062c:	600b      	str	r3, [r1, #0]
 801062e:	7812      	ldrb	r2, [r2, #0]
 8010630:	1e10      	subs	r0, r2, #0
 8010632:	bf18      	it	ne
 8010634:	2001      	movne	r0, #1
 8010636:	b002      	add	sp, #8
 8010638:	4770      	bx	lr
 801063a:	4610      	mov	r0, r2
 801063c:	e7fb      	b.n	8010636 <__ascii_mbtowc+0x16>
 801063e:	f06f 0001 	mvn.w	r0, #1
 8010642:	e7f8      	b.n	8010636 <__ascii_mbtowc+0x16>

08010644 <memcpy>:
 8010644:	440a      	add	r2, r1
 8010646:	4291      	cmp	r1, r2
 8010648:	f100 33ff 	add.w	r3, r0, #4294967295
 801064c:	d100      	bne.n	8010650 <memcpy+0xc>
 801064e:	4770      	bx	lr
 8010650:	b510      	push	{r4, lr}
 8010652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010656:	f803 4f01 	strb.w	r4, [r3, #1]!
 801065a:	4291      	cmp	r1, r2
 801065c:	d1f9      	bne.n	8010652 <memcpy+0xe>
 801065e:	bd10      	pop	{r4, pc}

08010660 <__malloc_lock>:
 8010660:	4801      	ldr	r0, [pc, #4]	; (8010668 <__malloc_lock+0x8>)
 8010662:	f7ff bf76 	b.w	8010552 <__retarget_lock_acquire_recursive>
 8010666:	bf00      	nop
 8010668:	200007b4 	.word	0x200007b4

0801066c <__malloc_unlock>:
 801066c:	4801      	ldr	r0, [pc, #4]	; (8010674 <__malloc_unlock+0x8>)
 801066e:	f7ff bf71 	b.w	8010554 <__retarget_lock_release_recursive>
 8010672:	bf00      	nop
 8010674:	200007b4 	.word	0x200007b4

08010678 <_Balloc>:
 8010678:	b570      	push	{r4, r5, r6, lr}
 801067a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801067c:	4604      	mov	r4, r0
 801067e:	460d      	mov	r5, r1
 8010680:	b976      	cbnz	r6, 80106a0 <_Balloc+0x28>
 8010682:	2010      	movs	r0, #16
 8010684:	f7fc fb18 	bl	800ccb8 <malloc>
 8010688:	4602      	mov	r2, r0
 801068a:	6260      	str	r0, [r4, #36]	; 0x24
 801068c:	b920      	cbnz	r0, 8010698 <_Balloc+0x20>
 801068e:	4b18      	ldr	r3, [pc, #96]	; (80106f0 <_Balloc+0x78>)
 8010690:	4818      	ldr	r0, [pc, #96]	; (80106f4 <_Balloc+0x7c>)
 8010692:	2166      	movs	r1, #102	; 0x66
 8010694:	f001 fd2e 	bl	80120f4 <__assert_func>
 8010698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801069c:	6006      	str	r6, [r0, #0]
 801069e:	60c6      	str	r6, [r0, #12]
 80106a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80106a2:	68f3      	ldr	r3, [r6, #12]
 80106a4:	b183      	cbz	r3, 80106c8 <_Balloc+0x50>
 80106a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106ae:	b9b8      	cbnz	r0, 80106e0 <_Balloc+0x68>
 80106b0:	2101      	movs	r1, #1
 80106b2:	fa01 f605 	lsl.w	r6, r1, r5
 80106b6:	1d72      	adds	r2, r6, #5
 80106b8:	0092      	lsls	r2, r2, #2
 80106ba:	4620      	mov	r0, r4
 80106bc:	f000 fc9d 	bl	8010ffa <_calloc_r>
 80106c0:	b160      	cbz	r0, 80106dc <_Balloc+0x64>
 80106c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80106c6:	e00e      	b.n	80106e6 <_Balloc+0x6e>
 80106c8:	2221      	movs	r2, #33	; 0x21
 80106ca:	2104      	movs	r1, #4
 80106cc:	4620      	mov	r0, r4
 80106ce:	f000 fc94 	bl	8010ffa <_calloc_r>
 80106d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106d4:	60f0      	str	r0, [r6, #12]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d1e4      	bne.n	80106a6 <_Balloc+0x2e>
 80106dc:	2000      	movs	r0, #0
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	6802      	ldr	r2, [r0, #0]
 80106e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106e6:	2300      	movs	r3, #0
 80106e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106ec:	e7f7      	b.n	80106de <_Balloc+0x66>
 80106ee:	bf00      	nop
 80106f0:	08012bf6 	.word	0x08012bf6
 80106f4:	08012d58 	.word	0x08012d58

080106f8 <_Bfree>:
 80106f8:	b570      	push	{r4, r5, r6, lr}
 80106fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80106fc:	4605      	mov	r5, r0
 80106fe:	460c      	mov	r4, r1
 8010700:	b976      	cbnz	r6, 8010720 <_Bfree+0x28>
 8010702:	2010      	movs	r0, #16
 8010704:	f7fc fad8 	bl	800ccb8 <malloc>
 8010708:	4602      	mov	r2, r0
 801070a:	6268      	str	r0, [r5, #36]	; 0x24
 801070c:	b920      	cbnz	r0, 8010718 <_Bfree+0x20>
 801070e:	4b09      	ldr	r3, [pc, #36]	; (8010734 <_Bfree+0x3c>)
 8010710:	4809      	ldr	r0, [pc, #36]	; (8010738 <_Bfree+0x40>)
 8010712:	218a      	movs	r1, #138	; 0x8a
 8010714:	f001 fcee 	bl	80120f4 <__assert_func>
 8010718:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801071c:	6006      	str	r6, [r0, #0]
 801071e:	60c6      	str	r6, [r0, #12]
 8010720:	b13c      	cbz	r4, 8010732 <_Bfree+0x3a>
 8010722:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010724:	6862      	ldr	r2, [r4, #4]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801072c:	6021      	str	r1, [r4, #0]
 801072e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	08012bf6 	.word	0x08012bf6
 8010738:	08012d58 	.word	0x08012d58

0801073c <__multadd>:
 801073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010740:	690d      	ldr	r5, [r1, #16]
 8010742:	4607      	mov	r7, r0
 8010744:	460c      	mov	r4, r1
 8010746:	461e      	mov	r6, r3
 8010748:	f101 0c14 	add.w	ip, r1, #20
 801074c:	2000      	movs	r0, #0
 801074e:	f8dc 3000 	ldr.w	r3, [ip]
 8010752:	b299      	uxth	r1, r3
 8010754:	fb02 6101 	mla	r1, r2, r1, r6
 8010758:	0c1e      	lsrs	r6, r3, #16
 801075a:	0c0b      	lsrs	r3, r1, #16
 801075c:	fb02 3306 	mla	r3, r2, r6, r3
 8010760:	b289      	uxth	r1, r1
 8010762:	3001      	adds	r0, #1
 8010764:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010768:	4285      	cmp	r5, r0
 801076a:	f84c 1b04 	str.w	r1, [ip], #4
 801076e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010772:	dcec      	bgt.n	801074e <__multadd+0x12>
 8010774:	b30e      	cbz	r6, 80107ba <__multadd+0x7e>
 8010776:	68a3      	ldr	r3, [r4, #8]
 8010778:	42ab      	cmp	r3, r5
 801077a:	dc19      	bgt.n	80107b0 <__multadd+0x74>
 801077c:	6861      	ldr	r1, [r4, #4]
 801077e:	4638      	mov	r0, r7
 8010780:	3101      	adds	r1, #1
 8010782:	f7ff ff79 	bl	8010678 <_Balloc>
 8010786:	4680      	mov	r8, r0
 8010788:	b928      	cbnz	r0, 8010796 <__multadd+0x5a>
 801078a:	4602      	mov	r2, r0
 801078c:	4b0c      	ldr	r3, [pc, #48]	; (80107c0 <__multadd+0x84>)
 801078e:	480d      	ldr	r0, [pc, #52]	; (80107c4 <__multadd+0x88>)
 8010790:	21b5      	movs	r1, #181	; 0xb5
 8010792:	f001 fcaf 	bl	80120f4 <__assert_func>
 8010796:	6922      	ldr	r2, [r4, #16]
 8010798:	3202      	adds	r2, #2
 801079a:	f104 010c 	add.w	r1, r4, #12
 801079e:	0092      	lsls	r2, r2, #2
 80107a0:	300c      	adds	r0, #12
 80107a2:	f7ff ff4f 	bl	8010644 <memcpy>
 80107a6:	4621      	mov	r1, r4
 80107a8:	4638      	mov	r0, r7
 80107aa:	f7ff ffa5 	bl	80106f8 <_Bfree>
 80107ae:	4644      	mov	r4, r8
 80107b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80107b4:	3501      	adds	r5, #1
 80107b6:	615e      	str	r6, [r3, #20]
 80107b8:	6125      	str	r5, [r4, #16]
 80107ba:	4620      	mov	r0, r4
 80107bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c0:	08012c68 	.word	0x08012c68
 80107c4:	08012d58 	.word	0x08012d58

080107c8 <__s2b>:
 80107c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107cc:	460c      	mov	r4, r1
 80107ce:	4615      	mov	r5, r2
 80107d0:	461f      	mov	r7, r3
 80107d2:	2209      	movs	r2, #9
 80107d4:	3308      	adds	r3, #8
 80107d6:	4606      	mov	r6, r0
 80107d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80107dc:	2100      	movs	r1, #0
 80107de:	2201      	movs	r2, #1
 80107e0:	429a      	cmp	r2, r3
 80107e2:	db09      	blt.n	80107f8 <__s2b+0x30>
 80107e4:	4630      	mov	r0, r6
 80107e6:	f7ff ff47 	bl	8010678 <_Balloc>
 80107ea:	b940      	cbnz	r0, 80107fe <__s2b+0x36>
 80107ec:	4602      	mov	r2, r0
 80107ee:	4b19      	ldr	r3, [pc, #100]	; (8010854 <__s2b+0x8c>)
 80107f0:	4819      	ldr	r0, [pc, #100]	; (8010858 <__s2b+0x90>)
 80107f2:	21ce      	movs	r1, #206	; 0xce
 80107f4:	f001 fc7e 	bl	80120f4 <__assert_func>
 80107f8:	0052      	lsls	r2, r2, #1
 80107fa:	3101      	adds	r1, #1
 80107fc:	e7f0      	b.n	80107e0 <__s2b+0x18>
 80107fe:	9b08      	ldr	r3, [sp, #32]
 8010800:	6143      	str	r3, [r0, #20]
 8010802:	2d09      	cmp	r5, #9
 8010804:	f04f 0301 	mov.w	r3, #1
 8010808:	6103      	str	r3, [r0, #16]
 801080a:	dd16      	ble.n	801083a <__s2b+0x72>
 801080c:	f104 0909 	add.w	r9, r4, #9
 8010810:	46c8      	mov	r8, r9
 8010812:	442c      	add	r4, r5
 8010814:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010818:	4601      	mov	r1, r0
 801081a:	3b30      	subs	r3, #48	; 0x30
 801081c:	220a      	movs	r2, #10
 801081e:	4630      	mov	r0, r6
 8010820:	f7ff ff8c 	bl	801073c <__multadd>
 8010824:	45a0      	cmp	r8, r4
 8010826:	d1f5      	bne.n	8010814 <__s2b+0x4c>
 8010828:	f1a5 0408 	sub.w	r4, r5, #8
 801082c:	444c      	add	r4, r9
 801082e:	1b2d      	subs	r5, r5, r4
 8010830:	1963      	adds	r3, r4, r5
 8010832:	42bb      	cmp	r3, r7
 8010834:	db04      	blt.n	8010840 <__s2b+0x78>
 8010836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801083a:	340a      	adds	r4, #10
 801083c:	2509      	movs	r5, #9
 801083e:	e7f6      	b.n	801082e <__s2b+0x66>
 8010840:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010844:	4601      	mov	r1, r0
 8010846:	3b30      	subs	r3, #48	; 0x30
 8010848:	220a      	movs	r2, #10
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff ff76 	bl	801073c <__multadd>
 8010850:	e7ee      	b.n	8010830 <__s2b+0x68>
 8010852:	bf00      	nop
 8010854:	08012c68 	.word	0x08012c68
 8010858:	08012d58 	.word	0x08012d58

0801085c <__hi0bits>:
 801085c:	0c03      	lsrs	r3, r0, #16
 801085e:	041b      	lsls	r3, r3, #16
 8010860:	b9d3      	cbnz	r3, 8010898 <__hi0bits+0x3c>
 8010862:	0400      	lsls	r0, r0, #16
 8010864:	2310      	movs	r3, #16
 8010866:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801086a:	bf04      	itt	eq
 801086c:	0200      	lsleq	r0, r0, #8
 801086e:	3308      	addeq	r3, #8
 8010870:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010874:	bf04      	itt	eq
 8010876:	0100      	lsleq	r0, r0, #4
 8010878:	3304      	addeq	r3, #4
 801087a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801087e:	bf04      	itt	eq
 8010880:	0080      	lsleq	r0, r0, #2
 8010882:	3302      	addeq	r3, #2
 8010884:	2800      	cmp	r0, #0
 8010886:	db05      	blt.n	8010894 <__hi0bits+0x38>
 8010888:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801088c:	f103 0301 	add.w	r3, r3, #1
 8010890:	bf08      	it	eq
 8010892:	2320      	moveq	r3, #32
 8010894:	4618      	mov	r0, r3
 8010896:	4770      	bx	lr
 8010898:	2300      	movs	r3, #0
 801089a:	e7e4      	b.n	8010866 <__hi0bits+0xa>

0801089c <__lo0bits>:
 801089c:	6803      	ldr	r3, [r0, #0]
 801089e:	f013 0207 	ands.w	r2, r3, #7
 80108a2:	4601      	mov	r1, r0
 80108a4:	d00b      	beq.n	80108be <__lo0bits+0x22>
 80108a6:	07da      	lsls	r2, r3, #31
 80108a8:	d423      	bmi.n	80108f2 <__lo0bits+0x56>
 80108aa:	0798      	lsls	r0, r3, #30
 80108ac:	bf49      	itett	mi
 80108ae:	085b      	lsrmi	r3, r3, #1
 80108b0:	089b      	lsrpl	r3, r3, #2
 80108b2:	2001      	movmi	r0, #1
 80108b4:	600b      	strmi	r3, [r1, #0]
 80108b6:	bf5c      	itt	pl
 80108b8:	600b      	strpl	r3, [r1, #0]
 80108ba:	2002      	movpl	r0, #2
 80108bc:	4770      	bx	lr
 80108be:	b298      	uxth	r0, r3
 80108c0:	b9a8      	cbnz	r0, 80108ee <__lo0bits+0x52>
 80108c2:	0c1b      	lsrs	r3, r3, #16
 80108c4:	2010      	movs	r0, #16
 80108c6:	b2da      	uxtb	r2, r3
 80108c8:	b90a      	cbnz	r2, 80108ce <__lo0bits+0x32>
 80108ca:	3008      	adds	r0, #8
 80108cc:	0a1b      	lsrs	r3, r3, #8
 80108ce:	071a      	lsls	r2, r3, #28
 80108d0:	bf04      	itt	eq
 80108d2:	091b      	lsreq	r3, r3, #4
 80108d4:	3004      	addeq	r0, #4
 80108d6:	079a      	lsls	r2, r3, #30
 80108d8:	bf04      	itt	eq
 80108da:	089b      	lsreq	r3, r3, #2
 80108dc:	3002      	addeq	r0, #2
 80108de:	07da      	lsls	r2, r3, #31
 80108e0:	d403      	bmi.n	80108ea <__lo0bits+0x4e>
 80108e2:	085b      	lsrs	r3, r3, #1
 80108e4:	f100 0001 	add.w	r0, r0, #1
 80108e8:	d005      	beq.n	80108f6 <__lo0bits+0x5a>
 80108ea:	600b      	str	r3, [r1, #0]
 80108ec:	4770      	bx	lr
 80108ee:	4610      	mov	r0, r2
 80108f0:	e7e9      	b.n	80108c6 <__lo0bits+0x2a>
 80108f2:	2000      	movs	r0, #0
 80108f4:	4770      	bx	lr
 80108f6:	2020      	movs	r0, #32
 80108f8:	4770      	bx	lr
	...

080108fc <__i2b>:
 80108fc:	b510      	push	{r4, lr}
 80108fe:	460c      	mov	r4, r1
 8010900:	2101      	movs	r1, #1
 8010902:	f7ff feb9 	bl	8010678 <_Balloc>
 8010906:	4602      	mov	r2, r0
 8010908:	b928      	cbnz	r0, 8010916 <__i2b+0x1a>
 801090a:	4b05      	ldr	r3, [pc, #20]	; (8010920 <__i2b+0x24>)
 801090c:	4805      	ldr	r0, [pc, #20]	; (8010924 <__i2b+0x28>)
 801090e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010912:	f001 fbef 	bl	80120f4 <__assert_func>
 8010916:	2301      	movs	r3, #1
 8010918:	6144      	str	r4, [r0, #20]
 801091a:	6103      	str	r3, [r0, #16]
 801091c:	bd10      	pop	{r4, pc}
 801091e:	bf00      	nop
 8010920:	08012c68 	.word	0x08012c68
 8010924:	08012d58 	.word	0x08012d58

08010928 <__multiply>:
 8010928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092c:	4691      	mov	r9, r2
 801092e:	690a      	ldr	r2, [r1, #16]
 8010930:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010934:	429a      	cmp	r2, r3
 8010936:	bfb8      	it	lt
 8010938:	460b      	movlt	r3, r1
 801093a:	460c      	mov	r4, r1
 801093c:	bfbc      	itt	lt
 801093e:	464c      	movlt	r4, r9
 8010940:	4699      	movlt	r9, r3
 8010942:	6927      	ldr	r7, [r4, #16]
 8010944:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010948:	68a3      	ldr	r3, [r4, #8]
 801094a:	6861      	ldr	r1, [r4, #4]
 801094c:	eb07 060a 	add.w	r6, r7, sl
 8010950:	42b3      	cmp	r3, r6
 8010952:	b085      	sub	sp, #20
 8010954:	bfb8      	it	lt
 8010956:	3101      	addlt	r1, #1
 8010958:	f7ff fe8e 	bl	8010678 <_Balloc>
 801095c:	b930      	cbnz	r0, 801096c <__multiply+0x44>
 801095e:	4602      	mov	r2, r0
 8010960:	4b44      	ldr	r3, [pc, #272]	; (8010a74 <__multiply+0x14c>)
 8010962:	4845      	ldr	r0, [pc, #276]	; (8010a78 <__multiply+0x150>)
 8010964:	f240 115d 	movw	r1, #349	; 0x15d
 8010968:	f001 fbc4 	bl	80120f4 <__assert_func>
 801096c:	f100 0514 	add.w	r5, r0, #20
 8010970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010974:	462b      	mov	r3, r5
 8010976:	2200      	movs	r2, #0
 8010978:	4543      	cmp	r3, r8
 801097a:	d321      	bcc.n	80109c0 <__multiply+0x98>
 801097c:	f104 0314 	add.w	r3, r4, #20
 8010980:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010984:	f109 0314 	add.w	r3, r9, #20
 8010988:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801098c:	9202      	str	r2, [sp, #8]
 801098e:	1b3a      	subs	r2, r7, r4
 8010990:	3a15      	subs	r2, #21
 8010992:	f022 0203 	bic.w	r2, r2, #3
 8010996:	3204      	adds	r2, #4
 8010998:	f104 0115 	add.w	r1, r4, #21
 801099c:	428f      	cmp	r7, r1
 801099e:	bf38      	it	cc
 80109a0:	2204      	movcc	r2, #4
 80109a2:	9201      	str	r2, [sp, #4]
 80109a4:	9a02      	ldr	r2, [sp, #8]
 80109a6:	9303      	str	r3, [sp, #12]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d80c      	bhi.n	80109c6 <__multiply+0x9e>
 80109ac:	2e00      	cmp	r6, #0
 80109ae:	dd03      	ble.n	80109b8 <__multiply+0x90>
 80109b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d05a      	beq.n	8010a6e <__multiply+0x146>
 80109b8:	6106      	str	r6, [r0, #16]
 80109ba:	b005      	add	sp, #20
 80109bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c0:	f843 2b04 	str.w	r2, [r3], #4
 80109c4:	e7d8      	b.n	8010978 <__multiply+0x50>
 80109c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80109ca:	f1ba 0f00 	cmp.w	sl, #0
 80109ce:	d024      	beq.n	8010a1a <__multiply+0xf2>
 80109d0:	f104 0e14 	add.w	lr, r4, #20
 80109d4:	46a9      	mov	r9, r5
 80109d6:	f04f 0c00 	mov.w	ip, #0
 80109da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80109de:	f8d9 1000 	ldr.w	r1, [r9]
 80109e2:	fa1f fb82 	uxth.w	fp, r2
 80109e6:	b289      	uxth	r1, r1
 80109e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80109ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80109f0:	f8d9 2000 	ldr.w	r2, [r9]
 80109f4:	4461      	add	r1, ip
 80109f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80109fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80109fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010a02:	b289      	uxth	r1, r1
 8010a04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010a08:	4577      	cmp	r7, lr
 8010a0a:	f849 1b04 	str.w	r1, [r9], #4
 8010a0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010a12:	d8e2      	bhi.n	80109da <__multiply+0xb2>
 8010a14:	9a01      	ldr	r2, [sp, #4]
 8010a16:	f845 c002 	str.w	ip, [r5, r2]
 8010a1a:	9a03      	ldr	r2, [sp, #12]
 8010a1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010a20:	3304      	adds	r3, #4
 8010a22:	f1b9 0f00 	cmp.w	r9, #0
 8010a26:	d020      	beq.n	8010a6a <__multiply+0x142>
 8010a28:	6829      	ldr	r1, [r5, #0]
 8010a2a:	f104 0c14 	add.w	ip, r4, #20
 8010a2e:	46ae      	mov	lr, r5
 8010a30:	f04f 0a00 	mov.w	sl, #0
 8010a34:	f8bc b000 	ldrh.w	fp, [ip]
 8010a38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010a3c:	fb09 220b 	mla	r2, r9, fp, r2
 8010a40:	4492      	add	sl, r2
 8010a42:	b289      	uxth	r1, r1
 8010a44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010a48:	f84e 1b04 	str.w	r1, [lr], #4
 8010a4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a50:	f8be 1000 	ldrh.w	r1, [lr]
 8010a54:	0c12      	lsrs	r2, r2, #16
 8010a56:	fb09 1102 	mla	r1, r9, r2, r1
 8010a5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010a5e:	4567      	cmp	r7, ip
 8010a60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010a64:	d8e6      	bhi.n	8010a34 <__multiply+0x10c>
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	50a9      	str	r1, [r5, r2]
 8010a6a:	3504      	adds	r5, #4
 8010a6c:	e79a      	b.n	80109a4 <__multiply+0x7c>
 8010a6e:	3e01      	subs	r6, #1
 8010a70:	e79c      	b.n	80109ac <__multiply+0x84>
 8010a72:	bf00      	nop
 8010a74:	08012c68 	.word	0x08012c68
 8010a78:	08012d58 	.word	0x08012d58

08010a7c <__pow5mult>:
 8010a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a80:	4615      	mov	r5, r2
 8010a82:	f012 0203 	ands.w	r2, r2, #3
 8010a86:	4606      	mov	r6, r0
 8010a88:	460f      	mov	r7, r1
 8010a8a:	d007      	beq.n	8010a9c <__pow5mult+0x20>
 8010a8c:	4c25      	ldr	r4, [pc, #148]	; (8010b24 <__pow5mult+0xa8>)
 8010a8e:	3a01      	subs	r2, #1
 8010a90:	2300      	movs	r3, #0
 8010a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010a96:	f7ff fe51 	bl	801073c <__multadd>
 8010a9a:	4607      	mov	r7, r0
 8010a9c:	10ad      	asrs	r5, r5, #2
 8010a9e:	d03d      	beq.n	8010b1c <__pow5mult+0xa0>
 8010aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010aa2:	b97c      	cbnz	r4, 8010ac4 <__pow5mult+0x48>
 8010aa4:	2010      	movs	r0, #16
 8010aa6:	f7fc f907 	bl	800ccb8 <malloc>
 8010aaa:	4602      	mov	r2, r0
 8010aac:	6270      	str	r0, [r6, #36]	; 0x24
 8010aae:	b928      	cbnz	r0, 8010abc <__pow5mult+0x40>
 8010ab0:	4b1d      	ldr	r3, [pc, #116]	; (8010b28 <__pow5mult+0xac>)
 8010ab2:	481e      	ldr	r0, [pc, #120]	; (8010b2c <__pow5mult+0xb0>)
 8010ab4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010ab8:	f001 fb1c 	bl	80120f4 <__assert_func>
 8010abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ac0:	6004      	str	r4, [r0, #0]
 8010ac2:	60c4      	str	r4, [r0, #12]
 8010ac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010acc:	b94c      	cbnz	r4, 8010ae2 <__pow5mult+0x66>
 8010ace:	f240 2171 	movw	r1, #625	; 0x271
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	f7ff ff12 	bl	80108fc <__i2b>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8010ade:	4604      	mov	r4, r0
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	f04f 0900 	mov.w	r9, #0
 8010ae6:	07eb      	lsls	r3, r5, #31
 8010ae8:	d50a      	bpl.n	8010b00 <__pow5mult+0x84>
 8010aea:	4639      	mov	r1, r7
 8010aec:	4622      	mov	r2, r4
 8010aee:	4630      	mov	r0, r6
 8010af0:	f7ff ff1a 	bl	8010928 <__multiply>
 8010af4:	4639      	mov	r1, r7
 8010af6:	4680      	mov	r8, r0
 8010af8:	4630      	mov	r0, r6
 8010afa:	f7ff fdfd 	bl	80106f8 <_Bfree>
 8010afe:	4647      	mov	r7, r8
 8010b00:	106d      	asrs	r5, r5, #1
 8010b02:	d00b      	beq.n	8010b1c <__pow5mult+0xa0>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	b938      	cbnz	r0, 8010b18 <__pow5mult+0x9c>
 8010b08:	4622      	mov	r2, r4
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	4630      	mov	r0, r6
 8010b0e:	f7ff ff0b 	bl	8010928 <__multiply>
 8010b12:	6020      	str	r0, [r4, #0]
 8010b14:	f8c0 9000 	str.w	r9, [r0]
 8010b18:	4604      	mov	r4, r0
 8010b1a:	e7e4      	b.n	8010ae6 <__pow5mult+0x6a>
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b22:	bf00      	nop
 8010b24:	08012ea8 	.word	0x08012ea8
 8010b28:	08012bf6 	.word	0x08012bf6
 8010b2c:	08012d58 	.word	0x08012d58

08010b30 <__lshift>:
 8010b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b34:	460c      	mov	r4, r1
 8010b36:	6849      	ldr	r1, [r1, #4]
 8010b38:	6923      	ldr	r3, [r4, #16]
 8010b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b3e:	68a3      	ldr	r3, [r4, #8]
 8010b40:	4607      	mov	r7, r0
 8010b42:	4691      	mov	r9, r2
 8010b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b48:	f108 0601 	add.w	r6, r8, #1
 8010b4c:	42b3      	cmp	r3, r6
 8010b4e:	db0b      	blt.n	8010b68 <__lshift+0x38>
 8010b50:	4638      	mov	r0, r7
 8010b52:	f7ff fd91 	bl	8010678 <_Balloc>
 8010b56:	4605      	mov	r5, r0
 8010b58:	b948      	cbnz	r0, 8010b6e <__lshift+0x3e>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	4b2a      	ldr	r3, [pc, #168]	; (8010c08 <__lshift+0xd8>)
 8010b5e:	482b      	ldr	r0, [pc, #172]	; (8010c0c <__lshift+0xdc>)
 8010b60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010b64:	f001 fac6 	bl	80120f4 <__assert_func>
 8010b68:	3101      	adds	r1, #1
 8010b6a:	005b      	lsls	r3, r3, #1
 8010b6c:	e7ee      	b.n	8010b4c <__lshift+0x1c>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f100 0114 	add.w	r1, r0, #20
 8010b74:	f100 0210 	add.w	r2, r0, #16
 8010b78:	4618      	mov	r0, r3
 8010b7a:	4553      	cmp	r3, sl
 8010b7c:	db37      	blt.n	8010bee <__lshift+0xbe>
 8010b7e:	6920      	ldr	r0, [r4, #16]
 8010b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010b84:	f104 0314 	add.w	r3, r4, #20
 8010b88:	f019 091f 	ands.w	r9, r9, #31
 8010b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010b90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010b94:	d02f      	beq.n	8010bf6 <__lshift+0xc6>
 8010b96:	f1c9 0e20 	rsb	lr, r9, #32
 8010b9a:	468a      	mov	sl, r1
 8010b9c:	f04f 0c00 	mov.w	ip, #0
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	fa02 f209 	lsl.w	r2, r2, r9
 8010ba6:	ea42 020c 	orr.w	r2, r2, ip
 8010baa:	f84a 2b04 	str.w	r2, [sl], #4
 8010bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bb2:	4298      	cmp	r0, r3
 8010bb4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010bb8:	d8f2      	bhi.n	8010ba0 <__lshift+0x70>
 8010bba:	1b03      	subs	r3, r0, r4
 8010bbc:	3b15      	subs	r3, #21
 8010bbe:	f023 0303 	bic.w	r3, r3, #3
 8010bc2:	3304      	adds	r3, #4
 8010bc4:	f104 0215 	add.w	r2, r4, #21
 8010bc8:	4290      	cmp	r0, r2
 8010bca:	bf38      	it	cc
 8010bcc:	2304      	movcc	r3, #4
 8010bce:	f841 c003 	str.w	ip, [r1, r3]
 8010bd2:	f1bc 0f00 	cmp.w	ip, #0
 8010bd6:	d001      	beq.n	8010bdc <__lshift+0xac>
 8010bd8:	f108 0602 	add.w	r6, r8, #2
 8010bdc:	3e01      	subs	r6, #1
 8010bde:	4638      	mov	r0, r7
 8010be0:	612e      	str	r6, [r5, #16]
 8010be2:	4621      	mov	r1, r4
 8010be4:	f7ff fd88 	bl	80106f8 <_Bfree>
 8010be8:	4628      	mov	r0, r5
 8010bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bee:	f842 0f04 	str.w	r0, [r2, #4]!
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	e7c1      	b.n	8010b7a <__lshift+0x4a>
 8010bf6:	3904      	subs	r1, #4
 8010bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c00:	4298      	cmp	r0, r3
 8010c02:	d8f9      	bhi.n	8010bf8 <__lshift+0xc8>
 8010c04:	e7ea      	b.n	8010bdc <__lshift+0xac>
 8010c06:	bf00      	nop
 8010c08:	08012c68 	.word	0x08012c68
 8010c0c:	08012d58 	.word	0x08012d58

08010c10 <__mcmp>:
 8010c10:	b530      	push	{r4, r5, lr}
 8010c12:	6902      	ldr	r2, [r0, #16]
 8010c14:	690c      	ldr	r4, [r1, #16]
 8010c16:	1b12      	subs	r2, r2, r4
 8010c18:	d10e      	bne.n	8010c38 <__mcmp+0x28>
 8010c1a:	f100 0314 	add.w	r3, r0, #20
 8010c1e:	3114      	adds	r1, #20
 8010c20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010c24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010c28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010c2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010c30:	42a5      	cmp	r5, r4
 8010c32:	d003      	beq.n	8010c3c <__mcmp+0x2c>
 8010c34:	d305      	bcc.n	8010c42 <__mcmp+0x32>
 8010c36:	2201      	movs	r2, #1
 8010c38:	4610      	mov	r0, r2
 8010c3a:	bd30      	pop	{r4, r5, pc}
 8010c3c:	4283      	cmp	r3, r0
 8010c3e:	d3f3      	bcc.n	8010c28 <__mcmp+0x18>
 8010c40:	e7fa      	b.n	8010c38 <__mcmp+0x28>
 8010c42:	f04f 32ff 	mov.w	r2, #4294967295
 8010c46:	e7f7      	b.n	8010c38 <__mcmp+0x28>

08010c48 <__mdiff>:
 8010c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	460c      	mov	r4, r1
 8010c4e:	4606      	mov	r6, r0
 8010c50:	4611      	mov	r1, r2
 8010c52:	4620      	mov	r0, r4
 8010c54:	4690      	mov	r8, r2
 8010c56:	f7ff ffdb 	bl	8010c10 <__mcmp>
 8010c5a:	1e05      	subs	r5, r0, #0
 8010c5c:	d110      	bne.n	8010c80 <__mdiff+0x38>
 8010c5e:	4629      	mov	r1, r5
 8010c60:	4630      	mov	r0, r6
 8010c62:	f7ff fd09 	bl	8010678 <_Balloc>
 8010c66:	b930      	cbnz	r0, 8010c76 <__mdiff+0x2e>
 8010c68:	4b3a      	ldr	r3, [pc, #232]	; (8010d54 <__mdiff+0x10c>)
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	f240 2132 	movw	r1, #562	; 0x232
 8010c70:	4839      	ldr	r0, [pc, #228]	; (8010d58 <__mdiff+0x110>)
 8010c72:	f001 fa3f 	bl	80120f4 <__assert_func>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c80:	bfa4      	itt	ge
 8010c82:	4643      	movge	r3, r8
 8010c84:	46a0      	movge	r8, r4
 8010c86:	4630      	mov	r0, r6
 8010c88:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010c8c:	bfa6      	itte	ge
 8010c8e:	461c      	movge	r4, r3
 8010c90:	2500      	movge	r5, #0
 8010c92:	2501      	movlt	r5, #1
 8010c94:	f7ff fcf0 	bl	8010678 <_Balloc>
 8010c98:	b920      	cbnz	r0, 8010ca4 <__mdiff+0x5c>
 8010c9a:	4b2e      	ldr	r3, [pc, #184]	; (8010d54 <__mdiff+0x10c>)
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ca2:	e7e5      	b.n	8010c70 <__mdiff+0x28>
 8010ca4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ca8:	6926      	ldr	r6, [r4, #16]
 8010caa:	60c5      	str	r5, [r0, #12]
 8010cac:	f104 0914 	add.w	r9, r4, #20
 8010cb0:	f108 0514 	add.w	r5, r8, #20
 8010cb4:	f100 0e14 	add.w	lr, r0, #20
 8010cb8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010cbc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010cc0:	f108 0210 	add.w	r2, r8, #16
 8010cc4:	46f2      	mov	sl, lr
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ccc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010cd0:	fa1f f883 	uxth.w	r8, r3
 8010cd4:	fa11 f18b 	uxtah	r1, r1, fp
 8010cd8:	0c1b      	lsrs	r3, r3, #16
 8010cda:	eba1 0808 	sub.w	r8, r1, r8
 8010cde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ce2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010ce6:	fa1f f888 	uxth.w	r8, r8
 8010cea:	1419      	asrs	r1, r3, #16
 8010cec:	454e      	cmp	r6, r9
 8010cee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010cf2:	f84a 3b04 	str.w	r3, [sl], #4
 8010cf6:	d8e7      	bhi.n	8010cc8 <__mdiff+0x80>
 8010cf8:	1b33      	subs	r3, r6, r4
 8010cfa:	3b15      	subs	r3, #21
 8010cfc:	f023 0303 	bic.w	r3, r3, #3
 8010d00:	3304      	adds	r3, #4
 8010d02:	3415      	adds	r4, #21
 8010d04:	42a6      	cmp	r6, r4
 8010d06:	bf38      	it	cc
 8010d08:	2304      	movcc	r3, #4
 8010d0a:	441d      	add	r5, r3
 8010d0c:	4473      	add	r3, lr
 8010d0e:	469e      	mov	lr, r3
 8010d10:	462e      	mov	r6, r5
 8010d12:	4566      	cmp	r6, ip
 8010d14:	d30e      	bcc.n	8010d34 <__mdiff+0xec>
 8010d16:	f10c 0203 	add.w	r2, ip, #3
 8010d1a:	1b52      	subs	r2, r2, r5
 8010d1c:	f022 0203 	bic.w	r2, r2, #3
 8010d20:	3d03      	subs	r5, #3
 8010d22:	45ac      	cmp	ip, r5
 8010d24:	bf38      	it	cc
 8010d26:	2200      	movcc	r2, #0
 8010d28:	441a      	add	r2, r3
 8010d2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010d2e:	b17b      	cbz	r3, 8010d50 <__mdiff+0x108>
 8010d30:	6107      	str	r7, [r0, #16]
 8010d32:	e7a3      	b.n	8010c7c <__mdiff+0x34>
 8010d34:	f856 8b04 	ldr.w	r8, [r6], #4
 8010d38:	fa11 f288 	uxtah	r2, r1, r8
 8010d3c:	1414      	asrs	r4, r2, #16
 8010d3e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010d42:	b292      	uxth	r2, r2
 8010d44:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010d48:	f84e 2b04 	str.w	r2, [lr], #4
 8010d4c:	1421      	asrs	r1, r4, #16
 8010d4e:	e7e0      	b.n	8010d12 <__mdiff+0xca>
 8010d50:	3f01      	subs	r7, #1
 8010d52:	e7ea      	b.n	8010d2a <__mdiff+0xe2>
 8010d54:	08012c68 	.word	0x08012c68
 8010d58:	08012d58 	.word	0x08012d58

08010d5c <__ulp>:
 8010d5c:	b082      	sub	sp, #8
 8010d5e:	ed8d 0b00 	vstr	d0, [sp]
 8010d62:	9b01      	ldr	r3, [sp, #4]
 8010d64:	4912      	ldr	r1, [pc, #72]	; (8010db0 <__ulp+0x54>)
 8010d66:	4019      	ands	r1, r3
 8010d68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010d6c:	2900      	cmp	r1, #0
 8010d6e:	dd05      	ble.n	8010d7c <__ulp+0x20>
 8010d70:	2200      	movs	r2, #0
 8010d72:	460b      	mov	r3, r1
 8010d74:	ec43 2b10 	vmov	d0, r2, r3
 8010d78:	b002      	add	sp, #8
 8010d7a:	4770      	bx	lr
 8010d7c:	4249      	negs	r1, r1
 8010d7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010d82:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010d86:	f04f 0200 	mov.w	r2, #0
 8010d8a:	f04f 0300 	mov.w	r3, #0
 8010d8e:	da04      	bge.n	8010d9a <__ulp+0x3e>
 8010d90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010d94:	fa41 f300 	asr.w	r3, r1, r0
 8010d98:	e7ec      	b.n	8010d74 <__ulp+0x18>
 8010d9a:	f1a0 0114 	sub.w	r1, r0, #20
 8010d9e:	291e      	cmp	r1, #30
 8010da0:	bfda      	itte	le
 8010da2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010da6:	fa20 f101 	lsrle.w	r1, r0, r1
 8010daa:	2101      	movgt	r1, #1
 8010dac:	460a      	mov	r2, r1
 8010dae:	e7e1      	b.n	8010d74 <__ulp+0x18>
 8010db0:	7ff00000 	.word	0x7ff00000

08010db4 <__b2d>:
 8010db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db6:	6905      	ldr	r5, [r0, #16]
 8010db8:	f100 0714 	add.w	r7, r0, #20
 8010dbc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010dc0:	1f2e      	subs	r6, r5, #4
 8010dc2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7ff fd48 	bl	801085c <__hi0bits>
 8010dcc:	f1c0 0320 	rsb	r3, r0, #32
 8010dd0:	280a      	cmp	r0, #10
 8010dd2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010e50 <__b2d+0x9c>
 8010dd6:	600b      	str	r3, [r1, #0]
 8010dd8:	dc14      	bgt.n	8010e04 <__b2d+0x50>
 8010dda:	f1c0 0e0b 	rsb	lr, r0, #11
 8010dde:	fa24 f10e 	lsr.w	r1, r4, lr
 8010de2:	42b7      	cmp	r7, r6
 8010de4:	ea41 030c 	orr.w	r3, r1, ip
 8010de8:	bf34      	ite	cc
 8010dea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010dee:	2100      	movcs	r1, #0
 8010df0:	3015      	adds	r0, #21
 8010df2:	fa04 f000 	lsl.w	r0, r4, r0
 8010df6:	fa21 f10e 	lsr.w	r1, r1, lr
 8010dfa:	ea40 0201 	orr.w	r2, r0, r1
 8010dfe:	ec43 2b10 	vmov	d0, r2, r3
 8010e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e04:	42b7      	cmp	r7, r6
 8010e06:	bf3a      	itte	cc
 8010e08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010e0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010e10:	2100      	movcs	r1, #0
 8010e12:	380b      	subs	r0, #11
 8010e14:	d017      	beq.n	8010e46 <__b2d+0x92>
 8010e16:	f1c0 0c20 	rsb	ip, r0, #32
 8010e1a:	fa04 f500 	lsl.w	r5, r4, r0
 8010e1e:	42be      	cmp	r6, r7
 8010e20:	fa21 f40c 	lsr.w	r4, r1, ip
 8010e24:	ea45 0504 	orr.w	r5, r5, r4
 8010e28:	bf8c      	ite	hi
 8010e2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010e2e:	2400      	movls	r4, #0
 8010e30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010e34:	fa01 f000 	lsl.w	r0, r1, r0
 8010e38:	fa24 f40c 	lsr.w	r4, r4, ip
 8010e3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010e40:	ea40 0204 	orr.w	r2, r0, r4
 8010e44:	e7db      	b.n	8010dfe <__b2d+0x4a>
 8010e46:	ea44 030c 	orr.w	r3, r4, ip
 8010e4a:	460a      	mov	r2, r1
 8010e4c:	e7d7      	b.n	8010dfe <__b2d+0x4a>
 8010e4e:	bf00      	nop
 8010e50:	3ff00000 	.word	0x3ff00000

08010e54 <__d2b>:
 8010e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e58:	4689      	mov	r9, r1
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	ec57 6b10 	vmov	r6, r7, d0
 8010e60:	4690      	mov	r8, r2
 8010e62:	f7ff fc09 	bl	8010678 <_Balloc>
 8010e66:	4604      	mov	r4, r0
 8010e68:	b930      	cbnz	r0, 8010e78 <__d2b+0x24>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	4b25      	ldr	r3, [pc, #148]	; (8010f04 <__d2b+0xb0>)
 8010e6e:	4826      	ldr	r0, [pc, #152]	; (8010f08 <__d2b+0xb4>)
 8010e70:	f240 310a 	movw	r1, #778	; 0x30a
 8010e74:	f001 f93e 	bl	80120f4 <__assert_func>
 8010e78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010e7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e80:	bb35      	cbnz	r5, 8010ed0 <__d2b+0x7c>
 8010e82:	2e00      	cmp	r6, #0
 8010e84:	9301      	str	r3, [sp, #4]
 8010e86:	d028      	beq.n	8010eda <__d2b+0x86>
 8010e88:	4668      	mov	r0, sp
 8010e8a:	9600      	str	r6, [sp, #0]
 8010e8c:	f7ff fd06 	bl	801089c <__lo0bits>
 8010e90:	9900      	ldr	r1, [sp, #0]
 8010e92:	b300      	cbz	r0, 8010ed6 <__d2b+0x82>
 8010e94:	9a01      	ldr	r2, [sp, #4]
 8010e96:	f1c0 0320 	rsb	r3, r0, #32
 8010e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e9e:	430b      	orrs	r3, r1
 8010ea0:	40c2      	lsrs	r2, r0
 8010ea2:	6163      	str	r3, [r4, #20]
 8010ea4:	9201      	str	r2, [sp, #4]
 8010ea6:	9b01      	ldr	r3, [sp, #4]
 8010ea8:	61a3      	str	r3, [r4, #24]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	bf14      	ite	ne
 8010eae:	2202      	movne	r2, #2
 8010eb0:	2201      	moveq	r2, #1
 8010eb2:	6122      	str	r2, [r4, #16]
 8010eb4:	b1d5      	cbz	r5, 8010eec <__d2b+0x98>
 8010eb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010eba:	4405      	add	r5, r0
 8010ebc:	f8c9 5000 	str.w	r5, [r9]
 8010ec0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ec4:	f8c8 0000 	str.w	r0, [r8]
 8010ec8:	4620      	mov	r0, r4
 8010eca:	b003      	add	sp, #12
 8010ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ed4:	e7d5      	b.n	8010e82 <__d2b+0x2e>
 8010ed6:	6161      	str	r1, [r4, #20]
 8010ed8:	e7e5      	b.n	8010ea6 <__d2b+0x52>
 8010eda:	a801      	add	r0, sp, #4
 8010edc:	f7ff fcde 	bl	801089c <__lo0bits>
 8010ee0:	9b01      	ldr	r3, [sp, #4]
 8010ee2:	6163      	str	r3, [r4, #20]
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	6122      	str	r2, [r4, #16]
 8010ee8:	3020      	adds	r0, #32
 8010eea:	e7e3      	b.n	8010eb4 <__d2b+0x60>
 8010eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ef4:	f8c9 0000 	str.w	r0, [r9]
 8010ef8:	6918      	ldr	r0, [r3, #16]
 8010efa:	f7ff fcaf 	bl	801085c <__hi0bits>
 8010efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010f02:	e7df      	b.n	8010ec4 <__d2b+0x70>
 8010f04:	08012c68 	.word	0x08012c68
 8010f08:	08012d58 	.word	0x08012d58

08010f0c <__ratio>:
 8010f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f10:	4688      	mov	r8, r1
 8010f12:	4669      	mov	r1, sp
 8010f14:	4681      	mov	r9, r0
 8010f16:	f7ff ff4d 	bl	8010db4 <__b2d>
 8010f1a:	a901      	add	r1, sp, #4
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	ec55 4b10 	vmov	r4, r5, d0
 8010f22:	f7ff ff47 	bl	8010db4 <__b2d>
 8010f26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010f2e:	eba3 0c02 	sub.w	ip, r3, r2
 8010f32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f36:	1a9b      	subs	r3, r3, r2
 8010f38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010f3c:	ec51 0b10 	vmov	r0, r1, d0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfd6      	itet	le
 8010f44:	460a      	movle	r2, r1
 8010f46:	462a      	movgt	r2, r5
 8010f48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010f4c:	468b      	mov	fp, r1
 8010f4e:	462f      	mov	r7, r5
 8010f50:	bfd4      	ite	le
 8010f52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010f56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	ee10 2a10 	vmov	r2, s0
 8010f60:	465b      	mov	r3, fp
 8010f62:	4639      	mov	r1, r7
 8010f64:	f7ef fc72 	bl	800084c <__aeabi_ddiv>
 8010f68:	ec41 0b10 	vmov	d0, r0, r1
 8010f6c:	b003      	add	sp, #12
 8010f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f72 <__copybits>:
 8010f72:	3901      	subs	r1, #1
 8010f74:	b570      	push	{r4, r5, r6, lr}
 8010f76:	1149      	asrs	r1, r1, #5
 8010f78:	6914      	ldr	r4, [r2, #16]
 8010f7a:	3101      	adds	r1, #1
 8010f7c:	f102 0314 	add.w	r3, r2, #20
 8010f80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010f84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010f88:	1f05      	subs	r5, r0, #4
 8010f8a:	42a3      	cmp	r3, r4
 8010f8c:	d30c      	bcc.n	8010fa8 <__copybits+0x36>
 8010f8e:	1aa3      	subs	r3, r4, r2
 8010f90:	3b11      	subs	r3, #17
 8010f92:	f023 0303 	bic.w	r3, r3, #3
 8010f96:	3211      	adds	r2, #17
 8010f98:	42a2      	cmp	r2, r4
 8010f9a:	bf88      	it	hi
 8010f9c:	2300      	movhi	r3, #0
 8010f9e:	4418      	add	r0, r3
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4288      	cmp	r0, r1
 8010fa4:	d305      	bcc.n	8010fb2 <__copybits+0x40>
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	f853 6b04 	ldr.w	r6, [r3], #4
 8010fac:	f845 6f04 	str.w	r6, [r5, #4]!
 8010fb0:	e7eb      	b.n	8010f8a <__copybits+0x18>
 8010fb2:	f840 3b04 	str.w	r3, [r0], #4
 8010fb6:	e7f4      	b.n	8010fa2 <__copybits+0x30>

08010fb8 <__any_on>:
 8010fb8:	f100 0214 	add.w	r2, r0, #20
 8010fbc:	6900      	ldr	r0, [r0, #16]
 8010fbe:	114b      	asrs	r3, r1, #5
 8010fc0:	4298      	cmp	r0, r3
 8010fc2:	b510      	push	{r4, lr}
 8010fc4:	db11      	blt.n	8010fea <__any_on+0x32>
 8010fc6:	dd0a      	ble.n	8010fde <__any_on+0x26>
 8010fc8:	f011 011f 	ands.w	r1, r1, #31
 8010fcc:	d007      	beq.n	8010fde <__any_on+0x26>
 8010fce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010fd2:	fa24 f001 	lsr.w	r0, r4, r1
 8010fd6:	fa00 f101 	lsl.w	r1, r0, r1
 8010fda:	428c      	cmp	r4, r1
 8010fdc:	d10b      	bne.n	8010ff6 <__any_on+0x3e>
 8010fde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d803      	bhi.n	8010fee <__any_on+0x36>
 8010fe6:	2000      	movs	r0, #0
 8010fe8:	bd10      	pop	{r4, pc}
 8010fea:	4603      	mov	r3, r0
 8010fec:	e7f7      	b.n	8010fde <__any_on+0x26>
 8010fee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010ff2:	2900      	cmp	r1, #0
 8010ff4:	d0f5      	beq.n	8010fe2 <__any_on+0x2a>
 8010ff6:	2001      	movs	r0, #1
 8010ff8:	e7f6      	b.n	8010fe8 <__any_on+0x30>

08010ffa <_calloc_r>:
 8010ffa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ffc:	fba1 2402 	umull	r2, r4, r1, r2
 8011000:	b94c      	cbnz	r4, 8011016 <_calloc_r+0x1c>
 8011002:	4611      	mov	r1, r2
 8011004:	9201      	str	r2, [sp, #4]
 8011006:	f7fb fed3 	bl	800cdb0 <_malloc_r>
 801100a:	9a01      	ldr	r2, [sp, #4]
 801100c:	4605      	mov	r5, r0
 801100e:	b930      	cbnz	r0, 801101e <_calloc_r+0x24>
 8011010:	4628      	mov	r0, r5
 8011012:	b003      	add	sp, #12
 8011014:	bd30      	pop	{r4, r5, pc}
 8011016:	220c      	movs	r2, #12
 8011018:	6002      	str	r2, [r0, #0]
 801101a:	2500      	movs	r5, #0
 801101c:	e7f8      	b.n	8011010 <_calloc_r+0x16>
 801101e:	4621      	mov	r1, r4
 8011020:	f7fb fe52 	bl	800ccc8 <memset>
 8011024:	e7f4      	b.n	8011010 <_calloc_r+0x16>

08011026 <__ssputs_r>:
 8011026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801102a:	688e      	ldr	r6, [r1, #8]
 801102c:	429e      	cmp	r6, r3
 801102e:	4682      	mov	sl, r0
 8011030:	460c      	mov	r4, r1
 8011032:	4690      	mov	r8, r2
 8011034:	461f      	mov	r7, r3
 8011036:	d838      	bhi.n	80110aa <__ssputs_r+0x84>
 8011038:	898a      	ldrh	r2, [r1, #12]
 801103a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801103e:	d032      	beq.n	80110a6 <__ssputs_r+0x80>
 8011040:	6825      	ldr	r5, [r4, #0]
 8011042:	6909      	ldr	r1, [r1, #16]
 8011044:	eba5 0901 	sub.w	r9, r5, r1
 8011048:	6965      	ldr	r5, [r4, #20]
 801104a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801104e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011052:	3301      	adds	r3, #1
 8011054:	444b      	add	r3, r9
 8011056:	106d      	asrs	r5, r5, #1
 8011058:	429d      	cmp	r5, r3
 801105a:	bf38      	it	cc
 801105c:	461d      	movcc	r5, r3
 801105e:	0553      	lsls	r3, r2, #21
 8011060:	d531      	bpl.n	80110c6 <__ssputs_r+0xa0>
 8011062:	4629      	mov	r1, r5
 8011064:	f7fb fea4 	bl	800cdb0 <_malloc_r>
 8011068:	4606      	mov	r6, r0
 801106a:	b950      	cbnz	r0, 8011082 <__ssputs_r+0x5c>
 801106c:	230c      	movs	r3, #12
 801106e:	f8ca 3000 	str.w	r3, [sl]
 8011072:	89a3      	ldrh	r3, [r4, #12]
 8011074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011078:	81a3      	strh	r3, [r4, #12]
 801107a:	f04f 30ff 	mov.w	r0, #4294967295
 801107e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011082:	6921      	ldr	r1, [r4, #16]
 8011084:	464a      	mov	r2, r9
 8011086:	f7ff fadd 	bl	8010644 <memcpy>
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	6126      	str	r6, [r4, #16]
 8011098:	6165      	str	r5, [r4, #20]
 801109a:	444e      	add	r6, r9
 801109c:	eba5 0509 	sub.w	r5, r5, r9
 80110a0:	6026      	str	r6, [r4, #0]
 80110a2:	60a5      	str	r5, [r4, #8]
 80110a4:	463e      	mov	r6, r7
 80110a6:	42be      	cmp	r6, r7
 80110a8:	d900      	bls.n	80110ac <__ssputs_r+0x86>
 80110aa:	463e      	mov	r6, r7
 80110ac:	6820      	ldr	r0, [r4, #0]
 80110ae:	4632      	mov	r2, r6
 80110b0:	4641      	mov	r1, r8
 80110b2:	f001 f893 	bl	80121dc <memmove>
 80110b6:	68a3      	ldr	r3, [r4, #8]
 80110b8:	1b9b      	subs	r3, r3, r6
 80110ba:	60a3      	str	r3, [r4, #8]
 80110bc:	6823      	ldr	r3, [r4, #0]
 80110be:	4433      	add	r3, r6
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	2000      	movs	r0, #0
 80110c4:	e7db      	b.n	801107e <__ssputs_r+0x58>
 80110c6:	462a      	mov	r2, r5
 80110c8:	f001 f8a2 	bl	8012210 <_realloc_r>
 80110cc:	4606      	mov	r6, r0
 80110ce:	2800      	cmp	r0, #0
 80110d0:	d1e1      	bne.n	8011096 <__ssputs_r+0x70>
 80110d2:	6921      	ldr	r1, [r4, #16]
 80110d4:	4650      	mov	r0, sl
 80110d6:	f7fb fdff 	bl	800ccd8 <_free_r>
 80110da:	e7c7      	b.n	801106c <__ssputs_r+0x46>

080110dc <_svfiprintf_r>:
 80110dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e0:	4698      	mov	r8, r3
 80110e2:	898b      	ldrh	r3, [r1, #12]
 80110e4:	061b      	lsls	r3, r3, #24
 80110e6:	b09d      	sub	sp, #116	; 0x74
 80110e8:	4607      	mov	r7, r0
 80110ea:	460d      	mov	r5, r1
 80110ec:	4614      	mov	r4, r2
 80110ee:	d50e      	bpl.n	801110e <_svfiprintf_r+0x32>
 80110f0:	690b      	ldr	r3, [r1, #16]
 80110f2:	b963      	cbnz	r3, 801110e <_svfiprintf_r+0x32>
 80110f4:	2140      	movs	r1, #64	; 0x40
 80110f6:	f7fb fe5b 	bl	800cdb0 <_malloc_r>
 80110fa:	6028      	str	r0, [r5, #0]
 80110fc:	6128      	str	r0, [r5, #16]
 80110fe:	b920      	cbnz	r0, 801110a <_svfiprintf_r+0x2e>
 8011100:	230c      	movs	r3, #12
 8011102:	603b      	str	r3, [r7, #0]
 8011104:	f04f 30ff 	mov.w	r0, #4294967295
 8011108:	e0d1      	b.n	80112ae <_svfiprintf_r+0x1d2>
 801110a:	2340      	movs	r3, #64	; 0x40
 801110c:	616b      	str	r3, [r5, #20]
 801110e:	2300      	movs	r3, #0
 8011110:	9309      	str	r3, [sp, #36]	; 0x24
 8011112:	2320      	movs	r3, #32
 8011114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011118:	f8cd 800c 	str.w	r8, [sp, #12]
 801111c:	2330      	movs	r3, #48	; 0x30
 801111e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80112c8 <_svfiprintf_r+0x1ec>
 8011122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011126:	f04f 0901 	mov.w	r9, #1
 801112a:	4623      	mov	r3, r4
 801112c:	469a      	mov	sl, r3
 801112e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011132:	b10a      	cbz	r2, 8011138 <_svfiprintf_r+0x5c>
 8011134:	2a25      	cmp	r2, #37	; 0x25
 8011136:	d1f9      	bne.n	801112c <_svfiprintf_r+0x50>
 8011138:	ebba 0b04 	subs.w	fp, sl, r4
 801113c:	d00b      	beq.n	8011156 <_svfiprintf_r+0x7a>
 801113e:	465b      	mov	r3, fp
 8011140:	4622      	mov	r2, r4
 8011142:	4629      	mov	r1, r5
 8011144:	4638      	mov	r0, r7
 8011146:	f7ff ff6e 	bl	8011026 <__ssputs_r>
 801114a:	3001      	adds	r0, #1
 801114c:	f000 80aa 	beq.w	80112a4 <_svfiprintf_r+0x1c8>
 8011150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011152:	445a      	add	r2, fp
 8011154:	9209      	str	r2, [sp, #36]	; 0x24
 8011156:	f89a 3000 	ldrb.w	r3, [sl]
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 80a2 	beq.w	80112a4 <_svfiprintf_r+0x1c8>
 8011160:	2300      	movs	r3, #0
 8011162:	f04f 32ff 	mov.w	r2, #4294967295
 8011166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801116a:	f10a 0a01 	add.w	sl, sl, #1
 801116e:	9304      	str	r3, [sp, #16]
 8011170:	9307      	str	r3, [sp, #28]
 8011172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011176:	931a      	str	r3, [sp, #104]	; 0x68
 8011178:	4654      	mov	r4, sl
 801117a:	2205      	movs	r2, #5
 801117c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011180:	4851      	ldr	r0, [pc, #324]	; (80112c8 <_svfiprintf_r+0x1ec>)
 8011182:	f7ef f82d 	bl	80001e0 <memchr>
 8011186:	9a04      	ldr	r2, [sp, #16]
 8011188:	b9d8      	cbnz	r0, 80111c2 <_svfiprintf_r+0xe6>
 801118a:	06d0      	lsls	r0, r2, #27
 801118c:	bf44      	itt	mi
 801118e:	2320      	movmi	r3, #32
 8011190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011194:	0711      	lsls	r1, r2, #28
 8011196:	bf44      	itt	mi
 8011198:	232b      	movmi	r3, #43	; 0x2b
 801119a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801119e:	f89a 3000 	ldrb.w	r3, [sl]
 80111a2:	2b2a      	cmp	r3, #42	; 0x2a
 80111a4:	d015      	beq.n	80111d2 <_svfiprintf_r+0xf6>
 80111a6:	9a07      	ldr	r2, [sp, #28]
 80111a8:	4654      	mov	r4, sl
 80111aa:	2000      	movs	r0, #0
 80111ac:	f04f 0c0a 	mov.w	ip, #10
 80111b0:	4621      	mov	r1, r4
 80111b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111b6:	3b30      	subs	r3, #48	; 0x30
 80111b8:	2b09      	cmp	r3, #9
 80111ba:	d94e      	bls.n	801125a <_svfiprintf_r+0x17e>
 80111bc:	b1b0      	cbz	r0, 80111ec <_svfiprintf_r+0x110>
 80111be:	9207      	str	r2, [sp, #28]
 80111c0:	e014      	b.n	80111ec <_svfiprintf_r+0x110>
 80111c2:	eba0 0308 	sub.w	r3, r0, r8
 80111c6:	fa09 f303 	lsl.w	r3, r9, r3
 80111ca:	4313      	orrs	r3, r2
 80111cc:	9304      	str	r3, [sp, #16]
 80111ce:	46a2      	mov	sl, r4
 80111d0:	e7d2      	b.n	8011178 <_svfiprintf_r+0x9c>
 80111d2:	9b03      	ldr	r3, [sp, #12]
 80111d4:	1d19      	adds	r1, r3, #4
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	9103      	str	r1, [sp, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	bfbb      	ittet	lt
 80111de:	425b      	neglt	r3, r3
 80111e0:	f042 0202 	orrlt.w	r2, r2, #2
 80111e4:	9307      	strge	r3, [sp, #28]
 80111e6:	9307      	strlt	r3, [sp, #28]
 80111e8:	bfb8      	it	lt
 80111ea:	9204      	strlt	r2, [sp, #16]
 80111ec:	7823      	ldrb	r3, [r4, #0]
 80111ee:	2b2e      	cmp	r3, #46	; 0x2e
 80111f0:	d10c      	bne.n	801120c <_svfiprintf_r+0x130>
 80111f2:	7863      	ldrb	r3, [r4, #1]
 80111f4:	2b2a      	cmp	r3, #42	; 0x2a
 80111f6:	d135      	bne.n	8011264 <_svfiprintf_r+0x188>
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	1d1a      	adds	r2, r3, #4
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	9203      	str	r2, [sp, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	bfb8      	it	lt
 8011204:	f04f 33ff 	movlt.w	r3, #4294967295
 8011208:	3402      	adds	r4, #2
 801120a:	9305      	str	r3, [sp, #20]
 801120c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80112d8 <_svfiprintf_r+0x1fc>
 8011210:	7821      	ldrb	r1, [r4, #0]
 8011212:	2203      	movs	r2, #3
 8011214:	4650      	mov	r0, sl
 8011216:	f7ee ffe3 	bl	80001e0 <memchr>
 801121a:	b140      	cbz	r0, 801122e <_svfiprintf_r+0x152>
 801121c:	2340      	movs	r3, #64	; 0x40
 801121e:	eba0 000a 	sub.w	r0, r0, sl
 8011222:	fa03 f000 	lsl.w	r0, r3, r0
 8011226:	9b04      	ldr	r3, [sp, #16]
 8011228:	4303      	orrs	r3, r0
 801122a:	3401      	adds	r4, #1
 801122c:	9304      	str	r3, [sp, #16]
 801122e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011232:	4826      	ldr	r0, [pc, #152]	; (80112cc <_svfiprintf_r+0x1f0>)
 8011234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011238:	2206      	movs	r2, #6
 801123a:	f7ee ffd1 	bl	80001e0 <memchr>
 801123e:	2800      	cmp	r0, #0
 8011240:	d038      	beq.n	80112b4 <_svfiprintf_r+0x1d8>
 8011242:	4b23      	ldr	r3, [pc, #140]	; (80112d0 <_svfiprintf_r+0x1f4>)
 8011244:	bb1b      	cbnz	r3, 801128e <_svfiprintf_r+0x1b2>
 8011246:	9b03      	ldr	r3, [sp, #12]
 8011248:	3307      	adds	r3, #7
 801124a:	f023 0307 	bic.w	r3, r3, #7
 801124e:	3308      	adds	r3, #8
 8011250:	9303      	str	r3, [sp, #12]
 8011252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011254:	4433      	add	r3, r6
 8011256:	9309      	str	r3, [sp, #36]	; 0x24
 8011258:	e767      	b.n	801112a <_svfiprintf_r+0x4e>
 801125a:	fb0c 3202 	mla	r2, ip, r2, r3
 801125e:	460c      	mov	r4, r1
 8011260:	2001      	movs	r0, #1
 8011262:	e7a5      	b.n	80111b0 <_svfiprintf_r+0xd4>
 8011264:	2300      	movs	r3, #0
 8011266:	3401      	adds	r4, #1
 8011268:	9305      	str	r3, [sp, #20]
 801126a:	4619      	mov	r1, r3
 801126c:	f04f 0c0a 	mov.w	ip, #10
 8011270:	4620      	mov	r0, r4
 8011272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011276:	3a30      	subs	r2, #48	; 0x30
 8011278:	2a09      	cmp	r2, #9
 801127a:	d903      	bls.n	8011284 <_svfiprintf_r+0x1a8>
 801127c:	2b00      	cmp	r3, #0
 801127e:	d0c5      	beq.n	801120c <_svfiprintf_r+0x130>
 8011280:	9105      	str	r1, [sp, #20]
 8011282:	e7c3      	b.n	801120c <_svfiprintf_r+0x130>
 8011284:	fb0c 2101 	mla	r1, ip, r1, r2
 8011288:	4604      	mov	r4, r0
 801128a:	2301      	movs	r3, #1
 801128c:	e7f0      	b.n	8011270 <_svfiprintf_r+0x194>
 801128e:	ab03      	add	r3, sp, #12
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	462a      	mov	r2, r5
 8011294:	4b0f      	ldr	r3, [pc, #60]	; (80112d4 <_svfiprintf_r+0x1f8>)
 8011296:	a904      	add	r1, sp, #16
 8011298:	4638      	mov	r0, r7
 801129a:	f7fb fe9d 	bl	800cfd8 <_printf_float>
 801129e:	1c42      	adds	r2, r0, #1
 80112a0:	4606      	mov	r6, r0
 80112a2:	d1d6      	bne.n	8011252 <_svfiprintf_r+0x176>
 80112a4:	89ab      	ldrh	r3, [r5, #12]
 80112a6:	065b      	lsls	r3, r3, #25
 80112a8:	f53f af2c 	bmi.w	8011104 <_svfiprintf_r+0x28>
 80112ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112ae:	b01d      	add	sp, #116	; 0x74
 80112b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b4:	ab03      	add	r3, sp, #12
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	462a      	mov	r2, r5
 80112ba:	4b06      	ldr	r3, [pc, #24]	; (80112d4 <_svfiprintf_r+0x1f8>)
 80112bc:	a904      	add	r1, sp, #16
 80112be:	4638      	mov	r0, r7
 80112c0:	f7fc f92e 	bl	800d520 <_printf_i>
 80112c4:	e7eb      	b.n	801129e <_svfiprintf_r+0x1c2>
 80112c6:	bf00      	nop
 80112c8:	08012eb4 	.word	0x08012eb4
 80112cc:	08012ebe 	.word	0x08012ebe
 80112d0:	0800cfd9 	.word	0x0800cfd9
 80112d4:	08011027 	.word	0x08011027
 80112d8:	08012eba 	.word	0x08012eba

080112dc <__sfputc_r>:
 80112dc:	6893      	ldr	r3, [r2, #8]
 80112de:	3b01      	subs	r3, #1
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	b410      	push	{r4}
 80112e4:	6093      	str	r3, [r2, #8]
 80112e6:	da08      	bge.n	80112fa <__sfputc_r+0x1e>
 80112e8:	6994      	ldr	r4, [r2, #24]
 80112ea:	42a3      	cmp	r3, r4
 80112ec:	db01      	blt.n	80112f2 <__sfputc_r+0x16>
 80112ee:	290a      	cmp	r1, #10
 80112f0:	d103      	bne.n	80112fa <__sfputc_r+0x1e>
 80112f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112f6:	f7fd bc97 	b.w	800ec28 <__swbuf_r>
 80112fa:	6813      	ldr	r3, [r2, #0]
 80112fc:	1c58      	adds	r0, r3, #1
 80112fe:	6010      	str	r0, [r2, #0]
 8011300:	7019      	strb	r1, [r3, #0]
 8011302:	4608      	mov	r0, r1
 8011304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011308:	4770      	bx	lr

0801130a <__sfputs_r>:
 801130a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801130c:	4606      	mov	r6, r0
 801130e:	460f      	mov	r7, r1
 8011310:	4614      	mov	r4, r2
 8011312:	18d5      	adds	r5, r2, r3
 8011314:	42ac      	cmp	r4, r5
 8011316:	d101      	bne.n	801131c <__sfputs_r+0x12>
 8011318:	2000      	movs	r0, #0
 801131a:	e007      	b.n	801132c <__sfputs_r+0x22>
 801131c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011320:	463a      	mov	r2, r7
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ffda 	bl	80112dc <__sfputc_r>
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	d1f3      	bne.n	8011314 <__sfputs_r+0xa>
 801132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011330 <_vfiprintf_r>:
 8011330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011334:	460d      	mov	r5, r1
 8011336:	b09d      	sub	sp, #116	; 0x74
 8011338:	4614      	mov	r4, r2
 801133a:	4698      	mov	r8, r3
 801133c:	4606      	mov	r6, r0
 801133e:	b118      	cbz	r0, 8011348 <_vfiprintf_r+0x18>
 8011340:	6983      	ldr	r3, [r0, #24]
 8011342:	b90b      	cbnz	r3, 8011348 <_vfiprintf_r+0x18>
 8011344:	f7fe fcd6 	bl	800fcf4 <__sinit>
 8011348:	4b89      	ldr	r3, [pc, #548]	; (8011570 <_vfiprintf_r+0x240>)
 801134a:	429d      	cmp	r5, r3
 801134c:	d11b      	bne.n	8011386 <_vfiprintf_r+0x56>
 801134e:	6875      	ldr	r5, [r6, #4]
 8011350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011352:	07d9      	lsls	r1, r3, #31
 8011354:	d405      	bmi.n	8011362 <_vfiprintf_r+0x32>
 8011356:	89ab      	ldrh	r3, [r5, #12]
 8011358:	059a      	lsls	r2, r3, #22
 801135a:	d402      	bmi.n	8011362 <_vfiprintf_r+0x32>
 801135c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801135e:	f7ff f8f8 	bl	8010552 <__retarget_lock_acquire_recursive>
 8011362:	89ab      	ldrh	r3, [r5, #12]
 8011364:	071b      	lsls	r3, r3, #28
 8011366:	d501      	bpl.n	801136c <_vfiprintf_r+0x3c>
 8011368:	692b      	ldr	r3, [r5, #16]
 801136a:	b9eb      	cbnz	r3, 80113a8 <_vfiprintf_r+0x78>
 801136c:	4629      	mov	r1, r5
 801136e:	4630      	mov	r0, r6
 8011370:	f7fd fcac 	bl	800eccc <__swsetup_r>
 8011374:	b1c0      	cbz	r0, 80113a8 <_vfiprintf_r+0x78>
 8011376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011378:	07dc      	lsls	r4, r3, #31
 801137a:	d50e      	bpl.n	801139a <_vfiprintf_r+0x6a>
 801137c:	f04f 30ff 	mov.w	r0, #4294967295
 8011380:	b01d      	add	sp, #116	; 0x74
 8011382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011386:	4b7b      	ldr	r3, [pc, #492]	; (8011574 <_vfiprintf_r+0x244>)
 8011388:	429d      	cmp	r5, r3
 801138a:	d101      	bne.n	8011390 <_vfiprintf_r+0x60>
 801138c:	68b5      	ldr	r5, [r6, #8]
 801138e:	e7df      	b.n	8011350 <_vfiprintf_r+0x20>
 8011390:	4b79      	ldr	r3, [pc, #484]	; (8011578 <_vfiprintf_r+0x248>)
 8011392:	429d      	cmp	r5, r3
 8011394:	bf08      	it	eq
 8011396:	68f5      	ldreq	r5, [r6, #12]
 8011398:	e7da      	b.n	8011350 <_vfiprintf_r+0x20>
 801139a:	89ab      	ldrh	r3, [r5, #12]
 801139c:	0598      	lsls	r0, r3, #22
 801139e:	d4ed      	bmi.n	801137c <_vfiprintf_r+0x4c>
 80113a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113a2:	f7ff f8d7 	bl	8010554 <__retarget_lock_release_recursive>
 80113a6:	e7e9      	b.n	801137c <_vfiprintf_r+0x4c>
 80113a8:	2300      	movs	r3, #0
 80113aa:	9309      	str	r3, [sp, #36]	; 0x24
 80113ac:	2320      	movs	r3, #32
 80113ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80113b6:	2330      	movs	r3, #48	; 0x30
 80113b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801157c <_vfiprintf_r+0x24c>
 80113bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80113c0:	f04f 0901 	mov.w	r9, #1
 80113c4:	4623      	mov	r3, r4
 80113c6:	469a      	mov	sl, r3
 80113c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113cc:	b10a      	cbz	r2, 80113d2 <_vfiprintf_r+0xa2>
 80113ce:	2a25      	cmp	r2, #37	; 0x25
 80113d0:	d1f9      	bne.n	80113c6 <_vfiprintf_r+0x96>
 80113d2:	ebba 0b04 	subs.w	fp, sl, r4
 80113d6:	d00b      	beq.n	80113f0 <_vfiprintf_r+0xc0>
 80113d8:	465b      	mov	r3, fp
 80113da:	4622      	mov	r2, r4
 80113dc:	4629      	mov	r1, r5
 80113de:	4630      	mov	r0, r6
 80113e0:	f7ff ff93 	bl	801130a <__sfputs_r>
 80113e4:	3001      	adds	r0, #1
 80113e6:	f000 80aa 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113ec:	445a      	add	r2, fp
 80113ee:	9209      	str	r2, [sp, #36]	; 0x24
 80113f0:	f89a 3000 	ldrb.w	r3, [sl]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	f000 80a2 	beq.w	801153e <_vfiprintf_r+0x20e>
 80113fa:	2300      	movs	r3, #0
 80113fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011404:	f10a 0a01 	add.w	sl, sl, #1
 8011408:	9304      	str	r3, [sp, #16]
 801140a:	9307      	str	r3, [sp, #28]
 801140c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011410:	931a      	str	r3, [sp, #104]	; 0x68
 8011412:	4654      	mov	r4, sl
 8011414:	2205      	movs	r2, #5
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	4858      	ldr	r0, [pc, #352]	; (801157c <_vfiprintf_r+0x24c>)
 801141c:	f7ee fee0 	bl	80001e0 <memchr>
 8011420:	9a04      	ldr	r2, [sp, #16]
 8011422:	b9d8      	cbnz	r0, 801145c <_vfiprintf_r+0x12c>
 8011424:	06d1      	lsls	r1, r2, #27
 8011426:	bf44      	itt	mi
 8011428:	2320      	movmi	r3, #32
 801142a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801142e:	0713      	lsls	r3, r2, #28
 8011430:	bf44      	itt	mi
 8011432:	232b      	movmi	r3, #43	; 0x2b
 8011434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011438:	f89a 3000 	ldrb.w	r3, [sl]
 801143c:	2b2a      	cmp	r3, #42	; 0x2a
 801143e:	d015      	beq.n	801146c <_vfiprintf_r+0x13c>
 8011440:	9a07      	ldr	r2, [sp, #28]
 8011442:	4654      	mov	r4, sl
 8011444:	2000      	movs	r0, #0
 8011446:	f04f 0c0a 	mov.w	ip, #10
 801144a:	4621      	mov	r1, r4
 801144c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011450:	3b30      	subs	r3, #48	; 0x30
 8011452:	2b09      	cmp	r3, #9
 8011454:	d94e      	bls.n	80114f4 <_vfiprintf_r+0x1c4>
 8011456:	b1b0      	cbz	r0, 8011486 <_vfiprintf_r+0x156>
 8011458:	9207      	str	r2, [sp, #28]
 801145a:	e014      	b.n	8011486 <_vfiprintf_r+0x156>
 801145c:	eba0 0308 	sub.w	r3, r0, r8
 8011460:	fa09 f303 	lsl.w	r3, r9, r3
 8011464:	4313      	orrs	r3, r2
 8011466:	9304      	str	r3, [sp, #16]
 8011468:	46a2      	mov	sl, r4
 801146a:	e7d2      	b.n	8011412 <_vfiprintf_r+0xe2>
 801146c:	9b03      	ldr	r3, [sp, #12]
 801146e:	1d19      	adds	r1, r3, #4
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	9103      	str	r1, [sp, #12]
 8011474:	2b00      	cmp	r3, #0
 8011476:	bfbb      	ittet	lt
 8011478:	425b      	neglt	r3, r3
 801147a:	f042 0202 	orrlt.w	r2, r2, #2
 801147e:	9307      	strge	r3, [sp, #28]
 8011480:	9307      	strlt	r3, [sp, #28]
 8011482:	bfb8      	it	lt
 8011484:	9204      	strlt	r2, [sp, #16]
 8011486:	7823      	ldrb	r3, [r4, #0]
 8011488:	2b2e      	cmp	r3, #46	; 0x2e
 801148a:	d10c      	bne.n	80114a6 <_vfiprintf_r+0x176>
 801148c:	7863      	ldrb	r3, [r4, #1]
 801148e:	2b2a      	cmp	r3, #42	; 0x2a
 8011490:	d135      	bne.n	80114fe <_vfiprintf_r+0x1ce>
 8011492:	9b03      	ldr	r3, [sp, #12]
 8011494:	1d1a      	adds	r2, r3, #4
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	9203      	str	r2, [sp, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	bfb8      	it	lt
 801149e:	f04f 33ff 	movlt.w	r3, #4294967295
 80114a2:	3402      	adds	r4, #2
 80114a4:	9305      	str	r3, [sp, #20]
 80114a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801158c <_vfiprintf_r+0x25c>
 80114aa:	7821      	ldrb	r1, [r4, #0]
 80114ac:	2203      	movs	r2, #3
 80114ae:	4650      	mov	r0, sl
 80114b0:	f7ee fe96 	bl	80001e0 <memchr>
 80114b4:	b140      	cbz	r0, 80114c8 <_vfiprintf_r+0x198>
 80114b6:	2340      	movs	r3, #64	; 0x40
 80114b8:	eba0 000a 	sub.w	r0, r0, sl
 80114bc:	fa03 f000 	lsl.w	r0, r3, r0
 80114c0:	9b04      	ldr	r3, [sp, #16]
 80114c2:	4303      	orrs	r3, r0
 80114c4:	3401      	adds	r4, #1
 80114c6:	9304      	str	r3, [sp, #16]
 80114c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114cc:	482c      	ldr	r0, [pc, #176]	; (8011580 <_vfiprintf_r+0x250>)
 80114ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80114d2:	2206      	movs	r2, #6
 80114d4:	f7ee fe84 	bl	80001e0 <memchr>
 80114d8:	2800      	cmp	r0, #0
 80114da:	d03f      	beq.n	801155c <_vfiprintf_r+0x22c>
 80114dc:	4b29      	ldr	r3, [pc, #164]	; (8011584 <_vfiprintf_r+0x254>)
 80114de:	bb1b      	cbnz	r3, 8011528 <_vfiprintf_r+0x1f8>
 80114e0:	9b03      	ldr	r3, [sp, #12]
 80114e2:	3307      	adds	r3, #7
 80114e4:	f023 0307 	bic.w	r3, r3, #7
 80114e8:	3308      	adds	r3, #8
 80114ea:	9303      	str	r3, [sp, #12]
 80114ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ee:	443b      	add	r3, r7
 80114f0:	9309      	str	r3, [sp, #36]	; 0x24
 80114f2:	e767      	b.n	80113c4 <_vfiprintf_r+0x94>
 80114f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80114f8:	460c      	mov	r4, r1
 80114fa:	2001      	movs	r0, #1
 80114fc:	e7a5      	b.n	801144a <_vfiprintf_r+0x11a>
 80114fe:	2300      	movs	r3, #0
 8011500:	3401      	adds	r4, #1
 8011502:	9305      	str	r3, [sp, #20]
 8011504:	4619      	mov	r1, r3
 8011506:	f04f 0c0a 	mov.w	ip, #10
 801150a:	4620      	mov	r0, r4
 801150c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011510:	3a30      	subs	r2, #48	; 0x30
 8011512:	2a09      	cmp	r2, #9
 8011514:	d903      	bls.n	801151e <_vfiprintf_r+0x1ee>
 8011516:	2b00      	cmp	r3, #0
 8011518:	d0c5      	beq.n	80114a6 <_vfiprintf_r+0x176>
 801151a:	9105      	str	r1, [sp, #20]
 801151c:	e7c3      	b.n	80114a6 <_vfiprintf_r+0x176>
 801151e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011522:	4604      	mov	r4, r0
 8011524:	2301      	movs	r3, #1
 8011526:	e7f0      	b.n	801150a <_vfiprintf_r+0x1da>
 8011528:	ab03      	add	r3, sp, #12
 801152a:	9300      	str	r3, [sp, #0]
 801152c:	462a      	mov	r2, r5
 801152e:	4b16      	ldr	r3, [pc, #88]	; (8011588 <_vfiprintf_r+0x258>)
 8011530:	a904      	add	r1, sp, #16
 8011532:	4630      	mov	r0, r6
 8011534:	f7fb fd50 	bl	800cfd8 <_printf_float>
 8011538:	4607      	mov	r7, r0
 801153a:	1c78      	adds	r0, r7, #1
 801153c:	d1d6      	bne.n	80114ec <_vfiprintf_r+0x1bc>
 801153e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011540:	07d9      	lsls	r1, r3, #31
 8011542:	d405      	bmi.n	8011550 <_vfiprintf_r+0x220>
 8011544:	89ab      	ldrh	r3, [r5, #12]
 8011546:	059a      	lsls	r2, r3, #22
 8011548:	d402      	bmi.n	8011550 <_vfiprintf_r+0x220>
 801154a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801154c:	f7ff f802 	bl	8010554 <__retarget_lock_release_recursive>
 8011550:	89ab      	ldrh	r3, [r5, #12]
 8011552:	065b      	lsls	r3, r3, #25
 8011554:	f53f af12 	bmi.w	801137c <_vfiprintf_r+0x4c>
 8011558:	9809      	ldr	r0, [sp, #36]	; 0x24
 801155a:	e711      	b.n	8011380 <_vfiprintf_r+0x50>
 801155c:	ab03      	add	r3, sp, #12
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	462a      	mov	r2, r5
 8011562:	4b09      	ldr	r3, [pc, #36]	; (8011588 <_vfiprintf_r+0x258>)
 8011564:	a904      	add	r1, sp, #16
 8011566:	4630      	mov	r0, r6
 8011568:	f7fb ffda 	bl	800d520 <_printf_i>
 801156c:	e7e4      	b.n	8011538 <_vfiprintf_r+0x208>
 801156e:	bf00      	nop
 8011570:	08012c9c 	.word	0x08012c9c
 8011574:	08012cbc 	.word	0x08012cbc
 8011578:	08012c7c 	.word	0x08012c7c
 801157c:	08012eb4 	.word	0x08012eb4
 8011580:	08012ebe 	.word	0x08012ebe
 8011584:	0800cfd9 	.word	0x0800cfd9
 8011588:	0801130b 	.word	0x0801130b
 801158c:	08012eba 	.word	0x08012eba

08011590 <__svfiscanf_r>:
 8011590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011594:	461d      	mov	r5, r3
 8011596:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011598:	07df      	lsls	r7, r3, #31
 801159a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801159e:	4606      	mov	r6, r0
 80115a0:	460c      	mov	r4, r1
 80115a2:	4692      	mov	sl, r2
 80115a4:	d405      	bmi.n	80115b2 <__svfiscanf_r+0x22>
 80115a6:	898b      	ldrh	r3, [r1, #12]
 80115a8:	0598      	lsls	r0, r3, #22
 80115aa:	d402      	bmi.n	80115b2 <__svfiscanf_r+0x22>
 80115ac:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80115ae:	f7fe ffd0 	bl	8010552 <__retarget_lock_acquire_recursive>
 80115b2:	2300      	movs	r3, #0
 80115b4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80115b8:	4ba6      	ldr	r3, [pc, #664]	; (8011854 <__svfiscanf_r+0x2c4>)
 80115ba:	93a0      	str	r3, [sp, #640]	; 0x280
 80115bc:	f10d 0804 	add.w	r8, sp, #4
 80115c0:	4ba5      	ldr	r3, [pc, #660]	; (8011858 <__svfiscanf_r+0x2c8>)
 80115c2:	4fa6      	ldr	r7, [pc, #664]	; (801185c <__svfiscanf_r+0x2cc>)
 80115c4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8011860 <__svfiscanf_r+0x2d0>
 80115c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80115cc:	93a1      	str	r3, [sp, #644]	; 0x284
 80115ce:	9500      	str	r5, [sp, #0]
 80115d0:	f89a 3000 	ldrb.w	r3, [sl]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	f000 8173 	beq.w	80118c0 <__svfiscanf_r+0x330>
 80115da:	5dd9      	ldrb	r1, [r3, r7]
 80115dc:	f011 0108 	ands.w	r1, r1, #8
 80115e0:	f10a 0501 	add.w	r5, sl, #1
 80115e4:	d019      	beq.n	801161a <__svfiscanf_r+0x8a>
 80115e6:	6863      	ldr	r3, [r4, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dd0f      	ble.n	801160c <__svfiscanf_r+0x7c>
 80115ec:	6823      	ldr	r3, [r4, #0]
 80115ee:	781a      	ldrb	r2, [r3, #0]
 80115f0:	5cba      	ldrb	r2, [r7, r2]
 80115f2:	0711      	lsls	r1, r2, #28
 80115f4:	d401      	bmi.n	80115fa <__svfiscanf_r+0x6a>
 80115f6:	46aa      	mov	sl, r5
 80115f8:	e7ea      	b.n	80115d0 <__svfiscanf_r+0x40>
 80115fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80115fc:	3201      	adds	r2, #1
 80115fe:	9245      	str	r2, [sp, #276]	; 0x114
 8011600:	6862      	ldr	r2, [r4, #4]
 8011602:	3301      	adds	r3, #1
 8011604:	3a01      	subs	r2, #1
 8011606:	6062      	str	r2, [r4, #4]
 8011608:	6023      	str	r3, [r4, #0]
 801160a:	e7ec      	b.n	80115e6 <__svfiscanf_r+0x56>
 801160c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801160e:	4621      	mov	r1, r4
 8011610:	4630      	mov	r0, r6
 8011612:	4798      	blx	r3
 8011614:	2800      	cmp	r0, #0
 8011616:	d0e9      	beq.n	80115ec <__svfiscanf_r+0x5c>
 8011618:	e7ed      	b.n	80115f6 <__svfiscanf_r+0x66>
 801161a:	2b25      	cmp	r3, #37	; 0x25
 801161c:	d012      	beq.n	8011644 <__svfiscanf_r+0xb4>
 801161e:	469a      	mov	sl, r3
 8011620:	6863      	ldr	r3, [r4, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	f340 8095 	ble.w	8011752 <__svfiscanf_r+0x1c2>
 8011628:	6822      	ldr	r2, [r4, #0]
 801162a:	7813      	ldrb	r3, [r2, #0]
 801162c:	4553      	cmp	r3, sl
 801162e:	f040 8147 	bne.w	80118c0 <__svfiscanf_r+0x330>
 8011632:	6863      	ldr	r3, [r4, #4]
 8011634:	3b01      	subs	r3, #1
 8011636:	6063      	str	r3, [r4, #4]
 8011638:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801163a:	3201      	adds	r2, #1
 801163c:	3301      	adds	r3, #1
 801163e:	6022      	str	r2, [r4, #0]
 8011640:	9345      	str	r3, [sp, #276]	; 0x114
 8011642:	e7d8      	b.n	80115f6 <__svfiscanf_r+0x66>
 8011644:	9141      	str	r1, [sp, #260]	; 0x104
 8011646:	9143      	str	r1, [sp, #268]	; 0x10c
 8011648:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801164c:	2b2a      	cmp	r3, #42	; 0x2a
 801164e:	bf02      	ittt	eq
 8011650:	2310      	moveq	r3, #16
 8011652:	9341      	streq	r3, [sp, #260]	; 0x104
 8011654:	f10a 0502 	addeq.w	r5, sl, #2
 8011658:	220a      	movs	r2, #10
 801165a:	46aa      	mov	sl, r5
 801165c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8011660:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8011664:	2b09      	cmp	r3, #9
 8011666:	d91e      	bls.n	80116a6 <__svfiscanf_r+0x116>
 8011668:	487d      	ldr	r0, [pc, #500]	; (8011860 <__svfiscanf_r+0x2d0>)
 801166a:	2203      	movs	r2, #3
 801166c:	f7ee fdb8 	bl	80001e0 <memchr>
 8011670:	b140      	cbz	r0, 8011684 <__svfiscanf_r+0xf4>
 8011672:	2301      	movs	r3, #1
 8011674:	eba0 0009 	sub.w	r0, r0, r9
 8011678:	fa03 f000 	lsl.w	r0, r3, r0
 801167c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801167e:	4318      	orrs	r0, r3
 8011680:	9041      	str	r0, [sp, #260]	; 0x104
 8011682:	4655      	mov	r5, sl
 8011684:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011688:	2b78      	cmp	r3, #120	; 0x78
 801168a:	d807      	bhi.n	801169c <__svfiscanf_r+0x10c>
 801168c:	2b57      	cmp	r3, #87	; 0x57
 801168e:	d811      	bhi.n	80116b4 <__svfiscanf_r+0x124>
 8011690:	2b25      	cmp	r3, #37	; 0x25
 8011692:	d0c4      	beq.n	801161e <__svfiscanf_r+0x8e>
 8011694:	d858      	bhi.n	8011748 <__svfiscanf_r+0x1b8>
 8011696:	2b00      	cmp	r3, #0
 8011698:	f000 80c8 	beq.w	801182c <__svfiscanf_r+0x29c>
 801169c:	2303      	movs	r3, #3
 801169e:	9347      	str	r3, [sp, #284]	; 0x11c
 80116a0:	230a      	movs	r3, #10
 80116a2:	9342      	str	r3, [sp, #264]	; 0x108
 80116a4:	e07c      	b.n	80117a0 <__svfiscanf_r+0x210>
 80116a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80116a8:	fb02 1103 	mla	r1, r2, r3, r1
 80116ac:	3930      	subs	r1, #48	; 0x30
 80116ae:	9143      	str	r1, [sp, #268]	; 0x10c
 80116b0:	4655      	mov	r5, sl
 80116b2:	e7d2      	b.n	801165a <__svfiscanf_r+0xca>
 80116b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80116b8:	2a20      	cmp	r2, #32
 80116ba:	d8ef      	bhi.n	801169c <__svfiscanf_r+0x10c>
 80116bc:	a101      	add	r1, pc, #4	; (adr r1, 80116c4 <__svfiscanf_r+0x134>)
 80116be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80116c2:	bf00      	nop
 80116c4:	0801178b 	.word	0x0801178b
 80116c8:	0801169d 	.word	0x0801169d
 80116cc:	0801169d 	.word	0x0801169d
 80116d0:	080117e9 	.word	0x080117e9
 80116d4:	0801169d 	.word	0x0801169d
 80116d8:	0801169d 	.word	0x0801169d
 80116dc:	0801169d 	.word	0x0801169d
 80116e0:	0801169d 	.word	0x0801169d
 80116e4:	0801169d 	.word	0x0801169d
 80116e8:	0801169d 	.word	0x0801169d
 80116ec:	0801169d 	.word	0x0801169d
 80116f0:	080117ff 	.word	0x080117ff
 80116f4:	080117d5 	.word	0x080117d5
 80116f8:	0801174f 	.word	0x0801174f
 80116fc:	0801174f 	.word	0x0801174f
 8011700:	0801174f 	.word	0x0801174f
 8011704:	0801169d 	.word	0x0801169d
 8011708:	080117d9 	.word	0x080117d9
 801170c:	0801169d 	.word	0x0801169d
 8011710:	0801169d 	.word	0x0801169d
 8011714:	0801169d 	.word	0x0801169d
 8011718:	0801169d 	.word	0x0801169d
 801171c:	0801180f 	.word	0x0801180f
 8011720:	080117e1 	.word	0x080117e1
 8011724:	08011783 	.word	0x08011783
 8011728:	0801169d 	.word	0x0801169d
 801172c:	0801169d 	.word	0x0801169d
 8011730:	0801180b 	.word	0x0801180b
 8011734:	0801169d 	.word	0x0801169d
 8011738:	080117d5 	.word	0x080117d5
 801173c:	0801169d 	.word	0x0801169d
 8011740:	0801169d 	.word	0x0801169d
 8011744:	0801178b 	.word	0x0801178b
 8011748:	3b45      	subs	r3, #69	; 0x45
 801174a:	2b02      	cmp	r3, #2
 801174c:	d8a6      	bhi.n	801169c <__svfiscanf_r+0x10c>
 801174e:	2305      	movs	r3, #5
 8011750:	e025      	b.n	801179e <__svfiscanf_r+0x20e>
 8011752:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011754:	4621      	mov	r1, r4
 8011756:	4630      	mov	r0, r6
 8011758:	4798      	blx	r3
 801175a:	2800      	cmp	r0, #0
 801175c:	f43f af64 	beq.w	8011628 <__svfiscanf_r+0x98>
 8011760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011762:	07da      	lsls	r2, r3, #31
 8011764:	f140 80a4 	bpl.w	80118b0 <__svfiscanf_r+0x320>
 8011768:	9844      	ldr	r0, [sp, #272]	; 0x110
 801176a:	2800      	cmp	r0, #0
 801176c:	d067      	beq.n	801183e <__svfiscanf_r+0x2ae>
 801176e:	89a3      	ldrh	r3, [r4, #12]
 8011770:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011774:	bf18      	it	ne
 8011776:	f04f 30ff 	movne.w	r0, #4294967295
 801177a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801177e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011784:	f042 0220 	orr.w	r2, r2, #32
 8011788:	9241      	str	r2, [sp, #260]	; 0x104
 801178a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801178c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011790:	9241      	str	r2, [sp, #260]	; 0x104
 8011792:	2210      	movs	r2, #16
 8011794:	2b6f      	cmp	r3, #111	; 0x6f
 8011796:	9242      	str	r2, [sp, #264]	; 0x108
 8011798:	bf34      	ite	cc
 801179a:	2303      	movcc	r3, #3
 801179c:	2304      	movcs	r3, #4
 801179e:	9347      	str	r3, [sp, #284]	; 0x11c
 80117a0:	6863      	ldr	r3, [r4, #4]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	dd4e      	ble.n	8011844 <__svfiscanf_r+0x2b4>
 80117a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80117a8:	065b      	lsls	r3, r3, #25
 80117aa:	d404      	bmi.n	80117b6 <__svfiscanf_r+0x226>
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	781a      	ldrb	r2, [r3, #0]
 80117b0:	5cba      	ldrb	r2, [r7, r2]
 80117b2:	0710      	lsls	r0, r2, #28
 80117b4:	d456      	bmi.n	8011864 <__svfiscanf_r+0x2d4>
 80117b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	dc65      	bgt.n	8011888 <__svfiscanf_r+0x2f8>
 80117bc:	466b      	mov	r3, sp
 80117be:	4622      	mov	r2, r4
 80117c0:	a941      	add	r1, sp, #260	; 0x104
 80117c2:	4630      	mov	r0, r6
 80117c4:	f000 f8b2 	bl	801192c <_scanf_chars>
 80117c8:	2801      	cmp	r0, #1
 80117ca:	d079      	beq.n	80118c0 <__svfiscanf_r+0x330>
 80117cc:	2802      	cmp	r0, #2
 80117ce:	f47f af12 	bne.w	80115f6 <__svfiscanf_r+0x66>
 80117d2:	e7c5      	b.n	8011760 <__svfiscanf_r+0x1d0>
 80117d4:	220a      	movs	r2, #10
 80117d6:	e7dd      	b.n	8011794 <__svfiscanf_r+0x204>
 80117d8:	2300      	movs	r3, #0
 80117da:	9342      	str	r3, [sp, #264]	; 0x108
 80117dc:	2303      	movs	r3, #3
 80117de:	e7de      	b.n	801179e <__svfiscanf_r+0x20e>
 80117e0:	2308      	movs	r3, #8
 80117e2:	9342      	str	r3, [sp, #264]	; 0x108
 80117e4:	2304      	movs	r3, #4
 80117e6:	e7da      	b.n	801179e <__svfiscanf_r+0x20e>
 80117e8:	4629      	mov	r1, r5
 80117ea:	4640      	mov	r0, r8
 80117ec:	f000 fa8c 	bl	8011d08 <__sccl>
 80117f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80117f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117f6:	9341      	str	r3, [sp, #260]	; 0x104
 80117f8:	4605      	mov	r5, r0
 80117fa:	2301      	movs	r3, #1
 80117fc:	e7cf      	b.n	801179e <__svfiscanf_r+0x20e>
 80117fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011804:	9341      	str	r3, [sp, #260]	; 0x104
 8011806:	2300      	movs	r3, #0
 8011808:	e7c9      	b.n	801179e <__svfiscanf_r+0x20e>
 801180a:	2302      	movs	r3, #2
 801180c:	e7c7      	b.n	801179e <__svfiscanf_r+0x20e>
 801180e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011810:	06c3      	lsls	r3, r0, #27
 8011812:	f53f aef0 	bmi.w	80115f6 <__svfiscanf_r+0x66>
 8011816:	9b00      	ldr	r3, [sp, #0]
 8011818:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801181a:	1d19      	adds	r1, r3, #4
 801181c:	9100      	str	r1, [sp, #0]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f010 0f01 	tst.w	r0, #1
 8011824:	bf14      	ite	ne
 8011826:	801a      	strhne	r2, [r3, #0]
 8011828:	601a      	streq	r2, [r3, #0]
 801182a:	e6e4      	b.n	80115f6 <__svfiscanf_r+0x66>
 801182c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801182e:	07d8      	lsls	r0, r3, #31
 8011830:	d405      	bmi.n	801183e <__svfiscanf_r+0x2ae>
 8011832:	89a3      	ldrh	r3, [r4, #12]
 8011834:	0599      	lsls	r1, r3, #22
 8011836:	d402      	bmi.n	801183e <__svfiscanf_r+0x2ae>
 8011838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801183a:	f7fe fe8b 	bl	8010554 <__retarget_lock_release_recursive>
 801183e:	f04f 30ff 	mov.w	r0, #4294967295
 8011842:	e79a      	b.n	801177a <__svfiscanf_r+0x1ea>
 8011844:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011846:	4621      	mov	r1, r4
 8011848:	4630      	mov	r0, r6
 801184a:	4798      	blx	r3
 801184c:	2800      	cmp	r0, #0
 801184e:	d0aa      	beq.n	80117a6 <__svfiscanf_r+0x216>
 8011850:	e786      	b.n	8011760 <__svfiscanf_r+0x1d0>
 8011852:	bf00      	nop
 8011854:	08011f85 	.word	0x08011f85
 8011858:	08011be5 	.word	0x08011be5
 801185c:	08012ae9 	.word	0x08012ae9
 8011860:	08012eba 	.word	0x08012eba
 8011864:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011866:	3201      	adds	r2, #1
 8011868:	9245      	str	r2, [sp, #276]	; 0x114
 801186a:	6862      	ldr	r2, [r4, #4]
 801186c:	3a01      	subs	r2, #1
 801186e:	2a00      	cmp	r2, #0
 8011870:	6062      	str	r2, [r4, #4]
 8011872:	dd02      	ble.n	801187a <__svfiscanf_r+0x2ea>
 8011874:	3301      	adds	r3, #1
 8011876:	6023      	str	r3, [r4, #0]
 8011878:	e798      	b.n	80117ac <__svfiscanf_r+0x21c>
 801187a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801187c:	4621      	mov	r1, r4
 801187e:	4630      	mov	r0, r6
 8011880:	4798      	blx	r3
 8011882:	2800      	cmp	r0, #0
 8011884:	d092      	beq.n	80117ac <__svfiscanf_r+0x21c>
 8011886:	e76b      	b.n	8011760 <__svfiscanf_r+0x1d0>
 8011888:	2b04      	cmp	r3, #4
 801188a:	dc06      	bgt.n	801189a <__svfiscanf_r+0x30a>
 801188c:	466b      	mov	r3, sp
 801188e:	4622      	mov	r2, r4
 8011890:	a941      	add	r1, sp, #260	; 0x104
 8011892:	4630      	mov	r0, r6
 8011894:	f000 f8a4 	bl	80119e0 <_scanf_i>
 8011898:	e796      	b.n	80117c8 <__svfiscanf_r+0x238>
 801189a:	4b0f      	ldr	r3, [pc, #60]	; (80118d8 <__svfiscanf_r+0x348>)
 801189c:	2b00      	cmp	r3, #0
 801189e:	f43f aeaa 	beq.w	80115f6 <__svfiscanf_r+0x66>
 80118a2:	466b      	mov	r3, sp
 80118a4:	4622      	mov	r2, r4
 80118a6:	a941      	add	r1, sp, #260	; 0x104
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7fb ff5f 	bl	800d76c <_scanf_float>
 80118ae:	e78b      	b.n	80117c8 <__svfiscanf_r+0x238>
 80118b0:	89a3      	ldrh	r3, [r4, #12]
 80118b2:	0599      	lsls	r1, r3, #22
 80118b4:	f53f af58 	bmi.w	8011768 <__svfiscanf_r+0x1d8>
 80118b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ba:	f7fe fe4b 	bl	8010554 <__retarget_lock_release_recursive>
 80118be:	e753      	b.n	8011768 <__svfiscanf_r+0x1d8>
 80118c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80118c2:	07da      	lsls	r2, r3, #31
 80118c4:	d405      	bmi.n	80118d2 <__svfiscanf_r+0x342>
 80118c6:	89a3      	ldrh	r3, [r4, #12]
 80118c8:	059b      	lsls	r3, r3, #22
 80118ca:	d402      	bmi.n	80118d2 <__svfiscanf_r+0x342>
 80118cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118ce:	f7fe fe41 	bl	8010554 <__retarget_lock_release_recursive>
 80118d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80118d4:	e751      	b.n	801177a <__svfiscanf_r+0x1ea>
 80118d6:	bf00      	nop
 80118d8:	0800d76d 	.word	0x0800d76d

080118dc <_vfiscanf_r>:
 80118dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118de:	460c      	mov	r4, r1
 80118e0:	4605      	mov	r5, r0
 80118e2:	b138      	cbz	r0, 80118f4 <_vfiscanf_r+0x18>
 80118e4:	6981      	ldr	r1, [r0, #24]
 80118e6:	b929      	cbnz	r1, 80118f4 <_vfiscanf_r+0x18>
 80118e8:	e9cd 2300 	strd	r2, r3, [sp]
 80118ec:	f7fe fa02 	bl	800fcf4 <__sinit>
 80118f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80118f4:	490a      	ldr	r1, [pc, #40]	; (8011920 <_vfiscanf_r+0x44>)
 80118f6:	428c      	cmp	r4, r1
 80118f8:	d107      	bne.n	801190a <_vfiscanf_r+0x2e>
 80118fa:	686c      	ldr	r4, [r5, #4]
 80118fc:	4621      	mov	r1, r4
 80118fe:	4628      	mov	r0, r5
 8011900:	b003      	add	sp, #12
 8011902:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011906:	f7ff be43 	b.w	8011590 <__svfiscanf_r>
 801190a:	4906      	ldr	r1, [pc, #24]	; (8011924 <_vfiscanf_r+0x48>)
 801190c:	428c      	cmp	r4, r1
 801190e:	d101      	bne.n	8011914 <_vfiscanf_r+0x38>
 8011910:	68ac      	ldr	r4, [r5, #8]
 8011912:	e7f3      	b.n	80118fc <_vfiscanf_r+0x20>
 8011914:	4904      	ldr	r1, [pc, #16]	; (8011928 <_vfiscanf_r+0x4c>)
 8011916:	428c      	cmp	r4, r1
 8011918:	bf08      	it	eq
 801191a:	68ec      	ldreq	r4, [r5, #12]
 801191c:	e7ee      	b.n	80118fc <_vfiscanf_r+0x20>
 801191e:	bf00      	nop
 8011920:	08012c9c 	.word	0x08012c9c
 8011924:	08012cbc 	.word	0x08012cbc
 8011928:	08012c7c 	.word	0x08012c7c

0801192c <_scanf_chars>:
 801192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011930:	4615      	mov	r5, r2
 8011932:	688a      	ldr	r2, [r1, #8]
 8011934:	4680      	mov	r8, r0
 8011936:	460c      	mov	r4, r1
 8011938:	b932      	cbnz	r2, 8011948 <_scanf_chars+0x1c>
 801193a:	698a      	ldr	r2, [r1, #24]
 801193c:	2a00      	cmp	r2, #0
 801193e:	bf0c      	ite	eq
 8011940:	2201      	moveq	r2, #1
 8011942:	f04f 32ff 	movne.w	r2, #4294967295
 8011946:	608a      	str	r2, [r1, #8]
 8011948:	6822      	ldr	r2, [r4, #0]
 801194a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80119dc <_scanf_chars+0xb0>
 801194e:	06d1      	lsls	r1, r2, #27
 8011950:	bf5f      	itttt	pl
 8011952:	681a      	ldrpl	r2, [r3, #0]
 8011954:	1d11      	addpl	r1, r2, #4
 8011956:	6019      	strpl	r1, [r3, #0]
 8011958:	6816      	ldrpl	r6, [r2, #0]
 801195a:	2700      	movs	r7, #0
 801195c:	69a0      	ldr	r0, [r4, #24]
 801195e:	b188      	cbz	r0, 8011984 <_scanf_chars+0x58>
 8011960:	2801      	cmp	r0, #1
 8011962:	d107      	bne.n	8011974 <_scanf_chars+0x48>
 8011964:	682a      	ldr	r2, [r5, #0]
 8011966:	7811      	ldrb	r1, [r2, #0]
 8011968:	6962      	ldr	r2, [r4, #20]
 801196a:	5c52      	ldrb	r2, [r2, r1]
 801196c:	b952      	cbnz	r2, 8011984 <_scanf_chars+0x58>
 801196e:	2f00      	cmp	r7, #0
 8011970:	d031      	beq.n	80119d6 <_scanf_chars+0xaa>
 8011972:	e022      	b.n	80119ba <_scanf_chars+0x8e>
 8011974:	2802      	cmp	r0, #2
 8011976:	d120      	bne.n	80119ba <_scanf_chars+0x8e>
 8011978:	682b      	ldr	r3, [r5, #0]
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8011980:	071b      	lsls	r3, r3, #28
 8011982:	d41a      	bmi.n	80119ba <_scanf_chars+0x8e>
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	06da      	lsls	r2, r3, #27
 8011988:	bf5e      	ittt	pl
 801198a:	682b      	ldrpl	r3, [r5, #0]
 801198c:	781b      	ldrbpl	r3, [r3, #0]
 801198e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011992:	682a      	ldr	r2, [r5, #0]
 8011994:	686b      	ldr	r3, [r5, #4]
 8011996:	3201      	adds	r2, #1
 8011998:	602a      	str	r2, [r5, #0]
 801199a:	68a2      	ldr	r2, [r4, #8]
 801199c:	3b01      	subs	r3, #1
 801199e:	3a01      	subs	r2, #1
 80119a0:	606b      	str	r3, [r5, #4]
 80119a2:	3701      	adds	r7, #1
 80119a4:	60a2      	str	r2, [r4, #8]
 80119a6:	b142      	cbz	r2, 80119ba <_scanf_chars+0x8e>
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	dcd7      	bgt.n	801195c <_scanf_chars+0x30>
 80119ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80119b0:	4629      	mov	r1, r5
 80119b2:	4640      	mov	r0, r8
 80119b4:	4798      	blx	r3
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d0d0      	beq.n	801195c <_scanf_chars+0x30>
 80119ba:	6823      	ldr	r3, [r4, #0]
 80119bc:	f013 0310 	ands.w	r3, r3, #16
 80119c0:	d105      	bne.n	80119ce <_scanf_chars+0xa2>
 80119c2:	68e2      	ldr	r2, [r4, #12]
 80119c4:	3201      	adds	r2, #1
 80119c6:	60e2      	str	r2, [r4, #12]
 80119c8:	69a2      	ldr	r2, [r4, #24]
 80119ca:	b102      	cbz	r2, 80119ce <_scanf_chars+0xa2>
 80119cc:	7033      	strb	r3, [r6, #0]
 80119ce:	6923      	ldr	r3, [r4, #16]
 80119d0:	443b      	add	r3, r7
 80119d2:	6123      	str	r3, [r4, #16]
 80119d4:	2000      	movs	r0, #0
 80119d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119da:	bf00      	nop
 80119dc:	08012ae9 	.word	0x08012ae9

080119e0 <_scanf_i>:
 80119e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e4:	4698      	mov	r8, r3
 80119e6:	4b76      	ldr	r3, [pc, #472]	; (8011bc0 <_scanf_i+0x1e0>)
 80119e8:	460c      	mov	r4, r1
 80119ea:	4682      	mov	sl, r0
 80119ec:	4616      	mov	r6, r2
 80119ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119f2:	b087      	sub	sp, #28
 80119f4:	ab03      	add	r3, sp, #12
 80119f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80119fa:	4b72      	ldr	r3, [pc, #456]	; (8011bc4 <_scanf_i+0x1e4>)
 80119fc:	69a1      	ldr	r1, [r4, #24]
 80119fe:	4a72      	ldr	r2, [pc, #456]	; (8011bc8 <_scanf_i+0x1e8>)
 8011a00:	2903      	cmp	r1, #3
 8011a02:	bf18      	it	ne
 8011a04:	461a      	movne	r2, r3
 8011a06:	68a3      	ldr	r3, [r4, #8]
 8011a08:	9201      	str	r2, [sp, #4]
 8011a0a:	1e5a      	subs	r2, r3, #1
 8011a0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011a10:	bf88      	it	hi
 8011a12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011a16:	4627      	mov	r7, r4
 8011a18:	bf82      	ittt	hi
 8011a1a:	eb03 0905 	addhi.w	r9, r3, r5
 8011a1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011a22:	60a3      	strhi	r3, [r4, #8]
 8011a24:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011a28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011a2c:	bf98      	it	ls
 8011a2e:	f04f 0900 	movls.w	r9, #0
 8011a32:	6023      	str	r3, [r4, #0]
 8011a34:	463d      	mov	r5, r7
 8011a36:	f04f 0b00 	mov.w	fp, #0
 8011a3a:	6831      	ldr	r1, [r6, #0]
 8011a3c:	ab03      	add	r3, sp, #12
 8011a3e:	7809      	ldrb	r1, [r1, #0]
 8011a40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8011a44:	2202      	movs	r2, #2
 8011a46:	f7ee fbcb 	bl	80001e0 <memchr>
 8011a4a:	b328      	cbz	r0, 8011a98 <_scanf_i+0xb8>
 8011a4c:	f1bb 0f01 	cmp.w	fp, #1
 8011a50:	d159      	bne.n	8011b06 <_scanf_i+0x126>
 8011a52:	6862      	ldr	r2, [r4, #4]
 8011a54:	b92a      	cbnz	r2, 8011a62 <_scanf_i+0x82>
 8011a56:	6822      	ldr	r2, [r4, #0]
 8011a58:	2308      	movs	r3, #8
 8011a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011a5e:	6063      	str	r3, [r4, #4]
 8011a60:	6022      	str	r2, [r4, #0]
 8011a62:	6822      	ldr	r2, [r4, #0]
 8011a64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8011a68:	6022      	str	r2, [r4, #0]
 8011a6a:	68a2      	ldr	r2, [r4, #8]
 8011a6c:	1e51      	subs	r1, r2, #1
 8011a6e:	60a1      	str	r1, [r4, #8]
 8011a70:	b192      	cbz	r2, 8011a98 <_scanf_i+0xb8>
 8011a72:	6832      	ldr	r2, [r6, #0]
 8011a74:	1c51      	adds	r1, r2, #1
 8011a76:	6031      	str	r1, [r6, #0]
 8011a78:	7812      	ldrb	r2, [r2, #0]
 8011a7a:	f805 2b01 	strb.w	r2, [r5], #1
 8011a7e:	6872      	ldr	r2, [r6, #4]
 8011a80:	3a01      	subs	r2, #1
 8011a82:	2a00      	cmp	r2, #0
 8011a84:	6072      	str	r2, [r6, #4]
 8011a86:	dc07      	bgt.n	8011a98 <_scanf_i+0xb8>
 8011a88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4650      	mov	r0, sl
 8011a90:	4790      	blx	r2
 8011a92:	2800      	cmp	r0, #0
 8011a94:	f040 8085 	bne.w	8011ba2 <_scanf_i+0x1c2>
 8011a98:	f10b 0b01 	add.w	fp, fp, #1
 8011a9c:	f1bb 0f03 	cmp.w	fp, #3
 8011aa0:	d1cb      	bne.n	8011a3a <_scanf_i+0x5a>
 8011aa2:	6863      	ldr	r3, [r4, #4]
 8011aa4:	b90b      	cbnz	r3, 8011aaa <_scanf_i+0xca>
 8011aa6:	230a      	movs	r3, #10
 8011aa8:	6063      	str	r3, [r4, #4]
 8011aaa:	6863      	ldr	r3, [r4, #4]
 8011aac:	4947      	ldr	r1, [pc, #284]	; (8011bcc <_scanf_i+0x1ec>)
 8011aae:	6960      	ldr	r0, [r4, #20]
 8011ab0:	1ac9      	subs	r1, r1, r3
 8011ab2:	f000 f929 	bl	8011d08 <__sccl>
 8011ab6:	f04f 0b00 	mov.w	fp, #0
 8011aba:	68a3      	ldr	r3, [r4, #8]
 8011abc:	6822      	ldr	r2, [r4, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d03d      	beq.n	8011b3e <_scanf_i+0x15e>
 8011ac2:	6831      	ldr	r1, [r6, #0]
 8011ac4:	6960      	ldr	r0, [r4, #20]
 8011ac6:	f891 c000 	ldrb.w	ip, [r1]
 8011aca:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d035      	beq.n	8011b3e <_scanf_i+0x15e>
 8011ad2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8011ad6:	d124      	bne.n	8011b22 <_scanf_i+0x142>
 8011ad8:	0510      	lsls	r0, r2, #20
 8011ada:	d522      	bpl.n	8011b22 <_scanf_i+0x142>
 8011adc:	f10b 0b01 	add.w	fp, fp, #1
 8011ae0:	f1b9 0f00 	cmp.w	r9, #0
 8011ae4:	d003      	beq.n	8011aee <_scanf_i+0x10e>
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8011aec:	60a3      	str	r3, [r4, #8]
 8011aee:	6873      	ldr	r3, [r6, #4]
 8011af0:	3b01      	subs	r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	6073      	str	r3, [r6, #4]
 8011af6:	dd1b      	ble.n	8011b30 <_scanf_i+0x150>
 8011af8:	6833      	ldr	r3, [r6, #0]
 8011afa:	3301      	adds	r3, #1
 8011afc:	6033      	str	r3, [r6, #0]
 8011afe:	68a3      	ldr	r3, [r4, #8]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	60a3      	str	r3, [r4, #8]
 8011b04:	e7d9      	b.n	8011aba <_scanf_i+0xda>
 8011b06:	f1bb 0f02 	cmp.w	fp, #2
 8011b0a:	d1ae      	bne.n	8011a6a <_scanf_i+0x8a>
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8011b12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011b16:	d1bf      	bne.n	8011a98 <_scanf_i+0xb8>
 8011b18:	2310      	movs	r3, #16
 8011b1a:	6063      	str	r3, [r4, #4]
 8011b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b20:	e7a2      	b.n	8011a68 <_scanf_i+0x88>
 8011b22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8011b26:	6022      	str	r2, [r4, #0]
 8011b28:	780b      	ldrb	r3, [r1, #0]
 8011b2a:	f805 3b01 	strb.w	r3, [r5], #1
 8011b2e:	e7de      	b.n	8011aee <_scanf_i+0x10e>
 8011b30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011b34:	4631      	mov	r1, r6
 8011b36:	4650      	mov	r0, sl
 8011b38:	4798      	blx	r3
 8011b3a:	2800      	cmp	r0, #0
 8011b3c:	d0df      	beq.n	8011afe <_scanf_i+0x11e>
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	05db      	lsls	r3, r3, #23
 8011b42:	d50d      	bpl.n	8011b60 <_scanf_i+0x180>
 8011b44:	42bd      	cmp	r5, r7
 8011b46:	d909      	bls.n	8011b5c <_scanf_i+0x17c>
 8011b48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011b4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011b50:	4632      	mov	r2, r6
 8011b52:	4650      	mov	r0, sl
 8011b54:	4798      	blx	r3
 8011b56:	f105 39ff 	add.w	r9, r5, #4294967295
 8011b5a:	464d      	mov	r5, r9
 8011b5c:	42bd      	cmp	r5, r7
 8011b5e:	d02d      	beq.n	8011bbc <_scanf_i+0x1dc>
 8011b60:	6822      	ldr	r2, [r4, #0]
 8011b62:	f012 0210 	ands.w	r2, r2, #16
 8011b66:	d113      	bne.n	8011b90 <_scanf_i+0x1b0>
 8011b68:	702a      	strb	r2, [r5, #0]
 8011b6a:	6863      	ldr	r3, [r4, #4]
 8011b6c:	9e01      	ldr	r6, [sp, #4]
 8011b6e:	4639      	mov	r1, r7
 8011b70:	4650      	mov	r0, sl
 8011b72:	47b0      	blx	r6
 8011b74:	6821      	ldr	r1, [r4, #0]
 8011b76:	f8d8 3000 	ldr.w	r3, [r8]
 8011b7a:	f011 0f20 	tst.w	r1, #32
 8011b7e:	d013      	beq.n	8011ba8 <_scanf_i+0x1c8>
 8011b80:	1d1a      	adds	r2, r3, #4
 8011b82:	f8c8 2000 	str.w	r2, [r8]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	6018      	str	r0, [r3, #0]
 8011b8a:	68e3      	ldr	r3, [r4, #12]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	60e3      	str	r3, [r4, #12]
 8011b90:	1bed      	subs	r5, r5, r7
 8011b92:	44ab      	add	fp, r5
 8011b94:	6925      	ldr	r5, [r4, #16]
 8011b96:	445d      	add	r5, fp
 8011b98:	6125      	str	r5, [r4, #16]
 8011b9a:	2000      	movs	r0, #0
 8011b9c:	b007      	add	sp, #28
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba2:	f04f 0b00 	mov.w	fp, #0
 8011ba6:	e7ca      	b.n	8011b3e <_scanf_i+0x15e>
 8011ba8:	1d1a      	adds	r2, r3, #4
 8011baa:	f8c8 2000 	str.w	r2, [r8]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f011 0f01 	tst.w	r1, #1
 8011bb4:	bf14      	ite	ne
 8011bb6:	8018      	strhne	r0, [r3, #0]
 8011bb8:	6018      	streq	r0, [r3, #0]
 8011bba:	e7e6      	b.n	8011b8a <_scanf_i+0x1aa>
 8011bbc:	2001      	movs	r0, #1
 8011bbe:	e7ed      	b.n	8011b9c <_scanf_i+0x1bc>
 8011bc0:	08012a08 	.word	0x08012a08
 8011bc4:	08011f0d 	.word	0x08011f0d
 8011bc8:	0800ec25 	.word	0x0800ec25
 8011bcc:	08012ede 	.word	0x08012ede

08011bd0 <lflush>:
 8011bd0:	8983      	ldrh	r3, [r0, #12]
 8011bd2:	f003 0309 	and.w	r3, r3, #9
 8011bd6:	2b09      	cmp	r3, #9
 8011bd8:	d101      	bne.n	8011bde <lflush+0xe>
 8011bda:	f7fe b821 	b.w	800fc20 <fflush>
 8011bde:	2000      	movs	r0, #0
 8011be0:	4770      	bx	lr
	...

08011be4 <__srefill_r>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	460c      	mov	r4, r1
 8011be8:	4605      	mov	r5, r0
 8011bea:	b118      	cbz	r0, 8011bf4 <__srefill_r+0x10>
 8011bec:	6983      	ldr	r3, [r0, #24]
 8011bee:	b90b      	cbnz	r3, 8011bf4 <__srefill_r+0x10>
 8011bf0:	f7fe f880 	bl	800fcf4 <__sinit>
 8011bf4:	4b3b      	ldr	r3, [pc, #236]	; (8011ce4 <__srefill_r+0x100>)
 8011bf6:	429c      	cmp	r4, r3
 8011bf8:	d10a      	bne.n	8011c10 <__srefill_r+0x2c>
 8011bfa:	686c      	ldr	r4, [r5, #4]
 8011bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c00:	2300      	movs	r3, #0
 8011c02:	6063      	str	r3, [r4, #4]
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	069e      	lsls	r6, r3, #26
 8011c08:	d50c      	bpl.n	8011c24 <__srefill_r+0x40>
 8011c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0e:	e066      	b.n	8011cde <__srefill_r+0xfa>
 8011c10:	4b35      	ldr	r3, [pc, #212]	; (8011ce8 <__srefill_r+0x104>)
 8011c12:	429c      	cmp	r4, r3
 8011c14:	d101      	bne.n	8011c1a <__srefill_r+0x36>
 8011c16:	68ac      	ldr	r4, [r5, #8]
 8011c18:	e7f0      	b.n	8011bfc <__srefill_r+0x18>
 8011c1a:	4b34      	ldr	r3, [pc, #208]	; (8011cec <__srefill_r+0x108>)
 8011c1c:	429c      	cmp	r4, r3
 8011c1e:	bf08      	it	eq
 8011c20:	68ec      	ldreq	r4, [r5, #12]
 8011c22:	e7eb      	b.n	8011bfc <__srefill_r+0x18>
 8011c24:	0758      	lsls	r0, r3, #29
 8011c26:	d448      	bmi.n	8011cba <__srefill_r+0xd6>
 8011c28:	06d9      	lsls	r1, r3, #27
 8011c2a:	d405      	bmi.n	8011c38 <__srefill_r+0x54>
 8011c2c:	2309      	movs	r3, #9
 8011c2e:	602b      	str	r3, [r5, #0]
 8011c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011c34:	81a3      	strh	r3, [r4, #12]
 8011c36:	e7e8      	b.n	8011c0a <__srefill_r+0x26>
 8011c38:	071a      	lsls	r2, r3, #28
 8011c3a:	d50b      	bpl.n	8011c54 <__srefill_r+0x70>
 8011c3c:	4621      	mov	r1, r4
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f7fd ffb2 	bl	800fba8 <_fflush_r>
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d1e0      	bne.n	8011c0a <__srefill_r+0x26>
 8011c48:	89a3      	ldrh	r3, [r4, #12]
 8011c4a:	60a0      	str	r0, [r4, #8]
 8011c4c:	f023 0308 	bic.w	r3, r3, #8
 8011c50:	81a3      	strh	r3, [r4, #12]
 8011c52:	61a0      	str	r0, [r4, #24]
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	f043 0304 	orr.w	r3, r3, #4
 8011c5a:	81a3      	strh	r3, [r4, #12]
 8011c5c:	6923      	ldr	r3, [r4, #16]
 8011c5e:	b91b      	cbnz	r3, 8011c68 <__srefill_r+0x84>
 8011c60:	4621      	mov	r1, r4
 8011c62:	4628      	mov	r0, r5
 8011c64:	f7fe fc9c 	bl	80105a0 <__smakebuf_r>
 8011c68:	89a6      	ldrh	r6, [r4, #12]
 8011c6a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8011c6e:	07b3      	lsls	r3, r6, #30
 8011c70:	d00f      	beq.n	8011c92 <__srefill_r+0xae>
 8011c72:	2301      	movs	r3, #1
 8011c74:	81a3      	strh	r3, [r4, #12]
 8011c76:	4b1e      	ldr	r3, [pc, #120]	; (8011cf0 <__srefill_r+0x10c>)
 8011c78:	491e      	ldr	r1, [pc, #120]	; (8011cf4 <__srefill_r+0x110>)
 8011c7a:	6818      	ldr	r0, [r3, #0]
 8011c7c:	f006 0609 	and.w	r6, r6, #9
 8011c80:	f7fe f8b6 	bl	800fdf0 <_fwalk>
 8011c84:	2e09      	cmp	r6, #9
 8011c86:	81a7      	strh	r7, [r4, #12]
 8011c88:	d103      	bne.n	8011c92 <__srefill_r+0xae>
 8011c8a:	4621      	mov	r1, r4
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f7fd ff05 	bl	800fa9c <__sflush_r>
 8011c92:	6922      	ldr	r2, [r4, #16]
 8011c94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c96:	6963      	ldr	r3, [r4, #20]
 8011c98:	6a21      	ldr	r1, [r4, #32]
 8011c9a:	6022      	str	r2, [r4, #0]
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	47b0      	blx	r6
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	6060      	str	r0, [r4, #4]
 8011ca4:	dc1c      	bgt.n	8011ce0 <__srefill_r+0xfc>
 8011ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011caa:	bf17      	itett	ne
 8011cac:	2200      	movne	r2, #0
 8011cae:	f043 0320 	orreq.w	r3, r3, #32
 8011cb2:	6062      	strne	r2, [r4, #4]
 8011cb4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8011cb8:	e7bc      	b.n	8011c34 <__srefill_r+0x50>
 8011cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cbc:	2900      	cmp	r1, #0
 8011cbe:	d0cd      	beq.n	8011c5c <__srefill_r+0x78>
 8011cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cc4:	4299      	cmp	r1, r3
 8011cc6:	d002      	beq.n	8011cce <__srefill_r+0xea>
 8011cc8:	4628      	mov	r0, r5
 8011cca:	f7fb f805 	bl	800ccd8 <_free_r>
 8011cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cd0:	6063      	str	r3, [r4, #4]
 8011cd2:	2000      	movs	r0, #0
 8011cd4:	6360      	str	r0, [r4, #52]	; 0x34
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d0c0      	beq.n	8011c5c <__srefill_r+0x78>
 8011cda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011cdc:	6023      	str	r3, [r4, #0]
 8011cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce0:	2000      	movs	r0, #0
 8011ce2:	e7fc      	b.n	8011cde <__srefill_r+0xfa>
 8011ce4:	08012c9c 	.word	0x08012c9c
 8011ce8:	08012cbc 	.word	0x08012cbc
 8011cec:	08012c7c 	.word	0x08012c7c
 8011cf0:	08012a5c 	.word	0x08012a5c
 8011cf4:	08011bd1 	.word	0x08011bd1

08011cf8 <nan>:
 8011cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d00 <nan+0x8>
 8011cfc:	4770      	bx	lr
 8011cfe:	bf00      	nop
 8011d00:	00000000 	.word	0x00000000
 8011d04:	7ff80000 	.word	0x7ff80000

08011d08 <__sccl>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	780b      	ldrb	r3, [r1, #0]
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	2b5e      	cmp	r3, #94	; 0x5e
 8011d10:	bf0b      	itete	eq
 8011d12:	784b      	ldrbeq	r3, [r1, #1]
 8011d14:	1c48      	addne	r0, r1, #1
 8011d16:	1c88      	addeq	r0, r1, #2
 8011d18:	2200      	movne	r2, #0
 8011d1a:	bf08      	it	eq
 8011d1c:	2201      	moveq	r2, #1
 8011d1e:	1e61      	subs	r1, r4, #1
 8011d20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011d24:	f801 2f01 	strb.w	r2, [r1, #1]!
 8011d28:	42a9      	cmp	r1, r5
 8011d2a:	d1fb      	bne.n	8011d24 <__sccl+0x1c>
 8011d2c:	b90b      	cbnz	r3, 8011d32 <__sccl+0x2a>
 8011d2e:	3801      	subs	r0, #1
 8011d30:	bd70      	pop	{r4, r5, r6, pc}
 8011d32:	f082 0201 	eor.w	r2, r2, #1
 8011d36:	54e2      	strb	r2, [r4, r3]
 8011d38:	4605      	mov	r5, r0
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011d40:	292d      	cmp	r1, #45	; 0x2d
 8011d42:	d006      	beq.n	8011d52 <__sccl+0x4a>
 8011d44:	295d      	cmp	r1, #93	; 0x5d
 8011d46:	d0f3      	beq.n	8011d30 <__sccl+0x28>
 8011d48:	b909      	cbnz	r1, 8011d4e <__sccl+0x46>
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	e7f0      	b.n	8011d30 <__sccl+0x28>
 8011d4e:	460b      	mov	r3, r1
 8011d50:	e7f1      	b.n	8011d36 <__sccl+0x2e>
 8011d52:	786e      	ldrb	r6, [r5, #1]
 8011d54:	2e5d      	cmp	r6, #93	; 0x5d
 8011d56:	d0fa      	beq.n	8011d4e <__sccl+0x46>
 8011d58:	42b3      	cmp	r3, r6
 8011d5a:	dcf8      	bgt.n	8011d4e <__sccl+0x46>
 8011d5c:	3502      	adds	r5, #2
 8011d5e:	4619      	mov	r1, r3
 8011d60:	3101      	adds	r1, #1
 8011d62:	428e      	cmp	r6, r1
 8011d64:	5462      	strb	r2, [r4, r1]
 8011d66:	dcfb      	bgt.n	8011d60 <__sccl+0x58>
 8011d68:	1af1      	subs	r1, r6, r3
 8011d6a:	3901      	subs	r1, #1
 8011d6c:	1c58      	adds	r0, r3, #1
 8011d6e:	42b3      	cmp	r3, r6
 8011d70:	bfa8      	it	ge
 8011d72:	2100      	movge	r1, #0
 8011d74:	1843      	adds	r3, r0, r1
 8011d76:	e7e0      	b.n	8011d3a <__sccl+0x32>

08011d78 <__sread>:
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d80:	f000 fa76 	bl	8012270 <_read_r>
 8011d84:	2800      	cmp	r0, #0
 8011d86:	bfab      	itete	ge
 8011d88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d8a:	89a3      	ldrhlt	r3, [r4, #12]
 8011d8c:	181b      	addge	r3, r3, r0
 8011d8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d92:	bfac      	ite	ge
 8011d94:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d96:	81a3      	strhlt	r3, [r4, #12]
 8011d98:	bd10      	pop	{r4, pc}

08011d9a <__swrite>:
 8011d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d9e:	461f      	mov	r7, r3
 8011da0:	898b      	ldrh	r3, [r1, #12]
 8011da2:	05db      	lsls	r3, r3, #23
 8011da4:	4605      	mov	r5, r0
 8011da6:	460c      	mov	r4, r1
 8011da8:	4616      	mov	r6, r2
 8011daa:	d505      	bpl.n	8011db8 <__swrite+0x1e>
 8011dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011db0:	2302      	movs	r3, #2
 8011db2:	2200      	movs	r2, #0
 8011db4:	f000 fa00 	bl	80121b8 <_lseek_r>
 8011db8:	89a3      	ldrh	r3, [r4, #12]
 8011dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011dc2:	81a3      	strh	r3, [r4, #12]
 8011dc4:	4632      	mov	r2, r6
 8011dc6:	463b      	mov	r3, r7
 8011dc8:	4628      	mov	r0, r5
 8011dca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	f000 b97f 	b.w	80120d0 <_write_r>

08011dd2 <__sseek>:
 8011dd2:	b510      	push	{r4, lr}
 8011dd4:	460c      	mov	r4, r1
 8011dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dda:	f000 f9ed 	bl	80121b8 <_lseek_r>
 8011dde:	1c43      	adds	r3, r0, #1
 8011de0:	89a3      	ldrh	r3, [r4, #12]
 8011de2:	bf15      	itete	ne
 8011de4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011de6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011dea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011dee:	81a3      	strheq	r3, [r4, #12]
 8011df0:	bf18      	it	ne
 8011df2:	81a3      	strhne	r3, [r4, #12]
 8011df4:	bd10      	pop	{r4, pc}

08011df6 <__sclose>:
 8011df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dfa:	f000 b999 	b.w	8012130 <_close_r>

08011dfe <strncmp>:
 8011dfe:	b510      	push	{r4, lr}
 8011e00:	b17a      	cbz	r2, 8011e22 <strncmp+0x24>
 8011e02:	4603      	mov	r3, r0
 8011e04:	3901      	subs	r1, #1
 8011e06:	1884      	adds	r4, r0, r2
 8011e08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011e10:	4290      	cmp	r0, r2
 8011e12:	d101      	bne.n	8011e18 <strncmp+0x1a>
 8011e14:	42a3      	cmp	r3, r4
 8011e16:	d101      	bne.n	8011e1c <strncmp+0x1e>
 8011e18:	1a80      	subs	r0, r0, r2
 8011e1a:	bd10      	pop	{r4, pc}
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d1f3      	bne.n	8011e08 <strncmp+0xa>
 8011e20:	e7fa      	b.n	8011e18 <strncmp+0x1a>
 8011e22:	4610      	mov	r0, r2
 8011e24:	e7f9      	b.n	8011e1a <strncmp+0x1c>
	...

08011e28 <_strtoul_l.constprop.0>:
 8011e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e2c:	4f36      	ldr	r7, [pc, #216]	; (8011f08 <_strtoul_l.constprop.0+0xe0>)
 8011e2e:	4686      	mov	lr, r0
 8011e30:	460d      	mov	r5, r1
 8011e32:	4628      	mov	r0, r5
 8011e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e38:	5de6      	ldrb	r6, [r4, r7]
 8011e3a:	f016 0608 	ands.w	r6, r6, #8
 8011e3e:	d1f8      	bne.n	8011e32 <_strtoul_l.constprop.0+0xa>
 8011e40:	2c2d      	cmp	r4, #45	; 0x2d
 8011e42:	d12f      	bne.n	8011ea4 <_strtoul_l.constprop.0+0x7c>
 8011e44:	782c      	ldrb	r4, [r5, #0]
 8011e46:	2601      	movs	r6, #1
 8011e48:	1c85      	adds	r5, r0, #2
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d057      	beq.n	8011efe <_strtoul_l.constprop.0+0xd6>
 8011e4e:	2b10      	cmp	r3, #16
 8011e50:	d109      	bne.n	8011e66 <_strtoul_l.constprop.0+0x3e>
 8011e52:	2c30      	cmp	r4, #48	; 0x30
 8011e54:	d107      	bne.n	8011e66 <_strtoul_l.constprop.0+0x3e>
 8011e56:	7828      	ldrb	r0, [r5, #0]
 8011e58:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011e5c:	2858      	cmp	r0, #88	; 0x58
 8011e5e:	d149      	bne.n	8011ef4 <_strtoul_l.constprop.0+0xcc>
 8011e60:	786c      	ldrb	r4, [r5, #1]
 8011e62:	2310      	movs	r3, #16
 8011e64:	3502      	adds	r5, #2
 8011e66:	f04f 38ff 	mov.w	r8, #4294967295
 8011e6a:	2700      	movs	r7, #0
 8011e6c:	fbb8 f8f3 	udiv	r8, r8, r3
 8011e70:	fb03 f908 	mul.w	r9, r3, r8
 8011e74:	ea6f 0909 	mvn.w	r9, r9
 8011e78:	4638      	mov	r0, r7
 8011e7a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011e7e:	f1bc 0f09 	cmp.w	ip, #9
 8011e82:	d814      	bhi.n	8011eae <_strtoul_l.constprop.0+0x86>
 8011e84:	4664      	mov	r4, ip
 8011e86:	42a3      	cmp	r3, r4
 8011e88:	dd22      	ble.n	8011ed0 <_strtoul_l.constprop.0+0xa8>
 8011e8a:	2f00      	cmp	r7, #0
 8011e8c:	db1d      	blt.n	8011eca <_strtoul_l.constprop.0+0xa2>
 8011e8e:	4580      	cmp	r8, r0
 8011e90:	d31b      	bcc.n	8011eca <_strtoul_l.constprop.0+0xa2>
 8011e92:	d101      	bne.n	8011e98 <_strtoul_l.constprop.0+0x70>
 8011e94:	45a1      	cmp	r9, r4
 8011e96:	db18      	blt.n	8011eca <_strtoul_l.constprop.0+0xa2>
 8011e98:	fb00 4003 	mla	r0, r0, r3, r4
 8011e9c:	2701      	movs	r7, #1
 8011e9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ea2:	e7ea      	b.n	8011e7a <_strtoul_l.constprop.0+0x52>
 8011ea4:	2c2b      	cmp	r4, #43	; 0x2b
 8011ea6:	bf04      	itt	eq
 8011ea8:	782c      	ldrbeq	r4, [r5, #0]
 8011eaa:	1c85      	addeq	r5, r0, #2
 8011eac:	e7cd      	b.n	8011e4a <_strtoul_l.constprop.0+0x22>
 8011eae:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011eb2:	f1bc 0f19 	cmp.w	ip, #25
 8011eb6:	d801      	bhi.n	8011ebc <_strtoul_l.constprop.0+0x94>
 8011eb8:	3c37      	subs	r4, #55	; 0x37
 8011eba:	e7e4      	b.n	8011e86 <_strtoul_l.constprop.0+0x5e>
 8011ebc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011ec0:	f1bc 0f19 	cmp.w	ip, #25
 8011ec4:	d804      	bhi.n	8011ed0 <_strtoul_l.constprop.0+0xa8>
 8011ec6:	3c57      	subs	r4, #87	; 0x57
 8011ec8:	e7dd      	b.n	8011e86 <_strtoul_l.constprop.0+0x5e>
 8011eca:	f04f 37ff 	mov.w	r7, #4294967295
 8011ece:	e7e6      	b.n	8011e9e <_strtoul_l.constprop.0+0x76>
 8011ed0:	2f00      	cmp	r7, #0
 8011ed2:	da07      	bge.n	8011ee4 <_strtoul_l.constprop.0+0xbc>
 8011ed4:	2322      	movs	r3, #34	; 0x22
 8011ed6:	f8ce 3000 	str.w	r3, [lr]
 8011eda:	f04f 30ff 	mov.w	r0, #4294967295
 8011ede:	b932      	cbnz	r2, 8011eee <_strtoul_l.constprop.0+0xc6>
 8011ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee4:	b106      	cbz	r6, 8011ee8 <_strtoul_l.constprop.0+0xc0>
 8011ee6:	4240      	negs	r0, r0
 8011ee8:	2a00      	cmp	r2, #0
 8011eea:	d0f9      	beq.n	8011ee0 <_strtoul_l.constprop.0+0xb8>
 8011eec:	b107      	cbz	r7, 8011ef0 <_strtoul_l.constprop.0+0xc8>
 8011eee:	1e69      	subs	r1, r5, #1
 8011ef0:	6011      	str	r1, [r2, #0]
 8011ef2:	e7f5      	b.n	8011ee0 <_strtoul_l.constprop.0+0xb8>
 8011ef4:	2430      	movs	r4, #48	; 0x30
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1b5      	bne.n	8011e66 <_strtoul_l.constprop.0+0x3e>
 8011efa:	2308      	movs	r3, #8
 8011efc:	e7b3      	b.n	8011e66 <_strtoul_l.constprop.0+0x3e>
 8011efe:	2c30      	cmp	r4, #48	; 0x30
 8011f00:	d0a9      	beq.n	8011e56 <_strtoul_l.constprop.0+0x2e>
 8011f02:	230a      	movs	r3, #10
 8011f04:	e7af      	b.n	8011e66 <_strtoul_l.constprop.0+0x3e>
 8011f06:	bf00      	nop
 8011f08:	08012ae9 	.word	0x08012ae9

08011f0c <_strtoul_r>:
 8011f0c:	f7ff bf8c 	b.w	8011e28 <_strtoul_l.constprop.0>

08011f10 <__submore>:
 8011f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f14:	460c      	mov	r4, r1
 8011f16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f1c:	4299      	cmp	r1, r3
 8011f1e:	d11d      	bne.n	8011f5c <__submore+0x4c>
 8011f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f24:	f7fa ff44 	bl	800cdb0 <_malloc_r>
 8011f28:	b918      	cbnz	r0, 8011f32 <__submore+0x22>
 8011f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f36:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f38:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8011f3e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011f42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8011f46:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8011f4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f4e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011f52:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8011f56:	6020      	str	r0, [r4, #0]
 8011f58:	2000      	movs	r0, #0
 8011f5a:	e7e8      	b.n	8011f2e <__submore+0x1e>
 8011f5c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011f5e:	0077      	lsls	r7, r6, #1
 8011f60:	463a      	mov	r2, r7
 8011f62:	f000 f955 	bl	8012210 <_realloc_r>
 8011f66:	4605      	mov	r5, r0
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	d0de      	beq.n	8011f2a <__submore+0x1a>
 8011f6c:	eb00 0806 	add.w	r8, r0, r6
 8011f70:	4601      	mov	r1, r0
 8011f72:	4632      	mov	r2, r6
 8011f74:	4640      	mov	r0, r8
 8011f76:	f7fe fb65 	bl	8010644 <memcpy>
 8011f7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8011f7e:	f8c4 8000 	str.w	r8, [r4]
 8011f82:	e7e9      	b.n	8011f58 <__submore+0x48>

08011f84 <_ungetc_r>:
 8011f84:	b570      	push	{r4, r5, r6, lr}
 8011f86:	4614      	mov	r4, r2
 8011f88:	1c4a      	adds	r2, r1, #1
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	d103      	bne.n	8011f98 <_ungetc_r+0x14>
 8011f90:	f04f 35ff 	mov.w	r5, #4294967295
 8011f94:	4628      	mov	r0, r5
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	b118      	cbz	r0, 8011fa2 <_ungetc_r+0x1e>
 8011f9a:	6983      	ldr	r3, [r0, #24]
 8011f9c:	b90b      	cbnz	r3, 8011fa2 <_ungetc_r+0x1e>
 8011f9e:	f7fd fea9 	bl	800fcf4 <__sinit>
 8011fa2:	4b41      	ldr	r3, [pc, #260]	; (80120a8 <_ungetc_r+0x124>)
 8011fa4:	429c      	cmp	r4, r3
 8011fa6:	d11d      	bne.n	8011fe4 <_ungetc_r+0x60>
 8011fa8:	6874      	ldr	r4, [r6, #4]
 8011faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fac:	07db      	lsls	r3, r3, #31
 8011fae:	d405      	bmi.n	8011fbc <_ungetc_r+0x38>
 8011fb0:	89a3      	ldrh	r3, [r4, #12]
 8011fb2:	0598      	lsls	r0, r3, #22
 8011fb4:	d402      	bmi.n	8011fbc <_ungetc_r+0x38>
 8011fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fb8:	f7fe facb 	bl	8010552 <__retarget_lock_acquire_recursive>
 8011fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc0:	f023 0320 	bic.w	r3, r3, #32
 8011fc4:	0759      	lsls	r1, r3, #29
 8011fc6:	81a3      	strh	r3, [r4, #12]
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	d42d      	bmi.n	8012028 <_ungetc_r+0xa4>
 8011fcc:	06d3      	lsls	r3, r2, #27
 8011fce:	d413      	bmi.n	8011ff8 <_ungetc_r+0x74>
 8011fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fd2:	07dd      	lsls	r5, r3, #31
 8011fd4:	d4dc      	bmi.n	8011f90 <_ungetc_r+0xc>
 8011fd6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8011fda:	d1d9      	bne.n	8011f90 <_ungetc_r+0xc>
 8011fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fde:	f7fe fab9 	bl	8010554 <__retarget_lock_release_recursive>
 8011fe2:	e7d5      	b.n	8011f90 <_ungetc_r+0xc>
 8011fe4:	4b31      	ldr	r3, [pc, #196]	; (80120ac <_ungetc_r+0x128>)
 8011fe6:	429c      	cmp	r4, r3
 8011fe8:	d101      	bne.n	8011fee <_ungetc_r+0x6a>
 8011fea:	68b4      	ldr	r4, [r6, #8]
 8011fec:	e7dd      	b.n	8011faa <_ungetc_r+0x26>
 8011fee:	4b30      	ldr	r3, [pc, #192]	; (80120b0 <_ungetc_r+0x12c>)
 8011ff0:	429c      	cmp	r4, r3
 8011ff2:	bf08      	it	eq
 8011ff4:	68f4      	ldreq	r4, [r6, #12]
 8011ff6:	e7d8      	b.n	8011faa <_ungetc_r+0x26>
 8011ff8:	0710      	lsls	r0, r2, #28
 8011ffa:	d511      	bpl.n	8012020 <_ungetc_r+0x9c>
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	4630      	mov	r0, r6
 8012000:	f7fd fdd2 	bl	800fba8 <_fflush_r>
 8012004:	b130      	cbz	r0, 8012014 <_ungetc_r+0x90>
 8012006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012008:	07d9      	lsls	r1, r3, #31
 801200a:	d4c1      	bmi.n	8011f90 <_ungetc_r+0xc>
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8012012:	e7e2      	b.n	8011fda <_ungetc_r+0x56>
 8012014:	89a3      	ldrh	r3, [r4, #12]
 8012016:	60a0      	str	r0, [r4, #8]
 8012018:	f023 0308 	bic.w	r3, r3, #8
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	61a0      	str	r0, [r4, #24]
 8012020:	89a3      	ldrh	r3, [r4, #12]
 8012022:	f043 0304 	orr.w	r3, r3, #4
 8012026:	81a3      	strh	r3, [r4, #12]
 8012028:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801202a:	6862      	ldr	r2, [r4, #4]
 801202c:	b2ed      	uxtb	r5, r5
 801202e:	b1d3      	cbz	r3, 8012066 <_ungetc_r+0xe2>
 8012030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012032:	4293      	cmp	r3, r2
 8012034:	dc05      	bgt.n	8012042 <_ungetc_r+0xbe>
 8012036:	4621      	mov	r1, r4
 8012038:	4630      	mov	r0, r6
 801203a:	f7ff ff69 	bl	8011f10 <__submore>
 801203e:	2800      	cmp	r0, #0
 8012040:	d1e1      	bne.n	8012006 <_ungetc_r+0x82>
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	1e5a      	subs	r2, r3, #1
 8012046:	6022      	str	r2, [r4, #0]
 8012048:	f803 5c01 	strb.w	r5, [r3, #-1]
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	3301      	adds	r3, #1
 8012050:	6063      	str	r3, [r4, #4]
 8012052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012054:	07da      	lsls	r2, r3, #31
 8012056:	d49d      	bmi.n	8011f94 <_ungetc_r+0x10>
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	059b      	lsls	r3, r3, #22
 801205c:	d49a      	bmi.n	8011f94 <_ungetc_r+0x10>
 801205e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012060:	f7fe fa78 	bl	8010554 <__retarget_lock_release_recursive>
 8012064:	e796      	b.n	8011f94 <_ungetc_r+0x10>
 8012066:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8012068:	6920      	ldr	r0, [r4, #16]
 801206a:	6823      	ldr	r3, [r4, #0]
 801206c:	f001 0101 	and.w	r1, r1, #1
 8012070:	b160      	cbz	r0, 801208c <_ungetc_r+0x108>
 8012072:	4298      	cmp	r0, r3
 8012074:	d20a      	bcs.n	801208c <_ungetc_r+0x108>
 8012076:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 801207a:	42a8      	cmp	r0, r5
 801207c:	d106      	bne.n	801208c <_ungetc_r+0x108>
 801207e:	3b01      	subs	r3, #1
 8012080:	3201      	adds	r2, #1
 8012082:	6023      	str	r3, [r4, #0]
 8012084:	6062      	str	r2, [r4, #4]
 8012086:	2900      	cmp	r1, #0
 8012088:	d184      	bne.n	8011f94 <_ungetc_r+0x10>
 801208a:	e7e5      	b.n	8012058 <_ungetc_r+0xd4>
 801208c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012094:	6363      	str	r3, [r4, #52]	; 0x34
 8012096:	2303      	movs	r3, #3
 8012098:	63a3      	str	r3, [r4, #56]	; 0x38
 801209a:	4623      	mov	r3, r4
 801209c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	2301      	movs	r3, #1
 80120a4:	6063      	str	r3, [r4, #4]
 80120a6:	e7ee      	b.n	8012086 <_ungetc_r+0x102>
 80120a8:	08012c9c 	.word	0x08012c9c
 80120ac:	08012cbc 	.word	0x08012cbc
 80120b0:	08012c7c 	.word	0x08012c7c

080120b4 <__ascii_wctomb>:
 80120b4:	b149      	cbz	r1, 80120ca <__ascii_wctomb+0x16>
 80120b6:	2aff      	cmp	r2, #255	; 0xff
 80120b8:	bf85      	ittet	hi
 80120ba:	238a      	movhi	r3, #138	; 0x8a
 80120bc:	6003      	strhi	r3, [r0, #0]
 80120be:	700a      	strbls	r2, [r1, #0]
 80120c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80120c4:	bf98      	it	ls
 80120c6:	2001      	movls	r0, #1
 80120c8:	4770      	bx	lr
 80120ca:	4608      	mov	r0, r1
 80120cc:	4770      	bx	lr
	...

080120d0 <_write_r>:
 80120d0:	b538      	push	{r3, r4, r5, lr}
 80120d2:	4d07      	ldr	r5, [pc, #28]	; (80120f0 <_write_r+0x20>)
 80120d4:	4604      	mov	r4, r0
 80120d6:	4608      	mov	r0, r1
 80120d8:	4611      	mov	r1, r2
 80120da:	2200      	movs	r2, #0
 80120dc:	602a      	str	r2, [r5, #0]
 80120de:	461a      	mov	r2, r3
 80120e0:	f7f0 fc9c 	bl	8002a1c <_write>
 80120e4:	1c43      	adds	r3, r0, #1
 80120e6:	d102      	bne.n	80120ee <_write_r+0x1e>
 80120e8:	682b      	ldr	r3, [r5, #0]
 80120ea:	b103      	cbz	r3, 80120ee <_write_r+0x1e>
 80120ec:	6023      	str	r3, [r4, #0]
 80120ee:	bd38      	pop	{r3, r4, r5, pc}
 80120f0:	200007b8 	.word	0x200007b8

080120f4 <__assert_func>:
 80120f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120f6:	4614      	mov	r4, r2
 80120f8:	461a      	mov	r2, r3
 80120fa:	4b09      	ldr	r3, [pc, #36]	; (8012120 <__assert_func+0x2c>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	4605      	mov	r5, r0
 8012100:	68d8      	ldr	r0, [r3, #12]
 8012102:	b14c      	cbz	r4, 8012118 <__assert_func+0x24>
 8012104:	4b07      	ldr	r3, [pc, #28]	; (8012124 <__assert_func+0x30>)
 8012106:	9100      	str	r1, [sp, #0]
 8012108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801210c:	4906      	ldr	r1, [pc, #24]	; (8012128 <__assert_func+0x34>)
 801210e:	462b      	mov	r3, r5
 8012110:	f000 f81e 	bl	8012150 <fiprintf>
 8012114:	f000 f8be 	bl	8012294 <abort>
 8012118:	4b04      	ldr	r3, [pc, #16]	; (801212c <__assert_func+0x38>)
 801211a:	461c      	mov	r4, r3
 801211c:	e7f3      	b.n	8012106 <__assert_func+0x12>
 801211e:	bf00      	nop
 8012120:	20000044 	.word	0x20000044
 8012124:	08012ee0 	.word	0x08012ee0
 8012128:	08012eed 	.word	0x08012eed
 801212c:	08012f1b 	.word	0x08012f1b

08012130 <_close_r>:
 8012130:	b538      	push	{r3, r4, r5, lr}
 8012132:	4d06      	ldr	r5, [pc, #24]	; (801214c <_close_r+0x1c>)
 8012134:	2300      	movs	r3, #0
 8012136:	4604      	mov	r4, r0
 8012138:	4608      	mov	r0, r1
 801213a:	602b      	str	r3, [r5, #0]
 801213c:	f7f0 fc9a 	bl	8002a74 <_close>
 8012140:	1c43      	adds	r3, r0, #1
 8012142:	d102      	bne.n	801214a <_close_r+0x1a>
 8012144:	682b      	ldr	r3, [r5, #0]
 8012146:	b103      	cbz	r3, 801214a <_close_r+0x1a>
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	bd38      	pop	{r3, r4, r5, pc}
 801214c:	200007b8 	.word	0x200007b8

08012150 <fiprintf>:
 8012150:	b40e      	push	{r1, r2, r3}
 8012152:	b503      	push	{r0, r1, lr}
 8012154:	4601      	mov	r1, r0
 8012156:	ab03      	add	r3, sp, #12
 8012158:	4805      	ldr	r0, [pc, #20]	; (8012170 <fiprintf+0x20>)
 801215a:	f853 2b04 	ldr.w	r2, [r3], #4
 801215e:	6800      	ldr	r0, [r0, #0]
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	f7ff f8e5 	bl	8011330 <_vfiprintf_r>
 8012166:	b002      	add	sp, #8
 8012168:	f85d eb04 	ldr.w	lr, [sp], #4
 801216c:	b003      	add	sp, #12
 801216e:	4770      	bx	lr
 8012170:	20000044 	.word	0x20000044

08012174 <_fstat_r>:
 8012174:	b538      	push	{r3, r4, r5, lr}
 8012176:	4d07      	ldr	r5, [pc, #28]	; (8012194 <_fstat_r+0x20>)
 8012178:	2300      	movs	r3, #0
 801217a:	4604      	mov	r4, r0
 801217c:	4608      	mov	r0, r1
 801217e:	4611      	mov	r1, r2
 8012180:	602b      	str	r3, [r5, #0]
 8012182:	f7f0 fcc7 	bl	8002b14 <_fstat>
 8012186:	1c43      	adds	r3, r0, #1
 8012188:	d102      	bne.n	8012190 <_fstat_r+0x1c>
 801218a:	682b      	ldr	r3, [r5, #0]
 801218c:	b103      	cbz	r3, 8012190 <_fstat_r+0x1c>
 801218e:	6023      	str	r3, [r4, #0]
 8012190:	bd38      	pop	{r3, r4, r5, pc}
 8012192:	bf00      	nop
 8012194:	200007b8 	.word	0x200007b8

08012198 <_isatty_r>:
 8012198:	b538      	push	{r3, r4, r5, lr}
 801219a:	4d06      	ldr	r5, [pc, #24]	; (80121b4 <_isatty_r+0x1c>)
 801219c:	2300      	movs	r3, #0
 801219e:	4604      	mov	r4, r0
 80121a0:	4608      	mov	r0, r1
 80121a2:	602b      	str	r3, [r5, #0]
 80121a4:	f7f0 fc24 	bl	80029f0 <_isatty>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d102      	bne.n	80121b2 <_isatty_r+0x1a>
 80121ac:	682b      	ldr	r3, [r5, #0]
 80121ae:	b103      	cbz	r3, 80121b2 <_isatty_r+0x1a>
 80121b0:	6023      	str	r3, [r4, #0]
 80121b2:	bd38      	pop	{r3, r4, r5, pc}
 80121b4:	200007b8 	.word	0x200007b8

080121b8 <_lseek_r>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4d07      	ldr	r5, [pc, #28]	; (80121d8 <_lseek_r+0x20>)
 80121bc:	4604      	mov	r4, r0
 80121be:	4608      	mov	r0, r1
 80121c0:	4611      	mov	r1, r2
 80121c2:	2200      	movs	r2, #0
 80121c4:	602a      	str	r2, [r5, #0]
 80121c6:	461a      	mov	r2, r3
 80121c8:	f7f0 fc6b 	bl	8002aa2 <_lseek>
 80121cc:	1c43      	adds	r3, r0, #1
 80121ce:	d102      	bne.n	80121d6 <_lseek_r+0x1e>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	b103      	cbz	r3, 80121d6 <_lseek_r+0x1e>
 80121d4:	6023      	str	r3, [r4, #0]
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	200007b8 	.word	0x200007b8

080121dc <memmove>:
 80121dc:	4288      	cmp	r0, r1
 80121de:	b510      	push	{r4, lr}
 80121e0:	eb01 0402 	add.w	r4, r1, r2
 80121e4:	d902      	bls.n	80121ec <memmove+0x10>
 80121e6:	4284      	cmp	r4, r0
 80121e8:	4623      	mov	r3, r4
 80121ea:	d807      	bhi.n	80121fc <memmove+0x20>
 80121ec:	1e43      	subs	r3, r0, #1
 80121ee:	42a1      	cmp	r1, r4
 80121f0:	d008      	beq.n	8012204 <memmove+0x28>
 80121f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121fa:	e7f8      	b.n	80121ee <memmove+0x12>
 80121fc:	4402      	add	r2, r0
 80121fe:	4601      	mov	r1, r0
 8012200:	428a      	cmp	r2, r1
 8012202:	d100      	bne.n	8012206 <memmove+0x2a>
 8012204:	bd10      	pop	{r4, pc}
 8012206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801220a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801220e:	e7f7      	b.n	8012200 <memmove+0x24>

08012210 <_realloc_r>:
 8012210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012214:	4680      	mov	r8, r0
 8012216:	4614      	mov	r4, r2
 8012218:	460e      	mov	r6, r1
 801221a:	b921      	cbnz	r1, 8012226 <_realloc_r+0x16>
 801221c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012220:	4611      	mov	r1, r2
 8012222:	f7fa bdc5 	b.w	800cdb0 <_malloc_r>
 8012226:	b92a      	cbnz	r2, 8012234 <_realloc_r+0x24>
 8012228:	f7fa fd56 	bl	800ccd8 <_free_r>
 801222c:	4625      	mov	r5, r4
 801222e:	4628      	mov	r0, r5
 8012230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012234:	f000 f835 	bl	80122a2 <_malloc_usable_size_r>
 8012238:	4284      	cmp	r4, r0
 801223a:	4607      	mov	r7, r0
 801223c:	d802      	bhi.n	8012244 <_realloc_r+0x34>
 801223e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012242:	d812      	bhi.n	801226a <_realloc_r+0x5a>
 8012244:	4621      	mov	r1, r4
 8012246:	4640      	mov	r0, r8
 8012248:	f7fa fdb2 	bl	800cdb0 <_malloc_r>
 801224c:	4605      	mov	r5, r0
 801224e:	2800      	cmp	r0, #0
 8012250:	d0ed      	beq.n	801222e <_realloc_r+0x1e>
 8012252:	42bc      	cmp	r4, r7
 8012254:	4622      	mov	r2, r4
 8012256:	4631      	mov	r1, r6
 8012258:	bf28      	it	cs
 801225a:	463a      	movcs	r2, r7
 801225c:	f7fe f9f2 	bl	8010644 <memcpy>
 8012260:	4631      	mov	r1, r6
 8012262:	4640      	mov	r0, r8
 8012264:	f7fa fd38 	bl	800ccd8 <_free_r>
 8012268:	e7e1      	b.n	801222e <_realloc_r+0x1e>
 801226a:	4635      	mov	r5, r6
 801226c:	e7df      	b.n	801222e <_realloc_r+0x1e>
	...

08012270 <_read_r>:
 8012270:	b538      	push	{r3, r4, r5, lr}
 8012272:	4d07      	ldr	r5, [pc, #28]	; (8012290 <_read_r+0x20>)
 8012274:	4604      	mov	r4, r0
 8012276:	4608      	mov	r0, r1
 8012278:	4611      	mov	r1, r2
 801227a:	2200      	movs	r2, #0
 801227c:	602a      	str	r2, [r5, #0]
 801227e:	461a      	mov	r2, r3
 8012280:	f7f0 fc20 	bl	8002ac4 <_read>
 8012284:	1c43      	adds	r3, r0, #1
 8012286:	d102      	bne.n	801228e <_read_r+0x1e>
 8012288:	682b      	ldr	r3, [r5, #0]
 801228a:	b103      	cbz	r3, 801228e <_read_r+0x1e>
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	bd38      	pop	{r3, r4, r5, pc}
 8012290:	200007b8 	.word	0x200007b8

08012294 <abort>:
 8012294:	b508      	push	{r3, lr}
 8012296:	2006      	movs	r0, #6
 8012298:	f000 f834 	bl	8012304 <raise>
 801229c:	2001      	movs	r0, #1
 801229e:	f000 f85d 	bl	801235c <_exit>

080122a2 <_malloc_usable_size_r>:
 80122a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122a6:	1f18      	subs	r0, r3, #4
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	bfbc      	itt	lt
 80122ac:	580b      	ldrlt	r3, [r1, r0]
 80122ae:	18c0      	addlt	r0, r0, r3
 80122b0:	4770      	bx	lr

080122b2 <_raise_r>:
 80122b2:	291f      	cmp	r1, #31
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	4604      	mov	r4, r0
 80122b8:	460d      	mov	r5, r1
 80122ba:	d904      	bls.n	80122c6 <_raise_r+0x14>
 80122bc:	2316      	movs	r3, #22
 80122be:	6003      	str	r3, [r0, #0]
 80122c0:	f04f 30ff 	mov.w	r0, #4294967295
 80122c4:	bd38      	pop	{r3, r4, r5, pc}
 80122c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80122c8:	b112      	cbz	r2, 80122d0 <_raise_r+0x1e>
 80122ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122ce:	b94b      	cbnz	r3, 80122e4 <_raise_r+0x32>
 80122d0:	4620      	mov	r0, r4
 80122d2:	f000 f831 	bl	8012338 <_getpid_r>
 80122d6:	462a      	mov	r2, r5
 80122d8:	4601      	mov	r1, r0
 80122da:	4620      	mov	r0, r4
 80122dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122e0:	f000 b818 	b.w	8012314 <_kill_r>
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d00a      	beq.n	80122fe <_raise_r+0x4c>
 80122e8:	1c59      	adds	r1, r3, #1
 80122ea:	d103      	bne.n	80122f4 <_raise_r+0x42>
 80122ec:	2316      	movs	r3, #22
 80122ee:	6003      	str	r3, [r0, #0]
 80122f0:	2001      	movs	r0, #1
 80122f2:	e7e7      	b.n	80122c4 <_raise_r+0x12>
 80122f4:	2400      	movs	r4, #0
 80122f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80122fa:	4628      	mov	r0, r5
 80122fc:	4798      	blx	r3
 80122fe:	2000      	movs	r0, #0
 8012300:	e7e0      	b.n	80122c4 <_raise_r+0x12>
	...

08012304 <raise>:
 8012304:	4b02      	ldr	r3, [pc, #8]	; (8012310 <raise+0xc>)
 8012306:	4601      	mov	r1, r0
 8012308:	6818      	ldr	r0, [r3, #0]
 801230a:	f7ff bfd2 	b.w	80122b2 <_raise_r>
 801230e:	bf00      	nop
 8012310:	20000044 	.word	0x20000044

08012314 <_kill_r>:
 8012314:	b538      	push	{r3, r4, r5, lr}
 8012316:	4d07      	ldr	r5, [pc, #28]	; (8012334 <_kill_r+0x20>)
 8012318:	2300      	movs	r3, #0
 801231a:	4604      	mov	r4, r0
 801231c:	4608      	mov	r0, r1
 801231e:	4611      	mov	r1, r2
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	f000 f813 	bl	801234c <_kill>
 8012326:	1c43      	adds	r3, r0, #1
 8012328:	d102      	bne.n	8012330 <_kill_r+0x1c>
 801232a:	682b      	ldr	r3, [r5, #0]
 801232c:	b103      	cbz	r3, 8012330 <_kill_r+0x1c>
 801232e:	6023      	str	r3, [r4, #0]
 8012330:	bd38      	pop	{r3, r4, r5, pc}
 8012332:	bf00      	nop
 8012334:	200007b8 	.word	0x200007b8

08012338 <_getpid_r>:
 8012338:	f000 b800 	b.w	801233c <_getpid>

0801233c <_getpid>:
 801233c:	4b02      	ldr	r3, [pc, #8]	; (8012348 <_getpid+0xc>)
 801233e:	2258      	movs	r2, #88	; 0x58
 8012340:	601a      	str	r2, [r3, #0]
 8012342:	f04f 30ff 	mov.w	r0, #4294967295
 8012346:	4770      	bx	lr
 8012348:	200007b8 	.word	0x200007b8

0801234c <_kill>:
 801234c:	4b02      	ldr	r3, [pc, #8]	; (8012358 <_kill+0xc>)
 801234e:	2258      	movs	r2, #88	; 0x58
 8012350:	601a      	str	r2, [r3, #0]
 8012352:	f04f 30ff 	mov.w	r0, #4294967295
 8012356:	4770      	bx	lr
 8012358:	200007b8 	.word	0x200007b8

0801235c <_exit>:
 801235c:	e7fe      	b.n	801235c <_exit>
	...

08012360 <_init>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	bf00      	nop
 8012364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012366:	bc08      	pop	{r3}
 8012368:	469e      	mov	lr, r3
 801236a:	4770      	bx	lr

0801236c <_fini>:
 801236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236e:	bf00      	nop
 8012370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012372:	bc08      	pop	{r3}
 8012374:	469e      	mov	lr, r3
 8012376:	4770      	bx	lr
